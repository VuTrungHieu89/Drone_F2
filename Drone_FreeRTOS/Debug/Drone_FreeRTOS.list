
Drone_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08011010  08011010  00021010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119c0  080119c0  0003028c  2**0
                  CONTENTS
  4 .ARM          00000008  080119c0  080119c0  000219c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119c8  080119c8  0003028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119c8  080119c8  000219c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119cc  080119cc  000219cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  080119d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004da8  20000290  08011c5c  00030290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  08011c5c  00035038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217b5  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d2  00000000  00000000  00051a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00056348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  00057dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021295  00000000  00000000  000596b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027f3a  00000000  00000000  0007a94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2b2b  00000000  00000000  000a2887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001853b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e0  00000000  00000000  00185404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010ff8 	.word	0x08010ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	08010ff8 	.word	0x08010ff8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ca 	b.w	8001064 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f85c 	bl	8000d94 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b82a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f825 	bl	8000d58 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_f2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	f7ff fc2d 	bl	8000578 <__aeabi_f2d>
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__aeabi_f2ulz+0x38>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc7f 	bl	8000628 <__aeabi_dmul>
 8000d2a:	f7ff ff55 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc00 	bl	8000534 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <__aeabi_f2ulz+0x3c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc76 	bl	8000628 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fab8 	bl	80002b8 <__aeabi_dsub>
 8000d48:	f7ff ff46 	bl	8000bd8 <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc61 	bl	8000628 <__aeabi_dmul>
 8000d66:	f7ff ff37 	bl	8000bd8 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fbe2 	bl	8000534 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc58 	bl	8000628 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff fa9a 	bl	80002b8 <__aeabi_dsub>
 8000d84:	f7ff ff28 	bl	8000bd8 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <BMP180_Init>:
#include "BMP180.h"


BMP180_Calibration_t BMP180_Calibration;

uint8_t BMP180_Init() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800106c:	f003 fac6 	bl	80045fc <MX_GPIO_Init>
	MX_I2C1_Init();
 8001070:	f003 fb0e 	bl	8004690 <MX_I2C1_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP180_ADDR, 1, HAL_MAX_DELAY))
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2201      	movs	r2, #1
 800107a:	21ee      	movs	r1, #238	; 0xee
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <BMP180_Init+0x30>)
 800107e:	f004 fef5 	bl	8005e6c <HAL_I2C_IsDeviceReady>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BMP180_Init+0x24>
		return 1;
 8001088:	2301      	movs	r3, #1
 800108a:	e002      	b.n	8001092 <BMP180_Init+0x2a>
	BMP180_reset();
 800108c:	f000 f806 	bl	800109c <BMP180_reset>
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000558 	.word	0x20000558

0800109c <BMP180_reset>:

void BMP180_reset(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af04      	add	r7, sp, #16
	uint8_t reset = (uint8_t)0xb6;
 80010a2:	23b6      	movs	r3, #182	; 0xb6
 80010a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT, &reset, 1, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	22e0      	movs	r2, #224	; 0xe0
 80010b8:	21ee      	movs	r1, #238	; 0xee
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <BMP180_reset+0x34>)
 80010bc:	f004 fbb6 	bl	800582c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f003 ff0b 	bl	8004edc <HAL_Delay>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000558 	.word	0x20000558

080010d4 <BMP180_ReadCalibration>:

void BMP180_ReadCalibration(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af04      	add	r7, sp, #16
	uint8_t buffer[BMP180_PROM_DATA_LEN] = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	821a      	strh	r2, [r3, #16]
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e015      	b.n	8001120 <BMP180_ReadCalibration+0x4c>
		HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_PROM_START_ADDR + i, I2C_MEMADD_SIZE_8BIT, &buffer[i], 1, HAL_MAX_DELAY);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	33aa      	adds	r3, #170	; 0xaa
 80010fa:	b299      	uxth	r1, r3
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	4413      	add	r3, r2
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	2201      	movs	r2, #1
 800110a:	9201      	str	r2, [sp, #4]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	460a      	mov	r2, r1
 8001112:	21ee      	movs	r1, #238	; 0xee
 8001114:	4839      	ldr	r0, [pc, #228]	; (80011fc <BMP180_ReadCalibration+0x128>)
 8001116:	f004 fc83 	bl	8005a20 <HAL_I2C_Mem_Read>
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b15      	cmp	r3, #21
 8001124:	dde6      	ble.n	80010f4 <BMP180_ReadCalibration+0x20>
	}


	BMP180_Calibration.AC1 = (buffer[0]  << 8) | buffer[1];
 8001126:	793b      	ldrb	r3, [r7, #4]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001136:	801a      	strh	r2, [r3, #0]
	BMP180_Calibration.AC2 = (buffer[2]  << 8) | buffer[3];
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001148:	805a      	strh	r2, [r3, #2]
	BMP180_Calibration.AC3 = (buffer[4]  << 8) | buffer[5];
 800114a:	7a3b      	ldrb	r3, [r7, #8]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	7a7b      	ldrb	r3, [r7, #9]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 800115a:	809a      	strh	r2, [r3, #4]
	BMP180_Calibration.AC4 = (buffer[6]  << 8) | buffer[7];
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 800116e:	80da      	strh	r2, [r3, #6]
	BMP180_Calibration.AC5 = (buffer[8]  << 8) | buffer[9];
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001182:	811a      	strh	r2, [r3, #8]
	BMP180_Calibration.AC6 = (buffer[10] << 8) | buffer[11];
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001196:	815a      	strh	r2, [r3, #10]
	BMP180_Calibration.B1  = (buffer[12] << 8) | buffer[13];
 8001198:	7c3b      	ldrb	r3, [r7, #16]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7c7b      	ldrb	r3, [r7, #17]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011a8:	819a      	strh	r2, [r3, #12]
	BMP180_Calibration.B2  = (buffer[14] << 8) | buffer[15];
 80011aa:	7cbb      	ldrb	r3, [r7, #18]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7cfb      	ldrb	r3, [r7, #19]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011ba:	81da      	strh	r2, [r3, #14]
	BMP180_Calibration.MB  = (buffer[16] << 8) | buffer[17];
 80011bc:	7d3b      	ldrb	r3, [r7, #20]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011cc:	821a      	strh	r2, [r3, #16]
	BMP180_Calibration.MC  = (buffer[18] << 8) | buffer[19];
 80011ce:	7dbb      	ldrb	r3, [r7, #22]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011de:	825a      	strh	r2, [r3, #18]
	BMP180_Calibration.MD  = (buffer[20] << 8) | buffer[21];
 80011e0:	7e3b      	ldrb	r3, [r7, #24]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7e7b      	ldrb	r3, [r7, #25]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011f0:	829a      	strh	r2, [r3, #20]
}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000558 	.word	0x20000558
 8001200:	200002ac 	.word	0x200002ac

08001204 <BMP180_Read_UT>:

uint32_t BMP180_Read_UT(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
	uint32_t UT = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
	uint8_t T_measure = BMP180_T_MEASURE;
 800120e:	232e      	movs	r3, #46	; 0x2e
 8001210:	70fb      	strb	r3, [r7, #3]
	uint8_t MSB = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	70bb      	strb	r3, [r7, #2]
	uint8_t LSB = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	707b      	strb	r3, [r7, #1]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &T_measure, 1, HAL_MAX_DELAY);
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1cfb      	adds	r3, r7, #3
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	22f4      	movs	r2, #244	; 0xf4
 800122c:	21ee      	movs	r1, #238	; 0xee
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <BMP180_Read_UT+0x80>)
 8001230:	f004 fafc 	bl	800582c <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 8001234:	2006      	movs	r0, #6
 8001236:	f003 fe51 	bl	8004edc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2301      	movs	r3, #1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	1cbb      	adds	r3, r7, #2
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	22f6      	movs	r2, #246	; 0xf6
 800124c:	21ee      	movs	r1, #238	; 0xee
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <BMP180_Read_UT+0x80>)
 8001250:	f004 fbe6 	bl	8005a20 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	1c7b      	adds	r3, r7, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	22f7      	movs	r2, #247	; 0xf7
 8001266:	21ee      	movs	r1, #238	; 0xee
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <BMP180_Read_UT+0x80>)
 800126a:	f004 fbd9 	bl	8005a20 <HAL_I2C_Mem_Read>
	UT = (MSB << 8) + LSB;
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	787a      	ldrb	r2, [r7, #1]
 8001274:	4413      	add	r3, r2
 8001276:	607b      	str	r3, [r7, #4]

	return UT;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000558 	.word	0x20000558

08001288 <BMP180_Read_UP>:

uint32_t BMP180_Read_UP(uint8_t oss){
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af04      	add	r7, sp, #16
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint32_t UP;
	uint8_t cmd,delay;
	uint8_t MSB = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]
	uint8_t LSB = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	737b      	strb	r3, [r7, #13]
	uint8_t XLSB = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	733b      	strb	r3, [r7, #12]

	switch(oss) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d81f      	bhi.n	80012e4 <BMP180_Read_UP+0x5c>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <BMP180_Read_UP+0x24>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c7 	.word	0x080012c7
 80012b4:	080012d1 	.word	0x080012d1
 80012b8:	080012db 	.word	0x080012db
	case 0:
		cmd = BMP180_P0_MEASURE;
 80012bc:	2334      	movs	r3, #52	; 0x34
 80012be:	73fb      	strb	r3, [r7, #15]
		delay   = 6;
 80012c0:	2306      	movs	r3, #6
 80012c2:	75fb      	strb	r3, [r7, #23]
		break;
 80012c4:	e00e      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 1:
		cmd = BMP180_P1_MEASURE;
 80012c6:	2374      	movs	r3, #116	; 0x74
 80012c8:	73fb      	strb	r3, [r7, #15]
		delay   = 9;
 80012ca:	2309      	movs	r3, #9
 80012cc:	75fb      	strb	r3, [r7, #23]
		break;
 80012ce:	e009      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 2:
		cmd = BMP180_P2_MEASURE;
 80012d0:	23b4      	movs	r3, #180	; 0xb4
 80012d2:	73fb      	strb	r3, [r7, #15]
		delay   = 15;
 80012d4:	230f      	movs	r3, #15
 80012d6:	75fb      	strb	r3, [r7, #23]
		break;
 80012d8:	e004      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 3:
		cmd = BMP180_P3_MEASURE;
 80012da:	23f4      	movs	r3, #244	; 0xf4
 80012dc:	73fb      	strb	r3, [r7, #15]
		delay   = 27;
 80012de:	231b      	movs	r3, #27
 80012e0:	75fb      	strb	r3, [r7, #23]
		break;
 80012e2:	bf00      	nop
	}

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	22f4      	movs	r2, #244	; 0xf4
 80012f8:	21ee      	movs	r1, #238	; 0xee
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <BMP180_Read_UP+0xf8>)
 80012fc:	f004 fa96 	bl	800582c <HAL_I2C_Mem_Write>
	HAL_Delay(delay);
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fdea 	bl	8004edc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 030e 	add.w	r3, r7, #14
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	22f6      	movs	r2, #246	; 0xf6
 800131c:	21ee      	movs	r1, #238	; 0xee
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <BMP180_Read_UP+0xf8>)
 8001320:	f004 fb7e 	bl	8005a20 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030d 	add.w	r3, r7, #13
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f7      	movs	r2, #247	; 0xf7
 8001338:	21ee      	movs	r1, #238	; 0xee
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <BMP180_Read_UP+0xf8>)
 800133c:	f004 fb70 	bl	8005a20 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_XLSB_REG, I2C_MEMADD_SIZE_8BIT, &XLSB, 1, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	22f8      	movs	r2, #248	; 0xf8
 8001354:	21ee      	movs	r1, #238	; 0xee
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <BMP180_Read_UP+0xf8>)
 8001358:	f004 fb62 	bl	8005a20 <HAL_I2C_Mem_Read>
	UP = ((MSB << 16) + (LSB << 8) + XLSB) >> (8 - oss);
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4413      	add	r3, r2
 8001366:	7b3a      	ldrb	r2, [r7, #12]
 8001368:	441a      	add	r2, r3
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f1c3 0308 	rsb	r3, r3, #8
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	613b      	str	r3, [r7, #16]

	return UP;
 8001376:	693b      	ldr	r3, [r7, #16]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000558 	.word	0x20000558

08001384 <BMP180_Calculate_RT>:

uint32_t BMP180_Calculate_RT(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	uint32_t UT = BMP180_Read_UT();
 800138a:	f7ff ff3b 	bl	8001204 <BMP180_Read_UT>
 800138e:	6078      	str	r0, [r7, #4]
	BMP180_Calibration.B5  = (((int32_t)UT - (int32_t)BMP180_Calibration.AC6) * (int32_t)BMP180_Calibration.AC5) >> 15;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 8001394:	8952      	ldrh	r2, [r2, #10]
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 800139a:	8912      	ldrh	r2, [r2, #8]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	13db      	asrs	r3, r3, #15
 80013a2:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013a4:	6193      	str	r3, [r2, #24]
	BMP180_Calibration.B5 += ((int32_t)BMP180_Calibration.MC << 11) / (BMP180_Calibration.B5 + BMP180_Calibration.MD);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013b0:	02d9      	lsls	r1, r3, #11
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013b8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 80013bc:	4403      	add	r3, r0
 80013be:	fb91 f3f3 	sdiv	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013c6:	6193      	str	r3, [r2, #24]

	return (BMP180_Calibration.B5 + 8) >> 4;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	3308      	adds	r3, #8
 80013ce:	111b      	asrs	r3, r3, #4
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002ac 	.word	0x200002ac

080013dc <BMP180_Calculate_RP>:

uint32_t BMP180_Calculate_RP(uint8_t oss){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint32_t UP = BMP180_Read_UP(oss);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff4d 	bl	8001288 <BMP180_Read_UP>
 80013ee:	6238      	str	r0, [r7, #32]
	int32_t B3,B6,X3,p;
	uint32_t B4,B7;

	B6 = BMP180_Calibration.B5 - 4000;
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <BMP180_Calculate_RP+0x110>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013f8:	61fb      	str	r3, [r7, #28]
	X3 = ((BMP180_Calibration.B2 * ((B6 * B6) >> 12)) >> 11) + ((BMP180_Calibration.AC2 * B6) >> 11);
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <BMP180_Calculate_RP+0x110>)
 80013fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001400:	461a      	mov	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fb03 f303 	mul.w	r3, r3, r3
 8001408:	131b      	asrs	r3, r3, #12
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	12da      	asrs	r2, r3, #11
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <BMP180_Calculate_RP+0x110>)
 8001412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001416:	4619      	mov	r1, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	12db      	asrs	r3, r3, #11
 8001420:	4413      	add	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
	B3 = (((((int32_t)BMP180_Calibration.AC1) * 4 + X3) << oss) + 2) >> 2;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <BMP180_Calculate_RP+0x110>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	009a      	lsls	r2, r3, #2
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	441a      	add	r2, r3
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	3302      	adds	r3, #2
 8001438:	109b      	asrs	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
	X3 = (((BMP180_Calibration.AC3 * B6) >> 13) + ((BMP180_Calibration.B1 * ((B6 * B6) >> 12)) >> 16) + 2) >> 2;
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800143e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001442:	461a      	mov	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	135a      	asrs	r2, r3, #13
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800144e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001452:	4619      	mov	r1, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	fb03 f303 	mul.w	r3, r3, r3
 800145a:	131b      	asrs	r3, r3, #12
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	141b      	asrs	r3, r3, #16
 8001462:	4413      	add	r3, r2
 8001464:	3302      	adds	r3, #2
 8001466:	109b      	asrs	r3, r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
	B4 = (BMP180_Calibration.AC4 * (uint32_t)(X3 + 32768)) >> 15;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800146c:	88db      	ldrh	r3, [r3, #6]
 800146e:	461a      	mov	r2, r3
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	0bdb      	lsrs	r3, r3, #15
 800147c:	613b      	str	r3, [r7, #16]
	B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	f24c 3150 	movw	r1, #50000	; 0xc350
 800148a:	fa41 f202 	asr.w	r2, r1, r2
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	60fb      	str	r3, [r7, #12]
	if (B7 < 0x80000000) p = (B7 << 1) / B4; else p = (B7 / B4) << 1;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db06      	blt.n	80014a8 <BMP180_Calculate_RP+0xcc>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	005a      	lsls	r2, r3, #1
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	e005      	b.n	80014b4 <BMP180_Calculate_RP+0xd8>
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
	p += ((((p >> 8) * (p >> 8) * BMP180_PARAM_MG) >> 16) + ((BMP180_PARAM_MH * p) >> 16) + BMP180_PARAM_MI) >> 4;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	121b      	asrs	r3, r3, #8
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	1212      	asrs	r2, r2, #8
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	f640 32de 	movw	r2, #3038	; 0xbde
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	141a      	asrs	r2, r3, #16
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	4908      	ldr	r1, [pc, #32]	; (80014f0 <BMP180_Calculate_RP+0x114>)
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	141b      	asrs	r3, r3, #16
 80014d4:	4413      	add	r3, r2
 80014d6:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80014da:	111b      	asrs	r3, r3, #4
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4413      	add	r3, r2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

	return p;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002ac 	.word	0x200002ac
 80014f0:	ffffe343 	.word	0xffffe343
 80014f4:	00000000 	.word	0x00000000

080014f8 <BMP180_Calculate_Altitude>:

uint32_t BMP180_Calculate_Altitude(uint8_t oss){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint32_t hPa = BMP180_Calculate_RP(oss) * 0.01;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff69 	bl	80013dc <BMP180_Calculate_RP>
 800150a:	4603      	mov	r3, r0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f811 	bl	8000534 <__aeabi_ui2d>
 8001512:	a319      	add	r3, pc, #100	; (adr r3, 8001578 <BMP180_Calculate_Altitude+0x80>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f886 	bl	8000628 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb58 	bl	8000bd8 <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	60fb      	str	r3, [r7, #12]
	return (((745 * (11390 - (hPa / 10))) / 256 + 46597) * (11390 - (hPa / 10))) / 65536 - 966;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <BMP180_Calculate_Altitude+0x78>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	f46f 723a 	mvn.w	r2, #744	; 0x2e8
 800153a:	fb03 f202 	mul.w	r2, r3, r2
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <BMP180_Calculate_Altitude+0x7c>)
 8001540:	4413      	add	r3, r2
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 8001548:	3305      	adds	r3, #5
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4908      	ldr	r1, [pc, #32]	; (8001570 <BMP180_Calculate_Altitude+0x78>)
 800154e:	fba1 1202 	umull	r1, r2, r1, r2
 8001552:	08d2      	lsrs	r2, r2, #3
 8001554:	f5c2 5231 	rsb	r2, r2, #11328	; 0x2c40
 8001558:	323e      	adds	r2, #62	; 0x3e
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	0c1b      	lsrs	r3, r3, #16
 8001560:	f2a3 33c6 	subw	r3, r3, #966	; 0x3c6
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	cccccccd 	.word	0xcccccccd
 8001574:	00817aae 	.word	0x00817aae
 8001578:	47ae147b 	.word	0x47ae147b
 800157c:	3f847ae1 	.word	0x3f847ae1

08001580 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4053      	eors	r3, r2
 8001596:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	b25a      	sxtb	r2, r3
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4053      	eors	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4053      	eors	r3, r2
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4053      	eors	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4053      	eors	r3, r2
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	801a      	strh	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <crc_init>:
 * @brief Initiliaze the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	801a      	strh	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800160c:	f107 030e 	add.w	r3, r7, #14
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ffe7 	bl	80015e4 <crc_init>
	while (length--) {
 8001616:	e009      	b.n	800162c <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f107 020e 	add.w	r2, r7, #14
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ffaa 	bl	8001580 <crc_accumulate>
	while (length--) {
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	807a      	strh	r2, [r7, #2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <crc_calculate+0x18>
        }
        return crcTmp;
 8001636:	89fb      	ldrh	r3, [r7, #14]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	617b      	str	r3, [r7, #20]
	while (length--) {
 8001652:	e007      	b.n	8001664 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	617a      	str	r2, [r7, #20]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff8e 	bl	8001580 <crc_accumulate>
	while (length--) {
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	80fa      	strh	r2, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <crc_accumulate_buffer+0x14>
        }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <mavlink_sha256_init+0x50>)
 8001690:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <mavlink_sha256_init+0x54>)
 8001696:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <mavlink_sha256_init+0x58>)
 800169c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <mavlink_sha256_init+0x5c>)
 80016a2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <mavlink_sha256_init+0x60>)
 80016a8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <mavlink_sha256_init+0x64>)
 80016ae:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <mavlink_sha256_init+0x68>)
 80016b4:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <mavlink_sha256_init+0x6c>)
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	6a09e667 	.word	0x6a09e667
 80016cc:	bb67ae85 	.word	0xbb67ae85
 80016d0:	3c6ef372 	.word	0x3c6ef372
 80016d4:	a54ff53a 	.word	0xa54ff53a
 80016d8:	510e527f 	.word	0x510e527f
 80016dc:	9b05688c 	.word	0x9b05688c
 80016e0:	1f83d9ab 	.word	0x1f83d9ab
 80016e4:	5be0cd19 	.word	0x5be0cd19

080016e8 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b0cf      	sub	sp, #316	; 0x13c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016fc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001700:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8001702:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001706:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8001712:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001716:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8001722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001726:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8001732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001736:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8001742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001746:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8001752:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001756:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8001762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001766:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8001772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001776:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001788:	e016      	b.n	80017b8 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800178a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001794:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80017ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	dde4      	ble.n	800178a <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 80017c0:	2310      	movs	r3, #16
 80017c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017c6:	e069      	b.n	800189c <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80017c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017cc:	1e9a      	subs	r2, r3, #2
 80017ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	ea4f 4273 	mov.w	r2, r3, ror #17
 80017de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017e2:	1e99      	subs	r1, r3, #2
 80017e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017f0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80017f4:	405a      	eors	r2, r3
 80017f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017fa:	1e99      	subs	r1, r3, #2
 80017fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001808:	0a9b      	lsrs	r3, r3, #10
 800180a:	405a      	eors	r2, r3
 800180c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001810:	1fd9      	subs	r1, r3, #7
 8001812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800181a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800181e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001824:	f1a3 010f 	sub.w	r1, r3, #15
 8001828:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800182c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001834:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800183c:	f1a3 000f 	sub.w	r0, r3, #15
 8001840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001848:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800184c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001850:	4059      	eors	r1, r3
 8001852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001856:	f1a3 000f 	sub.w	r0, r3, #15
 800185a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800185e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001862:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800186a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800186c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001870:	f1a3 0110 	sub.w	r1, r3, #16
 8001874:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800187c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001880:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800188a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800189c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a0:	2b3f      	cmp	r3, #63	; 0x3f
 80018a2:	dd91      	ble.n	80017c8 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018aa:	e078      	b.n	800199e <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80018ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80018b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80018bc:	405a      	eors	r2, r3
 80018be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80018c6:	405a      	eors	r2, r3
 80018c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018cc:	441a      	add	r2, r3
 80018ce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80018d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018d6:	4019      	ands	r1, r3
 80018d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018dc:	43d8      	mvns	r0, r3
 80018de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018e2:	4003      	ands	r3, r0
 80018e4:	404b      	eors	r3, r1
 80018e6:	441a      	add	r2, r3
 80018e8:	496e      	ldr	r1, [pc, #440]	; (8001aa4 <mavlink_sha256_calc+0x3bc>)
 80018ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f2:	441a      	add	r2, r3
 80018f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018fc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001904:	4413      	add	r3, r2
 8001906:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800190a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800190e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001916:	ea4f 3373 	mov.w	r3, r3, ror #13
 800191a:	405a      	eors	r2, r3
 800191c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001920:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001924:	405a      	eors	r2, r3
 8001926:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800192a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800192e:	4059      	eors	r1, r3
 8001930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001934:	4019      	ands	r1, r3
 8001936:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800193a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800193e:	4003      	ands	r3, r0
 8001940:	404b      	eors	r3, r1
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8001948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800194c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001958:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800195c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001960:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001964:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 800196e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001976:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800197a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 800197e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001982:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001986:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800198a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800198e:	4413      	add	r3, r2
 8001990:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001998:	3301      	adds	r3, #1
 800199a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800199e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a2:	2b3f      	cmp	r3, #63	; 0x3f
 80019a4:	dd82      	ble.n	80018ac <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 80019a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019b6:	441a      	add	r2, r3
 80019b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 80019c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019d4:	441a      	add	r2, r3
 80019d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80019e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019f2:	441a      	add	r2, r3
 80019f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8001a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a10:	441a      	add	r2, r3
 8001a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8001a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a2e:	441a      	add	r2, r3
 8001a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001a3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8001a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a6a:	441a      	add	r2, r3
 8001a6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a88:	441a      	add	r2, r3
 8001a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a96:	bf00      	nop
 8001a98:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	080111b4 	.word	0x080111b4

08001aa8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09c      	sub	sp, #112	; 0x70
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	441a      	add	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d904      	bls.n	8001ae0 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae8:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001aea:	e054      	b.n	8001b96 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001af2:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d201      	bcs.n	8001b00 <mavlink_sha256_update+0x58>
            l = len;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b08:	4413      	add	r3, r2
 8001b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f009 fe6e 	bl	800b7f0 <memcpy>
	offset += l;
 8001b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b18:	4413      	add	r3, r2
 8001b1a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b20:	4413      	add	r3, r2
 8001b22:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d131      	bne.n	8001b96 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3328      	adds	r3, #40	; 0x28
 8001b36:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b3c:	e020      	b.n	8001b80 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b44:	4413      	add	r3, r2
 8001b46:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001b48:	f107 0210 	add.w	r2, r7, #16
 8001b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	78da      	ldrb	r2, [r3, #3]
 8001b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5a:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5e:	3301      	adds	r3, #1
 8001b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b62:	7892      	ldrb	r2, [r2, #2]
 8001b64:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b68:	3302      	adds	r3, #2
 8001b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6c:	7852      	ldrb	r2, [r2, #1]
 8001b6e:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b72:	3303      	adds	r3, #3
 8001b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	dddb      	ble.n	8001b3e <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fdab 	bl	80016e8 <mavlink_sha256_calc>
	    offset = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1a7      	bne.n	8001aec <mavlink_sha256_update+0x44>
	}
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3770      	adds	r7, #112	; 0x70
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b098      	sub	sp, #96	; 0x60
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3308      	adds	r3, #8
 8001bce:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2247      	movs	r2, #71	; 0x47
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f009 fe14 	bl	800b80c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bea:	3307      	adds	r3, #7
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0a1a      	lsrs	r2, r3, #8
 8001bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfe:	3306      	adds	r3, #6
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	3360      	adds	r3, #96	; 0x60
 8001c04:	443b      	add	r3, r7
 8001c06:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0c1a      	lsrs	r2, r3, #16
 8001c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c12:	3305      	adds	r3, #5
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	3360      	adds	r3, #96	; 0x60
 8001c18:	443b      	add	r3, r7
 8001c1a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e1a      	lsrs	r2, r3, #24
 8001c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c26:	3304      	adds	r3, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	3360      	adds	r3, #96	; 0x60
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c38:	3303      	adds	r3, #3
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	443b      	add	r3, r7
 8001c40:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0a1a      	lsrs	r2, r3, #8
 8001c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	3360      	adds	r3, #96	; 0x60
 8001c52:	443b      	add	r3, r7
 8001c54:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c1a      	lsrs	r2, r3, #16
 8001c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	3360      	adds	r3, #96	; 0x60
 8001c66:	443b      	add	r3, r7
 8001c68:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0e1b      	lsrs	r3, r3, #24
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c7a:	4413      	add	r3, r2
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff0b 	bl	8001aa8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	78da      	ldrb	r2, [r3, #3]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ca0:	7892      	ldrb	r2, [r2, #2]
 8001ca2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001caa:	7852      	ldrb	r2, [r2, #1]
 8001cac:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cbe:	79d2      	ldrb	r2, [r2, #7]
 8001cc0:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3305      	adds	r3, #5
 8001cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cc8:	7992      	ldrb	r2, [r2, #6]
 8001cca:	701a      	strb	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3760      	adds	r7, #96	; 0x60
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <mavlink_get_channel_status+0x24>)
 8001cea:	4413      	add	r3, r2
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	200003c0 	.word	0x200003c0

08001cfc <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b0a0      	sub	sp, #128	; 0x80
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <mavlink_sign_packet+0x20>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <mavlink_sign_packet+0x24>
	    return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e04f      	b.n	8001dc0 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	785a      	ldrb	r2, [r3, #1]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	f107 0110 	add.w	r1, r7, #16
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fd57 	bl	800b7f0 <memcpy>
	signing->timestamp++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d48:	1c54      	adds	r4, r2, #1
 8001d4a:	f143 0500 	adc.w	r5, r3, #0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fc8d 	bl	8001678 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f103 0110 	add.w	r1, r3, #16
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	2220      	movs	r2, #32
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fe9c 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe95 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001d7e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe8c 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2202      	movs	r2, #2
 8001d96:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe84 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	2207      	movs	r2, #7
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe7d 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1dda      	adds	r2, r3, #7
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fef4 	bl	8001ba6 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001dbe:	230d      	movs	r3, #13
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3780      	adds	r7, #128	; 0x80
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdb0      	pop	{r4, r5, r7, pc}

08001dc8 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001dd4:	e002      	b.n	8001ddc <_mav_trim_payload+0x14>
		length--;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d906      	bls.n	8001df0 <_mav_trim_payload+0x28>
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f2      	beq.n	8001dd6 <_mav_trim_payload+0xe>
	}
	return length;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e00:	b08f      	sub	sp, #60	; 0x3c
 8001e02:	af04      	add	r7, sp, #16
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	72fb      	strb	r3, [r7, #11]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b1b      	ldrb	r3, [r3, #12]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e28:	f083 0301 	eor.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <mavlink_finalize_message_buffer+0x50>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001e5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <mavlink_finalize_message_buffer+0x6c>
 8001e66:	230d      	movs	r3, #13
 8001e68:	e000      	b.n	8001e6c <mavlink_finalize_message_buffer+0x6e>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001e70:	230a      	movs	r3, #10
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	22fe      	movs	r2, #254	; 0xfe
 8001e82:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001e84:	2306      	movs	r3, #6
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e8a:	e002      	b.n	8001e92 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	22fd      	movs	r2, #253	; 0xfd
 8001e90:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <mavlink_finalize_message_buffer+0xb2>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff8f 	bl	8001dc8 <_mav_trim_payload>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	e001      	b.n	8001eb4 <mavlink_finalize_message_buffer+0xb6>
 8001eb0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	7afa      	ldrb	r2, [r7, #11]
 8001ebc:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7aba      	ldrb	r2, [r7, #10]
 8001ec2:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001eca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	799a      	ldrb	r2, [r3, #6]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	799b      	ldrb	r3, [r3, #6]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	789b      	ldrb	r3, [r3, #2]
 8001efe:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	78db      	ldrb	r3, [r3, #3]
 8001f04:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d013      	beq.n	8001f36 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	799b      	ldrb	r3, [r3, #6]
 8001f12:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	79db      	ldrb	r3, [r3, #7]
 8001f18:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	7a1b      	ldrb	r3, [r3, #8]
 8001f1e:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	7a5a      	ldrb	r2, [r3, #9]
 8001f24:	7a99      	ldrb	r1, [r3, #10]
 8001f26:	0209      	lsls	r1, r1, #8
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	7adb      	ldrb	r3, [r3, #11]
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	777b      	strb	r3, [r7, #29]
 8001f34:	e030      	b.n	8001f98 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	791b      	ldrb	r3, [r3, #4]
 8001f3a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	799b      	ldrb	r3, [r3, #6]
 8001f46:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	79db      	ldrb	r3, [r3, #7]
 8001f4c:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	7a1b      	ldrb	r3, [r3, #8]
 8001f52:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	7a5a      	ldrb	r2, [r3, #9]
 8001f58:	7a99      	ldrb	r1, [r3, #10]
 8001f5a:	0209      	lsls	r1, r1, #8
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	7adb      	ldrb	r3, [r3, #11]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	7a5a      	ldrb	r2, [r3, #9]
 8001f6c:	7a99      	ldrb	r1, [r3, #10]
 8001f6e:	0209      	lsls	r1, r1, #8
 8001f70:	430a      	orrs	r2, r1
 8001f72:	7adb      	ldrb	r3, [r3, #11]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	4313      	orrs	r3, r2
 8001f78:	121b      	asrs	r3, r3, #8
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	7a5a      	ldrb	r2, [r3, #9]
 8001f84:	7a99      	ldrb	r1, [r3, #10]
 8001f86:	0209      	lsls	r1, r1, #8
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	7adb      	ldrb	r3, [r3, #11]
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	141b      	asrs	r3, r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb28 	bl	8001600 <crc_calculate>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f103 010c 	add.w	r1, r3, #12
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	78db      	ldrb	r3, [r3, #3]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f107 0316 	add.w	r3, r7, #22
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fb3b 	bl	8001640 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001fca:	f107 0216 	add.w	r2, r7, #22
 8001fce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fad3 	bl	8001580 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001fda:	8af9      	ldrh	r1, [r7, #22]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	78d2      	ldrb	r2, [r2, #3]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001fea:	8afb      	ldrh	r3, [r7, #22]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f103 020c 	add.w	r2, r3, #12
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8002008:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01a      	beq.n	8002046 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	310c      	adds	r1, #12
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800202a:	4401      	add	r1, r0
 800202c:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8002030:	f107 0018 	add.w	r0, r7, #24
 8002034:	9102      	str	r1, [sp, #8]
 8002036:	9201      	str	r2, [sp, #4]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4633      	mov	r3, r6
 800203c:	4602      	mov	r2, r0
 800203e:	4629      	mov	r1, r5
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff fe5b 	bl	8001cfc <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	b29a      	uxth	r2, r3
 800204c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002050:	b29b      	uxth	r3, r3
 8002052:	4413      	add	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800205a:	b29b      	uxth	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	3302      	adds	r3, #2
 8002062:	b29b      	uxth	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	372c      	adds	r7, #44	; 0x2c
 8002068:	46bd      	mov	sp, r7
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800206c <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af04      	add	r7, sp, #16
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4603      	mov	r3, r0
 800207c:	70fb      	strb	r3, [r7, #3]
 800207e:	460b      	mov	r3, r1
 8002080:	70bb      	strb	r3, [r7, #2]
 8002082:	4613      	mov	r3, r2
 8002084:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8002086:	787b      	ldrb	r3, [r7, #1]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe23 	bl	8001cd4 <mavlink_get_channel_status>
 800208e:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	78f9      	ldrb	r1, [r7, #3]
 8002094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	7f3b      	ldrb	r3, [r7, #28]
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	7e3b      	ldrb	r3, [r7, #24]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff feaa 	bl	8001dfe <mavlink_finalize_message_buffer>
 80020aa:	4603      	mov	r3, r0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af04      	add	r7, sp, #16
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	70fb      	strb	r3, [r7, #3]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70bb      	strb	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	78f9      	ldrb	r1, [r7, #3]
 80020d2:	7d3b      	ldrb	r3, [r7, #20]
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	7c3b      	ldrb	r3, [r7, #16]
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	787b      	ldrb	r3, [r7, #1]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffc3 	bl	800206c <mavlink_finalize_message_chan>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	78db      	ldrb	r3, [r3, #3]
 80020fe:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	2bfe      	cmp	r3, #254	; 0xfe
 8002106:	d13a      	bne.n	800217e <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800210c:	2305      	movs	r3, #5
 800210e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	789a      	ldrb	r2, [r3, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3302      	adds	r3, #2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	7992      	ldrb	r2, [r2, #6]
 8002128:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3303      	adds	r3, #3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	79d2      	ldrb	r2, [r2, #7]
 8002132:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	7a12      	ldrb	r2, [r2, #8]
 800213c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7a5a      	ldrb	r2, [r3, #9]
 8002142:	7a99      	ldrb	r1, [r3, #10]
 8002144:	0209      	lsls	r1, r1, #8
 8002146:	430a      	orrs	r2, r1
 8002148:	7adb      	ldrb	r3, [r3, #11]
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	4313      	orrs	r3, r2
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3305      	adds	r3, #5
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1d98      	adds	r0, r3, #6
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f103 010c 	add.w	r1, r3, #12
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	78db      	ldrb	r3, [r3, #3]
 8002166:	461a      	mov	r2, r3
 8002168:	f009 fb42 	bl	800b7f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	78d2      	ldrb	r2, [r2, #3]
 8002172:	4413      	add	r3, r2
 8002174:	3301      	adds	r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e06c      	b.n	8002258 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe1e 	bl	8001dc8 <_mav_trim_payload>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002190:	2309      	movs	r3, #9
 8002192:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	789a      	ldrb	r2, [r3, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3301      	adds	r3, #1
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3302      	adds	r3, #2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	7912      	ldrb	r2, [r2, #4]
 80021ac:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3303      	adds	r3, #3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	7952      	ldrb	r2, [r2, #5]
 80021b6:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	7992      	ldrb	r2, [r2, #6]
 80021c0:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3305      	adds	r3, #5
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	79d2      	ldrb	r2, [r2, #7]
 80021ca:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3306      	adds	r3, #6
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	7a12      	ldrb	r2, [r2, #8]
 80021d4:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7a5a      	ldrb	r2, [r3, #9]
 80021da:	7a99      	ldrb	r1, [r3, #10]
 80021dc:	0209      	lsls	r1, r1, #8
 80021de:	430a      	orrs	r2, r1
 80021e0:	7adb      	ldrb	r3, [r3, #11]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	4313      	orrs	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3307      	adds	r3, #7
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	7a5a      	ldrb	r2, [r3, #9]
 80021f4:	7a99      	ldrb	r1, [r3, #10]
 80021f6:	0209      	lsls	r1, r1, #8
 80021f8:	430a      	orrs	r2, r1
 80021fa:	7adb      	ldrb	r3, [r3, #11]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	4313      	orrs	r3, r2
 8002200:	121a      	asrs	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3308      	adds	r3, #8
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7a5a      	ldrb	r2, [r3, #9]
 800220e:	7a99      	ldrb	r1, [r3, #10]
 8002210:	0209      	lsls	r1, r1, #8
 8002212:	430a      	orrs	r2, r1
 8002214:	7adb      	ldrb	r3, [r3, #11]
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	4313      	orrs	r3, r2
 800221a:	141a      	asrs	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3309      	adds	r3, #9
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f103 000a 	add.w	r0, r3, #10
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	330c      	adds	r3, #12
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	4619      	mov	r1, r3
 8002232:	f009 fadd 	bl	800b7f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002236:	7dba      	ldrb	r2, [r7, #22]
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4413      	add	r3, r2
 800223c:	3301      	adds	r3, #1
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <mavlink_msg_to_send_buffer+0x164>
 8002250:	230d      	movs	r3, #13
 8002252:	e000      	b.n	8002256 <mavlink_msg_to_send_buffer+0x166>
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29a      	uxth	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3301      	adds	r3, #1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1c98      	adds	r0, r3, #2
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8002286:	7dfa      	ldrb	r2, [r7, #23]
 8002288:	4619      	mov	r1, r3
 800228a:	f009 fab1 	bl	800b7f0 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800228e:	7dbb      	ldrb	r3, [r7, #22]
 8002290:	b29a      	uxth	r2, r3
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b29a      	uxth	r2, r3
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3303      	adds	r3, #3
 80022a4:	b29b      	uxth	r3, r3
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <mavlink_msg_gps_raw_int_pack>:
 * @param yaw [cdeg] Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, int32_t alt_ellipsoid, uint32_t h_acc, uint32_t v_acc, uint32_t vel_acc, uint32_t hdg_acc, uint16_t yaw)
{
 80022ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b0:	b093      	sub	sp, #76	; 0x4c
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	4603      	mov	r3, r0
 80022b6:	603a      	str	r2, [r7, #0]
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	460b      	mov	r3, r1
 80022bc:	71bb      	strb	r3, [r7, #6]
    _mav_put_uint16_t(buf, 50, yaw);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#else
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
 80022be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c4:	613b      	str	r3, [r7, #16]
    packet.lat = lat;
 80022c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022c8:	617b      	str	r3, [r7, #20]
    packet.lon = lon;
 80022ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022cc:	61bb      	str	r3, [r7, #24]
    packet.alt = alt;
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	61fb      	str	r3, [r7, #28]
    packet.eph = eph;
 80022d2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80022d6:	843b      	strh	r3, [r7, #32]
    packet.epv = epv;
 80022d8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80022dc:	847b      	strh	r3, [r7, #34]	; 0x22
    packet.vel = vel;
 80022de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80022e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    packet.cog = cog;
 80022e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80022e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    packet.fix_type = fix_type;
 80022ea:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80022ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    packet.satellites_visible = satellites_visible;
 80022f2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80022f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    packet.alt_ellipsoid = alt_ellipsoid;
 80022fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022fe:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    packet.h_acc = h_acc;
 8002302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002306:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    packet.v_acc = v_acc;
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230e:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
    packet.vel_acc = vel_acc;
 8002312:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002316:	f8c7 3036 	str.w	r3, [r7, #54]	; 0x36
    packet.hdg_acc = hdg_acc;
 800231a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231e:	f8c7 303a 	str.w	r3, [r7, #58]	; 0x3a
    packet.yaw = yaw;
 8002322:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002326:	87fb      	strh	r3, [r7, #62]	; 0x3e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	f107 040c 	add.w	r4, r7, #12
 8002330:	469c      	mov	ip, r3
 8002332:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002336:	4665      	mov	r5, ip
 8002338:	4626      	mov	r6, r4
 800233a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800233c:	6028      	str	r0, [r5, #0]
 800233e:	6069      	str	r1, [r5, #4]
 8002340:	60aa      	str	r2, [r5, #8]
 8002342:	60eb      	str	r3, [r5, #12]
 8002344:	3410      	adds	r4, #16
 8002346:	f10c 0c10 	add.w	ip, ip, #16
 800234a:	4574      	cmp	r4, lr
 800234c:	d1f3      	bne.n	8002336 <mavlink_msg_gps_raw_int_pack+0x88>
 800234e:	4663      	mov	r3, ip
 8002350:	4622      	mov	r2, r4
 8002352:	6810      	ldr	r0, [r2, #0]
 8002354:	6018      	str	r0, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	f042 0218 	orr.w	r2, r2, #24
 800235e:	725a      	strb	r2, [r3, #9]
 8002360:	2200      	movs	r2, #0
 8002362:	729a      	strb	r2, [r3, #10]
 8002364:	2200      	movs	r2, #0
 8002366:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_GPS_RAW_INT_MIN_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
 8002368:	79ba      	ldrb	r2, [r7, #6]
 800236a:	79f9      	ldrb	r1, [r7, #7]
 800236c:	2318      	movs	r3, #24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2334      	movs	r3, #52	; 0x34
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	231e      	movs	r3, #30
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f7ff fe9c 	bl	80020b4 <mavlink_finalize_message>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3744      	adds	r7, #68	; 0x44
 8002382:	46bd      	mov	sp, r7
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002386 <mavlink_msg_gps_raw_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param gps_raw_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 8002386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002388:	b0a3      	sub	sp, #140	; 0x8c
 800238a:	af12      	add	r7, sp, #72	; 0x48
 800238c:	63ba      	str	r2, [r7, #56]	; 0x38
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	4603      	mov	r3, r0
 8002392:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002396:	460b      	mov	r3, r1
 8002398:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible, gps_raw_int->alt_ellipsoid, gps_raw_int->h_acc, gps_raw_int->v_acc, gps_raw_int->vel_acc, gps_raw_int->hdg_acc, gps_raw_int->yaw);
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	7f1b      	ldrb	r3, [r3, #28]
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	68dc      	ldr	r4, [r3, #12]
 80023b2:	62bc      	str	r4, [r7, #40]	; 0x28
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	691d      	ldr	r5, [r3, #16]
 80023b8:	627d      	str	r5, [r7, #36]	; 0x24
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	8a9b      	ldrh	r3, [r3, #20]
 80023be:	b29c      	uxth	r4, r3
 80023c0:	623c      	str	r4, [r7, #32]
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	8adb      	ldrh	r3, [r3, #22]
 80023c6:	b29d      	uxth	r5, r3
 80023c8:	61fd      	str	r5, [r7, #28]
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	8b1b      	ldrh	r3, [r3, #24]
 80023ce:	fa1f fc83 	uxth.w	ip, r3
 80023d2:	4664      	mov	r4, ip
 80023d4:	61bc      	str	r4, [r7, #24]
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	8b5b      	ldrh	r3, [r3, #26]
 80023da:	fa1f fc83 	uxth.w	ip, r3
 80023de:	4665      	mov	r5, ip
 80023e0:	617d      	str	r5, [r7, #20]
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	f893 c01d 	ldrb.w	ip, [r3, #29]
 80023e8:	4662      	mov	r2, ip
 80023ea:	613a      	str	r2, [r7, #16]
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	f8d3 c01e 	ldr.w	ip, [r3, #30]
 80023f2:	4664      	mov	r4, ip
 80023f4:	60fc      	str	r4, [r7, #12]
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	f8d3 c022 	ldr.w	ip, [r3, #34]	; 0x22
 80023fc:	4665      	mov	r5, ip
 80023fe:	60bd      	str	r5, [r7, #8]
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	f8d3 c026 	ldr.w	ip, [r3, #38]	; 0x26
 8002406:	4664      	mov	r4, ip
 8002408:	607c      	str	r4, [r7, #4]
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	f8d3 602a 	ldr.w	r6, [r3, #42]	; 0x2a
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800241a:	b29b      	uxth	r3, r3
 800241c:	f897 503e 	ldrb.w	r5, [r7, #62]	; 0x3e
 8002420:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8002424:	9310      	str	r3, [sp, #64]	; 0x40
 8002426:	920f      	str	r2, [sp, #60]	; 0x3c
 8002428:	960e      	str	r6, [sp, #56]	; 0x38
 800242a:	687e      	ldr	r6, [r7, #4]
 800242c:	960d      	str	r6, [sp, #52]	; 0x34
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	930c      	str	r3, [sp, #48]	; 0x30
 8002432:	68fe      	ldr	r6, [r7, #12]
 8002434:	960b      	str	r6, [sp, #44]	; 0x2c
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	920a      	str	r2, [sp, #40]	; 0x28
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	9309      	str	r3, [sp, #36]	; 0x24
 800243e:	69be      	ldr	r6, [r7, #24]
 8002440:	9608      	str	r6, [sp, #32]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	9207      	str	r2, [sp, #28]
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	9306      	str	r3, [sp, #24]
 800244a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800244c:	9605      	str	r6, [sp, #20]
 800244e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8002450:	9604      	str	r6, [sp, #16]
 8002452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002454:	9203      	str	r2, [sp, #12]
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	e9cd 0100 	strd	r0, r1, [sp]
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	4629      	mov	r1, r5
 8002462:	4620      	mov	r0, r4
 8002464:	f7ff ff23 	bl	80022ae <mavlink_msg_gps_raw_int_pack>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3744      	adds	r7, #68	; 0x44
 800246e:	46bd      	mov	sp, r7
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002472 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b088      	sub	sp, #32
 8002476:	af02      	add	r7, sp, #8
 8002478:	603a      	str	r2, [r7, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	460b      	mov	r3, r1
 8002482:	71bb      	strb	r3, [r7, #6]
 8002484:	4613      	mov	r3, r2
 8002486:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800248c:	797b      	ldrb	r3, [r7, #5]
 800248e:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800249a:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800249c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024a0:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80024a2:	2303      	movs	r3, #3
 80024a4:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	f107 010c 	add.w	r1, r7, #12
 80024ae:	2209      	movs	r2, #9
 80024b0:	4618      	mov	r0, r3
 80024b2:	f009 f99d 	bl	800b7f0 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	725a      	strb	r2, [r3, #9]
 80024bc:	2200      	movs	r2, #0
 80024be:	729a      	strb	r2, [r3, #10]
 80024c0:	2200      	movs	r2, #0
 80024c2:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80024c4:	79ba      	ldrb	r2, [r7, #6]
 80024c6:	79f9      	ldrb	r1, [r7, #7]
 80024c8:	2332      	movs	r3, #50	; 0x32
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2309      	movs	r3, #9
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2309      	movs	r3, #9
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	f7ff fdee 	bl	80020b4 <mavlink_finalize_message>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80024e8:	2201      	movs	r2, #1
 80024ea:	4903      	ldr	r1, [pc, #12]	; (80024f8 <GPS_Init+0x14>)
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <GPS_Init+0x18>)
 80024ee:	f005 f806 	bl	80074fe <HAL_UART_Receive_IT>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200002c8 	.word	0x200002c8
 80024fc:	2000064c 	.word	0x2000064c

08002500 <Mavlink_TX_Heartbeat>:

void Mavlink_TX_Heartbeat() {
 8002500:	b580      	push	{r7, lr}
 8002502:	b0d4      	sub	sp, #336	; 0x150
 8002504:	af04      	add	r7, sp, #16
	mavlink_message_t MSG;
	uint16_t len = mavlink_msg_heartbeat_pack(
 8002506:	f107 0218 	add.w	r2, r7, #24
 800250a:	2303      	movs	r3, #3
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	2300      	movs	r3, #0
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	2351      	movs	r3, #81	; 0x51
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2303      	movs	r3, #3
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2302      	movs	r3, #2
 800251c:	2101      	movs	r1, #1
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff ffa7 	bl	8002472 <mavlink_msg_heartbeat_pack>
 8002524:	4603      	mov	r3, r0
 8002526:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
		0x01, 0x01, &MSG, 0x02, 0x03,  0x51,  0x00,  0x03);
	uint8_t  MAVLink_Buf[6 + 9 + 2];
	len = mavlink_msg_to_send_buffer(MAVLink_Buf, &MSG);
 800252a:	f107 0218 	add.w	r2, r7, #24
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fddc 	bl	80020f0 <mavlink_msg_to_send_buffer>
 8002538:	4603      	mov	r3, r0
 800253a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	HAL_UART_Transmit(&huart2, MAVLink_Buf, len, 100);
 800253e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8002542:	1d39      	adds	r1, r7, #4
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	4804      	ldr	r0, [pc, #16]	; (8002558 <Mavlink_TX_Heartbeat+0x58>)
 8002548:	f004 ff47 	bl	80073da <HAL_UART_Transmit>
}
 800254c:	bf00      	nop
 800254e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000690 	.word	0x20000690

0800255c <GPS_UART_CallBack>:
	for (int i = 0; i < sizeof(rx_buffer); i++){
		tx_buffer[i] = rx_buffer[i];
	}
	HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 100);
}*/
void GPS_UART_CallBack(){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	if (rx_data != '\n\n' && rx_index < sizeof(rx_buffer)) {
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <GPS_UART_CallBack+0x26>
		rx_buffer[rx_index++] = rx_data;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	b2d1      	uxtb	r1, r2
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 8002574:	7011      	strb	r1, [r2, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <GPS_UART_CallBack+0x60>)
 800257a:	7819      	ldrb	r1, [r3, #0]
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <GPS_UART_CallBack+0x64>)
 800257e:	5499      	strb	r1, [r3, r2]
 8002580:	e013      	b.n	80025aa <GPS_UART_CallBack+0x4e>
	} else {
		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <GPS_UART_CallBack+0x64>)
 8002584:	f000 f822 	bl	80025cc <GPS_validate>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <GPS_UART_CallBack+0x38>
			GPS_parse((char*) rx_buffer);
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <GPS_UART_CallBack+0x64>)
 8002590:	f000 f87e 	bl	8002690 <GPS_parse>
		flag_gps = 1;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <GPS_UART_CallBack+0x68>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		rx_index = 0;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	2100      	movs	r1, #0
 80025a4:	4806      	ldr	r0, [pc, #24]	; (80025c0 <GPS_UART_CallBack+0x64>)
 80025a6:	f009 f931 	bl	800b80c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80025aa:	2201      	movs	r2, #1
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <GPS_UART_CallBack+0x60>)
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <GPS_UART_CallBack+0x6c>)
 80025b0:	f004 ffa5 	bl	80074fe <HAL_UART_Receive_IT>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000034c 	.word	0x2000034c
 80025bc:	200002c8 	.word	0x200002c8
 80025c0:	200002cc 	.word	0x200002cc
 80025c4:	20000501 	.word	0x20000501
 80025c8:	2000064c 	.word	0x2000064c

080025cc <GPS_validate>:


int GPS_validate(char *nmeastr){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b24      	cmp	r3, #36	; 0x24
 80025e6:	d103      	bne.n	80025f0 <GPS_validate+0x24>
        i++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80025ee:	e00c      	b.n	800260a <GPS_validate+0x3e>
        return 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e047      	b.n	8002684 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4053      	eors	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        i++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <GPS_validate+0x5c>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b2a      	cmp	r3, #42	; 0x2a
 8002620:	d002      	beq.n	8002628 <GPS_validate+0x5c>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b4a      	cmp	r3, #74	; 0x4a
 8002626:	dde5      	ble.n	80025f4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b4a      	cmp	r3, #74	; 0x4a
 800262c:	dd01      	ble.n	8002632 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800262e:	2300      	movs	r3, #0
 8002630:	e028      	b.n	8002684 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b2a      	cmp	r3, #42	; 0x2a
 800263c:	d119      	bne.n	8002672 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3302      	adds	r3, #2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	490a      	ldr	r1, [pc, #40]	; (800268c <GPS_validate+0xc0>)
 8002662:	4618      	mov	r0, r3
 8002664:	f009 ff5a 	bl	800c51c <siprintf>
    return((checkcalcstr[0] == check[0])
 8002668:	7a3a      	ldrb	r2, [r7, #8]
 800266a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800266c:	429a      	cmp	r2, r3
 800266e:	d108      	bne.n	8002682 <GPS_validate+0xb6>
 8002670:	e001      	b.n	8002676 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8002672:	2300      	movs	r3, #0
 8002674:	e006      	b.n	8002684 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002676:	7a7a      	ldrb	r2, [r7, #9]
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	429a      	cmp	r2, r3
 800267c:	d101      	bne.n	8002682 <GPS_validate+0xb6>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <GPS_validate+0xb8>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	08011010 	.word	0x08011010

08002690 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8002690:	b580      	push	{r7, lr}
 8002692:	b09e      	sub	sp, #120	; 0x78
 8002694:	af10      	add	r7, sp, #64	; 0x40
 8002696:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8002698:	2206      	movs	r2, #6
 800269a:	4976      	ldr	r1, [pc, #472]	; (8002874 <GPS_parse+0x1e4>)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f009 ffce 	bl	800c63e <strncmp>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <GPS_parse+0x8e>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units, &GPS.ellipsoid) >= 1){
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <GPS_parse+0x1e8>)
 80026aa:	9308      	str	r3, [sp, #32]
 80026ac:	4b73      	ldr	r3, [pc, #460]	; (800287c <GPS_parse+0x1ec>)
 80026ae:	9307      	str	r3, [sp, #28]
 80026b0:	4b73      	ldr	r3, [pc, #460]	; (8002880 <GPS_parse+0x1f0>)
 80026b2:	9306      	str	r3, [sp, #24]
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <GPS_parse+0x1f4>)
 80026b6:	9305      	str	r3, [sp, #20]
 80026b8:	4b73      	ldr	r3, [pc, #460]	; (8002888 <GPS_parse+0x1f8>)
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	4b73      	ldr	r3, [pc, #460]	; (800288c <GPS_parse+0x1fc>)
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <GPS_parse+0x200>)
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <GPS_parse+0x204>)
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <GPS_parse+0x208>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4b73      	ldr	r3, [pc, #460]	; (800289c <GPS_parse+0x20c>)
 80026ce:	4a74      	ldr	r2, [pc, #464]	; (80028a0 <GPS_parse+0x210>)
 80026d0:	4974      	ldr	r1, [pc, #464]	; (80028a4 <GPS_parse+0x214>)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f009 ff42 	bl	800c55c <siscanf>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f340 80c6 	ble.w	800286c <GPS_parse+0x1dc>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <GPS_parse+0x218>)
 80026e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <GPS_parse+0x218>)
 80026e8:	7e1b      	ldrb	r3, [r3, #24]
 80026ea:	4618      	mov	r0, r3
 80026ec:	eeb0 0a67 	vmov.f32	s0, s15
 80026f0:	f000 f912 	bl	8002918 <GPS_nmea_to_dec>
 80026f4:	eef0 7a40 	vmov.f32	s15, s0
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <GPS_parse+0x218>)
 80026fa:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80026fe:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <GPS_parse+0x218>)
 8002700:	edd3 7a03 	vldr	s15, [r3, #12]
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <GPS_parse+0x218>)
 8002706:	7e5b      	ldrb	r3, [r3, #25]
 8002708:	4618      	mov	r0, r3
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	f000 f903 	bl	8002918 <GPS_nmea_to_dec>
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <GPS_parse+0x218>)
 8002718:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800271c:	e0a6      	b.n	800286c <GPS_parse+0x1dc>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 800271e:	2206      	movs	r2, #6
 8002720:	4962      	ldr	r1, [pc, #392]	; (80028ac <GPS_parse+0x21c>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f009 ff8b 	bl	800c63e <strncmp>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <GPS_parse+0xc8>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <GPS_parse+0x220>)
 8002730:	9305      	str	r3, [sp, #20]
 8002732:	4b60      	ldr	r3, [pc, #384]	; (80028b4 <GPS_parse+0x224>)
 8002734:	9304      	str	r3, [sp, #16]
 8002736:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <GPS_parse+0x228>)
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <GPS_parse+0x200>)
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <GPS_parse+0x204>)
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	4b55      	ldr	r3, [pc, #340]	; (8002898 <GPS_parse+0x208>)
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <GPS_parse+0x20c>)
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <GPS_parse+0x210>)
 800274a:	495c      	ldr	r1, [pc, #368]	; (80028bc <GPS_parse+0x22c>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f009 ff05 	bl	800c55c <siscanf>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	e089      	b.n	800286c <GPS_parse+0x1dc>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8002758:	2206      	movs	r2, #6
 800275a:	4959      	ldr	r1, [pc, #356]	; (80028c0 <GPS_parse+0x230>)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f009 ff6e 	bl	800c63e <strncmp>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d110      	bne.n	800278a <GPS_parse+0xfa>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <GPS_parse+0x234>)
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <GPS_parse+0x210>)
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <GPS_parse+0x200>)
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <GPS_parse+0x204>)
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <GPS_parse+0x208>)
 800277a:	4a48      	ldr	r2, [pc, #288]	; (800289c <GPS_parse+0x20c>)
 800277c:	4952      	ldr	r1, [pc, #328]	; (80028c8 <GPS_parse+0x238>)
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f009 feec 	bl	800c55c <siscanf>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	e070      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800278a:	2206      	movs	r2, #6
 800278c:	494f      	ldr	r1, [pc, #316]	; (80028cc <GPS_parse+0x23c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f009 ff55 	bl	800c63e <strncmp>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <GPS_parse+0x134>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <GPS_parse+0x240>)
 800279c:	9305      	str	r3, [sp, #20]
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <GPS_parse+0x244>)
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <GPS_parse+0x248>)
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <GPS_parse+0x228>)
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <GPS_parse+0x24c>)
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <GPS_parse+0x250>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <GPS_parse+0x254>)
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <GPS_parse+0x258>)
 80027b6:	494d      	ldr	r1, [pc, #308]	; (80028ec <GPS_parse+0x25c>)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f009 fecf 	bl	800c55c <siscanf>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	e053      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "GPGSA", 6)){
 80027c4:	494a      	ldr	r1, [pc, #296]	; (80028f0 <GPS_parse+0x260>)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd fd0a 	bl	80001e0 <strcmp>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d13d      	bne.n	800284e <GPS_parse+0x1be>
    	int a[12];
        if(sscanf(GPSstrParse, "$GPGSA,%c,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f", &GPS.mode, &GPS.fix_type,&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7],&a[8],&a[9],&a[10],&a[11], &GPS.PDOP, &GPS.HDOP, &GPS.VDOP) >= 1)
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <GPS_parse+0x264>)
 80027d4:	930e      	str	r3, [sp, #56]	; 0x38
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <GPS_parse+0x268>)
 80027d8:	930d      	str	r3, [sp, #52]	; 0x34
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <GPS_parse+0x26c>)
 80027dc:	930c      	str	r3, [sp, #48]	; 0x30
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	332c      	adds	r3, #44	; 0x2c
 80027e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	3328      	adds	r3, #40	; 0x28
 80027ec:	930a      	str	r3, [sp, #40]	; 0x28
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	9309      	str	r3, [sp, #36]	; 0x24
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	3320      	adds	r3, #32
 80027fc:	9308      	str	r3, [sp, #32]
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	331c      	adds	r3, #28
 8002804:	9307      	str	r3, [sp, #28]
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	3318      	adds	r3, #24
 800280c:	9306      	str	r3, [sp, #24]
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	3314      	adds	r3, #20
 8002814:	9305      	str	r3, [sp, #20]
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	3310      	adds	r3, #16
 800281c:	9304      	str	r3, [sp, #16]
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	330c      	adds	r3, #12
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	3308      	adds	r3, #8
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	3304      	adds	r3, #4
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <GPS_parse+0x270>)
 800283e:	4a31      	ldr	r2, [pc, #196]	; (8002904 <GPS_parse+0x274>)
 8002840:	4931      	ldr	r1, [pc, #196]	; (8002908 <GPS_parse+0x278>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f009 fe8a 	bl	800c55c <siscanf>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	e00e      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPRMA", 6)){
 800284e:	2206      	movs	r2, #6
 8002850:	492e      	ldr	r1, [pc, #184]	; (800290c <GPS_parse+0x27c>)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f009 fef3 	bl	800c63e <strncmp>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <GPS_parse+0x1dc>
        if(sscanf(GPSstrParse, "$GPRMA,%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,], %f", &GPS.cog) >= 1)
 800285e:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <GPS_parse+0x280>)
 8002860:	492c      	ldr	r1, [pc, #176]	; (8002914 <GPS_parse+0x284>)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f009 fe7a 	bl	800c55c <siscanf>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
            return;
    }

}
 800286c:	3738      	adds	r7, #56	; 0x38
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	08011018 	.word	0x08011018
 8002878:	200003bc 	.word	0x200003bc
 800287c:	2000037c 	.word	0x2000037c
 8002880:	20000378 	.word	0x20000378
 8002884:	20000374 	.word	0x20000374
 8002888:	20000370 	.word	0x20000370
 800288c:	2000036c 	.word	0x2000036c
 8002890:	20000369 	.word	0x20000369
 8002894:	2000035c 	.word	0x2000035c
 8002898:	20000368 	.word	0x20000368
 800289c:	20000360 	.word	0x20000360
 80028a0:	20000364 	.word	0x20000364
 80028a4:	08011020 	.word	0x08011020
 80028a8:	20000350 	.word	0x20000350
 80028ac:	08011048 	.word	0x08011048
 80028b0:	20000388 	.word	0x20000388
 80028b4:	20000384 	.word	0x20000384
 80028b8:	20000380 	.word	0x20000380
 80028bc:	08011050 	.word	0x08011050
 80028c0:	08011070 	.word	0x08011070
 80028c4:	2000038c 	.word	0x2000038c
 80028c8:	08011078 	.word	0x08011078
 80028cc:	08011094 	.word	0x08011094
 80028d0:	200003a4 	.word	0x200003a4
 80028d4:	200003a0 	.word	0x200003a0
 80028d8:	2000039d 	.word	0x2000039d
 80028dc:	2000039c 	.word	0x2000039c
 80028e0:	20000398 	.word	0x20000398
 80028e4:	20000394 	.word	0x20000394
 80028e8:	20000390 	.word	0x20000390
 80028ec:	0801109c 	.word	0x0801109c
 80028f0:	080110bc 	.word	0x080110bc
 80028f4:	200003ac 	.word	0x200003ac
 80028f8:	200003b0 	.word	0x200003b0
 80028fc:	200003a8 	.word	0x200003a8
 8002900:	200003b4 	.word	0x200003b4
 8002904:	200003a5 	.word	0x200003a5
 8002908:	080110c4 	.word	0x080110c4
 800290c:	08011100 	.word	0x08011100
 8002910:	200003b8 	.word	0x200003b8
 8002914:	08011108 	.word	0x08011108

08002918 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002922:	4603      	mov	r3, r0
 8002924:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002926:	ed97 7a01 	vldr	s14, [r7, #4]
 800292a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80029ac <GPS_nmea_to_dec+0x94>
 800292e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002936:	ee17 3a90 	vmov	r3, s15
 800293a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2264      	movs	r2, #100	; 0x64
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8002958:	ed97 7a03 	vldr	s14, [r7, #12]
 800295c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80029b0 <GPS_nmea_to_dec+0x98>
 8002960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002964:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	2b53      	cmp	r3, #83	; 0x53
 8002982:	d002      	beq.n	800298a <GPS_nmea_to_dec+0x72>
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b57      	cmp	r3, #87	; 0x57
 8002988:	d105      	bne.n	8002996 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800298a:	edd7 7a05 	vldr	s15, [r7, #20]
 800298e:	eef1 7a67 	vneg.f32	s15, s15
 8002992:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	ee07 3a90 	vmov	s15, r3
}
 800299c:	eeb0 0a67 	vmov.f32	s0, s15
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	42c80000 	.word	0x42c80000
 80029b0:	42700000 	.word	0x42700000
 80029b4:	00000000 	.word	0x00000000

080029b8 <Transmit_mavlink_data_GPS>:

void Transmit_mavlink_data_GPS(mavlink_gps_raw_int_t data){
 80029b8:	b084      	sub	sp, #16
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b0e2      	sub	sp, #392	; 0x188
 80029be:	af00      	add	r7, sp, #0
 80029c0:	f507 7cc8 	add.w	ip, r7, #400	; 0x190
 80029c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	mavlink_message_t msg;
	uint8_t _buffer[100] = {0};
 80029c8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80029cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2260      	movs	r2, #96	; 0x60
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f008 ff16 	bl	800b80c <memset>
	data.time_usec = GPS.utc_time;
 80029e0:	4b5f      	ldr	r3, [pc, #380]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f997 	bl	8000d18 <__aeabi_f2ulz>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80029f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	data.alt = GPS.altitude_ft;
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 80029fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	data.alt_ellipsoid = GPS.ellipsoid;
 8002a0a:	4b55      	ldr	r3, [pc, #340]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	f8c7 31ae 	str.w	r3, [r7, #430]	; 0x1ae
	data.lat = GPS.dec_latitude;
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	data.lon = GPS.dec_longitude;
 8002a24:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2e:	ee17 3a90 	vmov	r3, s15
 8002a32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	data.eph = GPS.HDOP * 100;
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a38:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002a3c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002b64 <Transmit_mavlink_data_GPS+0x1ac>
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
	data.epv = GPS.VDOP * 100;
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a54:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a58:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002b64 <Transmit_mavlink_data_GPS+0x1ac>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a64:	ee17 3a90 	vmov	r3, s15
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
	data.fix_type = GPS.fix_type;
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
	data.vel = GPS.speed_km * 0.277778;
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd7b 	bl	8000578 <__aeabi_f2d>
 8002a82:	a335      	add	r3, pc, #212	; (adr r3, 8002b58 <Transmit_mavlink_data_GPS+0x1a0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdce 	bl	8000628 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f8a0 	bl	8000bd8 <__aeabi_d2uiz>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
	data.cog = GPS.cog;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002aa2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 3a90 	vmov	r3, s15
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
	data.satellites_visible = GPS.satelites;
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
	data.alt_ellipsoid = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	data.h_acc = 1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
	data.v_acc = 1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
	data.vel_acc = 1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	data.hdg_acc = 1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8a7 31c0 	strh.w	r3, [r7, #448]	; 0x1c0
	data.yaw = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
	mavlink_msg_gps_raw_int_encode(0x01, 0x01, &msg, &data);
 8002b10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b14:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff fc33 	bl	8002386 <mavlink_msg_gps_raw_int_encode>
	uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 8002b20:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b24:	463b      	mov	r3, r7
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fae1 	bl	80020f0 <mavlink_msg_to_send_buffer>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	HAL_UART_Transmit(&huart2, _buffer, len, 1000);
 8002b34:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4639      	mov	r1, r7
 8002b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <Transmit_mavlink_data_GPS+0x1b0>)
 8002b42:	f004 fc4a 	bl	80073da <HAL_UART_Transmit>
}
 8002b46:	bf00      	nop
 8002b48:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b52:	b004      	add	sp, #16
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	60631727 	.word	0x60631727
 8002b5c:	3fd1c71d 	.word	0x3fd1c71d
 8002b60:	20000350 	.word	0x20000350
 8002b64:	42c80000 	.word	0x42c80000
 8002b68:	20000690 	.word	0x20000690

08002b6c <crc_accumulate>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4053      	eors	r3, r2
 8002b82:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	b25a      	sxtb	r2, r3
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4053      	eors	r3, r2
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4053      	eors	r3, r2
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4053      	eors	r3, r2
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	4053      	eors	r3, r2
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	801a      	strh	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <crc_init>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bde:	801a      	strh	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <crc_calculate>:
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8002bf8:	f107 030e 	add.w	r3, r7, #14
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ffe7 	bl	8002bd0 <crc_init>
	while (length--) {
 8002c02:	e009      	b.n	8002c18 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f107 020e 	add.w	r2, r7, #14
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffaa 	bl	8002b6c <crc_accumulate>
	while (length--) {
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	807a      	strh	r2, [r7, #2]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <crc_calculate+0x18>
        return crcTmp;
 8002c22:	89fb      	ldrh	r3, [r7, #14]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <crc_accumulate_buffer>:
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002c3e:	e007      	b.n	8002c50 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	617a      	str	r2, [r7, #20]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff8e 	bl	8002b6c <crc_accumulate>
	while (length--) {
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	80fa      	strh	r2, [r7, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f2      	bne.n	8002c40 <crc_accumulate_buffer+0x14>
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <mavlink_sha256_init>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <mavlink_sha256_init+0x50>)
 8002c7c:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <mavlink_sha256_init+0x54>)
 8002c82:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <mavlink_sha256_init+0x58>)
 8002c88:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <mavlink_sha256_init+0x5c>)
 8002c8e:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <mavlink_sha256_init+0x60>)
 8002c94:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <mavlink_sha256_init+0x64>)
 8002c9a:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <mavlink_sha256_init+0x68>)
 8002ca0:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <mavlink_sha256_init+0x6c>)
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	6a09e667 	.word	0x6a09e667
 8002cb8:	bb67ae85 	.word	0xbb67ae85
 8002cbc:	3c6ef372 	.word	0x3c6ef372
 8002cc0:	a54ff53a 	.word	0xa54ff53a
 8002cc4:	510e527f 	.word	0x510e527f
 8002cc8:	9b05688c 	.word	0x9b05688c
 8002ccc:	1f83d9ab 	.word	0x1f83d9ab
 8002cd0:	5be0cd19 	.word	0x5be0cd19

08002cd4 <mavlink_sha256_calc>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b0cf      	sub	sp, #316	; 0x13c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ce8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cec:	6019      	str	r1, [r3, #0]
    AA = m->counter[0];
 8002cee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8002cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8002d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8002d1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8002d2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8002d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d74:	e016      	b.n	8002da4 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002d80:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	dde4      	ble.n	8002d76 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8002dac:	2310      	movs	r3, #16
 8002dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002db2:	e069      	b.n	8002e88 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db8:	1e9a      	subs	r2, r3, #2
 8002dba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dce:	1e99      	subs	r1, r3, #2
 8002dd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ddc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002de0:	405a      	eors	r2, r3
 8002de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de6:	1e99      	subs	r1, r3, #2
 8002de8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002df0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002df4:	0a9b      	lsrs	r3, r3, #10
 8002df6:	405a      	eors	r2, r3
 8002df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfc:	1fd9      	subs	r1, r3, #7
 8002dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e0a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e10:	f1a3 010f 	sub.w	r1, r3, #15
 8002e14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e20:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e28:	f1a3 000f 	sub.w	r0, r3, #15
 8002e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e38:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002e3c:	4059      	eors	r1, r3
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e42:	f1a3 000f 	sub.w	r0, r3, #15
 8002e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002e56:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5c:	f1a3 0110 	sub.w	r1, r3, #16
 8002e60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e6c:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8c:	2b3f      	cmp	r3, #63	; 0x3f
 8002e8e:	dd91      	ble.n	8002db4 <mavlink_sha256_calc+0xe0>
    for (i = 0; i < 64; i++) {
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e96:	e078      	b.n	8002f8a <mavlink_sha256_calc+0x2b6>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002e98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e9c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002ea0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ea4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002ea8:	405a      	eors	r2, r3
 8002eaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002eae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002eb2:	405a      	eors	r2, r3
 8002eb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002eb8:	441a      	add	r2, r3
 8002eba:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ec2:	4019      	ands	r1, r3
 8002ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ec8:	43d8      	mvns	r0, r3
 8002eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ece:	4003      	ands	r3, r0
 8002ed0:	404b      	eors	r3, r1
 8002ed2:	441a      	add	r2, r3
 8002ed4:	496e      	ldr	r1, [pc, #440]	; (8003090 <mavlink_sha256_calc+0x3bc>)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ede:	441a      	add	r2, r3
 8002ee0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ee8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002eec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002ef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002efa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002f06:	405a      	eors	r2, r3
 8002f08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002f10:	405a      	eors	r2, r3
 8002f12:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f1a:	4059      	eors	r1, r3
 8002f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f20:	4019      	ands	r1, r3
 8002f22:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f2a:	4003      	ands	r3, r0
 8002f2c:	404b      	eors	r3, r1
 8002f2e:	4413      	add	r3, r2
 8002f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 8002f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002f44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002f4c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002f50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f54:	4413      	add	r3, r2
 8002f56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002f72:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f84:	3301      	adds	r3, #1
 8002f86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8e:	2b3f      	cmp	r3, #63	; 0x3f
 8002f90:	dd82      	ble.n	8002e98 <mavlink_sha256_calc+0x1c4>
    m->counter[0] += AA;
 8002f92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fa2:	441a      	add	r2, r3
 8002fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002fb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fc0:	441a      	add	r2, r3
 8002fc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002fce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002fde:	441a      	add	r2, r3
 8002fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fe4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002fec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ff0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ffc:	441a      	add	r2, r3
 8002ffe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003002:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800300a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800300e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800301a:	441a      	add	r2, r3
 800301c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003020:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8003028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800302c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003038:	441a      	add	r2, r3
 800303a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800303e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8003046:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800304a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003056:	441a      	add	r2, r3
 8003058:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800305c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8003064:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003068:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003074:	441a      	add	r2, r3
 8003076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800307a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003082:	bf00      	nop
 8003084:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	080112b4 	.word	0x080112b4

08003094 <mavlink_sha256_update>:
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b09c      	sub	sp, #112	; 0x70
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d904      	bls.n	80030cc <mavlink_sha256_update+0x38>
	++m->sz[1];
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80030d6:	e054      	b.n	8003182 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d201      	bcs.n	80030ec <mavlink_sha256_update+0x58>
            l = len;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80030f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f4:	4413      	add	r3, r2
 80030f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80030fa:	4618      	mov	r0, r3
 80030fc:	f008 fb78 	bl	800b7f0 <memcpy>
	offset += l;
 8003100:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003104:	4413      	add	r3, r2
 8003106:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8003108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800310a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310c:	4413      	add	r3, r2
 800310e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8003118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d131      	bne.n	8003182 <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3328      	adds	r3, #40	; 0x28
 8003122:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8003124:	2300      	movs	r3, #0
 8003126:	663b      	str	r3, [r7, #96]	; 0x60
 8003128:	e020      	b.n	800316c <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800312a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003130:	4413      	add	r3, r2
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8003134:	f107 0210 	add.w	r2, r7, #16
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	78da      	ldrb	r2, [r3, #3]
 8003144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003146:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8003148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314a:	3301      	adds	r3, #1
 800314c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800314e:	7892      	ldrb	r2, [r2, #2]
 8003150:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8003152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003154:	3302      	adds	r3, #2
 8003156:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003158:	7852      	ldrb	r2, [r2, #1]
 800315a:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800315c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315e:	3303      	adds	r3, #3
 8003160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	3301      	adds	r3, #1
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
 800316c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316e:	2b0f      	cmp	r3, #15
 8003170:	dddb      	ble.n	800312a <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff fdab 	bl	8002cd4 <mavlink_sha256_calc>
	    offset = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1a7      	bne.n	80030d8 <mavlink_sha256_update+0x44>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3770      	adds	r7, #112	; 0x70
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <mavlink_sha256_final_48>:
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b098      	sub	sp, #96	; 0x60
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80031a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031aa:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 80031ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b2:	3301      	adds	r3, #1
 80031b4:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3308      	adds	r3, #8
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	3301      	adds	r3, #1
 80031c6:	2247      	movs	r2, #71	; 0x47
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f008 fb1e 	bl	800b80c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d6:	3307      	adds	r3, #7
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	3360      	adds	r3, #96	; 0x60
 80031dc:	443b      	add	r3, r7
 80031de:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0a1a      	lsrs	r2, r3, #8
 80031e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ea:	3306      	adds	r3, #6
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	443b      	add	r3, r7
 80031f2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0c1a      	lsrs	r2, r3, #16
 80031fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031fe:	3305      	adds	r3, #5
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	443b      	add	r3, r7
 8003206:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e1a      	lsrs	r2, r3, #24
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	3304      	adds	r3, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	443b      	add	r3, r7
 800321a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	3303      	adds	r3, #3
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	443b      	add	r3, r7
 800322c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0a1a      	lsrs	r2, r3, #8
 8003236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003238:	3302      	adds	r3, #2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	443b      	add	r3, r7
 8003240:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0c1a      	lsrs	r2, r3, #16
 800324a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324c:	3301      	adds	r3, #1
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	3360      	adds	r3, #96	; 0x60
 8003252:	443b      	add	r3, r7
 8003254:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	f107 020c 	add.w	r2, r7, #12
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003266:	4413      	add	r3, r2
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 800326c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326e:	f103 0208 	add.w	r2, r3, #8
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff0b 	bl	8003094 <mavlink_sha256_update>
    result[0] = p[3];
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	78da      	ldrb	r2, [r3, #3]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800328c:	7892      	ldrb	r2, [r2, #2]
 800328e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3302      	adds	r3, #2
 8003294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003296:	7852      	ldrb	r2, [r2, #1]
 8003298:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3303      	adds	r3, #3
 800329e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3304      	adds	r3, #4
 80032a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032aa:	79d2      	ldrb	r2, [r2, #7]
 80032ac:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3305      	adds	r3, #5
 80032b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032b4:	7992      	ldrb	r2, [r2, #6]
 80032b6:	701a      	strb	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	3760      	adds	r7, #96	; 0x60
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <mavlink_get_channel_status>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <mavlink_get_channel_status+0x24>)
 80032d6:	4413      	add	r3, r2
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	20000424 	.word	0x20000424

080032e8 <mavlink_sign_packet>:
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b0a0      	sub	sp, #128	; 0x80
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	70fb      	strb	r3, [r7, #3]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <mavlink_sign_packet+0x20>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <mavlink_sign_packet+0x24>
	    return 0;
 8003308:	2300      	movs	r3, #0
 800330a:	e04f      	b.n	80033ac <mavlink_sign_packet+0xc4>
	signature[0] = signing->link_id;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	785a      	ldrb	r2, [r3, #1]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3301      	adds	r3, #1
 8003322:	f107 0110 	add.w	r1, r7, #16
 8003326:	2206      	movs	r2, #6
 8003328:	4618      	mov	r0, r3
 800332a:	f008 fa61 	bl	800b7f0 <memcpy>
	signing->timestamp++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003334:	1c54      	adds	r4, r2, #1
 8003336:	f143 0500 	adc.w	r5, r3, #0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	mavlink_sha256_init(&ctx);
 8003340:	f107 0318 	add.w	r3, r7, #24
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fc8d 	bl	8002c64 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f103 0110 	add.w	r1, r3, #16
 8003350:	f107 0318 	add.w	r3, r7, #24
 8003354:	2220      	movs	r2, #32
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe9c 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fe95 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800336a:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fe8c 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	2202      	movs	r2, #2
 8003382:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe84 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800338c:	f107 0318 	add.w	r3, r7, #24
 8003390:	2207      	movs	r2, #7
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fe7d 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1dda      	adds	r2, r3, #7
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fef4 	bl	8003192 <mavlink_sha256_final_48>
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80033aa:	230d      	movs	r3, #13
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3780      	adds	r7, #128	; 0x80
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}

080033b4 <_mav_trim_payload>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80033c0:	e002      	b.n	80033c8 <_mav_trim_payload+0x14>
		length--;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d906      	bls.n	80033dc <_mav_trim_payload+0x28>
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f2      	beq.n	80033c2 <_mav_trim_payload+0xe>
	return length;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <mavlink_finalize_message_buffer>:
{
 80033ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ec:	b08f      	sub	sp, #60	; 0x3c
 80033ee:	af04      	add	r7, sp, #16
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	72fb      	strb	r3, [r7, #11]
 80033f8:	4613      	mov	r3, r2
 80033fa:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7b1b      	ldrb	r3, [r3, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <mavlink_finalize_message_buffer+0x50>
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800343e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 800344a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <mavlink_finalize_message_buffer+0x6c>
 8003452:	230d      	movs	r3, #13
 8003454:	e000      	b.n	8003458 <mavlink_finalize_message_buffer+0x6e>
 8003456:	2300      	movs	r3, #0
 8003458:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800345c:	230a      	movs	r3, #10
 800345e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (mavlink1) {
 8003462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22fe      	movs	r2, #254	; 0xfe
 800346e:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003470:	2306      	movs	r3, #6
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003476:	e002      	b.n	800347e <mavlink_finalize_message_buffer+0x94>
		msg->magic = MAVLINK_STX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22fd      	movs	r2, #253	; 0xfd
 800347c:	709a      	strb	r2, [r3, #2]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800347e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <mavlink_finalize_message_buffer+0xb2>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	330c      	adds	r3, #12
 800348a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff8f 	bl	80033b4 <_mav_trim_payload>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	e001      	b.n	80034a0 <mavlink_finalize_message_buffer+0xb6>
 800349c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	7afa      	ldrb	r2, [r7, #11]
 80034a8:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	7aba      	ldrb	r2, [r7, #10]
 80034ae:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80034b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	711a      	strb	r2, [r3, #4]
	msg->compat_flags = 0;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	799a      	ldrb	r2, [r3, #6]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	799b      	ldrb	r3, [r3, #6]
 80034de:	3301      	adds	r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	719a      	strb	r2, [r3, #6]
	buf[0] = msg->magic;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80034f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	799b      	ldrb	r3, [r3, #6]
 80034fe:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	79db      	ldrb	r3, [r3, #7]
 8003504:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	7a1b      	ldrb	r3, [r3, #8]
 800350a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7a5a      	ldrb	r2, [r3, #9]
 8003510:	7a99      	ldrb	r1, [r3, #10]
 8003512:	0209      	lsls	r1, r1, #8
 8003514:	430a      	orrs	r2, r1
 8003516:	7adb      	ldrb	r3, [r3, #11]
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	4313      	orrs	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	777b      	strb	r3, [r7, #29]
 8003520:	e030      	b.n	8003584 <mavlink_finalize_message_buffer+0x19a>
		buf[2] = msg->incompat_flags;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	795b      	ldrb	r3, [r3, #5]
 800352c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	799b      	ldrb	r3, [r3, #6]
 8003532:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	79db      	ldrb	r3, [r3, #7]
 8003538:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	7a5a      	ldrb	r2, [r3, #9]
 8003544:	7a99      	ldrb	r1, [r3, #10]
 8003546:	0209      	lsls	r1, r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	7adb      	ldrb	r3, [r3, #11]
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	4313      	orrs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	7a5a      	ldrb	r2, [r3, #9]
 8003558:	7a99      	ldrb	r1, [r3, #10]
 800355a:	0209      	lsls	r1, r1, #8
 800355c:	430a      	orrs	r2, r1
 800355e:	7adb      	ldrb	r3, [r3, #11]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	4313      	orrs	r3, r2
 8003564:	121b      	asrs	r3, r3, #8
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	7a5a      	ldrb	r2, [r3, #9]
 8003570:	7a99      	ldrb	r1, [r3, #10]
 8003572:	0209      	lsls	r1, r1, #8
 8003574:	430a      	orrs	r2, r1
 8003576:	7adb      	ldrb	r3, [r3, #11]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	4313      	orrs	r3, r2
 800357c:	141b      	asrs	r3, r3, #16
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	3301      	adds	r3, #1
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb28 	bl	8002bec <crc_calculate>
 800359c:	4603      	mov	r3, r0
 800359e:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f103 010c 	add.w	r1, r3, #12
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	78db      	ldrb	r3, [r3, #3]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	f107 0316 	add.w	r3, r7, #22
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fb3b 	bl	8002c2c <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80035b6:	f107 0216 	add.w	r2, r7, #22
 80035ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fad3 	bl	8002b6c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80035c6:	8af9      	ldrh	r1, [r7, #22]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	330c      	adds	r3, #12
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	78d2      	ldrb	r2, [r2, #3]
 80035d0:	4413      	add	r3, r2
 80035d2:	b2ca      	uxtb	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b299      	uxth	r1, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f103 020c 	add.w	r2, r3, #12
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	b2ca      	uxtb	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
	msg->checksum = checksum;
 80035ee:	8afa      	ldrh	r2, [r7, #22]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	801a      	strh	r2, [r3, #0]
	if (signing) {
 80035f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01a      	beq.n	8003632 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	310c      	adds	r1, #12
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8003616:	4401      	add	r1, r0
 8003618:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800361c:	f107 0018 	add.w	r0, r7, #24
 8003620:	9102      	str	r1, [sp, #8]
 8003622:	9201      	str	r2, [sp, #4]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4633      	mov	r3, r6
 8003628:	4602      	mov	r2, r0
 800362a:	4629      	mov	r1, r5
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff fe5b 	bl	80032e8 <mavlink_sign_packet>
	return msg->len + header_len + 2 + signature_len;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	78db      	ldrb	r3, [r3, #3]
 8003636:	b29a      	uxth	r2, r3
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	b29b      	uxth	r3, r3
 800363e:	4413      	add	r3, r2
 8003640:	b29a      	uxth	r2, r3
 8003642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003646:	b29b      	uxth	r3, r3
 8003648:	4413      	add	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	3302      	adds	r3, #2
 800364e:	b29b      	uxth	r3, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	372c      	adds	r7, #44	; 0x2c
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003658 <mavlink_finalize_message_chan>:
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	70fb      	strb	r3, [r7, #3]
 800366a:	460b      	mov	r3, r1
 800366c:	70bb      	strb	r3, [r7, #2]
 800366e:	4613      	mov	r3, r2
 8003670:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe23 	bl	80032c0 <mavlink_get_channel_status>
 800367a:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800367c:	78ba      	ldrb	r2, [r7, #2]
 800367e:	78f9      	ldrb	r1, [r7, #3]
 8003680:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	7f3b      	ldrb	r3, [r7, #28]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	7e3b      	ldrb	r3, [r7, #24]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff feaa 	bl	80033ea <mavlink_finalize_message_buffer>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <mavlink_finalize_message>:
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	70fb      	strb	r3, [r7, #3]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70bb      	strb	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80036ba:	78ba      	ldrb	r2, [r7, #2]
 80036bc:	78f9      	ldrb	r1, [r7, #3]
 80036be:	7d3b      	ldrb	r3, [r7, #20]
 80036c0:	9302      	str	r3, [sp, #8]
 80036c2:	7c3b      	ldrb	r3, [r7, #16]
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	787b      	ldrb	r3, [r7, #1]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffc3 	bl	8003658 <mavlink_finalize_message_chan>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <mavlink_msg_to_send_buffer>:
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
        uint8_t length = msg->len;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	73fb      	strb	r3, [r7, #15]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	2bfe      	cmp	r3, #254	; 0xfe
 80036f2:	d13a      	bne.n	800376a <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80036f8:	2305      	movs	r3, #5
 80036fa:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3301      	adds	r3, #1
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3302      	adds	r3, #2
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	7992      	ldrb	r2, [r2, #6]
 8003714:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3303      	adds	r3, #3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	79d2      	ldrb	r2, [r2, #7]
 800371e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	7a12      	ldrb	r2, [r2, #8]
 8003728:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7a5a      	ldrb	r2, [r3, #9]
 800372e:	7a99      	ldrb	r1, [r3, #10]
 8003730:	0209      	lsls	r1, r1, #8
 8003732:	430a      	orrs	r2, r1
 8003734:	7adb      	ldrb	r3, [r3, #11]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4313      	orrs	r3, r2
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3305      	adds	r3, #5
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1d98      	adds	r0, r3, #6
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f103 010c 	add.w	r1, r3, #12
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	461a      	mov	r2, r3
 8003754:	f008 f84c 	bl	800b7f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003758:	7dbb      	ldrb	r3, [r7, #22]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	78d2      	ldrb	r2, [r2, #3]
 800375e:	4413      	add	r3, r2
 8003760:	3301      	adds	r3, #1
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e06c      	b.n	8003844 <mavlink_msg_to_send_buffer+0x168>
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fe1e 	bl	80033b4 <_mav_trim_payload>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800377c:	2309      	movs	r3, #9
 800377e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	789a      	ldrb	r2, [r3, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3302      	adds	r3, #2
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	7912      	ldrb	r2, [r2, #4]
 8003798:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3303      	adds	r3, #3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	7952      	ldrb	r2, [r2, #5]
 80037a2:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	7992      	ldrb	r2, [r2, #6]
 80037ac:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3305      	adds	r3, #5
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	79d2      	ldrb	r2, [r2, #7]
 80037b6:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3306      	adds	r3, #6
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	7a12      	ldrb	r2, [r2, #8]
 80037c0:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	7a5a      	ldrb	r2, [r3, #9]
 80037c6:	7a99      	ldrb	r1, [r3, #10]
 80037c8:	0209      	lsls	r1, r1, #8
 80037ca:	430a      	orrs	r2, r1
 80037cc:	7adb      	ldrb	r3, [r3, #11]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	4313      	orrs	r3, r2
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3307      	adds	r3, #7
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	7a5a      	ldrb	r2, [r3, #9]
 80037e0:	7a99      	ldrb	r1, [r3, #10]
 80037e2:	0209      	lsls	r1, r1, #8
 80037e4:	430a      	orrs	r2, r1
 80037e6:	7adb      	ldrb	r3, [r3, #11]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	4313      	orrs	r3, r2
 80037ec:	121a      	asrs	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3308      	adds	r3, #8
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7a5a      	ldrb	r2, [r3, #9]
 80037fa:	7a99      	ldrb	r1, [r3, #10]
 80037fc:	0209      	lsls	r1, r1, #8
 80037fe:	430a      	orrs	r2, r1
 8003800:	7adb      	ldrb	r3, [r3, #11]
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	4313      	orrs	r3, r2
 8003806:	141a      	asrs	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3309      	adds	r3, #9
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 000a 	add.w	r0, r3, #10
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	4619      	mov	r1, r3
 800381e:	f007 ffe7 	bl	800b7f0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003822:	7dba      	ldrb	r2, [r7, #22]
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4413      	add	r3, r2
 8003828:	3301      	adds	r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <mavlink_msg_to_send_buffer+0x164>
 800383c:	230d      	movs	r3, #13
 800383e:	e000      	b.n	8003842 <mavlink_msg_to_send_buffer+0x166>
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29a      	uxth	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3301      	adds	r3, #1
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1c98      	adds	r0, r3, #2
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8003872:	7dfa      	ldrb	r2, [r7, #23]
 8003874:	4619      	mov	r1, r3
 8003876:	f007 ffbb 	bl	800b7f0 <memcpy>
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800387a:	7dbb      	ldrb	r3, [r7, #22]
 800387c:	b29a      	uxth	r2, r3
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	b29b      	uxth	r3, r3
 8003882:	4413      	add	r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4413      	add	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	3303      	adds	r3, #3
 8003890:	b29b      	uxth	r3, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <mavlink_msg_raw_imu_pack>:
 * @param temperature [cdegC] Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag, uint8_t id, int16_t temperature)
{
 800389a:	b5b0      	push	{r4, r5, r7, lr}
 800389c:	b08c      	sub	sp, #48	; 0x30
 800389e:	af02      	add	r7, sp, #8
 80038a0:	4603      	mov	r3, r0
 80038a2:	603a      	str	r2, [r7, #0]
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	460b      	mov	r3, r1
 80038a8:	71bb      	strb	r3, [r7, #6]
    _mav_put_int16_t(buf, 27, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RAW_IMU_LEN);
#else
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
 80038aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    packet.xacc = xacc;
 80038b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80038b6:	823b      	strh	r3, [r7, #16]
    packet.yacc = yacc;
 80038b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038bc:	827b      	strh	r3, [r7, #18]
    packet.zacc = zacc;
 80038be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038c2:	82bb      	strh	r3, [r7, #20]
    packet.xgyro = xgyro;
 80038c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038c8:	82fb      	strh	r3, [r7, #22]
    packet.ygyro = ygyro;
 80038ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ce:	833b      	strh	r3, [r7, #24]
    packet.zgyro = zgyro;
 80038d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038d4:	837b      	strh	r3, [r7, #26]
    packet.xmag = xmag;
 80038d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038da:	83bb      	strh	r3, [r7, #28]
    packet.ymag = ymag;
 80038dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038e0:	83fb      	strh	r3, [r7, #30]
    packet.zmag = zmag;
 80038e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80038e6:	843b      	strh	r3, [r7, #32]
    packet.id = id;
 80038e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    packet.temperature = temperature;
 80038f0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80038f4:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	461d      	mov	r5, r3
 80038fe:	f107 0408 	add.w	r4, r7, #8
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	6028      	str	r0, [r5, #0]
 8003906:	6069      	str	r1, [r5, #4]
 8003908:	60aa      	str	r2, [r5, #8]
 800390a:	60eb      	str	r3, [r5, #12]
 800390c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800390e:	6128      	str	r0, [r5, #16]
 8003910:	6169      	str	r1, [r5, #20]
 8003912:	61aa      	str	r2, [r5, #24]
 8003914:	7823      	ldrb	r3, [r4, #0]
 8003916:	772b      	strb	r3, [r5, #28]
#endif

    msg->msgid = MAVLINK_MSG_ID_RAW_IMU;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	f042 021b 	orr.w	r2, r2, #27
 8003920:	725a      	strb	r2, [r3, #9]
 8003922:	2200      	movs	r2, #0
 8003924:	729a      	strb	r2, [r3, #10]
 8003926:	2200      	movs	r2, #0
 8003928:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RAW_IMU_MIN_LEN, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
 800392a:	79ba      	ldrb	r2, [r7, #6]
 800392c:	79f9      	ldrb	r1, [r7, #7]
 800392e:	2390      	movs	r3, #144	; 0x90
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	231d      	movs	r3, #29
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	231a      	movs	r3, #26
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f7ff feb1 	bl	80036a0 <mavlink_finalize_message>
 800393e:	4603      	mov	r3, r0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bdb0      	pop	{r4, r5, r7, pc}

08003948 <mavlink_msg_raw_imu_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param raw_imu C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b099      	sub	sp, #100	; 0x64
 800394c:	af0e      	add	r7, sp, #56	; 0x38
 800394e:	623a      	str	r2, [r7, #32]
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003958:	460b      	mov	r3, r1
 800395a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag, raw_imu->id, raw_imu->temperature);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800396a:	b21a      	sxth	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003972:	b21d      	sxth	r5, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800397a:	b21e      	sxth	r6, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003982:	b21b      	sxth	r3, r3
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800398c:	b21c      	sxth	r4, r3
 800398e:	617c      	str	r4, [r7, #20]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003996:	b21c      	sxth	r4, r3
 8003998:	613c      	str	r4, [r7, #16]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80039a0:	fa0f fc83 	sxth.w	ip, r3
 80039a4:	4664      	mov	r4, ip
 80039a6:	60fc      	str	r4, [r7, #12]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80039ae:	fa0f fc83 	sxth.w	ip, r3
 80039b2:	4664      	mov	r4, ip
 80039b4:	60bc      	str	r4, [r7, #8]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80039bc:	fa0f fc83 	sxth.w	ip, r3
 80039c0:	4664      	mov	r4, ip
 80039c2:	607c      	str	r4, [r7, #4]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80039ca:	4664      	mov	r4, ip
 80039cc:	603c      	str	r4, [r7, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f9b3 301b 	ldrsh.w	r3, [r3, #27]
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 80039da:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80039de:	930c      	str	r3, [sp, #48]	; 0x30
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	930a      	str	r3, [sp, #40]	; 0x28
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	9308      	str	r3, [sp, #32]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	9307      	str	r3, [sp, #28]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9306      	str	r3, [sp, #24]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	9305      	str	r3, [sp, #20]
 80039fc:	9604      	str	r6, [sp, #16]
 80039fe:	9503      	str	r5, [sp, #12]
 8003a00:	9202      	str	r2, [sp, #8]
 8003a02:	e9cd 0100 	strd	r0, r1, [sp]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	4661      	mov	r1, ip
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff ff45 	bl	800389a <mavlink_msg_raw_imu_pack>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	372c      	adds	r7, #44	; 0x2c
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b088      	sub	sp, #32
 8003a1e:	af04      	add	r7, sp, #16
 8003a20:	6078      	str	r0, [r7, #4]
	MX_GPIO_Init();
 8003a22:	f000 fdeb 	bl	80045fc <MX_GPIO_Init>
	MX_I2C2_Init();
 8003a26:	f000 fe61 	bl	80046ec <MX_I2C2_Init>
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003a2a:	2364      	movs	r3, #100	; 0x64
 8003a2c:	9302      	str	r3, [sp, #8]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	f107 030f 	add.w	r3, r7, #15
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2275      	movs	r2, #117	; 0x75
 8003a3c:	21d0      	movs	r1, #208	; 0xd0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 ffee 	bl	8005a20 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b68      	cmp	r3, #104	; 0x68
 8003a48:	d15b      	bne.n	8003b02 <MPU6050_Init+0xe8>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003a4e:	2364      	movs	r3, #100	; 0x64
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	2301      	movs	r3, #1
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	f107 030e 	add.w	r3, r7, #14
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	226b      	movs	r2, #107	; 0x6b
 8003a60:	21d0      	movs	r1, #208	; 0xd0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 fee2 	bl	800582c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003a6c:	2364      	movs	r3, #100	; 0x64
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	2301      	movs	r3, #1
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	f107 030e 	add.w	r3, r7, #14
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	2219      	movs	r2, #25
 8003a7e:	21d0      	movs	r1, #208	; 0xd0
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 fed3 	bl	800582c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003a8a:	2364      	movs	r3, #100	; 0x64
 8003a8c:	9302      	str	r3, [sp, #8]
 8003a8e:	2301      	movs	r3, #1
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	f107 030e 	add.w	r3, r7, #14
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	221c      	movs	r2, #28
 8003a9c:	21d0      	movs	r1, #208	; 0xd0
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 fec4 	bl	800582c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2301      	movs	r3, #1
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	f107 030e 	add.w	r3, r7, #14
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	221b      	movs	r2, #27
 8003aba:	21d0      	movs	r1, #208	; 0xd0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f001 feb5 	bl	800582c <HAL_I2C_Mem_Write>

        // Set INT Level
        Data = 0x90;
 8003ac2:	2390      	movs	r3, #144	; 0x90
 8003ac4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &Data, 1, i2c_timeout);
 8003ac6:	2364      	movs	r3, #100	; 0x64
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	2301      	movs	r3, #1
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	f107 030e 	add.w	r3, r7, #14
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2237      	movs	r2, #55	; 0x37
 8003ad8:	21d0      	movs	r1, #208	; 0xd0
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 fea6 	bl	800582c <HAL_I2C_Mem_Write>
        // Set interrupt
        Data = 0x01;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, i2c_timeout);
 8003ae4:	2364      	movs	r3, #100	; 0x64
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	f107 030e 	add.w	r3, r7, #14
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	2238      	movs	r2, #56	; 0x38
 8003af6:	21d0      	movs	r1, #208	; 0xd0
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 fe97 	bl	800582c <HAL_I2C_Mem_Write>
        return 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <MPU6050_Init+0xea>
    }
    return 1;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	0000      	movs	r0, r0
	...

08003b10 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b094      	sub	sp, #80	; 0x50
 8003b16:	af04      	add	r7, sp, #16
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003b1c:	2364      	movs	r3, #100	; 0x64
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	230e      	movs	r3, #14
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	223b      	movs	r2, #59	; 0x3b
 8003b2e:	21d0      	movs	r1, #208	; 0xd0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 ff75 	bl	8005a20 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003b36:	7a3b      	ldrb	r3, [r7, #8]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	7a7b      	ldrb	r3, [r7, #9]
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b21a      	sxth	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003b5a:	7b3b      	ldrb	r3, [r7, #12]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	7b7b      	ldrb	r3, [r7, #13]
 8003b62:	b21b      	sxth	r3, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b21a      	sxth	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003b7a:	7c3b      	ldrb	r3, [r7, #16]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	7c7b      	ldrb	r3, [r7, #17]
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b21a      	sxth	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003b8c:	7cbb      	ldrb	r3, [r7, #18]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	b21a      	sxth	r2, r3
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b21a      	sxth	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003b9e:	7d3b      	ldrb	r3, [r7, #20]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	7d7b      	ldrb	r3, [r7, #21]
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fccc 	bl	8000554 <__aeabi_i2d>
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4bbd      	ldr	r3, [pc, #756]	; (8003eb8 <MPU6050_Read_All+0x3a8>)
 8003bc2:	f7fc fe5b 	bl	800087c <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	6839      	ldr	r1, [r7, #0]
 8003bcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fcbc 	bl	8000554 <__aeabi_i2d>
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	4bb5      	ldr	r3, [pc, #724]	; (8003eb8 <MPU6050_Read_All+0x3a8>)
 8003be2:	f7fc fe4b 	bl	800087c <__aeabi_ddiv>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fcac 	bl	8000554 <__aeabi_i2d>
 8003bfc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003ea0 <MPU6050_Read_All+0x390>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fe3b 	bl	800087c <__aeabi_ddiv>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003c10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8003ebc <MPU6050_Read_All+0x3ac>
 8003c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c24:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003ec0 <MPU6050_Read_All+0x3b0>
 8003c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc8b 	bl	8000554 <__aeabi_i2d>
 8003c3e:	a39a      	add	r3, pc, #616	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fe1a 	bl	800087c <__aeabi_ddiv>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc7b 	bl	8000554 <__aeabi_i2d>
 8003c5e:	a392      	add	r3, pc, #584	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fe0a 	bl	800087c <__aeabi_ddiv>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc6b 	bl	8000554 <__aeabi_i2d>
 8003c7e:	a38a      	add	r3, pc, #552	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fdfa 	bl	800087c <__aeabi_ddiv>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003c92:	f001 f917 	bl	8004ec4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <MPU6050_Read_All+0x3b4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc48 	bl	8000534 <__aeabi_ui2d>
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <MPU6050_Read_All+0x3b8>)
 8003caa:	f7fc fde7 	bl	800087c <__aeabi_ddiv>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003cb6:	f001 f905 	bl	8004ec4 <HAL_GetTick>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a81      	ldr	r2, [pc, #516]	; (8003ec4 <MPU6050_Read_All+0x3b4>)
 8003cbe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fc34 	bl	8000554 <__aeabi_i2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	ec43 2b10 	vmov	d0, r2, r3
 8003cf4:	f00c ffd7 	bl	8010ca6 <sqrt>
 8003cf8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d08:	f7fc fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11f      	bne.n	8003d52 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fc1b 	bl	8000554 <__aeabi_i2d>
 8003d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d22:	f7fc fdab 	bl	800087c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	ec43 2b17 	vmov	d7, r2, r3
 8003d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d32:	eef0 0a67 	vmov.f32	s1, s15
 8003d36:	f00c fe0b 	bl	8010950 <atan>
 8003d3a:	ec51 0b10 	vmov	r0, r1, d0
 8003d3e:	a35c      	add	r3, pc, #368	; (adr r3, 8003eb0 <MPU6050_Read_All+0x3a0>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fc70 	bl	8000628 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003d50:	e005      	b.n	8003d5e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d64:	425b      	negs	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fbf4 	bl	8000554 <__aeabi_i2d>
 8003d6c:	4682      	mov	sl, r0
 8003d6e:	468b      	mov	fp, r1
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbec 	bl	8000554 <__aeabi_i2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	ec43 2b11 	vmov	d1, r2, r3
 8003d84:	ec4b ab10 	vmov	d0, sl, fp
 8003d88:	f00c ff8b 	bl	8010ca2 <atan2>
 8003d8c:	ec51 0b10 	vmov	r0, r1, d0
 8003d90:	a347      	add	r3, pc, #284	; (adr r3, 8003eb0 <MPU6050_Read_All+0x3a0>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc47 	bl	8000628 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <MPU6050_Read_All+0x3bc>)
 8003da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dac:	f7fc feae 	bl	8000b0c <__aeabi_dcmplt>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <MPU6050_Read_All+0x2bc>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003dc2:	f7fc fec1 	bl	8000b48 <__aeabi_dcmpgt>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d114      	bne.n	8003df6 <MPU6050_Read_All+0x2e6>
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003dd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dd6:	f7fc feb7 	bl	8000b48 <__aeabi_dcmpgt>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <MPU6050_Read_All+0x2fc>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <MPU6050_Read_All+0x3bc>)
 8003dec:	f7fc fe8e 	bl	8000b0c <__aeabi_dcmplt>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8003df6:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <MPU6050_Read_All+0x3c4>)
 8003df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003e0a:	e014      	b.n	8003e36 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003e12:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003e16:	eeb0 1a47 	vmov.f32	s2, s14
 8003e1a:	eef0 1a67 	vmov.f32	s3, s15
 8003e1e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003e22:	482c      	ldr	r0, [pc, #176]	; (8003ed4 <MPU6050_Read_All+0x3c4>)
 8003e24:	f000 f85a 	bl	8003edc <Kalman_getAngle>
 8003e28:	eeb0 7a40 	vmov.f32	s14, s0
 8003e2c:	eef0 7a60 	vmov.f32	s15, s1
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003e3c:	4690      	mov	r8, r2
 8003e3e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003e6e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003e72:	eeb0 1a47 	vmov.f32	s2, s14
 8003e76:	eef0 1a67 	vmov.f32	s3, s15
 8003e7a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003e7e:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <MPU6050_Read_All+0x3c8>)
 8003e80:	f000 f82c 	bl	8003edc <Kalman_getAngle>
 8003e84:	eeb0 7a40 	vmov.f32	s14, s0
 8003e88:	eef0 7a60 	vmov.f32	s15, s1
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8003e92:	bf00      	nop
 8003e94:	3740      	adds	r7, #64	; 0x40
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	40cc2900 	.word	0x40cc2900
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	40606000 	.word	0x40606000
 8003eb0:	1a63c1f8 	.word	0x1a63c1f8
 8003eb4:	404ca5dc 	.word	0x404ca5dc
 8003eb8:	40d00000 	.word	0x40d00000
 8003ebc:	43aa0000 	.word	0x43aa0000
 8003ec0:	42121eb8 	.word	0x42121eb8
 8003ec4:	20000420 	.word	0x20000420
 8003ec8:	408f4000 	.word	0x408f4000
 8003ecc:	c0568000 	.word	0xc0568000
 8003ed0:	40568000 	.word	0x40568000
 8003ed4:	20000048 	.word	0x20000048
 8003ed8:	20000000 	.word	0x20000000

08003edc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b096      	sub	sp, #88	; 0x58
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	61f8      	str	r0, [r7, #28]
 8003ee4:	ed87 0b04 	vstr	d0, [r7, #16]
 8003ee8:	ed87 1b02 	vstr	d1, [r7, #8]
 8003eec:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003efa:	f7fc f9dd 	bl	80002b8 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f14:	f7fc fb88 	bl	8000628 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc f9cc 	bl	80002bc <__adddf3>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f3e:	f7fc fb73 	bl	8000628 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003f50:	f7fc f9b2 	bl	80002b8 <__aeabi_dsub>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f62:	f7fc f9a9 	bl	80002b8 <__aeabi_dsub>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc f9a2 	bl	80002bc <__adddf3>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f84:	f7fc fb50 	bl	8000628 <__aeabi_dmul>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f7fc f994 	bl	80002bc <__adddf3>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fae:	f7fc fb3b 	bl	8000628 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc f97d 	bl	80002b8 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	f7fc fb26 	bl	8000628 <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7fc f968 	bl	80002b8 <__aeabi_dsub>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	69f9      	ldr	r1, [r7, #28]
 8003fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004002:	f7fc fb11 	bl	8000628 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f955 	bl	80002bc <__adddf3>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	69f9      	ldr	r1, [r7, #28]
 8004018:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004028:	f7fc f948 	bl	80002bc <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800403a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403e:	f7fc fc1d 	bl	800087c <__aeabi_ddiv>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004054:	f7fc fc12 	bl	800087c <__aeabi_ddiv>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004066:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800406a:	f7fc f925 	bl	80002b8 <__aeabi_dsub>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800407c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004084:	f7fc fad0 	bl	8000628 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc f914 	bl	80002bc <__adddf3>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80040a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ac:	f7fc fabc 	bl	8000628 <__aeabi_dmul>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f900 	bl	80002bc <__adddf3>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80040cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80040e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040e8:	f7fc fa9e 	bl	8000628 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc f8e0 	bl	80002b8 <__aeabi_dsub>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004108:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800410c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004110:	f7fc fa8a 	bl	8000628 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4620      	mov	r0, r4
 800411a:	4629      	mov	r1, r5
 800411c:	f7fc f8cc 	bl	80002b8 <__aeabi_dsub>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8004130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004138:	f7fc fa76 	bl	8000628 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4620      	mov	r0, r4
 8004142:	4629      	mov	r1, r5
 8004144:	f7fc f8b8 	bl	80002b8 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	69f9      	ldr	r1, [r7, #28]
 800414e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8004158:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800415c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004160:	f7fc fa62 	bl	8000628 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f8a4 	bl	80002b8 <__aeabi_dsub>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	69f9      	ldr	r1, [r7, #28]
 8004176:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004180:	ec43 2b17 	vmov	d7, r2, r3
};
 8004184:	eeb0 0a47 	vmov.f32	s0, s14
 8004188:	eef0 0a67 	vmov.f32	s1, s15
 800418c:	3758      	adds	r7, #88	; 0x58
 800418e:	46bd      	mov	sp, r7
 8004190:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004194 <Data_Ready>:

uint8_t Data_Ready(){
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8004198:	2110      	movs	r1, #16
 800419a:	4803      	ldr	r0, [pc, #12]	; (80041a8 <Data_Ready+0x14>)
 800419c:	f001 f9ea 	bl	8005574 <HAL_GPIO_ReadPin>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40020400 	.word	0x40020400

080041ac <Transmit_raw_data_IMU>:

void Transmit_raw_data_IMU(MPU6050_t* Datastruct, mavlink_raw_imu_t raw_imu){
 80041ac:	b084      	sub	sp, #16
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b0e5      	sub	sp, #404	; 0x194
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80041b8:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80041bc:	6020      	str	r0, [r4, #0]
 80041be:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mavlink_message_t msg;
	uint8_t _buffer[100];
	raw_imu.id = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
	raw_imu.xacc = Datastruct->Accel_X_RAW;
 80041cc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041da:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
	raw_imu.yacc = Datastruct->Accel_Y_RAW;
 80041de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041ec:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
	raw_imu.zacc = Datastruct->Accel_Z_RAW;
 80041f0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041fe:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	raw_imu.xgyro = Datastruct->Gyro_X_RAW;
 8004202:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004206:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004210:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
	raw_imu.ygyro = Datastruct->Gyro_Y_RAW;
 8004214:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004218:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004222:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
	raw_imu.zgyro = Datastruct->Gyro_Z_RAW;
 8004226:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800422a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004234:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
	raw_imu.xmag = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
	raw_imu.ymag = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
	raw_imu.zmag = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	raw_imu.temperature = Datastruct->Temperature;
 800424a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800424e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800425c:	ee17 3a90 	vmov	r3, s15
 8004260:	b21b      	sxth	r3, r3
 8004262:	f8a7 31bf 	strh.w	r3, [r7, #447]	; 0x1bf
	raw_imu.time_usec = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	mavlink_msg_raw_imu_encode(0x01, 0x01, &msg, &raw_imu);
 8004272:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004276:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800427a:	2101      	movs	r1, #1
 800427c:	2001      	movs	r0, #1
 800427e:	f7ff fb63 	bl	8003948 <mavlink_msg_raw_imu_encode>
	uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 8004282:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fa25 	bl	80036dc <mavlink_msg_to_send_buffer>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	HAL_UART_Transmit(&huart2, _buffer, len, 100);
 8004298:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800429c:	b29a      	uxth	r2, r3
 800429e:	f107 0108 	add.w	r1, r7, #8
 80042a2:	2364      	movs	r3, #100	; 0x64
 80042a4:	4805      	ldr	r0, [pc, #20]	; (80042bc <Transmit_raw_data_IMU+0x110>)
 80042a6:	f003 f898 	bl	80073da <HAL_UART_Transmit>
}
 80042aa:	bf00      	nop
 80042ac:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80042b6:	b004      	add	sp, #16
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000690 	.word	0x20000690

080042c0 <HAL_TIM_IC_CaptureCallback>:
extern uint16_t esc_2;
extern uint16_t esc_3;
extern uint16_t esc_4;
extern uint16_t throttle;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7f1b      	ldrb	r3, [r3, #28]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d154      	bne.n	800437a <HAL_TIM_IC_CaptureCallback+0xba>
		chanel_seclect_counter++;
 80042d0:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042da:	701a      	strb	r2, [r3, #0]
		if(chanel_seclect_counter > 10)chanel_seclect_counter = 0;
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b0a      	cmp	r3, #10
 80042e2:	d902      	bls.n	80042ea <HAL_TIM_IC_CaptureCallback+0x2a>
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
		measured_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80042ea:	2104      	movs	r1, #4
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f002 ffa7 	bl	8007240 <HAL_TIM_ReadCapturedValue>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80042f6:	6013      	str	r3, [r2, #0]
		if (measured_time > 3000)chanel_seclect_counter = 0;
 80042f8:	4b23      	ldr	r3, [pc, #140]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004300:	4293      	cmp	r3, r2
 8004302:	d902      	bls.n	800430a <HAL_TIM_IC_CaptureCallback+0x4a>
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
		if(chanel_seclect_counter == 1)Chanel_1 = measured_time + 424;
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_TIM_IC_CaptureCallback+0x5e>
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800431a:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800431c:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 2)Chanel_2 = measured_time + 424;
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d105      	bne.n	8004332 <HAL_TIM_IC_CaptureCallback+0x72>
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8004330:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 3)Chanel_3 = measured_time + 424;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d105      	bne.n	8004346 <HAL_TIM_IC_CaptureCallback+0x86>
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004342:	4a14      	ldr	r2, [pc, #80]	; (8004394 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8004344:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 4)Chanel_4 = measured_time + 424;
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d105      	bne.n	800435a <HAL_TIM_IC_CaptureCallback+0x9a>
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8004358:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 5)Chanel_5 = measured_time;
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d103      	bne.n	800436a <HAL_TIM_IC_CaptureCallback+0xaa>
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8004368:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 6)Chanel_6 = measured_time;
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d103      	bne.n	800437a <HAL_TIM_IC_CaptureCallback+0xba>
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8004378:	6013      	str	r3, [r2, #0]
	}
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2000053c 	.word	0x2000053c
 8004388:	20000538 	.word	0x20000538
 800438c:	20000090 	.word	0x20000090
 8004390:	20000094 	.word	0x20000094
 8004394:	20000098 	.word	0x20000098
 8004398:	2000009c 	.word	0x2000009c
 800439c:	200000a0 	.word	0x200000a0
 80043a0:	200000a4 	.word	0x200000a4

080043a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UART2_Transmit_Lock */
  UART2_Transmit_LockHandle = osMutexNew(&UART2_Transmit_Lock_attributes);
 80043a8:	4817      	ldr	r0, [pc, #92]	; (8004408 <MX_FREERTOS_Init+0x64>)
 80043aa:	f004 f96c 	bl	8008686 <osMutexNew>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a16      	ldr	r2, [pc, #88]	; (800440c <MX_FREERTOS_Init+0x68>)
 80043b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <MX_FREERTOS_Init+0x6c>)
 80043b6:	2100      	movs	r1, #0
 80043b8:	4816      	ldr	r0, [pc, #88]	; (8004414 <MX_FREERTOS_Init+0x70>)
 80043ba:	f004 f8b7 	bl	800852c <osThreadNew>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <MX_FREERTOS_Init+0x74>)
 80043c2:	6013      	str	r3, [r2, #0]

  /* creation of _BMP180 */
  _BMP180Handle = osThreadNew(BMP180_Func, NULL, &_BMP180_attributes);
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <MX_FREERTOS_Init+0x78>)
 80043c6:	2100      	movs	r1, #0
 80043c8:	4815      	ldr	r0, [pc, #84]	; (8004420 <MX_FREERTOS_Init+0x7c>)
 80043ca:	f004 f8af 	bl	800852c <osThreadNew>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <MX_FREERTOS_Init+0x80>)
 80043d2:	6013      	str	r3, [r2, #0]

  /* creation of _MPU6050 */
  _MPU6050Handle = osThreadNew(MPU6050_Func, NULL, &_MPU6050_attributes);
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <MX_FREERTOS_Init+0x84>)
 80043d6:	2100      	movs	r1, #0
 80043d8:	4814      	ldr	r0, [pc, #80]	; (800442c <MX_FREERTOS_Init+0x88>)
 80043da:	f004 f8a7 	bl	800852c <osThreadNew>
 80043de:	4603      	mov	r3, r0
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <MX_FREERTOS_Init+0x8c>)
 80043e2:	6013      	str	r3, [r2, #0]

  /* creation of _GPS */
  _GPSHandle = osThreadNew(GPS_Func, NULL, &_GPS_attributes);
 80043e4:	4a13      	ldr	r2, [pc, #76]	; (8004434 <MX_FREERTOS_Init+0x90>)
 80043e6:	2100      	movs	r1, #0
 80043e8:	4813      	ldr	r0, [pc, #76]	; (8004438 <MX_FREERTOS_Init+0x94>)
 80043ea:	f004 f89f 	bl	800852c <osThreadNew>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a12      	ldr	r2, [pc, #72]	; (800443c <MX_FREERTOS_Init+0x98>)
 80043f2:	6013      	str	r3, [r2, #0]

  /* creation of _main */
  _mainHandle = osThreadNew(main_Func, NULL, &_main_attributes);
 80043f4:	4a12      	ldr	r2, [pc, #72]	; (8004440 <MX_FREERTOS_Init+0x9c>)
 80043f6:	2100      	movs	r1, #0
 80043f8:	4812      	ldr	r0, [pc, #72]	; (8004444 <MX_FREERTOS_Init+0xa0>)
 80043fa:	f004 f897 	bl	800852c <osThreadNew>
 80043fe:	4603      	mov	r3, r0
 8004400:	4a11      	ldr	r2, [pc, #68]	; (8004448 <MX_FREERTOS_Init+0xa4>)
 8004402:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08011468 	.word	0x08011468
 800440c:	20000554 	.word	0x20000554
 8004410:	080113b4 	.word	0x080113b4
 8004414:	0800444d 	.word	0x0800444d
 8004418:	20000540 	.word	0x20000540
 800441c:	080113d8 	.word	0x080113d8
 8004420:	08004485 	.word	0x08004485
 8004424:	20000544 	.word	0x20000544
 8004428:	080113fc 	.word	0x080113fc
 800442c:	080044e1 	.word	0x080044e1
 8004430:	20000548 	.word	0x20000548
 8004434:	08011420 	.word	0x08011420
 8004438:	0800457d 	.word	0x0800457d
 800443c:	2000054c 	.word	0x2000054c
 8004440:	08011444 	.word	0x08011444
 8004444:	080045ed 	.word	0x080045ed
 8004448:	20000550 	.word	0x20000550

0800444c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(UART2_Transmit_LockHandle, 100) == osOK){
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <StartDefaultTask+0x34>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2164      	movs	r1, #100	; 0x64
 800445a:	4618      	mov	r0, r3
 800445c:	f004 f999 	bl	8008792 <osMutexAcquire>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <StartDefaultTask+0x1e>
	  		  Mavlink_TX_Heartbeat();
 8004466:	f7fe f84b 	bl	8002500 <Mavlink_TX_Heartbeat>
	  	  }
	  	 osMutexRelease(UART2_Transmit_LockHandle);
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <StartDefaultTask+0x34>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f004 f9da 	bl	8008828 <osMutexRelease>
	  	 osDelay(10000);
 8004474:	f242 7010 	movw	r0, #10000	; 0x2710
 8004478:	f004 f8ea 	bl	8008650 <osDelay>
	  if(osMutexAcquire(UART2_Transmit_LockHandle, 100) == osOK){
 800447c:	e7ea      	b.n	8004454 <StartDefaultTask+0x8>
 800447e:	bf00      	nop
 8004480:	20000554 	.word	0x20000554

08004484 <BMP180_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP180_Func */
void BMP180_Func(void *argument)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP180_Func */
	status = BMP180_Init();
 800448c:	f7fc fdec 	bl	8001068 <BMP180_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <BMP180_Func+0x4c>)
 8004496:	701a      	strb	r2, [r3, #0]
	uint8_t oss = 2;
 8004498:	2302      	movs	r3, #2
 800449a:	73fb      	strb	r3, [r7, #15]
	BMP180_ReadCalibration();
 800449c:	f7fc fe1a 	bl	80010d4 <BMP180_ReadCalibration>
  /* Infinite loop */
  for(;;)
  {
	  temp = BMP180_Calculate_RT();
 80044a0:	f7fc ff70 	bl	8001384 <BMP180_Calculate_RT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <BMP180_Func+0x50>)
 80044a8:	6013      	str	r3, [r2, #0]
	  preasure = BMP180_Calculate_RP(oss);
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc ff95 	bl	80013dc <BMP180_Calculate_RP>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <BMP180_Func+0x54>)
 80044b6:	6013      	str	r3, [r2, #0]
	  altitude = BMP180_Calculate_Altitude(oss);
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd f81c 	bl	80014f8 <BMP180_Calculate_Altitude>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4a06      	ldr	r2, [pc, #24]	; (80044dc <BMP180_Func+0x58>)
 80044c4:	6013      	str	r3, [r2, #0]
	  osDelay(50);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f004 f8c2 	bl	8008650 <osDelay>
	  temp = BMP180_Calculate_RT();
 80044cc:	e7e8      	b.n	80044a0 <BMP180_Func+0x1c>
 80044ce:	bf00      	nop
 80044d0:	20000500 	.word	0x20000500
 80044d4:	200004f4 	.word	0x200004f4
 80044d8:	200004f8 	.word	0x200004f8
 80044dc:	200004fc 	.word	0x200004fc

080044e0 <MPU6050_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU6050_Func */
void MPU6050_Func(void *argument)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b090      	sub	sp, #64	; 0x40
 80044e4:	af06      	add	r7, sp, #24
 80044e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPU6050_Func */
	MPU6050_Init(&hi2c2);
 80044e8:	481e      	ldr	r0, [pc, #120]	; (8004564 <MPU6050_Func+0x84>)
 80044ea:	f7ff fa96 	bl	8003a1a <MPU6050_Init>
  /* Infinite loop */
  for(;;)
  {
	  mavlink_raw_imu_t raw_imu;
	  status_mpu = Data_Ready();
 80044ee:	f7ff fe51 	bl	8004194 <Data_Ready>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <MPU6050_Func+0x88>)
 80044f8:	701a      	strb	r2, [r3, #0]
	  if(Data_Ready()){
 80044fa:	f7ff fe4b 	bl	8004194 <Data_Ready>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02b      	beq.n	800455c <MPU6050_Func+0x7c>
	  	  MPU6050_Read_All(&hi2c2, &data);
 8004504:	4919      	ldr	r1, [pc, #100]	; (800456c <MPU6050_Func+0x8c>)
 8004506:	4817      	ldr	r0, [pc, #92]	; (8004564 <MPU6050_Func+0x84>)
 8004508:	f7ff fb02 	bl	8003b10 <MPU6050_Read_All>
	  	  roll  = data.KalmanAngleX;
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <MPU6050_Func+0x8c>)
 800450e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004512:	4917      	ldr	r1, [pc, #92]	; (8004570 <MPU6050_Func+0x90>)
 8004514:	e9c1 2300 	strd	r2, r3, [r1]
	  	  pitch = data.KalmanAngleY;
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <MPU6050_Func+0x8c>)
 800451a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800451e:	4915      	ldr	r1, [pc, #84]	; (8004574 <MPU6050_Func+0x94>)
 8004520:	e9c1 2300 	strd	r2, r3, [r1]
	  	  if(osMutexAcquire(UART2_Transmit_LockHandle, 1000) == osOK){
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <MPU6050_Func+0x98>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800452c:	4618      	mov	r0, r3
 800452e:	f004 f930 	bl	8008792 <osMutexAcquire>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <MPU6050_Func+0x72>
	  		  Transmit_raw_data_IMU(&data, raw_imu);
 8004538:	466d      	mov	r5, sp
 800453a:	f107 0414 	add.w	r4, r7, #20
 800453e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	702b      	strb	r3, [r5, #0]
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MPU6050_Func+0x8c>)
 800454e:	f7ff fe2d 	bl	80041ac <Transmit_raw_data_IMU>
	  	  }
	  	 osMutexRelease(UART2_Transmit_LockHandle);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <MPU6050_Func+0x98>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f004 f966 	bl	8008828 <osMutexRelease>
	  }

    osDelay(50);
 800455c:	2032      	movs	r0, #50	; 0x32
 800455e:	f004 f877 	bl	8008650 <osDelay>
  {
 8004562:	e7c4      	b.n	80044ee <MPU6050_Func+0xe>
 8004564:	200005ac 	.word	0x200005ac
 8004568:	200004f0 	.word	0x200004f0
 800456c:	20000488 	.word	0x20000488
 8004570:	200004e0 	.word	0x200004e0
 8004574:	200004e8 	.word	0x200004e8
 8004578:	20000554 	.word	0x20000554

0800457c <GPS_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Func */
void GPS_Func(void *argument)
{
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	b08d      	sub	sp, #52	; 0x34
 8004580:	af0a      	add	r7, sp, #40	; 0x28
 8004582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Func */
	  MX_USART2_UART_Init();
 8004584:	f000 fb60 	bl	8004c48 <MX_USART2_UART_Init>
	  MX_USART1_UART_Init();
 8004588:	f000 fb34 	bl	8004bf4 <MX_USART1_UART_Init>
	  //MX_USB_DEVICE_Init();
	  GPS_Init();
 800458c:	f7fd ffaa 	bl	80024e4 <GPS_Init>

  /* Infinite loop */
  for(;;)
  {
	  if(flag_gps == 1){
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <GPS_Func+0x64>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d11f      	bne.n	80045d8 <GPS_Func+0x5c>
		  if(osMutexAcquire(UART2_Transmit_LockHandle, 1000) == osOK){
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <GPS_Func+0x68>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 f8f6 	bl	8008792 <osMutexAcquire>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <GPS_Func+0x4c>
			  Transmit_mavlink_data_GPS(data_GPS);
 80045ac:	4e0e      	ldr	r6, [pc, #56]	; (80045e8 <GPS_Func+0x6c>)
 80045ae:	466d      	mov	r5, sp
 80045b0:	f106 0410 	add.w	r4, r6, #16
 80045b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80045c4:	f7fe f9f8 	bl	80029b8 <Transmit_mavlink_data_GPS>
		  }
		osMutexRelease(UART2_Transmit_LockHandle);
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <GPS_Func+0x68>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 f92b 	bl	8008828 <osMutexRelease>
		flag_gps = 0;
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <GPS_Func+0x64>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(200);
 80045d8:	20c8      	movs	r0, #200	; 0xc8
 80045da:	f004 f839 	bl	8008650 <osDelay>
	  if(flag_gps == 1){
 80045de:	e7d7      	b.n	8004590 <GPS_Func+0x14>
 80045e0:	20000501 	.word	0x20000501
 80045e4:	20000554 	.word	0x20000554
 80045e8:	20000504 	.word	0x20000504

080045ec <main_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_Func */
void main_Func(void *argument)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN main_Func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f004 f82b 	bl	8008650 <osDelay>
 80045fa:	e7fb      	b.n	80045f4 <main_Func+0x8>

080045fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	609a      	str	r2, [r3, #8]
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <MX_GPIO_Init+0x8c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b19      	ldr	r3, [pc, #100]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a14      	ldr	r2, [pc, #80]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	4a0d      	ldr	r2, [pc, #52]	; (8004688 <MX_GPIO_Init+0x8c>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6313      	str	r3, [r2, #48]	; 0x30
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <MX_GPIO_Init+0x8c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004666:	2310      	movs	r3, #16
 8004668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800466e:	2302      	movs	r3, #2
 8004670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	4619      	mov	r1, r3
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <MX_GPIO_Init+0x90>)
 800467a:	f000 fdf7 	bl	800526c <HAL_GPIO_Init>

}
 800467e:	bf00      	nop
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800
 800468c:	40020400 	.word	0x40020400

08004690 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <MX_I2C1_Init+0x50>)
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <MX_I2C1_Init+0x54>)
 8004698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <MX_I2C1_Init+0x50>)
 800469c:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <MX_I2C1_Init+0x58>)
 800469e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046bc:	2200      	movs	r2, #0
 80046be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046cc:	4804      	ldr	r0, [pc, #16]	; (80046e0 <MX_I2C1_Init+0x50>)
 80046ce:	f000 ff69 	bl	80055a4 <HAL_I2C_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046d8:	f000 f94a 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000558 	.word	0x20000558
 80046e4:	40005400 	.word	0x40005400
 80046e8:	000186a0 	.word	0x000186a0

080046ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <MX_I2C2_Init+0x50>)
 80046f2:	4a13      	ldr	r2, [pc, #76]	; (8004740 <MX_I2C2_Init+0x54>)
 80046f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <MX_I2C2_Init+0x50>)
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <MX_I2C2_Init+0x58>)
 80046fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <MX_I2C2_Init+0x50>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <MX_I2C2_Init+0x50>)
 8004704:	2200      	movs	r2, #0
 8004706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <MX_I2C2_Init+0x50>)
 800470a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800470e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <MX_I2C2_Init+0x50>)
 8004712:	2200      	movs	r2, #0
 8004714:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <MX_I2C2_Init+0x50>)
 8004718:	2200      	movs	r2, #0
 800471a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <MX_I2C2_Init+0x50>)
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <MX_I2C2_Init+0x50>)
 8004724:	2200      	movs	r2, #0
 8004726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004728:	4804      	ldr	r0, [pc, #16]	; (800473c <MX_I2C2_Init+0x50>)
 800472a:	f000 ff3b 	bl	80055a4 <HAL_I2C_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004734:	f000 f91c 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200005ac 	.word	0x200005ac
 8004740:	40005800 	.word	0x40005800
 8004744:	000186a0 	.word	0x000186a0

08004748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <HAL_I2C_MspInit+0x108>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d12c      	bne.n	80047c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4a38      	ldr	r2, [pc, #224]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 8004774:	f043 0302 	orr.w	r3, r3, #2
 8004778:	6313      	str	r3, [r2, #48]	; 0x30
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004786:	23c0      	movs	r3, #192	; 0xc0
 8004788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800478a:	2312      	movs	r3, #18
 800478c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004796:	2304      	movs	r3, #4
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479a:	f107 031c 	add.w	r3, r7, #28
 800479e:	4619      	mov	r1, r3
 80047a0:	482d      	ldr	r0, [pc, #180]	; (8004858 <HAL_I2C_MspInit+0x110>)
 80047a2:	f000 fd63 	bl	800526c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a29      	ldr	r2, [pc, #164]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80047c2:	e041      	b.n	8004848 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a24      	ldr	r2, [pc, #144]	; (800485c <HAL_I2C_MspInit+0x114>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d13c      	bne.n	8004848 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047f0:	2312      	movs	r3, #18
 80047f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f8:	2303      	movs	r3, #3
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80047fc:	2304      	movs	r3, #4
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	4814      	ldr	r0, [pc, #80]	; (8004858 <HAL_I2C_MspInit+0x110>)
 8004808:	f000 fd30 	bl	800526c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800480c:	2308      	movs	r3, #8
 800480e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004810:	2312      	movs	r3, #18
 8004812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004818:	2303      	movs	r3, #3
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800481c:	2309      	movs	r3, #9
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	4619      	mov	r1, r3
 8004826:	480c      	ldr	r0, [pc, #48]	; (8004858 <HAL_I2C_MspInit+0x110>)
 8004828:	f000 fd20 	bl	800526c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4a07      	ldr	r2, [pc, #28]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 8004836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800483a:	6413      	str	r3, [r2, #64]	; 0x40
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_I2C_MspInit+0x10c>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	bf00      	nop
 800484a:	3730      	adds	r7, #48	; 0x30
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40005400 	.word	0x40005400
 8004854:	40023800 	.word	0x40023800
 8004858:	40020400 	.word	0x40020400
 800485c:	40005800 	.word	0x40005800

08004860 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a04      	ldr	r2, [pc, #16]	; (800487c <HAL_UART_RxCpltCallback+0x1c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_UART_RxCpltCallback+0x14>
 8004870:	f7fd fe74 	bl	800255c <GPS_UART_CallBack>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	2000064c 	.word	0x2000064c

08004880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004884:	f000 fab8 	bl	8004df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004888:	f000 f80a 	bl	80048a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800488c:	f7ff feb6 	bl	80045fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004890:	f003 fe02 	bl	8008498 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004894:	f7ff fd86 	bl	80043a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004898:	f003 fe22 	bl	80084e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800489c:	e7fe      	b.n	800489c <main+0x1c>
	...

080048a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b094      	sub	sp, #80	; 0x50
 80048a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048a6:	f107 0320 	add.w	r3, r7, #32
 80048aa:	2230      	movs	r2, #48	; 0x30
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f006 ffac 	bl	800b80c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048b4:	f107 030c 	add.w	r3, r7, #12
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	2300      	movs	r3, #0
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <SystemClock_Config+0xc8>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <SystemClock_Config+0xc8>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6413      	str	r3, [r2, #64]	; 0x40
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <SystemClock_Config+0xc8>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e0:	2300      	movs	r3, #0
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <SystemClock_Config+0xcc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a20      	ldr	r2, [pc, #128]	; (800496c <SystemClock_Config+0xcc>)
 80048ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <SystemClock_Config+0xcc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048fc:	2302      	movs	r3, #2
 80048fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004900:	2301      	movs	r3, #1
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004904:	2310      	movs	r3, #16
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004908:	2302      	movs	r3, #2
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800490c:	2300      	movs	r3, #0
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004910:	2310      	movs	r3, #16
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8004914:	2390      	movs	r3, #144	; 0x90
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004918:	2302      	movs	r3, #2
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800491c:	2304      	movs	r3, #4
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004920:	f107 0320 	add.w	r3, r7, #32
 8004924:	4618      	mov	r0, r3
 8004926:	f001 ff2b 	bl	8006780 <HAL_RCC_OscConfig>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004930:	f000 f81e 	bl	8004970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004934:	230f      	movs	r3, #15
 8004936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004938:	2302      	movs	r3, #2
 800493a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f002 f98d 	bl	8006c70 <HAL_RCC_ClockConfig>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800495c:	f000 f808 	bl	8004970 <Error_Handler>
  }
}
 8004960:	bf00      	nop
 8004962:	3750      	adds	r7, #80	; 0x50
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000

08004970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004974:	b672      	cpsid	i
}
 8004976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004978:	e7fe      	b.n	8004978 <Error_Handler+0x8>
	...

0800497c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_MspInit+0x54>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_MspInit+0x54>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <HAL_MspInit+0x54>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_MspInit+0x54>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_MspInit+0x54>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	; 0x40
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_MspInit+0x54>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049ba:	2200      	movs	r2, #0
 80049bc:	210f      	movs	r1, #15
 80049be:	f06f 0001 	mvn.w	r0, #1
 80049c2:	f000 fb8a 	bl	80050da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d8:	e7fe      	b.n	80049d8 <NMI_Handler+0x4>

080049da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049de:	e7fe      	b.n	80049de <HardFault_Handler+0x4>

080049e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <MemManage_Handler+0x4>

080049e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <BusFault_Handler+0x4>

080049ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <UsageFault_Handler+0x4>

080049f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a04:	f000 fa4a 	bl	8004e9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a08:	f005 fd62 	bl	800a4d0 <xTaskGetSchedulerState>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a12:	f006 fc49 	bl	800b2a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <TIM2_IRQHandler+0x10>)
 8004a22:	f002 fb05 	bl	8007030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000604 	.word	0x20000604

08004a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <USART1_IRQHandler+0x10>)
 8004a36:	f002 fd93 	bl	8007560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000064c 	.word	0x2000064c

08004a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return 1;
 8004a48:	2301      	movs	r3, #1
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <_kill>:

int _kill(int pid, int sig)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a5e:	f006 fe9d 	bl	800b79c <__errno>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2216      	movs	r2, #22
 8004a66:	601a      	str	r2, [r3, #0]
  return -1;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_exit>:

void _exit (int status)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffe7 	bl	8004a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a86:	e7fe      	b.n	8004a86 <_exit+0x12>

08004a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e00a      	b.n	8004ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a9a:	f3af 8000 	nop.w
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	60ba      	str	r2, [r7, #8]
 8004aa6:	b2ca      	uxtb	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3301      	adds	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dbf0      	blt.n	8004a9a <_read+0x12>
  }

  return len;
 8004ab8:	687b      	ldr	r3, [r7, #4]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e009      	b.n	8004ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	60ba      	str	r2, [r7, #8]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	dbf1      	blt.n	8004ad4 <_write+0x12>
  }
  return len;
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_close>:

int _close(int file)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b22:	605a      	str	r2, [r3, #4]
  return 0;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <_isatty>:

int _isatty(int file)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b3a:	2301      	movs	r3, #1
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <_sbrk+0x5c>)
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <_sbrk+0x60>)
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <_sbrk+0x64>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <_sbrk+0x64>)
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <_sbrk+0x68>)
 8004b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <_sbrk+0x64>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d207      	bcs.n	8004ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b94:	f006 fe02 	bl	800b79c <__errno>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	e009      	b.n	8004bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <_sbrk+0x64>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <_sbrk+0x64>)
 8004bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20020000 	.word	0x20020000
 8004bc4:	00000400 	.word	0x00000400
 8004bc8:	20000600 	.word	0x20000600
 8004bcc:	20005038 	.word	0x20005038

08004bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <SystemInit+0x20>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <SystemInit+0x20>)
 8004bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <MX_USART1_UART_Init+0x50>)
 8004bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c1a:	220c      	movs	r2, #12
 8004c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_USART1_UART_Init+0x4c>)
 8004c2c:	f002 fb88 	bl	8007340 <HAL_UART_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c36:	f7ff fe9b 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	2000064c 	.word	0x2000064c
 8004c44:	40011000 	.word	0x40011000

08004c48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <MX_USART2_UART_Init+0x50>)
 8004c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c70:	220c      	movs	r2, #12
 8004c72:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c80:	4804      	ldr	r0, [pc, #16]	; (8004c94 <MX_USART2_UART_Init+0x4c>)
 8004c82:	f002 fb5d 	bl	8007340 <HAL_UART_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8004c8c:	f7ff fe70 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000690 	.word	0x20000690
 8004c98:	40004400 	.word	0x40004400

08004c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a36      	ldr	r2, [pc, #216]	; (8004d94 <HAL_UART_MspInit+0xf8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d135      	bne.n	8004d2a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	4a34      	ldr	r2, [pc, #208]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cce:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004cf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d08:	2307      	movs	r3, #7
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4619      	mov	r1, r3
 8004d12:	4822      	ldr	r0, [pc, #136]	; (8004d9c <HAL_UART_MspInit+0x100>)
 8004d14:	f000 faaa 	bl	800526c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2105      	movs	r1, #5
 8004d1c:	2025      	movs	r0, #37	; 0x25
 8004d1e:	f000 f9dc 	bl	80050da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d22:	2025      	movs	r0, #37	; 0x25
 8004d24:	f000 f9f5 	bl	8005112 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004d28:	e030      	b.n	8004d8c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <HAL_UART_MspInit+0x104>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d12b      	bne.n	8004d8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
 8004d44:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d60:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <HAL_UART_MspInit+0xfc>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d6c:	230c      	movs	r3, #12
 8004d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d70:	2302      	movs	r3, #2
 8004d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	4619      	mov	r1, r3
 8004d86:	4805      	ldr	r0, [pc, #20]	; (8004d9c <HAL_UART_MspInit+0x100>)
 8004d88:	f000 fa70 	bl	800526c <HAL_GPIO_Init>
}
 8004d8c:	bf00      	nop
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40020000 	.word	0x40020000
 8004da0:	40004400 	.word	0x40004400

08004da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004da8:	480d      	ldr	r0, [pc, #52]	; (8004de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004daa:	490e      	ldr	r1, [pc, #56]	; (8004de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004db0:	e002      	b.n	8004db8 <LoopCopyDataInit>

08004db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004db6:	3304      	adds	r3, #4

08004db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dbc:	d3f9      	bcc.n	8004db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dbe:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004dc0:	4c0b      	ldr	r4, [pc, #44]	; (8004df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dc4:	e001      	b.n	8004dca <LoopFillZerobss>

08004dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc8:	3204      	adds	r2, #4

08004dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dcc:	d3fb      	bcc.n	8004dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dce:	f7ff feff 	bl	8004bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dd2:	f006 fce9 	bl	800b7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dd6:	f7ff fd53 	bl	8004880 <main>
  bx  lr    
 8004dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004de4:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8004de8:	080119d0 	.word	0x080119d0
  ldr r2, =_sbss
 8004dec:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8004df0:	20005038 	.word	0x20005038

08004df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004df4:	e7fe      	b.n	8004df4 <ADC_IRQHandler>
	...

08004df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <HAL_Init+0x40>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <HAL_Init+0x40>)
 8004e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_Init+0x40>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <HAL_Init+0x40>)
 8004e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_Init+0x40>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_Init+0x40>)
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e20:	2003      	movs	r0, #3
 8004e22:	f000 f94f 	bl	80050c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e26:	200f      	movs	r0, #15
 8004e28:	f000 f808 	bl	8004e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e2c:	f7ff fda6 	bl	800497c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00

08004e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e44:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_InitTick+0x54>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <HAL_InitTick+0x58>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f967 	bl	800512e <HAL_SYSTICK_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00e      	b.n	8004e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d80a      	bhi.n	8004e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e70:	2200      	movs	r2, #0
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f000 f92f 	bl	80050da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e7c:	4a06      	ldr	r2, [pc, #24]	; (8004e98 <HAL_InitTick+0x5c>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200000a8 	.word	0x200000a8
 8004e94:	200000b0 	.word	0x200000b0
 8004e98:	200000ac 	.word	0x200000ac

08004e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_IncTick+0x20>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_IncTick+0x24>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_IncTick+0x24>)
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	200000b0 	.word	0x200000b0
 8004ec0:	200006d4 	.word	0x200006d4

08004ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_GetTick+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	200006d4 	.word	0x200006d4

08004edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ee4:	f7ff ffee 	bl	8004ec4 <HAL_GetTick>
 8004ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d005      	beq.n	8004f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_Delay+0x44>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f02:	bf00      	nop
 8004f04:	f7ff ffde 	bl	8004ec4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d8f7      	bhi.n	8004f04 <HAL_Delay+0x28>
  {
  }
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200000b0 	.word	0x200000b0

08004f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f40:	4013      	ands	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60d3      	str	r3, [r2, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__NVIC_GetPriorityGrouping+0x18>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 0307 	and.w	r3, r3, #7
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	db0b      	blt.n	8004fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	4907      	ldr	r1, [pc, #28]	; (8004fc0 <__NVIC_EnableIRQ+0x38>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2001      	movs	r0, #1
 8004faa:	fa00 f202 	lsl.w	r2, r0, r2
 8004fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	e000e100 	.word	0xe000e100

08004fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db0a      	blt.n	8004fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	490c      	ldr	r1, [pc, #48]	; (8005010 <__NVIC_SetPriority+0x4c>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fec:	e00a      	b.n	8005004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4908      	ldr	r1, [pc, #32]	; (8005014 <__NVIC_SetPriority+0x50>)
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	440b      	add	r3, r1
 8005002:	761a      	strb	r2, [r3, #24]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000e100 	.word	0xe000e100
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f1c3 0307 	rsb	r3, r3, #7
 8005032:	2b04      	cmp	r3, #4
 8005034:	bf28      	it	cs
 8005036:	2304      	movcs	r3, #4
 8005038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3304      	adds	r3, #4
 800503e:	2b06      	cmp	r3, #6
 8005040:	d902      	bls.n	8005048 <NVIC_EncodePriority+0x30>
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3b03      	subs	r3, #3
 8005046:	e000      	b.n	800504a <NVIC_EncodePriority+0x32>
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	401a      	ands	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005060:	f04f 31ff 	mov.w	r1, #4294967295
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43d9      	mvns	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005070:	4313      	orrs	r3, r2
         );
}
 8005072:	4618      	mov	r0, r3
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005090:	d301      	bcc.n	8005096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005092:	2301      	movs	r3, #1
 8005094:	e00f      	b.n	80050b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <SysTick_Config+0x40>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3b01      	subs	r3, #1
 800509c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800509e:	210f      	movs	r1, #15
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	f7ff ff8e 	bl	8004fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <SysTick_Config+0x40>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <SysTick_Config+0x40>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010

080050c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff29 	bl	8004f24 <__NVIC_SetPriorityGrouping>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	4603      	mov	r3, r0
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050ec:	f7ff ff3e 	bl	8004f6c <__NVIC_GetPriorityGrouping>
 80050f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f7ff ff8e 	bl	8005018 <NVIC_EncodePriority>
 80050fc:	4602      	mov	r2, r0
 80050fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff5d 	bl	8004fc4 <__NVIC_SetPriority>
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff31 	bl	8004f88 <__NVIC_EnableIRQ>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ffa2 	bl	8005080 <SysTick_Config>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005154:	f7ff feb6 	bl	8004ec4 <HAL_GetTick>
 8005158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d008      	beq.n	8005178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2280      	movs	r2, #128	; 0x80
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e052      	b.n	800521e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0216 	bic.w	r2, r2, #22
 8005186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <HAL_DMA_Abort+0x62>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0208 	bic.w	r2, r2, #8
 80051b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c8:	e013      	b.n	80051f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ca:	f7ff fe7b 	bl	8004ec4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b05      	cmp	r3, #5
 80051d6:	d90c      	bls.n	80051f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2203      	movs	r2, #3
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e015      	b.n	800521e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e4      	bne.n	80051ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	223f      	movs	r2, #63	; 0x3f
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d004      	beq.n	8005244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e00c      	b.n	800525e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2205      	movs	r2, #5
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	; 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e159      	b.n	800553c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	f040 8148 	bne.w	8005536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d005      	beq.n	80052be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d130      	bne.n	8005320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	2203      	movs	r2, #3
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f4:	2201      	movs	r2, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 0201 	and.w	r2, r3, #1
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b03      	cmp	r3, #3
 800532a:	d017      	beq.n	800535c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d123      	bne.n	80053b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	08da      	lsrs	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3208      	adds	r2, #8
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	220f      	movs	r2, #15
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	08da      	lsrs	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3208      	adds	r2, #8
 80053aa:	69b9      	ldr	r1, [r7, #24]
 80053ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0203 	and.w	r2, r3, #3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a2 	beq.w	8005536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b57      	ldr	r3, [pc, #348]	; (8005554 <HAL_GPIO_Init+0x2e8>)
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	4a56      	ldr	r2, [pc, #344]	; (8005554 <HAL_GPIO_Init+0x2e8>)
 80053fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005400:	6453      	str	r3, [r2, #68]	; 0x44
 8005402:	4b54      	ldr	r3, [pc, #336]	; (8005554 <HAL_GPIO_Init+0x2e8>)
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800540e:	4a52      	ldr	r2, [pc, #328]	; (8005558 <HAL_GPIO_Init+0x2ec>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a49      	ldr	r2, [pc, #292]	; (800555c <HAL_GPIO_Init+0x2f0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d019      	beq.n	800546e <HAL_GPIO_Init+0x202>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a48      	ldr	r2, [pc, #288]	; (8005560 <HAL_GPIO_Init+0x2f4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_GPIO_Init+0x1fe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a47      	ldr	r2, [pc, #284]	; (8005564 <HAL_GPIO_Init+0x2f8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00d      	beq.n	8005466 <HAL_GPIO_Init+0x1fa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a46      	ldr	r2, [pc, #280]	; (8005568 <HAL_GPIO_Init+0x2fc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <HAL_GPIO_Init+0x1f6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a45      	ldr	r2, [pc, #276]	; (800556c <HAL_GPIO_Init+0x300>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d101      	bne.n	800545e <HAL_GPIO_Init+0x1f2>
 800545a:	2304      	movs	r3, #4
 800545c:	e008      	b.n	8005470 <HAL_GPIO_Init+0x204>
 800545e:	2307      	movs	r3, #7
 8005460:	e006      	b.n	8005470 <HAL_GPIO_Init+0x204>
 8005462:	2303      	movs	r3, #3
 8005464:	e004      	b.n	8005470 <HAL_GPIO_Init+0x204>
 8005466:	2302      	movs	r3, #2
 8005468:	e002      	b.n	8005470 <HAL_GPIO_Init+0x204>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <HAL_GPIO_Init+0x204>
 800546e:	2300      	movs	r3, #0
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	f002 0203 	and.w	r2, r2, #3
 8005476:	0092      	lsls	r2, r2, #2
 8005478:	4093      	lsls	r3, r2
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005480:	4935      	ldr	r1, [pc, #212]	; (8005558 <HAL_GPIO_Init+0x2ec>)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	3302      	adds	r3, #2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800548e:	4b38      	ldr	r3, [pc, #224]	; (8005570 <HAL_GPIO_Init+0x304>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <HAL_GPIO_Init+0x304>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054b8:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <HAL_GPIO_Init+0x304>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <HAL_GPIO_Init+0x304>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054e2:	4b23      	ldr	r3, [pc, #140]	; (8005570 <HAL_GPIO_Init+0x304>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_GPIO_Init+0x304>)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800550c:	4b18      	ldr	r3, [pc, #96]	; (8005570 <HAL_GPIO_Init+0x304>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <HAL_GPIO_Init+0x304>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b0f      	cmp	r3, #15
 8005540:	f67f aea2 	bls.w	8005288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800
 8005558:	40013800 	.word	0x40013800
 800555c:	40020000 	.word	0x40020000
 8005560:	40020400 	.word	0x40020400
 8005564:	40020800 	.word	0x40020800
 8005568:	40020c00 	.word	0x40020c00
 800556c:	40021000 	.word	0x40021000
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e12b      	b.n	800580e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff f8bc 	bl	8004748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005608:	f001 fcea 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 800560c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4a81      	ldr	r2, [pc, #516]	; (8005818 <HAL_I2C_Init+0x274>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d807      	bhi.n	8005628 <HAL_I2C_Init+0x84>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a80      	ldr	r2, [pc, #512]	; (800581c <HAL_I2C_Init+0x278>)
 800561c:	4293      	cmp	r3, r2
 800561e:	bf94      	ite	ls
 8005620:	2301      	movls	r3, #1
 8005622:	2300      	movhi	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e006      	b.n	8005636 <HAL_I2C_Init+0x92>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a7d      	ldr	r2, [pc, #500]	; (8005820 <HAL_I2C_Init+0x27c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	bf94      	ite	ls
 8005630:	2301      	movls	r3, #1
 8005632:	2300      	movhi	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e0e7      	b.n	800580e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a78      	ldr	r2, [pc, #480]	; (8005824 <HAL_I2C_Init+0x280>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0c9b      	lsrs	r3, r3, #18
 8005648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a6a      	ldr	r2, [pc, #424]	; (8005818 <HAL_I2C_Init+0x274>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d802      	bhi.n	8005678 <HAL_I2C_Init+0xd4>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	3301      	adds	r3, #1
 8005676:	e009      	b.n	800568c <HAL_I2C_Init+0xe8>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	4a69      	ldr	r2, [pc, #420]	; (8005828 <HAL_I2C_Init+0x284>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	3301      	adds	r3, #1
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	430b      	orrs	r3, r1
 8005692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800569e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	495c      	ldr	r1, [pc, #368]	; (8005818 <HAL_I2C_Init+0x274>)
 80056a8:	428b      	cmp	r3, r1
 80056aa:	d819      	bhi.n	80056e0 <HAL_I2C_Init+0x13c>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1e59      	subs	r1, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056c0:	400b      	ands	r3, r1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_I2C_Init+0x138>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1e59      	subs	r1, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056da:	e051      	b.n	8005780 <HAL_I2C_Init+0x1dc>
 80056dc:	2304      	movs	r3, #4
 80056de:	e04f      	b.n	8005780 <HAL_I2C_Init+0x1dc>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <HAL_I2C_Init+0x168>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1e58      	subs	r0, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	440b      	add	r3, r1
 80056f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e012      	b.n	8005732 <HAL_I2C_Init+0x18e>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1e58      	subs	r0, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6859      	ldr	r1, [r3, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	0099      	lsls	r1, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005722:	3301      	adds	r3, #1
 8005724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005728:	2b00      	cmp	r3, #0
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_Init+0x196>
 8005736:	2301      	movs	r3, #1
 8005738:	e022      	b.n	8005780 <HAL_I2C_Init+0x1dc>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10e      	bne.n	8005760 <HAL_I2C_Init+0x1bc>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1e58      	subs	r0, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	440b      	add	r3, r1
 8005750:	fbb0 f3f3 	udiv	r3, r0, r3
 8005754:	3301      	adds	r3, #1
 8005756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	e00f      	b.n	8005780 <HAL_I2C_Init+0x1dc>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1e58      	subs	r0, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	0099      	lsls	r1, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	fbb0 f3f3 	udiv	r3, r0, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	6809      	ldr	r1, [r1, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6911      	ldr	r1, [r2, #16]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	000186a0 	.word	0x000186a0
 800581c:	001e847f 	.word	0x001e847f
 8005820:	003d08ff 	.word	0x003d08ff
 8005824:	431bde83 	.word	0x431bde83
 8005828:	10624dd3 	.word	0x10624dd3

0800582c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4603      	mov	r3, r0
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	460b      	mov	r3, r1
 8005840:	813b      	strh	r3, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005846:	f7ff fb3d 	bl	8004ec4 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b20      	cmp	r3, #32
 8005856:	f040 80d9 	bne.w	8005a0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2319      	movs	r3, #25
 8005860:	2201      	movs	r2, #1
 8005862:	496d      	ldr	r1, [pc, #436]	; (8005a18 <HAL_I2C_Mem_Write+0x1ec>)
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fdad 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	e0cc      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_I2C_Mem_Write+0x56>
 800587e:	2302      	movs	r3, #2
 8005880:	e0c5      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d007      	beq.n	80058a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2221      	movs	r2, #33	; 0x21
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a4d      	ldr	r2, [pc, #308]	; (8005a1c <HAL_I2C_Mem_Write+0x1f0>)
 80058e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ea:	88f8      	ldrh	r0, [r7, #6]
 80058ec:	893a      	ldrh	r2, [r7, #8]
 80058ee:	8979      	ldrh	r1, [r7, #10]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fbe4 	bl	80060c8 <I2C_RequestMemoryWrite>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d052      	beq.n	80059ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e081      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fe2e 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	2b04      	cmp	r3, #4
 8005920:	d107      	bne.n	8005932 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e06b      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d11b      	bne.n	80059ac <HAL_I2C_Mem_Write+0x180>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d017      	beq.n	80059ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1aa      	bne.n	800590a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fe1a 	bl	80065f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d107      	bne.n	80059dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e016      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	00100002 	.word	0x00100002
 8005a1c:	ffff0000 	.word	0xffff0000

08005a20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08c      	sub	sp, #48	; 0x30
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	460b      	mov	r3, r1
 8005a34:	813b      	strh	r3, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a3a:	f7ff fa43 	bl	8004ec4 <HAL_GetTick>
 8005a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	f040 8208 	bne.w	8005e5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2319      	movs	r3, #25
 8005a54:	2201      	movs	r2, #1
 8005a56:	497b      	ldr	r1, [pc, #492]	; (8005c44 <HAL_I2C_Mem_Read+0x224>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fcb3 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
 8005a66:	e1fb      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_I2C_Mem_Read+0x56>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e1f4      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d007      	beq.n	8005a9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2222      	movs	r2, #34	; 0x22
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a5b      	ldr	r2, [pc, #364]	; (8005c48 <HAL_I2C_Mem_Read+0x228>)
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ade:	88f8      	ldrh	r0, [r7, #6]
 8005ae0:	893a      	ldrh	r2, [r7, #8]
 8005ae2:	8979      	ldrh	r1, [r7, #10]
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb80 	bl	80061f4 <I2C_RequestMemoryRead>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e1b0      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b06:	2300      	movs	r3, #0
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e184      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d11b      	bne.n	8005b6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e164      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d11b      	bne.n	8005bae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	e144      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bc4:	e138      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	f200 80f1 	bhi.w	8005db2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d123      	bne.n	8005c20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fd49 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e139      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c1e:	e10b      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d14e      	bne.n	8005cc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4906      	ldr	r1, [pc, #24]	; (8005c4c <HAL_I2C_Mem_Read+0x22c>)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fbc6 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e10e      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
 8005c42:	bf00      	nop
 8005c44:	00100002 	.word	0x00100002
 8005c48:	ffff0000 	.word	0xffff0000
 8005c4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc4:	e0b8      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4966      	ldr	r1, [pc, #408]	; (8005e68 <HAL_I2C_Mem_Read+0x448>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fb77 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0bf      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2200      	movs	r2, #0
 8005d2a:	494f      	ldr	r1, [pc, #316]	; (8005e68 <HAL_I2C_Mem_Read+0x448>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb49 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e091      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db0:	e042      	b.n	8005e38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fc5c 	bl	8006674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e04c      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d118      	bne.n	8005e38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f aec2 	bne.w	8005bc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00010004 	.word	0x00010004

08005e6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7ff f822 	bl	8004ec4 <HAL_GetTick>
 8005e80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 8111 	bne.w	80060b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2319      	movs	r3, #25
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4988      	ldr	r1, [pc, #544]	; (80060c0 <HAL_I2C_IsDeviceReady+0x254>)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa90 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e104      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_I2C_IsDeviceReady+0x50>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0fd      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d007      	beq.n	8005ee2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2224      	movs	r2, #36	; 0x24
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a70      	ldr	r2, [pc, #448]	; (80060c4 <HAL_I2C_IsDeviceReady+0x258>)
 8005f04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fa4e 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3c:	d103      	bne.n	8005f46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e0b6      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f4a:	897b      	ldrh	r3, [r7, #10]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f5a:	f7fe ffb3 	bl	8004ec4 <HAL_GetTick>
 8005f5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f8e:	e025      	b.n	8005fdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f90:	f7fe ff98 	bl	8004ec4 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d302      	bcc.n	8005fa6 <HAL_I2C_IsDeviceReady+0x13a>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	22a0      	movs	r2, #160	; 0xa0
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2ba0      	cmp	r3, #160	; 0xa0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_I2C_IsDeviceReady+0x188>
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_I2C_IsDeviceReady+0x188>
 8005fee:	7dbb      	ldrb	r3, [r7, #22]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0cd      	beq.n	8005f90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d129      	bne.n	800605e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006018:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2319      	movs	r3, #25
 8006036:	2201      	movs	r2, #1
 8006038:	4921      	ldr	r1, [pc, #132]	; (80060c0 <HAL_I2C_IsDeviceReady+0x254>)
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f9c2 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e036      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e02c      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006076:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2319      	movs	r3, #25
 800607e:	2201      	movs	r2, #1
 8006080:	490f      	ldr	r1, [pc, #60]	; (80060c0 <HAL_I2C_IsDeviceReady+0x254>)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f99e 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e012      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	3301      	adds	r3, #1
 8006096:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	f4ff af32 	bcc.w	8005f06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	00100002 	.word	0x00100002
 80060c4:	ffff0000 	.word	0xffff0000

080060c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	817b      	strh	r3, [r7, #10]
 80060da:	460b      	mov	r3, r1
 80060dc:	813b      	strh	r3, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f960 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006118:	d103      	bne.n	8006122 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e05f      	b.n	80061e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	492d      	ldr	r1, [pc, #180]	; (80061f0 <I2C_RequestMemoryWrite+0x128>)
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f998 	bl	8006472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e04c      	b.n	80061e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa02 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	2b04      	cmp	r3, #4
 8006178:	d107      	bne.n	800618a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e02b      	b.n	80061e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d105      	bne.n	80061a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	611a      	str	r2, [r3, #16]
 800619e:	e021      	b.n	80061e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061a0:	893b      	ldrh	r3, [r7, #8]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b0:	6a39      	ldr	r1, [r7, #32]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f9dc 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00d      	beq.n	80061da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d107      	bne.n	80061d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e005      	b.n	80061e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061da:	893b      	ldrh	r3, [r7, #8]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	00010002 	.word	0x00010002

080061f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4603      	mov	r3, r0
 8006204:	817b      	strh	r3, [r7, #10]
 8006206:	460b      	mov	r3, r1
 8006208:	813b      	strh	r3, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2200      	movs	r2, #0
 8006236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f8c2 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006254:	d103      	bne.n	800625e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e0aa      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	4952      	ldr	r1, [pc, #328]	; (80063c0 <I2C_RequestMemoryRead+0x1cc>)
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f8fa 	bl	8006472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e097      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f964 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e076      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062d0:	893b      	ldrh	r3, [r7, #8]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]
 80062da:	e021      	b.n	8006320 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062dc:	893b      	ldrh	r3, [r7, #8]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ec:	6a39      	ldr	r1, [r7, #32]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f93e 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d107      	bne.n	8006312 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e050      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006322:	6a39      	ldr	r1, [r7, #32]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f923 	bl	8006570 <I2C_WaitOnTXEFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00d      	beq.n	800634c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	2b04      	cmp	r3, #4
 8006336:	d107      	bne.n	8006348 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006346:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e035      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2200      	movs	r2, #0
 8006364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f82b 	bl	80063c4 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d103      	bne.n	800638c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e013      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006390:	897b      	ldrh	r3, [r7, #10]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	4906      	ldr	r1, [pc, #24]	; (80063c0 <I2C_RequestMemoryRead+0x1cc>)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f863 	bl	8006472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	00010002 	.word	0x00010002

080063c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d4:	e025      	b.n	8006422 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d021      	beq.n	8006422 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fe fd71 	bl	8004ec4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d116      	bne.n	8006422 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e023      	b.n	800646a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10d      	bne.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x84>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	43da      	mvns	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	e00c      	b.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	43da      	mvns	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4013      	ands	r3, r2
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d0b6      	beq.n	80063d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006480:	e051      	b.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006490:	d123      	bne.n	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e046      	b.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d021      	beq.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e2:	f7fe fcef 	bl	8004ec4 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d116      	bne.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e020      	b.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10c      	bne.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	43da      	mvns	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e00b      	b.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	43da      	mvns	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4013      	ands	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d18d      	bne.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800657c:	e02d      	b.n	80065da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f8ce 	bl	8006720 <I2C_IsAcknowledgeFailed>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e02d      	b.n	80065ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d021      	beq.n	80065da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006596:	f7fe fc95 	bl	8004ec4 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d116      	bne.n	80065da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e007      	b.n	80065ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	2b80      	cmp	r3, #128	; 0x80
 80065e6:	d1ca      	bne.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065fe:	e02d      	b.n	800665c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f88d 	bl	8006720 <I2C_IsAcknowledgeFailed>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e02d      	b.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d021      	beq.n	800665c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006618:	f7fe fc54 	bl	8004ec4 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d116      	bne.n	800665c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e007      	b.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d1ca      	bne.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006680:	e042      	b.n	8006708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b10      	cmp	r3, #16
 800668e:	d119      	bne.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0210 	mvn.w	r2, #16
 8006698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e029      	b.n	8006718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c4:	f7fe fbfe 	bl	8004ec4 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e007      	b.n	8006718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d1b5      	bne.n	8006682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d11b      	bne.n	8006770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e267      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d075      	beq.n	800688a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800679e:	4b88      	ldr	r3, [pc, #544]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d00c      	beq.n	80067c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067aa:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d112      	bne.n	80067dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067b6:	4b82      	ldr	r3, [pc, #520]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c2:	d10b      	bne.n	80067dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c4:	4b7e      	ldr	r3, [pc, #504]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d05b      	beq.n	8006888 <HAL_RCC_OscConfig+0x108>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d157      	bne.n	8006888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e242      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e4:	d106      	bne.n	80067f4 <HAL_RCC_OscConfig+0x74>
 80067e6:	4b76      	ldr	r3, [pc, #472]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a75      	ldr	r2, [pc, #468]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e01d      	b.n	8006830 <HAL_RCC_OscConfig+0xb0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067fc:	d10c      	bne.n	8006818 <HAL_RCC_OscConfig+0x98>
 80067fe:	4b70      	ldr	r3, [pc, #448]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6f      	ldr	r2, [pc, #444]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	4b6d      	ldr	r3, [pc, #436]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a6c      	ldr	r2, [pc, #432]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	e00b      	b.n	8006830 <HAL_RCC_OscConfig+0xb0>
 8006818:	4b69      	ldr	r3, [pc, #420]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a68      	ldr	r2, [pc, #416]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800681e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	4b66      	ldr	r3, [pc, #408]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800682a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d013      	beq.n	8006860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe fb44 	bl	8004ec4 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006840:	f7fe fb40 	bl	8004ec4 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e207      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006852:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0xc0>
 800685e:	e014      	b.n	800688a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006860:	f7fe fb30 	bl	8004ec4 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006868:	f7fe fb2c 	bl	8004ec4 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e1f3      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687a:	4b51      	ldr	r3, [pc, #324]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0xe8>
 8006886:	e000      	b.n	800688a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d063      	beq.n	800695e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d11c      	bne.n	80068e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ae:	4b44      	ldr	r3, [pc, #272]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d116      	bne.n	80068e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ba:	4b41      	ldr	r3, [pc, #260]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_RCC_OscConfig+0x152>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d001      	beq.n	80068d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e1c7      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d2:	4b3b      	ldr	r3, [pc, #236]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4937      	ldr	r1, [pc, #220]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	e03a      	b.n	800695e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d020      	beq.n	8006932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f0:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <HAL_RCC_OscConfig+0x244>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fe fae5 	bl	8004ec4 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068fe:	f7fe fae1 	bl	8004ec4 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e1a8      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006910:	4b2b      	ldr	r3, [pc, #172]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691c:	4b28      	ldr	r3, [pc, #160]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	4925      	ldr	r1, [pc, #148]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 800692c:	4313      	orrs	r3, r2
 800692e:	600b      	str	r3, [r1, #0]
 8006930:	e015      	b.n	800695e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <HAL_RCC_OscConfig+0x244>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fe fac4 	bl	8004ec4 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006940:	f7fe fac0 	bl	8004ec4 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e187      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006952:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d036      	beq.n	80069d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d016      	beq.n	80069a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_RCC_OscConfig+0x248>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fe faa4 	bl	8004ec4 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006980:	f7fe faa0 	bl	8004ec4 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e167      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_RCC_OscConfig+0x240>)
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0x200>
 800699e:	e01b      	b.n	80069d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069a0:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <HAL_RCC_OscConfig+0x248>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a6:	f7fe fa8d 	bl	8004ec4 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ac:	e00e      	b.n	80069cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ae:	f7fe fa89 	bl	8004ec4 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d907      	bls.n	80069cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e150      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
 80069c0:	40023800 	.word	0x40023800
 80069c4:	42470000 	.word	0x42470000
 80069c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069cc:	4b88      	ldr	r3, [pc, #544]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 80069ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1ea      	bne.n	80069ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8097 	beq.w	8006b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ea:	4b81      	ldr	r3, [pc, #516]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10f      	bne.n	8006a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	4b7d      	ldr	r3, [pc, #500]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a7c      	ldr	r2, [pc, #496]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
 8006a06:	4b7a      	ldr	r3, [pc, #488]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a16:	4b77      	ldr	r3, [pc, #476]	; (8006bf4 <HAL_RCC_OscConfig+0x474>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d118      	bne.n	8006a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a22:	4b74      	ldr	r3, [pc, #464]	; (8006bf4 <HAL_RCC_OscConfig+0x474>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a73      	ldr	r2, [pc, #460]	; (8006bf4 <HAL_RCC_OscConfig+0x474>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a2e:	f7fe fa49 	bl	8004ec4 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a36:	f7fe fa45 	bl	8004ec4 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e10c      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a48:	4b6a      	ldr	r3, [pc, #424]	; (8006bf4 <HAL_RCC_OscConfig+0x474>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d106      	bne.n	8006a6a <HAL_RCC_OscConfig+0x2ea>
 8006a5c:	4b64      	ldr	r3, [pc, #400]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	4a63      	ldr	r2, [pc, #396]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	6713      	str	r3, [r2, #112]	; 0x70
 8006a68:	e01c      	b.n	8006aa4 <HAL_RCC_OscConfig+0x324>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d10c      	bne.n	8006a8c <HAL_RCC_OscConfig+0x30c>
 8006a72:	4b5f      	ldr	r3, [pc, #380]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4a5e      	ldr	r2, [pc, #376]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7e:	4b5c      	ldr	r3, [pc, #368]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a82:	4a5b      	ldr	r2, [pc, #364]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	6713      	str	r3, [r2, #112]	; 0x70
 8006a8a:	e00b      	b.n	8006aa4 <HAL_RCC_OscConfig+0x324>
 8006a8c:	4b58      	ldr	r3, [pc, #352]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a57      	ldr	r2, [pc, #348]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
 8006a98:	4b55      	ldr	r3, [pc, #340]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	4a54      	ldr	r2, [pc, #336]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	f023 0304 	bic.w	r3, r3, #4
 8006aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aac:	f7fe fa0a 	bl	8004ec4 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab2:	e00a      	b.n	8006aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab4:	f7fe fa06 	bl	8004ec4 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e0cb      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aca:	4b49      	ldr	r3, [pc, #292]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0ee      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x334>
 8006ad6:	e014      	b.n	8006b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad8:	f7fe f9f4 	bl	8004ec4 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fe f9f0 	bl	8004ec4 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e0b5      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af6:	4b3e      	ldr	r3, [pc, #248]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1ee      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d105      	bne.n	8006b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b08:	4b39      	ldr	r3, [pc, #228]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	4a38      	ldr	r2, [pc, #224]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80a1 	beq.w	8006c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b1e:	4b34      	ldr	r3, [pc, #208]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d05c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d141      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b32:	4b31      	ldr	r3, [pc, #196]	; (8006bf8 <HAL_RCC_OscConfig+0x478>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fe f9c4 	bl	8004ec4 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fe f9c0 	bl	8004ec4 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e087      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b52:	4b27      	ldr	r3, [pc, #156]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	019b      	lsls	r3, r3, #6
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	3b01      	subs	r3, #1
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	061b      	lsls	r3, r3, #24
 8006b82:	491b      	ldr	r1, [pc, #108]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b88:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <HAL_RCC_OscConfig+0x478>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8e:	f7fe f999 	bl	8004ec4 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b96:	f7fe f995 	bl	8004ec4 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e05c      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba8:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x416>
 8006bb4:	e054      	b.n	8006c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_RCC_OscConfig+0x478>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fe f982 	bl	8004ec4 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fe f97e 	bl	8004ec4 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e045      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x444>
 8006be2:	e03d      	b.n	8006c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d107      	bne.n	8006bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e038      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	40007000 	.word	0x40007000
 8006bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <HAL_RCC_OscConfig+0x4ec>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d028      	beq.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d121      	bne.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d11a      	bne.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d111      	bne.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	3b01      	subs	r3, #1
 8006c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d107      	bne.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023800 	.word	0x40023800

08006c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0cc      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c84:	4b68      	ldr	r3, [pc, #416]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d90c      	bls.n	8006cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c92:	4b65      	ldr	r3, [pc, #404]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0b8      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d020      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc4:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a58      	ldr	r2, [pc, #352]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cdc:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4a52      	ldr	r2, [pc, #328]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce8:	4b50      	ldr	r3, [pc, #320]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	494d      	ldr	r1, [pc, #308]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d044      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0e:	4b47      	ldr	r3, [pc, #284]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d119      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07f      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d003      	beq.n	8006d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e06f      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d3e:	4b3b      	ldr	r3, [pc, #236]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e067      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d4e:	4b37      	ldr	r3, [pc, #220]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f023 0203 	bic.w	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4934      	ldr	r1, [pc, #208]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d60:	f7fe f8b0 	bl	8004ec4 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d68:	f7fe f8ac 	bl	8004ec4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e04f      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 020c 	and.w	r2, r3, #12
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1eb      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d90:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d20c      	bcs.n	8006db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <HAL_RCC_ClockConfig+0x1b8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e032      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc4:	4b19      	ldr	r3, [pc, #100]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4916      	ldr	r1, [pc, #88]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	490e      	ldr	r1, [pc, #56]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006df6:	f000 f821 	bl	8006e3c <HAL_RCC_GetSysClockFreq>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	490a      	ldr	r1, [pc, #40]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006e08:	5ccb      	ldrb	r3, [r1, r3]
 8006e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <HAL_RCC_ClockConfig+0x1c8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe f810 	bl	8004e3c <HAL_InitTick>

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40023c00 	.word	0x40023c00
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	08011478 	.word	0x08011478
 8006e34:	200000a8 	.word	0x200000a8
 8006e38:	200000ac 	.word	0x200000ac

08006e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b090      	sub	sp, #64	; 0x40
 8006e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e54:	4b59      	ldr	r3, [pc, #356]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 030c 	and.w	r3, r3, #12
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d00d      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x40>
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	f200 80a1 	bhi.w	8006fa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_RCC_GetSysClockFreq+0x34>
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d003      	beq.n	8006e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e6e:	e09b      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e70:	4b53      	ldr	r3, [pc, #332]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e74:	e09b      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e76:	4b53      	ldr	r3, [pc, #332]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e7a:	e098      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e7c:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e86:	4b4d      	ldr	r3, [pc, #308]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d028      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e92:	4b4a      	ldr	r3, [pc, #296]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	2200      	movs	r2, #0
 8006e9a:	623b      	str	r3, [r7, #32]
 8006e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4b47      	ldr	r3, [pc, #284]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ea8:	fb03 f201 	mul.w	r2, r3, r1
 8006eac:	2300      	movs	r3, #0
 8006eae:	fb00 f303 	mul.w	r3, r0, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4a43      	ldr	r2, [pc, #268]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006eb6:	fba0 1202 	umull	r1, r2, r0, r2
 8006eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec2:	4413      	add	r3, r2
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec8:	2200      	movs	r2, #0
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	61fa      	str	r2, [r7, #28]
 8006ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ed6:	f7f9 feef 	bl	8000cb8 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4613      	mov	r3, r2
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee2:	e053      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee4:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	099b      	lsrs	r3, r3, #6
 8006eea:	2200      	movs	r2, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	617a      	str	r2, [r7, #20]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ef6:	f04f 0b00 	mov.w	fp, #0
 8006efa:	4652      	mov	r2, sl
 8006efc:	465b      	mov	r3, fp
 8006efe:	f04f 0000 	mov.w	r0, #0
 8006f02:	f04f 0100 	mov.w	r1, #0
 8006f06:	0159      	lsls	r1, r3, #5
 8006f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f0c:	0150      	lsls	r0, r2, #5
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	ebb2 080a 	subs.w	r8, r2, sl
 8006f16:	eb63 090b 	sbc.w	r9, r3, fp
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f2e:	ebb2 0408 	subs.w	r4, r2, r8
 8006f32:	eb63 0509 	sbc.w	r5, r3, r9
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	00eb      	lsls	r3, r5, #3
 8006f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f44:	00e2      	lsls	r2, r4, #3
 8006f46:	4614      	mov	r4, r2
 8006f48:	461d      	mov	r5, r3
 8006f4a:	eb14 030a 	adds.w	r3, r4, sl
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	eb45 030b 	adc.w	r3, r5, fp
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f62:	4629      	mov	r1, r5
 8006f64:	028b      	lsls	r3, r1, #10
 8006f66:	4621      	mov	r1, r4
 8006f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	028a      	lsls	r2, r1, #10
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	2200      	movs	r2, #0
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	60fa      	str	r2, [r7, #12]
 8006f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f80:	f7f9 fe9a 	bl	8000cb8 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4613      	mov	r3, r2
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	3301      	adds	r3, #1
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fa6:	e002      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006faa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3740      	adds	r7, #64	; 0x40
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	017d7840 	.word	0x017d7840

08006fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fce:	681b      	ldr	r3, [r3, #0]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	200000a8 	.word	0x200000a8

08006fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fe4:	f7ff fff0 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0a9b      	lsrs	r3, r3, #10
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4903      	ldr	r1, [pc, #12]	; (8007004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	08011488 	.word	0x08011488

08007008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800700c:	f7ff ffdc 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0b5b      	lsrs	r3, r3, #13
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4903      	ldr	r1, [pc, #12]	; (800702c <HAL_RCC_GetPCLK2Freq+0x24>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	08011488 	.word	0x08011488

08007030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b02      	cmp	r3, #2
 8007044:	d122      	bne.n	800708c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d11b      	bne.n	800708c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0202 	mvn.w	r2, #2
 800705c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fd f924 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8007078:	e005      	b.n	8007086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f92e 	bl	80072dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f935 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b04      	cmp	r3, #4
 8007098:	d122      	bne.n	80070e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d11b      	bne.n	80070e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0204 	mvn.w	r2, #4
 80070b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2202      	movs	r2, #2
 80070b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fd f8fa 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 80070cc:	e005      	b.n	80070da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f904 	bl	80072dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f90b 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d122      	bne.n	8007134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d11b      	bne.n	8007134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0208 	mvn.w	r2, #8
 8007104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2204      	movs	r2, #4
 800710a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fd f8d0 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8da 	bl	80072dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8e1 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b10      	cmp	r3, #16
 8007140:	d122      	bne.n	8007188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d11b      	bne.n	8007188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0210 	mvn.w	r2, #16
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2208      	movs	r2, #8
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fd f8a6 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8b0 	bl	80072dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8b7 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	d10e      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0201 	mvn.w	r2, #1
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f88a 	bl	80072c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d10e      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b80      	cmp	r3, #128	; 0x80
 80071ce:	d107      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8a6 	bl	800732c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d10e      	bne.n	800720c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d107      	bne.n	800720c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f87c 	bl	8007304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b20      	cmp	r3, #32
 8007218:	d10e      	bne.n	8007238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b20      	cmp	r3, #32
 8007226:	d107      	bne.n	8007238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0220 	mvn.w	r2, #32
 8007230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f870 	bl	8007318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b0c      	cmp	r3, #12
 8007252:	d831      	bhi.n	80072b8 <HAL_TIM_ReadCapturedValue+0x78>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	08007291 	.word	0x08007291
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072b9 	.word	0x080072b9
 8007268:	080072b9 	.word	0x080072b9
 800726c:	0800729b 	.word	0x0800729b
 8007270:	080072b9 	.word	0x080072b9
 8007274:	080072b9 	.word	0x080072b9
 8007278:	080072b9 	.word	0x080072b9
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072b9 	.word	0x080072b9
 8007284:	080072b9 	.word	0x080072b9
 8007288:	080072b9 	.word	0x080072b9
 800728c:	080072af 	.word	0x080072af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	60fb      	str	r3, [r7, #12]

      break;
 8007298:	e00f      	b.n	80072ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	60fb      	str	r3, [r7, #12]

      break;
 80072a2:	e00a      	b.n	80072ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072aa:	60fb      	str	r3, [r7, #12]

      break;
 80072ac:	e005      	b.n	80072ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	60fb      	str	r3, [r7, #12]

      break;
 80072b6:	e000      	b.n	80072ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80072b8:	bf00      	nop
  }

  return tmpreg;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e03f      	b.n	80073d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fd fc98 	bl	8004c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fddf 	bl	8007f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08a      	sub	sp, #40	; 0x28
 80073de:	af02      	add	r7, sp, #8
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d17c      	bne.n	80074f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_UART_Transmit+0x2c>
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e075      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_UART_Transmit+0x3e>
 8007414:	2302      	movs	r3, #2
 8007416:	e06e      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742e:	f7fd fd49 	bl	8004ec4 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d108      	bne.n	800745c <HAL_UART_Transmit+0x82>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	e003      	b.n	8007464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800746c:	e02a      	b.n	80074c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fb1f 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e036      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e007      	b.n	80074b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1cf      	bne.n	800746e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 faef 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e006      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	4613      	mov	r3, r2
 800750a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b20      	cmp	r3, #32
 8007516:	d11d      	bne.n	8007554 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_UART_Receive_IT+0x26>
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e016      	b.n	8007556 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_UART_Receive_IT+0x38>
 8007532:	2302      	movs	r3, #2
 8007534:	e00f      	b.n	8007556 <HAL_UART_Receive_IT+0x58>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	461a      	mov	r2, r3
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fb24 	bl	8007b98 <UART_Start_Receive_IT>
 8007550:	4603      	mov	r3, r0
 8007552:	e000      	b.n	8007556 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007554:	2302      	movs	r3, #2
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b0ba      	sub	sp, #232	; 0xe8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800759e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc07 	bl	8007dd2 <UART_Receive_IT>
      return;
 80075c4:	e256      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80de 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80d1 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f043 0201 	orr.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
 800763e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f043 0204 	orr.w	r2, r3, #4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800766e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0208 	orr.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 81ed 	beq.w	8007a6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb92 	bl	8007dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <HAL_UART_IRQHandler+0x17a>
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04f      	beq.n	800777a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa9a 	bl	8007c14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d141      	bne.n	8007772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800771a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d9      	bne.n	80076ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	2b00      	cmp	r3, #0
 8007740:	d013      	beq.n	800776a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_UART_IRQHandler+0x3dc>)
 8007748:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	4618      	mov	r0, r3
 8007750:	f7fd fd69 	bl	8005226 <HAL_DMA_Abort_IT>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d016      	beq.n	8007788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	e00e      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f990 	bl	8007a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007770:	e00a      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f98c 	bl	8007a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e006      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f988 	bl	8007a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007786:	e170      	b.n	8007a6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	bf00      	nop
    return;
 800778a:	e16e      	b.n	8007a6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 814a 	bne.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8143 	beq.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 813c 	beq.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	f040 80b4 	bne.w	8007940 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8140 	beq.w	8007a6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f6:	429a      	cmp	r2, r3
 80077f8:	f080 8139 	bcs.w	8007a6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007802:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780e:	f000 8088 	beq.w	8007922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800783e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800784a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1d9      	bne.n	8007812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800786e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800788a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e1      	bne.n	800785e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e3      	bne.n	800789a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f2:	f023 0310 	bic.w	r3, r3, #16
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007904:	65ba      	str	r2, [r7, #88]	; 0x58
 8007906:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800790a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	4618      	mov	r0, r3
 800791e:	f7fd fc12 	bl	8005146 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800792a:	b29b      	uxth	r3, r3
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8b6 	bl	8007aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007938:	e099      	b.n	8007a6e <HAL_UART_IRQHandler+0x50e>
 800793a:	bf00      	nop
 800793c:	08007cdb 	.word	0x08007cdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 808b 	beq.w	8007a72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800795c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8086 	beq.w	8007a72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800798a:	647a      	str	r2, [r7, #68]	; 0x44
 800798c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	623b      	str	r3, [r7, #32]
   return(result);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079c2:	633a      	str	r2, [r7, #48]	; 0x30
 80079c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e3      	bne.n	800799e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a08:	61fa      	str	r2, [r7, #28]
 8007a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	617b      	str	r3, [r7, #20]
   return(result);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e3      	bne.n	80079e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f83e 	bl	8007aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a28:	e023      	b.n	8007a72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_UART_IRQHandler+0x4ea>
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f95d 	bl	8007d02 <UART_Transmit_IT>
    return;
 8007a48:	e014      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00e      	beq.n	8007a74 <HAL_UART_IRQHandler+0x514>
 8007a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f99d 	bl	8007da2 <UART_EndTransmit_IT>
    return;
 8007a68:	e004      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
    return;
 8007a6a:	bf00      	nop
 8007a6c:	e002      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
      return;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
      return;
 8007a72:	bf00      	nop
  }
}
 8007a74:	37e8      	adds	r7, #232	; 0xe8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop

08007a7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b090      	sub	sp, #64	; 0x40
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007acc:	e050      	b.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d04c      	beq.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d007      	beq.n	8007aec <UART_WaitOnFlagUntilTimeout+0x30>
 8007adc:	f7fd f9f2 	bl	8004ec4 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d241      	bcs.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b0c:	637a      	str	r2, [r7, #52]	; 0x34
 8007b0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3314      	adds	r3, #20
 8007b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b40:	623a      	str	r2, [r7, #32]
 8007b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e00f      	b.n	8007b90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d09f      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3740      	adds	r7, #64	; 0x40
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	88fa      	ldrh	r2, [r7, #6]
 8007bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2222      	movs	r2, #34	; 0x22
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0220 	orr.w	r2, r2, #32
 8007c04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b095      	sub	sp, #84	; 0x54
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c3c:	643a      	str	r2, [r7, #64]	; 0x40
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e5      	bne.n	8007c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3314      	adds	r3, #20
 8007c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e5      	bne.n	8007c50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d119      	bne.n	8007cc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f023 0310 	bic.w	r3, r3, #16
 8007ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cac:	61ba      	str	r2, [r7, #24]
 8007cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6979      	ldr	r1, [r7, #20]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cce:	bf00      	nop
 8007cd0:	3754      	adds	r7, #84	; 0x54
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fecb 	bl	8007a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b21      	cmp	r3, #33	; 0x21
 8007d14:	d13e      	bne.n	8007d94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1e:	d114      	bne.n	8007d4a <UART_Transmit_IT+0x48>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d110      	bne.n	8007d4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	1c9a      	adds	r2, r3, #2
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	621a      	str	r2, [r3, #32]
 8007d48:	e008      	b.n	8007d5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	1c59      	adds	r1, r3, #1
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6211      	str	r1, [r2, #32]
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10f      	bne.n	8007d90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fe5a 	bl	8007a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b08c      	sub	sp, #48	; 0x30
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b22      	cmp	r3, #34	; 0x22
 8007de4:	f040 80ab 	bne.w	8007f3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d117      	bne.n	8007e22 <UART_Receive_IT+0x50>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d113      	bne.n	8007e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	1c9a      	adds	r2, r3, #2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e20:	e026      	b.n	8007e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	d007      	beq.n	8007e46 <UART_Receive_IT+0x74>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <UART_Receive_IT+0x82>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e008      	b.n	8007e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d15a      	bne.n	8007f3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0220 	bic.w	r2, r2, #32
 8007e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d135      	bne.n	8007f30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f023 0310 	bic.w	r3, r3, #16
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eea:	623a      	str	r2, [r7, #32]
 8007eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	69f9      	ldr	r1, [r7, #28]
 8007ef0:	6a3a      	ldr	r2, [r7, #32]
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d10a      	bne.n	8007f22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fdbb 	bl	8007aa4 <HAL_UARTEx_RxEventCallback>
 8007f2e:	e002      	b.n	8007f36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fc fc95 	bl	8004860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e002      	b.n	8007f40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3730      	adds	r7, #48	; 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f4c:	b0c0      	sub	sp, #256	; 0x100
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f64:	68d9      	ldr	r1, [r3, #12]
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	ea40 0301 	orr.w	r3, r0, r1
 8007f70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fa0:	f021 010c 	bic.w	r1, r1, #12
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc2:	6999      	ldr	r1, [r3, #24]
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	ea40 0301 	orr.w	r3, r0, r1
 8007fce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b8f      	ldr	r3, [pc, #572]	; (8008214 <UART_SetConfig+0x2cc>)
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d005      	beq.n	8007fe8 <UART_SetConfig+0xa0>
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b8d      	ldr	r3, [pc, #564]	; (8008218 <UART_SetConfig+0x2d0>)
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d104      	bne.n	8007ff2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fe8:	f7ff f80e 	bl	8007008 <HAL_RCC_GetPCLK2Freq>
 8007fec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ff0:	e003      	b.n	8007ffa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ff2:	f7fe fff5 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 8007ff6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008004:	f040 810c 	bne.w	8008220 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800c:	2200      	movs	r2, #0
 800800e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008012:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008016:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800801a:	4622      	mov	r2, r4
 800801c:	462b      	mov	r3, r5
 800801e:	1891      	adds	r1, r2, r2
 8008020:	65b9      	str	r1, [r7, #88]	; 0x58
 8008022:	415b      	adcs	r3, r3
 8008024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008026:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800802a:	4621      	mov	r1, r4
 800802c:	eb12 0801 	adds.w	r8, r2, r1
 8008030:	4629      	mov	r1, r5
 8008032:	eb43 0901 	adc.w	r9, r3, r1
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800804a:	4690      	mov	r8, r2
 800804c:	4699      	mov	r9, r3
 800804e:	4623      	mov	r3, r4
 8008050:	eb18 0303 	adds.w	r3, r8, r3
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008058:	462b      	mov	r3, r5
 800805a:	eb49 0303 	adc.w	r3, r9, r3
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800806e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008076:	460b      	mov	r3, r1
 8008078:	18db      	adds	r3, r3, r3
 800807a:	653b      	str	r3, [r7, #80]	; 0x50
 800807c:	4613      	mov	r3, r2
 800807e:	eb42 0303 	adc.w	r3, r2, r3
 8008082:	657b      	str	r3, [r7, #84]	; 0x54
 8008084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008088:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800808c:	f7f8 fe14 	bl	8000cb8 <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b61      	ldr	r3, [pc, #388]	; (800821c <UART_SetConfig+0x2d4>)
 8008096:	fba3 2302 	umull	r2, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	011c      	lsls	r4, r3, #4
 800809e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	1891      	adds	r1, r2, r2
 80080b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80080b8:	415b      	adcs	r3, r3
 80080ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080c0:	4641      	mov	r1, r8
 80080c2:	eb12 0a01 	adds.w	sl, r2, r1
 80080c6:	4649      	mov	r1, r9
 80080c8:	eb43 0b01 	adc.w	fp, r3, r1
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080e0:	4692      	mov	sl, r2
 80080e2:	469b      	mov	fp, r3
 80080e4:	4643      	mov	r3, r8
 80080e6:	eb1a 0303 	adds.w	r3, sl, r3
 80080ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080ee:	464b      	mov	r3, r9
 80080f0:	eb4b 0303 	adc.w	r3, fp, r3
 80080f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800810c:	460b      	mov	r3, r1
 800810e:	18db      	adds	r3, r3, r3
 8008110:	643b      	str	r3, [r7, #64]	; 0x40
 8008112:	4613      	mov	r3, r2
 8008114:	eb42 0303 	adc.w	r3, r2, r3
 8008118:	647b      	str	r3, [r7, #68]	; 0x44
 800811a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800811e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008122:	f7f8 fdc9 	bl	8000cb8 <__aeabi_uldivmod>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4611      	mov	r1, r2
 800812c:	4b3b      	ldr	r3, [pc, #236]	; (800821c <UART_SetConfig+0x2d4>)
 800812e:	fba3 2301 	umull	r2, r3, r3, r1
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	2264      	movs	r2, #100	; 0x64
 8008136:	fb02 f303 	mul.w	r3, r2, r3
 800813a:	1acb      	subs	r3, r1, r3
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008142:	4b36      	ldr	r3, [pc, #216]	; (800821c <UART_SetConfig+0x2d4>)
 8008144:	fba3 2302 	umull	r2, r3, r3, r2
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008150:	441c      	add	r4, r3
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800815c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008160:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	63b9      	str	r1, [r7, #56]	; 0x38
 800816c:	415b      	adcs	r3, r3
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008174:	4641      	mov	r1, r8
 8008176:	1851      	adds	r1, r2, r1
 8008178:	6339      	str	r1, [r7, #48]	; 0x30
 800817a:	4649      	mov	r1, r9
 800817c:	414b      	adcs	r3, r1
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800818c:	4659      	mov	r1, fp
 800818e:	00cb      	lsls	r3, r1, #3
 8008190:	4651      	mov	r1, sl
 8008192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008196:	4651      	mov	r1, sl
 8008198:	00ca      	lsls	r2, r1, #3
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	4603      	mov	r3, r0
 80081a0:	4642      	mov	r2, r8
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081a8:	464b      	mov	r3, r9
 80081aa:	460a      	mov	r2, r1
 80081ac:	eb42 0303 	adc.w	r3, r2, r3
 80081b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081c8:	460b      	mov	r3, r1
 80081ca:	18db      	adds	r3, r3, r3
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ce:	4613      	mov	r3, r2
 80081d0:	eb42 0303 	adc.w	r3, r2, r3
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081de:	f7f8 fd6b 	bl	8000cb8 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4b0d      	ldr	r3, [pc, #52]	; (800821c <UART_SetConfig+0x2d4>)
 80081e8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	2164      	movs	r1, #100	; 0x64
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	3332      	adds	r3, #50	; 0x32
 80081fa:	4a08      	ldr	r2, [pc, #32]	; (800821c <UART_SetConfig+0x2d4>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	f003 0207 	and.w	r2, r3, #7
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4422      	add	r2, r4
 800820e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008210:	e105      	b.n	800841e <UART_SetConfig+0x4d6>
 8008212:	bf00      	nop
 8008214:	40011000 	.word	0x40011000
 8008218:	40011400 	.word	0x40011400
 800821c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008224:	2200      	movs	r2, #0
 8008226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800822a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800822e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008232:	4642      	mov	r2, r8
 8008234:	464b      	mov	r3, r9
 8008236:	1891      	adds	r1, r2, r2
 8008238:	6239      	str	r1, [r7, #32]
 800823a:	415b      	adcs	r3, r3
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
 800823e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008242:	4641      	mov	r1, r8
 8008244:	1854      	adds	r4, r2, r1
 8008246:	4649      	mov	r1, r9
 8008248:	eb43 0501 	adc.w	r5, r3, r1
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	00eb      	lsls	r3, r5, #3
 8008256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800825a:	00e2      	lsls	r2, r4, #3
 800825c:	4614      	mov	r4, r2
 800825e:	461d      	mov	r5, r3
 8008260:	4643      	mov	r3, r8
 8008262:	18e3      	adds	r3, r4, r3
 8008264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008268:	464b      	mov	r3, r9
 800826a:	eb45 0303 	adc.w	r3, r5, r3
 800826e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800827e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800828e:	4629      	mov	r1, r5
 8008290:	008b      	lsls	r3, r1, #2
 8008292:	4621      	mov	r1, r4
 8008294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008298:	4621      	mov	r1, r4
 800829a:	008a      	lsls	r2, r1, #2
 800829c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082a0:	f7f8 fd0a 	bl	8000cb8 <__aeabi_uldivmod>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4b60      	ldr	r3, [pc, #384]	; (800842c <UART_SetConfig+0x4e4>)
 80082aa:	fba3 2302 	umull	r2, r3, r3, r2
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	011c      	lsls	r4, r3, #4
 80082b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	1891      	adds	r1, r2, r2
 80082ca:	61b9      	str	r1, [r7, #24]
 80082cc:	415b      	adcs	r3, r3
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d4:	4641      	mov	r1, r8
 80082d6:	1851      	adds	r1, r2, r1
 80082d8:	6139      	str	r1, [r7, #16]
 80082da:	4649      	mov	r1, r9
 80082dc:	414b      	adcs	r3, r1
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082ec:	4659      	mov	r1, fp
 80082ee:	00cb      	lsls	r3, r1, #3
 80082f0:	4651      	mov	r1, sl
 80082f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082f6:	4651      	mov	r1, sl
 80082f8:	00ca      	lsls	r2, r1, #3
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	4642      	mov	r2, r8
 8008302:	189b      	adds	r3, r3, r2
 8008304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008308:	464b      	mov	r3, r9
 800830a:	460a      	mov	r2, r1
 800830c:	eb42 0303 	adc.w	r3, r2, r3
 8008310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	67bb      	str	r3, [r7, #120]	; 0x78
 800831e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800832c:	4649      	mov	r1, r9
 800832e:	008b      	lsls	r3, r1, #2
 8008330:	4641      	mov	r1, r8
 8008332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008336:	4641      	mov	r1, r8
 8008338:	008a      	lsls	r2, r1, #2
 800833a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800833e:	f7f8 fcbb 	bl	8000cb8 <__aeabi_uldivmod>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4b39      	ldr	r3, [pc, #228]	; (800842c <UART_SetConfig+0x4e4>)
 8008348:	fba3 1302 	umull	r1, r3, r3, r2
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	2164      	movs	r1, #100	; 0x64
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	3332      	adds	r3, #50	; 0x32
 800835a:	4a34      	ldr	r2, [pc, #208]	; (800842c <UART_SetConfig+0x4e4>)
 800835c:	fba2 2303 	umull	r2, r3, r2, r3
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008366:	441c      	add	r4, r3
 8008368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836c:	2200      	movs	r2, #0
 800836e:	673b      	str	r3, [r7, #112]	; 0x70
 8008370:	677a      	str	r2, [r7, #116]	; 0x74
 8008372:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008376:	4642      	mov	r2, r8
 8008378:	464b      	mov	r3, r9
 800837a:	1891      	adds	r1, r2, r2
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	415b      	adcs	r3, r3
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008386:	4641      	mov	r1, r8
 8008388:	1851      	adds	r1, r2, r1
 800838a:	6039      	str	r1, [r7, #0]
 800838c:	4649      	mov	r1, r9
 800838e:	414b      	adcs	r3, r1
 8008390:	607b      	str	r3, [r7, #4]
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800839e:	4659      	mov	r1, fp
 80083a0:	00cb      	lsls	r3, r1, #3
 80083a2:	4651      	mov	r1, sl
 80083a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083a8:	4651      	mov	r1, sl
 80083aa:	00ca      	lsls	r2, r1, #3
 80083ac:	4610      	mov	r0, r2
 80083ae:	4619      	mov	r1, r3
 80083b0:	4603      	mov	r3, r0
 80083b2:	4642      	mov	r2, r8
 80083b4:	189b      	adds	r3, r3, r2
 80083b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083b8:	464b      	mov	r3, r9
 80083ba:	460a      	mov	r2, r1
 80083bc:	eb42 0303 	adc.w	r3, r2, r3
 80083c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	663b      	str	r3, [r7, #96]	; 0x60
 80083cc:	667a      	str	r2, [r7, #100]	; 0x64
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083da:	4649      	mov	r1, r9
 80083dc:	008b      	lsls	r3, r1, #2
 80083de:	4641      	mov	r1, r8
 80083e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083e4:	4641      	mov	r1, r8
 80083e6:	008a      	lsls	r2, r1, #2
 80083e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083ec:	f7f8 fc64 	bl	8000cb8 <__aeabi_uldivmod>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <UART_SetConfig+0x4e4>)
 80083f6:	fba3 1302 	umull	r1, r3, r3, r2
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2164      	movs	r1, #100	; 0x64
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	3332      	adds	r3, #50	; 0x32
 8008408:	4a08      	ldr	r2, [pc, #32]	; (800842c <UART_SetConfig+0x4e4>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4422      	add	r2, r4
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008424:	46bd      	mov	sp, r7
 8008426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800842a:	bf00      	nop
 800842c:	51eb851f 	.word	0x51eb851f

08008430 <__NVIC_SetPriority>:
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800843c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008440:	2b00      	cmp	r3, #0
 8008442:	db0a      	blt.n	800845a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	b2da      	uxtb	r2, r3
 8008448:	490c      	ldr	r1, [pc, #48]	; (800847c <__NVIC_SetPriority+0x4c>)
 800844a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844e:	0112      	lsls	r2, r2, #4
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	440b      	add	r3, r1
 8008454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008458:	e00a      	b.n	8008470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	b2da      	uxtb	r2, r3
 800845e:	4908      	ldr	r1, [pc, #32]	; (8008480 <__NVIC_SetPriority+0x50>)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	3b04      	subs	r3, #4
 8008468:	0112      	lsls	r2, r2, #4
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	440b      	add	r3, r1
 800846e:	761a      	strb	r2, [r3, #24]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	e000e100 	.word	0xe000e100
 8008480:	e000ed00 	.word	0xe000ed00

08008484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008488:	2100      	movs	r1, #0
 800848a:	f06f 0004 	mvn.w	r0, #4
 800848e:	f7ff ffcf 	bl	8008430 <__NVIC_SetPriority>
#endif
}
 8008492:	bf00      	nop
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800849e:	f3ef 8305 	mrs	r3, IPSR
 80084a2:	603b      	str	r3, [r7, #0]
  return(result);
 80084a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084aa:	f06f 0305 	mvn.w	r3, #5
 80084ae:	607b      	str	r3, [r7, #4]
 80084b0:	e00c      	b.n	80084cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <osKernelInitialize+0x44>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084ba:	4b08      	ldr	r3, [pc, #32]	; (80084dc <osKernelInitialize+0x44>)
 80084bc:	2201      	movs	r2, #1
 80084be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	e002      	b.n	80084cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084cc:	687b      	ldr	r3, [r7, #4]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	200006d8 	.word	0x200006d8

080084e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e6:	f3ef 8305 	mrs	r3, IPSR
 80084ea:	603b      	str	r3, [r7, #0]
  return(result);
 80084ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80084f2:	f06f 0305 	mvn.w	r3, #5
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	e010      	b.n	800851c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <osKernelStart+0x48>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d109      	bne.n	8008516 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008502:	f7ff ffbf 	bl	8008484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <osKernelStart+0x48>)
 8008508:	2202      	movs	r2, #2
 800850a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800850c:	f001 fb88 	bl	8009c20 <vTaskStartScheduler>
      stat = osOK;
 8008510:	2300      	movs	r3, #0
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	e002      	b.n	800851c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800851c:	687b      	ldr	r3, [r7, #4]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200006d8 	.word	0x200006d8

0800852c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b08e      	sub	sp, #56	; 0x38
 8008530:	af04      	add	r7, sp, #16
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800853c:	f3ef 8305 	mrs	r3, IPSR
 8008540:	617b      	str	r3, [r7, #20]
  return(result);
 8008542:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008544:	2b00      	cmp	r3, #0
 8008546:	d17e      	bne.n	8008646 <osThreadNew+0x11a>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d07b      	beq.n	8008646 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008552:	2318      	movs	r3, #24
 8008554:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800855a:	f04f 33ff 	mov.w	r3, #4294967295
 800855e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d045      	beq.n	80085f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <osThreadNew+0x48>
        name = attr->name;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <osThreadNew+0x6e>
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b38      	cmp	r3, #56	; 0x38
 800858c:	d805      	bhi.n	800859a <osThreadNew+0x6e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <osThreadNew+0x72>
        return (NULL);
 800859a:	2300      	movs	r3, #0
 800859c:	e054      	b.n	8008648 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	089b      	lsrs	r3, r3, #2
 80085ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <osThreadNew+0xa8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b5b      	cmp	r3, #91	; 0x5b
 80085bc:	d90a      	bls.n	80085d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d006      	beq.n	80085d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <osThreadNew+0xa8>
        mem = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e010      	b.n	80085f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10c      	bne.n	80085f6 <osThreadNew+0xca>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d108      	bne.n	80085f6 <osThreadNew+0xca>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <osThreadNew+0xca>
          mem = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	e001      	b.n	80085f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d110      	bne.n	800861e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008604:	9202      	str	r2, [sp, #8]
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f001 f92e 	bl	8009874 <xTaskCreateStatic>
 8008618:	4603      	mov	r3, r0
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	e013      	b.n	8008646 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d110      	bne.n	8008646 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	b29a      	uxth	r2, r3
 8008628:	f107 0310 	add.w	r3, r7, #16
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f001 f979 	bl	800992e <xTaskCreate>
 800863c:	4603      	mov	r3, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	d001      	beq.n	8008646 <osThreadNew+0x11a>
            hTask = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008646:	693b      	ldr	r3, [r7, #16]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008658:	f3ef 8305 	mrs	r3, IPSR
 800865c:	60bb      	str	r3, [r7, #8]
  return(result);
 800865e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <osDelay+0x1c>
    stat = osErrorISR;
 8008664:	f06f 0305 	mvn.w	r3, #5
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	e007      	b.n	800867c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 fa9e 	bl	8009bb8 <vTaskDelay>
    }
  }

  return (stat);
 800867c:	68fb      	ldr	r3, [r7, #12]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008686:	b580      	push	{r7, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008692:	f3ef 8305 	mrs	r3, IPSR
 8008696:	60bb      	str	r3, [r7, #8]
  return(result);
 8008698:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800869a:	2b00      	cmp	r3, #0
 800869c:	d174      	bne.n	8008788 <osMutexNew+0x102>
    if (attr != NULL) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <osMutexNew+0x26>
      type = attr->attr_bits;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e001      	b.n	80086b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <osMutexNew+0x3a>
      rmtx = 1U;
 80086ba:	2301      	movs	r3, #1
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	e001      	b.n	80086c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d15c      	bne.n	8008788 <osMutexNew+0x102>
      mem = -1;
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d015      	beq.n	8008706 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d006      	beq.n	80086f0 <osMutexNew+0x6a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2b4f      	cmp	r3, #79	; 0x4f
 80086e8:	d902      	bls.n	80086f0 <osMutexNew+0x6a>
          mem = 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	e00c      	b.n	800870a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d108      	bne.n	800870a <osMutexNew+0x84>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d104      	bne.n	800870a <osMutexNew+0x84>
            mem = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	e001      	b.n	800870a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d112      	bne.n	8008736 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4619      	mov	r1, r3
 800871c:	2004      	movs	r0, #4
 800871e:	f000 fb18 	bl	8008d52 <xQueueCreateMutexStatic>
 8008722:	61f8      	str	r0, [r7, #28]
 8008724:	e016      	b.n	8008754 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	4619      	mov	r1, r3
 800872c:	2001      	movs	r0, #1
 800872e:	f000 fb10 	bl	8008d52 <xQueueCreateMutexStatic>
 8008732:	61f8      	str	r0, [r7, #28]
 8008734:	e00e      	b.n	8008754 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008742:	2004      	movs	r0, #4
 8008744:	f000 faed 	bl	8008d22 <xQueueCreateMutex>
 8008748:	61f8      	str	r0, [r7, #28]
 800874a:	e003      	b.n	8008754 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800874c:	2001      	movs	r0, #1
 800874e:	f000 fae8 	bl	8008d22 <xQueueCreateMutex>
 8008752:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <osMutexNew+0xee>
        if (attr != NULL) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <osMutexNew+0xe2>
          name = attr->name;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e001      	b.n	800876c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	f001 f822 	bl	80097b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <osMutexNew+0x102>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008788:	69fb      	ldr	r3, [r7, #28]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b0:	f3ef 8305 	mrs	r3, IPSR
 80087b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80087b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80087bc:	f06f 0305 	mvn.w	r3, #5
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e02c      	b.n	800881e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80087ca:	f06f 0303 	mvn.w	r3, #3
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e025      	b.n	800881e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d011      	beq.n	80087fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f000 fb08 	bl	8008df0 <xQueueTakeMutexRecursive>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d01b      	beq.n	800881e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80087ec:	f06f 0301 	mvn.w	r3, #1
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e014      	b.n	800881e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80087f4:	f06f 0302 	mvn.w	r3, #2
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e010      	b.n	800881e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6938      	ldr	r0, [r7, #16]
 8008800:	f000 fda6 	bl	8009350 <xQueueSemaphoreTake>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d009      	beq.n	800881e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008810:	f06f 0301 	mvn.w	r3, #1
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e002      	b.n	800881e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008818:	f06f 0302 	mvn.w	r3, #2
 800881c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800881e:	697b      	ldr	r3, [r7, #20]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008844:	f3ef 8305 	mrs	r3, IPSR
 8008848:	60bb      	str	r3, [r7, #8]
  return(result);
 800884a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008850:	f06f 0305 	mvn.w	r3, #5
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e01f      	b.n	8008898 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800885e:	f06f 0303 	mvn.w	r3, #3
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e018      	b.n	8008898 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800886c:	6938      	ldr	r0, [r7, #16]
 800886e:	f000 fa8b 	bl	8008d88 <xQueueGiveMutexRecursive>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d00f      	beq.n	8008898 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008878:	f06f 0302 	mvn.w	r3, #2
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e00b      	b.n	8008898 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008880:	2300      	movs	r3, #0
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	6938      	ldr	r0, [r7, #16]
 8008888:	f000 fae8 	bl	8008e5c <xQueueGenericSend>
 800888c:	4603      	mov	r3, r0
 800888e:	2b01      	cmp	r3, #1
 8008890:	d002      	beq.n	8008898 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008892:	f06f 0302 	mvn.w	r3, #2
 8008896:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008898:	697b      	ldr	r3, [r7, #20]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4a07      	ldr	r2, [pc, #28]	; (80088d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80088b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4a06      	ldr	r2, [pc, #24]	; (80088d4 <vApplicationGetIdleTaskMemory+0x30>)
 80088ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2280      	movs	r2, #128	; 0x80
 80088c0:	601a      	str	r2, [r3, #0]
}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	200006dc 	.word	0x200006dc
 80088d4:	20000738 	.word	0x20000738

080088d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a07      	ldr	r2, [pc, #28]	; (8008904 <vApplicationGetTimerTaskMemory+0x2c>)
 80088e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a06      	ldr	r2, [pc, #24]	; (8008908 <vApplicationGetTimerTaskMemory+0x30>)
 80088ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088f6:	601a      	str	r2, [r3, #0]
}
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20000938 	.word	0x20000938
 8008908:	20000994 	.word	0x20000994

0800890c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f103 0208 	add.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f103 0208 	add.w	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f103 0208 	add.w	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d103      	bne.n	80089ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e00c      	b.n	80089e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3308      	adds	r3, #8
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e002      	b.n	80089dc <vListInsert+0x2e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d2f6      	bcs.n	80089d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6892      	ldr	r2, [r2, #8]
 8008a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6852      	ldr	r2, [r2, #4]
 8008a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d103      	bne.n	8008a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	1e5a      	subs	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a9e:	f002 fb71 	bl	800b184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	441a      	add	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	68f9      	ldr	r1, [r7, #12]
 8008ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	22ff      	movs	r2, #255	; 0xff
 8008ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	22ff      	movs	r2, #255	; 0xff
 8008aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d114      	bne.n	8008b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fb17 	bl	800a134 <xTaskRemoveFromEventList>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <xQueueGenericReset+0xcc>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	e009      	b.n	8008b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff fef2 	bl	800890c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3324      	adds	r3, #36	; 0x24
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff feed 	bl	800890c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b32:	f002 fb57 	bl	800b1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b36:	2301      	movs	r3, #1
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	; 0x38
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <xQueueGenericCreateStatic+0x52>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <xQueueGenericCreateStatic+0x56>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <xQueueGenericCreateStatic+0x58>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	623b      	str	r3, [r7, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <xQueueGenericCreateStatic+0x7e>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <xQueueGenericCreateStatic+0x82>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <xQueueGenericCreateStatic+0x84>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	61fb      	str	r3, [r7, #28]
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008be2:	2350      	movs	r3, #80	; 0x50
 8008be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b50      	cmp	r3, #80	; 0x50
 8008bea:	d00a      	beq.n	8008c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61bb      	str	r3, [r7, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f83f 	bl	8008ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	; 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	613b      	str	r3, [r7, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	3350      	adds	r3, #80	; 0x50
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f002 fbab 	bl	800b3c8 <pvPortMalloc>
 8008c72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d011      	beq.n	8008c9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	3350      	adds	r3, #80	; 0x50
 8008c82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c8c:	79fa      	ldrb	r2, [r7, #7]
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	4613      	mov	r3, r2
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f805 	bl	8008ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	69b8      	ldr	r0, [r7, #24]
 8008cda:	f7ff fecb 	bl	8008a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00e      	beq.n	8008d1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f8a1 	bl	8008e5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	4603      	mov	r3, r0
 8008d2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6939      	ldr	r1, [r7, #16]
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	f7ff ff7a 	bl	8008c34 <xQueueGenericCreate>
 8008d40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ffd3 	bl	8008cee <prvInitialiseMutex>

		return xNewQueue;
 8008d48:	68fb      	ldr	r3, [r7, #12]
	}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b088      	sub	sp, #32
 8008d56:	af02      	add	r7, sp, #8
 8008d58:	4603      	mov	r3, r0
 8008d5a:	6039      	str	r1, [r7, #0]
 8008d5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6939      	ldr	r1, [r7, #16]
 8008d70:	6978      	ldr	r0, [r7, #20]
 8008d72:	f7ff fee7 	bl	8008b44 <xQueueGenericCreateStatic>
 8008d76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff ffb8 	bl	8008cee <prvInitialiseMutex>

		return xNewQueue;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60fb      	str	r3, [r7, #12]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	689c      	ldr	r4, [r3, #8]
 8008db4:	f001 fb7c 	bl	800a4b0 <xTaskGetCurrentTaskHandle>
 8008db8:	4603      	mov	r3, r0
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d111      	bne.n	8008de2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	1e5a      	subs	r2, r3, #1
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6938      	ldr	r0, [r7, #16]
 8008dd8:	f000 f840 	bl	8008e5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	617b      	str	r3, [r7, #20]
 8008de0:	e001      	b.n	8008de6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
	}
 8008de8:	4618      	mov	r0, r3
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd90      	pop	{r4, r7, pc}

08008df0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	60fb      	str	r3, [r7, #12]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	689c      	ldr	r4, [r3, #8]
 8008e1e:	f001 fb47 	bl	800a4b0 <xTaskGetCurrentTaskHandle>
 8008e22:	4603      	mov	r3, r0
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d107      	bne.n	8008e38 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008e32:	2301      	movs	r3, #1
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	e00c      	b.n	8008e52 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6938      	ldr	r0, [r7, #16]
 8008e3c:	f000 fa88 	bl	8009350 <xQueueSemaphoreTake>
 8008e40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008e52:	697b      	ldr	r3, [r7, #20]
	}
 8008e54:	4618      	mov	r0, r3
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd90      	pop	{r4, r7, pc}

08008e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08e      	sub	sp, #56	; 0x38
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xQueueGenericSend+0x32>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d103      	bne.n	8008e9c <xQueueGenericSend+0x40>
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <xQueueGenericSend+0x44>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <xQueueGenericSend+0x46>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10a      	bne.n	8008ebc <xQueueGenericSend+0x60>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d103      	bne.n	8008eca <xQueueGenericSend+0x6e>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <xQueueGenericSend+0x72>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <xQueueGenericSend+0x74>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueGenericSend+0x8e>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	623b      	str	r3, [r7, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eea:	f001 faf1 	bl	800a4d0 <xTaskGetSchedulerState>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <xQueueGenericSend+0x9e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <xQueueGenericSend+0xa2>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <xQueueGenericSend+0xa4>
 8008efe:	2300      	movs	r3, #0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	61fb      	str	r3, [r7, #28]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f1a:	f002 f933 	bl	800b184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d302      	bcc.n	8008f30 <xQueueGenericSend+0xd4>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d129      	bne.n	8008f84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f36:	f000 fb2f 	bl	8009598 <prvCopyDataToQueue>
 8008f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d010      	beq.n	8008f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 f8f3 	bl	800a134 <xTaskRemoveFromEventList>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d013      	beq.n	8008f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f54:	4b3f      	ldr	r3, [pc, #252]	; (8009054 <xQueueGenericSend+0x1f8>)
 8008f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	e00a      	b.n	8008f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f6c:	4b39      	ldr	r3, [pc, #228]	; (8009054 <xQueueGenericSend+0x1f8>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f7c:	f002 f932 	bl	800b1e4 <vPortExitCritical>
				return pdPASS;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e063      	b.n	800904c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f8a:	f002 f92b 	bl	800b1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e05c      	b.n	800904c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f98:	f107 0314 	add.w	r3, r7, #20
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 f92d 	bl	800a1fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fa6:	f002 f91d 	bl	800b1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008faa:	f000 fe9f 	bl	8009cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fae:	f002 f8e9 	bl	800b184 <vPortEnterCritical>
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb8:	b25b      	sxtb	r3, r3
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d103      	bne.n	8008fc8 <xQueueGenericSend+0x16c>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fce:	b25b      	sxtb	r3, r3
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d103      	bne.n	8008fde <xQueueGenericSend+0x182>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fde:	f002 f901 	bl	800b1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe2:	1d3a      	adds	r2, r7, #4
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f001 f91c 	bl	800a228 <xTaskCheckForTimeOut>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d124      	bne.n	8009040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ff8:	f000 fbc6 	bl	8009788 <prvIsQueueFull>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d018      	beq.n	8009034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	3310      	adds	r3, #16
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f001 f842 	bl	800a094 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009012:	f000 fb51 	bl	80096b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009016:	f000 fe77 	bl	8009d08 <xTaskResumeAll>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f47f af7c 	bne.w	8008f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <xQueueGenericSend+0x1f8>)
 8009024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	e772      	b.n	8008f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009036:	f000 fb3f 	bl	80096b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800903a:	f000 fe65 	bl	8009d08 <xTaskResumeAll>
 800903e:	e76c      	b.n	8008f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009042:	f000 fb39 	bl	80096b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009046:	f000 fe5f 	bl	8009d08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800904a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800904c:	4618      	mov	r0, r3
 800904e:	3738      	adds	r7, #56	; 0x38
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	e000ed04 	.word	0xe000ed04

08009058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b090      	sub	sp, #64	; 0x40
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <xQueueGenericSendFromISR+0x3c>
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <xQueueGenericSendFromISR+0x40>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <xQueueGenericSendFromISR+0x42>
 8009098:	2300      	movs	r3, #0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d103      	bne.n	80090c2 <xQueueGenericSendFromISR+0x6a>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d101      	bne.n	80090c6 <xQueueGenericSendFromISR+0x6e>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <xQueueGenericSendFromISR+0x70>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	623b      	str	r3, [r7, #32]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090e2:	f002 f931 	bl	800b348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090e6:	f3ef 8211 	mrs	r2, BASEPRI
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	61fa      	str	r2, [r7, #28]
 80090fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910a:	429a      	cmp	r2, r3
 800910c:	d302      	bcc.n	8009114 <xQueueGenericSendFromISR+0xbc>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d12f      	bne.n	8009174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800912a:	f000 fa35 	bl	8009598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800912e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d112      	bne.n	800915e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d016      	beq.n	800916e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fff5 	bl	800a134 <xTaskRemoveFromEventList>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00e      	beq.n	800916e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	e007      	b.n	800916e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800915e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009162:	3301      	adds	r3, #1
 8009164:	b2db      	uxtb	r3, r3
 8009166:	b25a      	sxtb	r2, r3
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800916e:	2301      	movs	r3, #1
 8009170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009172:	e001      	b.n	8009178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009174:	2300      	movs	r3, #0
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009186:	4618      	mov	r0, r3
 8009188:	3740      	adds	r7, #64	; 0x40
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08c      	sub	sp, #48	; 0x30
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800919c:	2300      	movs	r3, #0
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <xQueueReceive+0x30>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	623b      	str	r3, [r7, #32]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d103      	bne.n	80091ce <xQueueReceive+0x3e>
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <xQueueReceive+0x42>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <xQueueReceive+0x44>
 80091d2:	2300      	movs	r3, #0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <xQueueReceive+0x5e>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	61fb      	str	r3, [r7, #28]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091ee:	f001 f96f 	bl	800a4d0 <xTaskGetSchedulerState>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <xQueueReceive+0x6e>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <xQueueReceive+0x72>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <xQueueReceive+0x74>
 8009202:	2300      	movs	r3, #0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <xQueueReceive+0x8e>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	61bb      	str	r3, [r7, #24]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800921e:	f001 ffb1 	bl	800b184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01f      	beq.n	800926e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009232:	f000 fa1b 	bl	800966c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	1e5a      	subs	r2, r3, #1
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00f      	beq.n	8009266 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	3310      	adds	r3, #16
 800924a:	4618      	mov	r0, r3
 800924c:	f000 ff72 	bl	800a134 <xTaskRemoveFromEventList>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009256:	4b3d      	ldr	r3, [pc, #244]	; (800934c <xQueueReceive+0x1bc>)
 8009258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009266:	f001 ffbd 	bl	800b1e4 <vPortExitCritical>
				return pdPASS;
 800926a:	2301      	movs	r3, #1
 800926c:	e069      	b.n	8009342 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009274:	f001 ffb6 	bl	800b1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009278:	2300      	movs	r3, #0
 800927a:	e062      	b.n	8009342 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009282:	f107 0310 	add.w	r3, r7, #16
 8009286:	4618      	mov	r0, r3
 8009288:	f000 ffb8 	bl	800a1fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009290:	f001 ffa8 	bl	800b1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009294:	f000 fd2a 	bl	8009cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009298:	f001 ff74 	bl	800b184 <vPortEnterCritical>
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092a2:	b25b      	sxtb	r3, r3
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d103      	bne.n	80092b2 <xQueueReceive+0x122>
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b8:	b25b      	sxtb	r3, r3
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d103      	bne.n	80092c8 <xQueueReceive+0x138>
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092c8:	f001 ff8c 	bl	800b1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092cc:	1d3a      	adds	r2, r7, #4
 80092ce:	f107 0310 	add.w	r3, r7, #16
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 ffa7 	bl	800a228 <xTaskCheckForTimeOut>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d123      	bne.n	8009328 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e2:	f000 fa3b 	bl	800975c <prvIsQueueEmpty>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d017      	beq.n	800931c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	3324      	adds	r3, #36	; 0x24
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fecd 	bl	800a094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fc:	f000 f9dc 	bl	80096b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009300:	f000 fd02 	bl	8009d08 <xTaskResumeAll>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d189      	bne.n	800921e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800930a:	4b10      	ldr	r3, [pc, #64]	; (800934c <xQueueReceive+0x1bc>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	e780      	b.n	800921e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800931c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931e:	f000 f9cb 	bl	80096b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009322:	f000 fcf1 	bl	8009d08 <xTaskResumeAll>
 8009326:	e77a      	b.n	800921e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932a:	f000 f9c5 	bl	80096b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800932e:	f000 fceb 	bl	8009d08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009334:	f000 fa12 	bl	800975c <prvIsQueueEmpty>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	f43f af6f 	beq.w	800921e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009342:	4618      	mov	r0, r3
 8009344:	3730      	adds	r7, #48	; 0x30
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08e      	sub	sp, #56	; 0x38
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	623b      	str	r3, [r7, #32]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	61fb      	str	r3, [r7, #28]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093a0:	f001 f896 	bl	800a4d0 <xTaskGetSchedulerState>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <xQueueSemaphoreTake+0x60>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <xQueueSemaphoreTake+0x64>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <xQueueSemaphoreTake+0x66>
 80093b4:	2300      	movs	r3, #0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	61bb      	str	r3, [r7, #24]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093d0:	f001 fed8 	bl	800b184 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d024      	beq.n	800942a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	1e5a      	subs	r2, r3, #1
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80093f0:	f001 f9e4 	bl	800a7bc <pvTaskIncrementMutexHeldCount>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00f      	beq.n	8009422 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	3310      	adds	r3, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fe94 	bl	800a134 <xTaskRemoveFromEventList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009412:	4b54      	ldr	r3, [pc, #336]	; (8009564 <xQueueSemaphoreTake+0x214>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009422:	f001 fedf 	bl	800b1e4 <vPortExitCritical>
				return pdPASS;
 8009426:	2301      	movs	r3, #1
 8009428:	e097      	b.n	800955a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d111      	bne.n	8009454 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	617b      	str	r3, [r7, #20]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800944c:	f001 feca 	bl	800b1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009450:	2300      	movs	r3, #0
 8009452:	e082      	b.n	800955a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800945a:	f107 030c 	add.w	r3, r7, #12
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fecc 	bl	800a1fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009468:	f001 febc 	bl	800b1e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800946c:	f000 fc3e 	bl	8009cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009470:	f001 fe88 	bl	800b184 <vPortEnterCritical>
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d103      	bne.n	800948a <xQueueSemaphoreTake+0x13a>
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009490:	b25b      	sxtb	r3, r3
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d103      	bne.n	80094a0 <xQueueSemaphoreTake+0x150>
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094a0:	f001 fea0 	bl	800b1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094a4:	463a      	mov	r2, r7
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 febb 	bl	800a228 <xTaskCheckForTimeOut>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d132      	bne.n	800951e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ba:	f000 f94f 	bl	800975c <prvIsQueueEmpty>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d026      	beq.n	8009512 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80094cc:	f001 fe5a 	bl	800b184 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f819 	bl	800a50c <xTaskPriorityInherit>
 80094da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80094dc:	f001 fe82 	bl	800b1e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	3324      	adds	r3, #36	; 0x24
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fdd3 	bl	800a094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f0:	f000 f8e2 	bl	80096b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094f4:	f000 fc08 	bl	8009d08 <xTaskResumeAll>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f af68 	bne.w	80093d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <xQueueSemaphoreTake+0x214>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	e75e      	b.n	80093d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009514:	f000 f8d0 	bl	80096b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009518:	f000 fbf6 	bl	8009d08 <xTaskResumeAll>
 800951c:	e758      	b.n	80093d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800951e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009520:	f000 f8ca 	bl	80096b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009524:	f000 fbf0 	bl	8009d08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800952a:	f000 f917 	bl	800975c <prvIsQueueEmpty>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f43f af4d 	beq.w	80093d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00d      	beq.n	8009558 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800953c:	f001 fe22 	bl	800b184 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009542:	f000 f811 	bl	8009568 <prvGetDisinheritPriorityAfterTimeout>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f001 f8b2 	bl	800a6b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009554:	f001 fe46 	bl	800b1e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800955a:	4618      	mov	r0, r3
 800955c:	3738      	adds	r7, #56	; 0x38
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	e000ed04 	.word	0xe000ed04

08009568 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e001      	b.n	800958a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800958a:	68fb      	ldr	r3, [r7, #12]
	}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10d      	bne.n	80095d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d14d      	bne.n	800965a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 f80a 	bl	800a5dc <xTaskPriorityDisinherit>
 80095c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
 80095d0:	e043      	b.n	800965a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d119      	bne.n	800960c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6858      	ldr	r0, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	461a      	mov	r2, r3
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	f002 f904 	bl	800b7f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d32b      	bcc.n	800965a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	e026      	b.n	800965a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68d8      	ldr	r0, [r3, #12]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	461a      	mov	r2, r3
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	f002 f8ea 	bl	800b7f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	425b      	negs	r3, r3
 8009626:	441a      	add	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d207      	bcs.n	8009648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	425b      	negs	r3, r3
 8009642:	441a      	add	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d105      	bne.n	800965a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	3b01      	subs	r3, #1
 8009658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009662:	697b      	ldr	r3, [r7, #20]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	d018      	beq.n	80096b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	441a      	add	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	429a      	cmp	r2, r3
 8009696:	d303      	bcc.n	80096a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68d9      	ldr	r1, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a8:	461a      	mov	r2, r3
 80096aa:	6838      	ldr	r0, [r7, #0]
 80096ac:	f002 f8a0 	bl	800b7f0 <memcpy>
	}
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096c0:	f001 fd60 	bl	800b184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096cc:	e011      	b.n	80096f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d012      	beq.n	80096fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	; 0x24
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fd2a 	bl	800a134 <xTaskRemoveFromEventList>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096e6:	f000 fe01 	bl	800a2ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dce9      	bgt.n	80096ce <prvUnlockQueue+0x16>
 80096fa:	e000      	b.n	80096fe <prvUnlockQueue+0x46>
					break;
 80096fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	22ff      	movs	r2, #255	; 0xff
 8009702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009706:	f001 fd6d 	bl	800b1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800970a:	f001 fd3b 	bl	800b184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009716:	e011      	b.n	800973c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3310      	adds	r3, #16
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fd05 	bl	800a134 <xTaskRemoveFromEventList>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009730:	f000 fddc 	bl	800a2ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	3b01      	subs	r3, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800973c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	dce9      	bgt.n	8009718 <prvUnlockQueue+0x60>
 8009744:	e000      	b.n	8009748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	22ff      	movs	r2, #255	; 0xff
 800974c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009750:	f001 fd48 	bl	800b1e4 <vPortExitCritical>
}
 8009754:	bf00      	nop
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009764:	f001 fd0e 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	e001      	b.n	800977a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800977a:	f001 fd33 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 800977e:	68fb      	ldr	r3, [r7, #12]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009790:	f001 fcf8 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979c:	429a      	cmp	r2, r3
 800979e:	d102      	bne.n	80097a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097a0:	2301      	movs	r3, #1
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	e001      	b.n	80097aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097aa:	f001 fd1b 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 80097ae:	68fb      	ldr	r3, [r7, #12]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e014      	b.n	80097f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097c8:	4a0f      	ldr	r2, [pc, #60]	; (8009808 <vQueueAddToRegistry+0x50>)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097d4:	490c      	ldr	r1, [pc, #48]	; (8009808 <vQueueAddToRegistry+0x50>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097de:	4a0a      	ldr	r2, [pc, #40]	; (8009808 <vQueueAddToRegistry+0x50>)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	4413      	add	r3, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097ea:	e006      	b.n	80097fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3301      	adds	r3, #1
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b07      	cmp	r3, #7
 80097f6:	d9e7      	bls.n	80097c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000d94 	.word	0x20000d94

0800980c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800981c:	f001 fcb2 	bl	800b184 <vPortEnterCritical>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009826:	b25b      	sxtb	r3, r3
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982c:	d103      	bne.n	8009836 <vQueueWaitForMessageRestricted+0x2a>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800983c:	b25b      	sxtb	r3, r3
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d103      	bne.n	800984c <vQueueWaitForMessageRestricted+0x40>
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800984c:	f001 fcca 	bl	800b1e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	3324      	adds	r3, #36	; 0x24
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fc3b 	bl	800a0dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009866:	6978      	ldr	r0, [r7, #20]
 8009868:	f7ff ff26 	bl	80096b8 <prvUnlockQueue>
	}
 800986c:	bf00      	nop
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	; 0x38
 8009878:	af04      	add	r7, sp, #16
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	623b      	str	r3, [r7, #32]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xTaskCreateStatic+0x46>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	61fb      	str	r3, [r7, #28]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098ba:	235c      	movs	r3, #92	; 0x5c
 80098bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b5c      	cmp	r3, #92	; 0x5c
 80098c2:	d00a      	beq.n	80098da <xTaskCreateStatic+0x66>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	61bb      	str	r3, [r7, #24]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d01e      	beq.n	8009920 <xTaskCreateStatic+0xac>
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01b      	beq.n	8009920 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098fa:	2300      	movs	r3, #0
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	9302      	str	r3, [sp, #8]
 8009902:	f107 0314 	add.w	r3, r7, #20
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	68b9      	ldr	r1, [r7, #8]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 f850 	bl	80099b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800991a:	f000 f8dd 	bl	8009ad8 <prvAddNewTaskToReadyList>
 800991e:	e001      	b.n	8009924 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009924:	697b      	ldr	r3, [r7, #20]
	}
 8009926:	4618      	mov	r0, r3
 8009928:	3728      	adds	r7, #40	; 0x28
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800992e:	b580      	push	{r7, lr}
 8009930:	b08c      	sub	sp, #48	; 0x30
 8009932:	af04      	add	r7, sp, #16
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	603b      	str	r3, [r7, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fd40 	bl	800b3c8 <pvPortMalloc>
 8009948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009950:	205c      	movs	r0, #92	; 0x5c
 8009952:	f001 fd39 	bl	800b3c8 <pvPortMalloc>
 8009956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	631a      	str	r2, [r3, #48]	; 0x30
 8009964:	e005      	b.n	8009972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009966:	6978      	ldr	r0, [r7, #20]
 8009968:	f001 fdfa 	bl	800b560 <vPortFree>
 800996c:	e001      	b.n	8009972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d017      	beq.n	80099a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009980:	88fa      	ldrh	r2, [r7, #6]
 8009982:	2300      	movs	r3, #0
 8009984:	9303      	str	r3, [sp, #12]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	9302      	str	r3, [sp, #8]
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f80e 	bl	80099b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800999c:	69f8      	ldr	r0, [r7, #28]
 800999e:	f000 f89b 	bl	8009ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099a2:	2301      	movs	r3, #1
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	e002      	b.n	80099ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099a8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099ae:	69bb      	ldr	r3, [r7, #24]
	}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3720      	adds	r7, #32
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	461a      	mov	r2, r3
 80099d0:	21a5      	movs	r1, #165	; 0xa5
 80099d2:	f001 ff1b 	bl	800b80c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099e0:	3b01      	subs	r3, #1
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	f023 0307 	bic.w	r3, r3, #7
 80099ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <prvInitialiseNewTask+0x58>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	617b      	str	r3, [r7, #20]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01f      	beq.n	8009a56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a16:	2300      	movs	r3, #0
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	e012      	b.n	8009a42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	4413      	add	r3, r2
 8009a22:	7819      	ldrb	r1, [r3, #0]
 8009a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	4413      	add	r3, r2
 8009a2a:	3334      	adds	r3, #52	; 0x34
 8009a2c:	460a      	mov	r2, r1
 8009a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	61fb      	str	r3, [r7, #28]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	2b0f      	cmp	r3, #15
 8009a46:	d9e9      	bls.n	8009a1c <prvInitialiseNewTask+0x64>
 8009a48:	e000      	b.n	8009a4c <prvInitialiseNewTask+0x94>
			{
				break;
 8009a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a54:	e003      	b.n	8009a5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	2b37      	cmp	r3, #55	; 0x37
 8009a62:	d901      	bls.n	8009a68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a64:	2337      	movs	r3, #55	; 0x37
 8009a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	2200      	movs	r2, #0
 8009a78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe ff64 	bl	800894c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	3318      	adds	r3, #24
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe ff5f 	bl	800894c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	69b8      	ldr	r0, [r7, #24]
 8009ab8:	f001 fa36 	bl	800af28 <pxPortInitialiseStack>
 8009abc:	4602      	mov	r2, r0
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ace:	bf00      	nop
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ae0:	f001 fb50 	bl	800b184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ae4:	4b2d      	ldr	r3, [pc, #180]	; (8009b9c <prvAddNewTaskToReadyList+0xc4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	4a2c      	ldr	r2, [pc, #176]	; (8009b9c <prvAddNewTaskToReadyList+0xc4>)
 8009aec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009aee:	4b2c      	ldr	r3, [pc, #176]	; (8009ba0 <prvAddNewTaskToReadyList+0xc8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d109      	bne.n	8009b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009af6:	4a2a      	ldr	r2, [pc, #168]	; (8009ba0 <prvAddNewTaskToReadyList+0xc8>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009afc:	4b27      	ldr	r3, [pc, #156]	; (8009b9c <prvAddNewTaskToReadyList+0xc4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d110      	bne.n	8009b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b04:	f000 fc16 	bl	800a334 <prvInitialiseTaskLists>
 8009b08:	e00d      	b.n	8009b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b0a:	4b26      	ldr	r3, [pc, #152]	; (8009ba4 <prvAddNewTaskToReadyList+0xcc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d109      	bne.n	8009b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b12:	4b23      	ldr	r3, [pc, #140]	; (8009ba0 <prvAddNewTaskToReadyList+0xc8>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d802      	bhi.n	8009b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b20:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <prvAddNewTaskToReadyList+0xc8>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b26:	4b20      	ldr	r3, [pc, #128]	; (8009ba8 <prvAddNewTaskToReadyList+0xd0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ba8 <prvAddNewTaskToReadyList+0xd0>)
 8009b2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b30:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <prvAddNewTaskToReadyList+0xd0>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	4b1b      	ldr	r3, [pc, #108]	; (8009bac <prvAddNewTaskToReadyList+0xd4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d903      	bls.n	8009b4c <prvAddNewTaskToReadyList+0x74>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	4a18      	ldr	r2, [pc, #96]	; (8009bac <prvAddNewTaskToReadyList+0xd4>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <prvAddNewTaskToReadyList+0xd8>)
 8009b5a:	441a      	add	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f7fe feff 	bl	8008966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b68:	f001 fb3c 	bl	800b1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <prvAddNewTaskToReadyList+0xcc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00e      	beq.n	8009b92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <prvAddNewTaskToReadyList+0xc8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d207      	bcs.n	8009b92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b82:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <prvAddNewTaskToReadyList+0xdc>)
 8009b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200012a8 	.word	0x200012a8
 8009ba0:	20000dd4 	.word	0x20000dd4
 8009ba4:	200012b4 	.word	0x200012b4
 8009ba8:	200012c4 	.word	0x200012c4
 8009bac:	200012b0 	.word	0x200012b0
 8009bb0:	20000dd8 	.word	0x20000dd8
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d017      	beq.n	8009bfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <vTaskDelay+0x60>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <vTaskDelay+0x30>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	60bb      	str	r3, [r7, #8]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009be8:	f000 f880 	bl	8009cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bec:	2100      	movs	r1, #0
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fdf8 	bl	800a7e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009bf4:	f000 f888 	bl	8009d08 <xTaskResumeAll>
 8009bf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d107      	bne.n	8009c10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c00:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <vTaskDelay+0x64>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	200012d0 	.word	0x200012d0
 8009c1c:	e000ed04 	.word	0xe000ed04

08009c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	; 0x28
 8009c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c2e:	463a      	mov	r2, r7
 8009c30:	1d39      	adds	r1, r7, #4
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fe34 	bl	80088a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	9202      	str	r2, [sp, #8]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	460a      	mov	r2, r1
 8009c4e:	4921      	ldr	r1, [pc, #132]	; (8009cd4 <vTaskStartScheduler+0xb4>)
 8009c50:	4821      	ldr	r0, [pc, #132]	; (8009cd8 <vTaskStartScheduler+0xb8>)
 8009c52:	f7ff fe0f 	bl	8009874 <xTaskCreateStatic>
 8009c56:	4603      	mov	r3, r0
 8009c58:	4a20      	ldr	r2, [pc, #128]	; (8009cdc <vTaskStartScheduler+0xbc>)
 8009c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c5c:	4b1f      	ldr	r3, [pc, #124]	; (8009cdc <vTaskStartScheduler+0xbc>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c64:	2301      	movs	r3, #1
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e001      	b.n	8009c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d102      	bne.n	8009c7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c74:	f000 fe0a 	bl	800a88c <xTimerCreateTimerTask>
 8009c78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d116      	bne.n	8009cae <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c94:	4b12      	ldr	r3, [pc, #72]	; (8009ce0 <vTaskStartScheduler+0xc0>)
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <vTaskStartScheduler+0xc4>)
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ca2:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <vTaskStartScheduler+0xc8>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ca8:	f001 f9ca 	bl	800b040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cac:	e00e      	b.n	8009ccc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d10a      	bne.n	8009ccc <vTaskStartScheduler+0xac>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60fb      	str	r3, [r7, #12]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <vTaskStartScheduler+0xaa>
}
 8009ccc:	bf00      	nop
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	08011190 	.word	0x08011190
 8009cd8:	0800a305 	.word	0x0800a305
 8009cdc:	200012cc 	.word	0x200012cc
 8009ce0:	200012c8 	.word	0x200012c8
 8009ce4:	200012b4 	.word	0x200012b4
 8009ce8:	200012ac 	.word	0x200012ac

08009cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <vTaskSuspendAll+0x18>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	4a03      	ldr	r2, [pc, #12]	; (8009d04 <vTaskSuspendAll+0x18>)
 8009cf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cfa:	bf00      	nop
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	200012d0 	.word	0x200012d0

08009d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d16:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <xTaskResumeAll+0x118>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	603b      	str	r3, [r7, #0]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d34:	f001 fa26 	bl	800b184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d38:	4b39      	ldr	r3, [pc, #228]	; (8009e20 <xTaskResumeAll+0x118>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	4a38      	ldr	r2, [pc, #224]	; (8009e20 <xTaskResumeAll+0x118>)
 8009d40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d42:	4b37      	ldr	r3, [pc, #220]	; (8009e20 <xTaskResumeAll+0x118>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d162      	bne.n	8009e10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d4a:	4b36      	ldr	r3, [pc, #216]	; (8009e24 <xTaskResumeAll+0x11c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d05e      	beq.n	8009e10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d52:	e02f      	b.n	8009db4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d54:	4b34      	ldr	r3, [pc, #208]	; (8009e28 <xTaskResumeAll+0x120>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3318      	adds	r3, #24
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fe5d 	bl	8008a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fe58 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	4b2d      	ldr	r3, [pc, #180]	; (8009e2c <xTaskResumeAll+0x124>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d903      	bls.n	8009d84 <xTaskResumeAll+0x7c>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <xTaskResumeAll+0x124>)
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4a27      	ldr	r2, [pc, #156]	; (8009e30 <xTaskResumeAll+0x128>)
 8009d92:	441a      	add	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7fe fde3 	bl	8008966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4b23      	ldr	r3, [pc, #140]	; (8009e34 <xTaskResumeAll+0x12c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009dae:	4b22      	ldr	r3, [pc, #136]	; (8009e38 <xTaskResumeAll+0x130>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009db4:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <xTaskResumeAll+0x120>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1cb      	bne.n	8009d54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009dc2:	f000 fb55 	bl	800a470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <xTaskResumeAll+0x134>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d010      	beq.n	8009df4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dd2:	f000 f847 	bl	8009e64 <xTaskIncrementTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <xTaskResumeAll+0x130>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3b01      	subs	r3, #1
 8009de6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1f1      	bne.n	8009dd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <xTaskResumeAll+0x134>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <xTaskResumeAll+0x130>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d009      	beq.n	8009e10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e00:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <xTaskResumeAll+0x138>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e10:	f001 f9e8 	bl	800b1e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e14:	68bb      	ldr	r3, [r7, #8]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	200012d0 	.word	0x200012d0
 8009e24:	200012a8 	.word	0x200012a8
 8009e28:	20001268 	.word	0x20001268
 8009e2c:	200012b0 	.word	0x200012b0
 8009e30:	20000dd8 	.word	0x20000dd8
 8009e34:	20000dd4 	.word	0x20000dd4
 8009e38:	200012bc 	.word	0x200012bc
 8009e3c:	200012b8 	.word	0x200012b8
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <xTaskGetTickCount+0x1c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e50:	687b      	ldr	r3, [r7, #4]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	200012ac 	.word	0x200012ac

08009e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e6e:	4b4f      	ldr	r3, [pc, #316]	; (8009fac <xTaskIncrementTick+0x148>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f040 808f 	bne.w	8009f96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e78:	4b4d      	ldr	r3, [pc, #308]	; (8009fb0 <xTaskIncrementTick+0x14c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e80:	4a4b      	ldr	r2, [pc, #300]	; (8009fb0 <xTaskIncrementTick+0x14c>)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d120      	bne.n	8009ece <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e8c:	4b49      	ldr	r3, [pc, #292]	; (8009fb4 <xTaskIncrementTick+0x150>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <xTaskIncrementTick+0x48>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	603b      	str	r3, [r7, #0]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xTaskIncrementTick+0x46>
 8009eac:	4b41      	ldr	r3, [pc, #260]	; (8009fb4 <xTaskIncrementTick+0x150>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	4b41      	ldr	r3, [pc, #260]	; (8009fb8 <xTaskIncrementTick+0x154>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a3f      	ldr	r2, [pc, #252]	; (8009fb4 <xTaskIncrementTick+0x150>)
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	4a3f      	ldr	r2, [pc, #252]	; (8009fb8 <xTaskIncrementTick+0x154>)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	4b3e      	ldr	r3, [pc, #248]	; (8009fbc <xTaskIncrementTick+0x158>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	4a3d      	ldr	r2, [pc, #244]	; (8009fbc <xTaskIncrementTick+0x158>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	f000 fad1 	bl	800a470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ece:	4b3c      	ldr	r3, [pc, #240]	; (8009fc0 <xTaskIncrementTick+0x15c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d349      	bcc.n	8009f6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ed8:	4b36      	ldr	r3, [pc, #216]	; (8009fb4 <xTaskIncrementTick+0x150>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d104      	bne.n	8009eec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee2:	4b37      	ldr	r3, [pc, #220]	; (8009fc0 <xTaskIncrementTick+0x15c>)
 8009ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee8:	601a      	str	r2, [r3, #0]
					break;
 8009eea:	e03f      	b.n	8009f6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eec:	4b31      	ldr	r3, [pc, #196]	; (8009fb4 <xTaskIncrementTick+0x150>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d203      	bcs.n	8009f0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f04:	4a2e      	ldr	r2, [pc, #184]	; (8009fc0 <xTaskIncrementTick+0x15c>)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f0a:	e02f      	b.n	8009f6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fd85 	bl	8008a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	3318      	adds	r3, #24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fd7c 	bl	8008a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <xTaskIncrementTick+0x160>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d903      	bls.n	8009f3c <xTaskIncrementTick+0xd8>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	4a22      	ldr	r2, [pc, #136]	; (8009fc4 <xTaskIncrementTick+0x160>)
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4a1f      	ldr	r2, [pc, #124]	; (8009fc8 <xTaskIncrementTick+0x164>)
 8009f4a:	441a      	add	r2, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f7fe fd07 	bl	8008966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	4b1b      	ldr	r3, [pc, #108]	; (8009fcc <xTaskIncrementTick+0x168>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d3b8      	bcc.n	8009ed8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f66:	2301      	movs	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6a:	e7b5      	b.n	8009ed8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f6c:	4b17      	ldr	r3, [pc, #92]	; (8009fcc <xTaskIncrementTick+0x168>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	4915      	ldr	r1, [pc, #84]	; (8009fc8 <xTaskIncrementTick+0x164>)
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d901      	bls.n	8009f88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f88:	4b11      	ldr	r3, [pc, #68]	; (8009fd0 <xTaskIncrementTick+0x16c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e004      	b.n	8009fa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <xTaskIncrementTick+0x170>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	4a0d      	ldr	r2, [pc, #52]	; (8009fd4 <xTaskIncrementTick+0x170>)
 8009f9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fa0:	697b      	ldr	r3, [r7, #20]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200012d0 	.word	0x200012d0
 8009fb0:	200012ac 	.word	0x200012ac
 8009fb4:	20001260 	.word	0x20001260
 8009fb8:	20001264 	.word	0x20001264
 8009fbc:	200012c0 	.word	0x200012c0
 8009fc0:	200012c8 	.word	0x200012c8
 8009fc4:	200012b0 	.word	0x200012b0
 8009fc8:	20000dd8 	.word	0x20000dd8
 8009fcc:	20000dd4 	.word	0x20000dd4
 8009fd0:	200012bc 	.word	0x200012bc
 8009fd4:	200012b8 	.word	0x200012b8

08009fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fde:	4b28      	ldr	r3, [pc, #160]	; (800a080 <vTaskSwitchContext+0xa8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fe6:	4b27      	ldr	r3, [pc, #156]	; (800a084 <vTaskSwitchContext+0xac>)
 8009fe8:	2201      	movs	r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fec:	e041      	b.n	800a072 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009fee:	4b25      	ldr	r3, [pc, #148]	; (800a084 <vTaskSwitchContext+0xac>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff4:	4b24      	ldr	r3, [pc, #144]	; (800a088 <vTaskSwitchContext+0xb0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e010      	b.n	800a01e <vTaskSwitchContext+0x46>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <vTaskSwitchContext+0x40>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	607b      	str	r3, [r7, #4]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <vTaskSwitchContext+0x3e>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	491b      	ldr	r1, [pc, #108]	; (800a08c <vTaskSwitchContext+0xb4>)
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0e4      	beq.n	8009ffc <vTaskSwitchContext+0x24>
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4a13      	ldr	r2, [pc, #76]	; (800a08c <vTaskSwitchContext+0xb4>)
 800a03e:	4413      	add	r3, r2
 800a040:	60bb      	str	r3, [r7, #8]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	605a      	str	r2, [r3, #4]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3308      	adds	r3, #8
 800a054:	429a      	cmp	r2, r3
 800a056:	d104      	bne.n	800a062 <vTaskSwitchContext+0x8a>
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <vTaskSwitchContext+0xb8>)
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	4a06      	ldr	r2, [pc, #24]	; (800a088 <vTaskSwitchContext+0xb0>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6013      	str	r3, [r2, #0]
}
 800a072:	bf00      	nop
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	200012d0 	.word	0x200012d0
 800a084:	200012bc 	.word	0x200012bc
 800a088:	200012b0 	.word	0x200012b0
 800a08c:	20000dd8 	.word	0x20000dd8
 800a090:	20000dd4 	.word	0x20000dd4

0800a094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	60fb      	str	r3, [r7, #12]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0ba:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <vTaskPlaceOnEventList+0x44>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3318      	adds	r3, #24
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fe fc73 	bl	80089ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	6838      	ldr	r0, [r7, #0]
 800a0cc:	f000 fb8a 	bl	800a7e4 <prvAddCurrentTaskToDelayedList>
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000dd4 	.word	0x20000dd4

0800a0dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10a      	bne.n	800a104 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <vTaskPlaceOnEventListRestricted+0x54>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3318      	adds	r3, #24
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7fe fc2a 	bl	8008966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f000 fb5f 	bl	800a7e4 <prvAddCurrentTaskToDelayedList>
	}
 800a126:	bf00      	nop
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000dd4 	.word	0x20000dd4

0800a134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	60fb      	str	r3, [r7, #12]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	3318      	adds	r3, #24
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fc5b 	bl	8008a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a16a:	4b1e      	ldr	r3, [pc, #120]	; (800a1e4 <xTaskRemoveFromEventList+0xb0>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d11d      	bne.n	800a1ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	3304      	adds	r3, #4
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fc52 	bl	8008a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a180:	4b19      	ldr	r3, [pc, #100]	; (800a1e8 <xTaskRemoveFromEventList+0xb4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d903      	bls.n	800a190 <xTaskRemoveFromEventList+0x5c>
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	4a16      	ldr	r2, [pc, #88]	; (800a1e8 <xTaskRemoveFromEventList+0xb4>)
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <xTaskRemoveFromEventList+0xb8>)
 800a19e:	441a      	add	r2, r3
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f7fe fbdd 	bl	8008966 <vListInsertEnd>
 800a1ac:	e005      	b.n	800a1ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3318      	adds	r3, #24
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	480e      	ldr	r0, [pc, #56]	; (800a1f0 <xTaskRemoveFromEventList+0xbc>)
 800a1b6:	f7fe fbd6 	bl	8008966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1be:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <xTaskRemoveFromEventList+0xc0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d905      	bls.n	800a1d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <xTaskRemoveFromEventList+0xc4>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	e001      	b.n	800a1d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1d8:	697b      	ldr	r3, [r7, #20]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200012d0 	.word	0x200012d0
 800a1e8:	200012b0 	.word	0x200012b0
 800a1ec:	20000dd8 	.word	0x20000dd8
 800a1f0:	20001268 	.word	0x20001268
 800a1f4:	20000dd4 	.word	0x20000dd4
 800a1f8:	200012bc 	.word	0x200012bc

0800a1fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <vTaskInternalSetTimeOutState+0x24>)
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <vTaskInternalSetTimeOutState+0x28>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	605a      	str	r2, [r3, #4]
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	200012c0 	.word	0x200012c0
 800a224:	200012ac 	.word	0x200012ac

0800a228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	613b      	str	r3, [r7, #16]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	60fb      	str	r3, [r7, #12]
}
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a26a:	f000 ff8b 	bl	800b184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a26e:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <xTaskCheckForTimeOut+0xbc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d102      	bne.n	800a28e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e023      	b.n	800a2d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b15      	ldr	r3, [pc, #84]	; (800a2e8 <xTaskCheckForTimeOut+0xc0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d007      	beq.n	800a2aa <xTaskCheckForTimeOut+0x82>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	61fb      	str	r3, [r7, #28]
 800a2a8:	e015      	b.n	800a2d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d20b      	bcs.n	800a2cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	1ad2      	subs	r2, r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff ff9b 	bl	800a1fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61fb      	str	r3, [r7, #28]
 800a2ca:	e004      	b.n	800a2d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2d6:	f000 ff85 	bl	800b1e4 <vPortExitCritical>

	return xReturn;
 800a2da:	69fb      	ldr	r3, [r7, #28]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	200012ac 	.word	0x200012ac
 800a2e8:	200012c0 	.word	0x200012c0

0800a2ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <vTaskMissedYield+0x14>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	200012bc 	.word	0x200012bc

0800a304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a30c:	f000 f852 	bl	800a3b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a310:	4b06      	ldr	r3, [pc, #24]	; (800a32c <prvIdleTask+0x28>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d9f9      	bls.n	800a30c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <prvIdleTask+0x2c>)
 800a31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a328:	e7f0      	b.n	800a30c <prvIdleTask+0x8>
 800a32a:	bf00      	nop
 800a32c:	20000dd8 	.word	0x20000dd8
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a33a:	2300      	movs	r3, #0
 800a33c:	607b      	str	r3, [r7, #4]
 800a33e:	e00c      	b.n	800a35a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4a12      	ldr	r2, [pc, #72]	; (800a394 <prvInitialiseTaskLists+0x60>)
 800a34c:	4413      	add	r3, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe fadc 	bl	800890c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3301      	adds	r3, #1
 800a358:	607b      	str	r3, [r7, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b37      	cmp	r3, #55	; 0x37
 800a35e:	d9ef      	bls.n	800a340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a360:	480d      	ldr	r0, [pc, #52]	; (800a398 <prvInitialiseTaskLists+0x64>)
 800a362:	f7fe fad3 	bl	800890c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a366:	480d      	ldr	r0, [pc, #52]	; (800a39c <prvInitialiseTaskLists+0x68>)
 800a368:	f7fe fad0 	bl	800890c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a36c:	480c      	ldr	r0, [pc, #48]	; (800a3a0 <prvInitialiseTaskLists+0x6c>)
 800a36e:	f7fe facd 	bl	800890c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a372:	480c      	ldr	r0, [pc, #48]	; (800a3a4 <prvInitialiseTaskLists+0x70>)
 800a374:	f7fe faca 	bl	800890c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a378:	480b      	ldr	r0, [pc, #44]	; (800a3a8 <prvInitialiseTaskLists+0x74>)
 800a37a:	f7fe fac7 	bl	800890c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <prvInitialiseTaskLists+0x78>)
 800a380:	4a05      	ldr	r2, [pc, #20]	; (800a398 <prvInitialiseTaskLists+0x64>)
 800a382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a384:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <prvInitialiseTaskLists+0x7c>)
 800a386:	4a05      	ldr	r2, [pc, #20]	; (800a39c <prvInitialiseTaskLists+0x68>)
 800a388:	601a      	str	r2, [r3, #0]
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000dd8 	.word	0x20000dd8
 800a398:	20001238 	.word	0x20001238
 800a39c:	2000124c 	.word	0x2000124c
 800a3a0:	20001268 	.word	0x20001268
 800a3a4:	2000127c 	.word	0x2000127c
 800a3a8:	20001294 	.word	0x20001294
 800a3ac:	20001260 	.word	0x20001260
 800a3b0:	20001264 	.word	0x20001264

0800a3b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3ba:	e019      	b.n	800a3f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3bc:	f000 fee2 	bl	800b184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c0:	4b10      	ldr	r3, [pc, #64]	; (800a404 <prvCheckTasksWaitingTermination+0x50>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fb27 	bl	8008a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	; (800a408 <prvCheckTasksWaitingTermination+0x54>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	4a0b      	ldr	r2, [pc, #44]	; (800a408 <prvCheckTasksWaitingTermination+0x54>)
 800a3da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3dc:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <prvCheckTasksWaitingTermination+0x58>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <prvCheckTasksWaitingTermination+0x58>)
 800a3e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3e6:	f000 fefd 	bl	800b1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f810 	bl	800a410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <prvCheckTasksWaitingTermination+0x58>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e1      	bne.n	800a3bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	2000127c 	.word	0x2000127c
 800a408:	200012a8 	.word	0x200012a8
 800a40c:	20001290 	.word	0x20001290

0800a410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d108      	bne.n	800a434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	4618      	mov	r0, r3
 800a428:	f001 f89a 	bl	800b560 <vPortFree>
				vPortFree( pxTCB );
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 f897 	bl	800b560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a432:	e018      	b.n	800a466 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d103      	bne.n	800a446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 f88e 	bl	800b560 <vPortFree>
	}
 800a444:	e00f      	b.n	800a466 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d00a      	beq.n	800a466 <prvDeleteTCB+0x56>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	60fb      	str	r3, [r7, #12]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <prvDeleteTCB+0x54>
	}
 800a466:	bf00      	nop
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a476:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <prvResetNextTaskUnblockTime+0x38>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d104      	bne.n	800a48a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <prvResetNextTaskUnblockTime+0x3c>)
 800a482:	f04f 32ff 	mov.w	r2, #4294967295
 800a486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a488:	e008      	b.n	800a49c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <prvResetNextTaskUnblockTime+0x38>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4a04      	ldr	r2, [pc, #16]	; (800a4ac <prvResetNextTaskUnblockTime+0x3c>)
 800a49a:	6013      	str	r3, [r2, #0]
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	20001260 	.word	0x20001260
 800a4ac:	200012c8 	.word	0x200012c8

0800a4b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <xTaskGetCurrentTaskHandle+0x1c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a4bc:	687b      	ldr	r3, [r7, #4]
	}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000dd4 	.word	0x20000dd4

0800a4d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <xTaskGetSchedulerState+0x34>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	e008      	b.n	800a4f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e4:	4b08      	ldr	r3, [pc, #32]	; (800a508 <xTaskGetSchedulerState+0x38>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e001      	b.n	800a4f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4f6:	687b      	ldr	r3, [r7, #4]
	}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	200012b4 	.word	0x200012b4
 800a508:	200012d0 	.word	0x200012d0

0800a50c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d051      	beq.n	800a5c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	4b2a      	ldr	r3, [pc, #168]	; (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d241      	bcs.n	800a5b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	db06      	blt.n	800a546 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	4b25      	ldr	r3, [pc, #148]	; (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6959      	ldr	r1, [r3, #20]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4a1f      	ldr	r2, [pc, #124]	; (800a5d4 <xTaskPriorityInherit+0xc8>)
 800a558:	4413      	add	r3, r2
 800a55a:	4299      	cmp	r1, r3
 800a55c:	d122      	bne.n	800a5a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3304      	adds	r3, #4
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe fa5c 	bl	8008a20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a568:	4b19      	ldr	r3, [pc, #100]	; (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a576:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <xTaskPriorityInherit+0xcc>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d903      	bls.n	800a586 <xTaskPriorityInherit+0x7a>
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a582:	4a15      	ldr	r2, [pc, #84]	; (800a5d8 <xTaskPriorityInherit+0xcc>)
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4a10      	ldr	r2, [pc, #64]	; (800a5d4 <xTaskPriorityInherit+0xc8>)
 800a594:	441a      	add	r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fe f9e2 	bl	8008966 <vListInsertEnd>
 800a5a2:	e004      	b.n	800a5ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	e008      	b.n	800a5c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <xTaskPriorityInherit+0xc4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d201      	bcs.n	800a5c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000dd4 	.word	0x20000dd4
 800a5d4:	20000dd8 	.word	0x20000dd8
 800a5d8:	200012b0 	.word	0x200012b0

0800a5dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d056      	beq.n	800a6a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5f2:	4b2e      	ldr	r3, [pc, #184]	; (800a6ac <xTaskPriorityDisinherit+0xd0>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d00a      	beq.n	800a612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60fb      	str	r3, [r7, #12]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	60bb      	str	r3, [r7, #8]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a634:	1e5a      	subs	r2, r3, #1
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	429a      	cmp	r2, r3
 800a644:	d02c      	beq.n	800a6a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d128      	bne.n	800a6a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe f9e4 	bl	8008a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a670:	4b0f      	ldr	r3, [pc, #60]	; (800a6b0 <xTaskPriorityDisinherit+0xd4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d903      	bls.n	800a680 <xTaskPriorityDisinherit+0xa4>
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	4a0c      	ldr	r2, [pc, #48]	; (800a6b0 <xTaskPriorityDisinherit+0xd4>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <xTaskPriorityDisinherit+0xd8>)
 800a68e:	441a      	add	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe f965 	bl	8008966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6a0:	697b      	ldr	r3, [r7, #20]
	}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000dd4 	.word	0x20000dd4
 800a6b0:	200012b0 	.word	0x200012b0
 800a6b4:	20000dd8 	.word	0x20000dd8

0800a6b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d06a      	beq.n	800a7a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	60fb      	str	r3, [r7, #12]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d902      	bls.n	800a6fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	61fb      	str	r3, [r7, #28]
 800a6fc:	e002      	b.n	800a704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	69fa      	ldr	r2, [r7, #28]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d04b      	beq.n	800a7a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	429a      	cmp	r2, r3
 800a716:	d146      	bne.n	800a7a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a718:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d10a      	bne.n	800a738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	60bb      	str	r3, [r7, #8]
}
 800a734:	bf00      	nop
 800a736:	e7fe      	b.n	800a736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	db04      	blt.n	800a756 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	6959      	ldr	r1, [r3, #20]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a766:	4413      	add	r3, r2
 800a768:	4299      	cmp	r1, r3
 800a76a:	d11c      	bne.n	800a7a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	3304      	adds	r3, #4
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe f955 	bl	8008a20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d903      	bls.n	800a78a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	4a0c      	ldr	r2, [pc, #48]	; (800a7b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a07      	ldr	r2, [pc, #28]	; (800a7b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a798:	441a      	add	r2, r3
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe f8e0 	bl	8008966 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7a6:	bf00      	nop
 800a7a8:	3720      	adds	r7, #32
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000dd4 	.word	0x20000dd4
 800a7b4:	20000dd8 	.word	0x20000dd8
 800a7b8:	200012b0 	.word	0x200012b0

0800a7bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a7d2:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
	}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000dd4 	.word	0x20000dd4

0800a7e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7ee:	4b21      	ldr	r3, [pc, #132]	; (800a874 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f4:	4b20      	ldr	r3, [pc, #128]	; (800a878 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe f910 	bl	8008a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d10a      	bne.n	800a81e <prvAddCurrentTaskToDelayedList+0x3a>
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a80e:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <prvAddCurrentTaskToDelayedList+0x94>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3304      	adds	r3, #4
 800a814:	4619      	mov	r1, r3
 800a816:	4819      	ldr	r0, [pc, #100]	; (800a87c <prvAddCurrentTaskToDelayedList+0x98>)
 800a818:	f7fe f8a5 	bl	8008966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a81c:	e026      	b.n	800a86c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4413      	add	r3, r2
 800a824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <prvAddCurrentTaskToDelayedList+0x94>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	429a      	cmp	r2, r3
 800a834:	d209      	bcs.n	800a84a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a836:	4b12      	ldr	r3, [pc, #72]	; (800a880 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <prvAddCurrentTaskToDelayedList+0x94>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3304      	adds	r3, #4
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f7fe f8b3 	bl	80089ae <vListInsert>
}
 800a848:	e010      	b.n	800a86c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a84a:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <prvAddCurrentTaskToDelayedList+0x94>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3304      	adds	r3, #4
 800a854:	4619      	mov	r1, r3
 800a856:	4610      	mov	r0, r2
 800a858:	f7fe f8a9 	bl	80089ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	d202      	bcs.n	800a86c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a866:	4a08      	ldr	r2, [pc, #32]	; (800a888 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6013      	str	r3, [r2, #0]
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	200012ac 	.word	0x200012ac
 800a878:	20000dd4 	.word	0x20000dd4
 800a87c:	20001294 	.word	0x20001294
 800a880:	20001264 	.word	0x20001264
 800a884:	20001260 	.word	0x20001260
 800a888:	200012c8 	.word	0x200012c8

0800a88c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	; 0x28
 800a890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a896:	f000 fb07 	bl	800aea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a89a:	4b1c      	ldr	r3, [pc, #112]	; (800a90c <xTimerCreateTimerTask+0x80>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d021      	beq.n	800a8e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8aa:	1d3a      	adds	r2, r7, #4
 800a8ac:	f107 0108 	add.w	r1, r7, #8
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe f80f 	bl	80088d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	9202      	str	r2, [sp, #8]
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	460a      	mov	r2, r1
 800a8cc:	4910      	ldr	r1, [pc, #64]	; (800a910 <xTimerCreateTimerTask+0x84>)
 800a8ce:	4811      	ldr	r0, [pc, #68]	; (800a914 <xTimerCreateTimerTask+0x88>)
 800a8d0:	f7fe ffd0 	bl	8009874 <xTaskCreateStatic>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	4a10      	ldr	r2, [pc, #64]	; (800a918 <xTimerCreateTimerTask+0x8c>)
 800a8d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <xTimerCreateTimerTask+0x8c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	613b      	str	r3, [r7, #16]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a902:	697b      	ldr	r3, [r7, #20]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	20001304 	.word	0x20001304
 800a910:	08011198 	.word	0x08011198
 800a914:	0800aa51 	.word	0x0800aa51
 800a918:	20001308 	.word	0x20001308

0800a91c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	; 0x28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	623b      	str	r3, [r7, #32]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a94a:	4b1a      	ldr	r3, [pc, #104]	; (800a9b4 <xTimerGenericCommand+0x98>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02a      	beq.n	800a9a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b05      	cmp	r3, #5
 800a962:	dc18      	bgt.n	800a996 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a964:	f7ff fdb4 	bl	800a4d0 <xTaskGetSchedulerState>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d109      	bne.n	800a982 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a96e:	4b11      	ldr	r3, [pc, #68]	; (800a9b4 <xTimerGenericCommand+0x98>)
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	f107 0110 	add.w	r1, r7, #16
 800a976:	2300      	movs	r3, #0
 800a978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a97a:	f7fe fa6f 	bl	8008e5c <xQueueGenericSend>
 800a97e:	6278      	str	r0, [r7, #36]	; 0x24
 800a980:	e012      	b.n	800a9a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <xTimerGenericCommand+0x98>)
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f107 0110 	add.w	r1, r7, #16
 800a98a:	2300      	movs	r3, #0
 800a98c:	2200      	movs	r2, #0
 800a98e:	f7fe fa65 	bl	8008e5c <xQueueGenericSend>
 800a992:	6278      	str	r0, [r7, #36]	; 0x24
 800a994:	e008      	b.n	800a9a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a996:	4b07      	ldr	r3, [pc, #28]	; (800a9b4 <xTimerGenericCommand+0x98>)
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	f107 0110 	add.w	r1, r7, #16
 800a99e:	2300      	movs	r3, #0
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	f7fe fb59 	bl	8009058 <xQueueGenericSendFromISR>
 800a9a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3728      	adds	r7, #40	; 0x28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20001304 	.word	0x20001304

0800a9b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c2:	4b22      	ldr	r3, [pc, #136]	; (800aa4c <prvProcessExpiredTimer+0x94>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe f825 	bl	8008a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d022      	beq.n	800aa2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	699a      	ldr	r2, [r3, #24]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	18d1      	adds	r1, r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	6978      	ldr	r0, [r7, #20]
 800a9f2:	f000 f8d1 	bl	800ab98 <prvInsertTimerInActiveList>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01f      	beq.n	800aa3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	2300      	movs	r3, #0
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	2100      	movs	r1, #0
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f7ff ff88 	bl	800a91c <xTimerGenericCommand>
 800aa0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d113      	bne.n	800aa3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	60fb      	str	r3, [r7, #12]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	6978      	ldr	r0, [r7, #20]
 800aa42:	4798      	blx	r3
}
 800aa44:	bf00      	nop
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	200012fc 	.word	0x200012fc

0800aa50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 f857 	bl	800ab10 <prvGetNextExpireTime>
 800aa62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4619      	mov	r1, r3
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f803 	bl	800aa74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa6e:	f000 f8d5 	bl	800ac1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa72:	e7f1      	b.n	800aa58 <prvTimerTask+0x8>

0800aa74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa7e:	f7ff f935 	bl	8009cec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 f866 	bl	800ab58 <prvSampleTimeNow>
 800aa8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d130      	bne.n	800aaf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <prvProcessTimerOrBlockTask+0x3c>
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d806      	bhi.n	800aab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaa2:	f7ff f931 	bl	8009d08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aaa6:	68f9      	ldr	r1, [r7, #12]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ff85 	bl	800a9b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aaae:	e024      	b.n	800aafa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aab6:	4b13      	ldr	r3, [pc, #76]	; (800ab04 <prvProcessTimerOrBlockTask+0x90>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <prvProcessTimerOrBlockTask+0x50>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <prvProcessTimerOrBlockTask+0x52>
 800aac4:	2300      	movs	r3, #0
 800aac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aac8:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <prvProcessTimerOrBlockTask+0x94>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4619      	mov	r1, r3
 800aad6:	f7fe fe99 	bl	800980c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aada:	f7ff f915 	bl	8009d08 <xTaskResumeAll>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <prvProcessTimerOrBlockTask+0x98>)
 800aae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	f3bf 8f6f 	isb	sy
}
 800aaf4:	e001      	b.n	800aafa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aaf6:	f7ff f907 	bl	8009d08 <xTaskResumeAll>
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20001300 	.word	0x20001300
 800ab08:	20001304 	.word	0x20001304
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <prvGetNextExpireTime+0x44>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <prvGetNextExpireTime+0x16>
 800ab22:	2201      	movs	r2, #1
 800ab24:	e000      	b.n	800ab28 <prvGetNextExpireTime+0x18>
 800ab26:	2200      	movs	r2, #0
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d105      	bne.n	800ab40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab34:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <prvGetNextExpireTime+0x44>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	e001      	b.n	800ab44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab44:	68fb      	ldr	r3, [r7, #12]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	200012fc 	.word	0x200012fc

0800ab58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab60:	f7ff f970 	bl	8009e44 <xTaskGetTickCount>
 800ab64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <prvSampleTimeNow+0x3c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d205      	bcs.n	800ab7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab70:	f000 f936 	bl	800ade0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	e002      	b.n	800ab82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab82:	4a04      	ldr	r2, [pc, #16]	; (800ab94 <prvSampleTimeNow+0x3c>)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab88:	68fb      	ldr	r3, [r7, #12]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	2000130c 	.word	0x2000130c

0800ab98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d812      	bhi.n	800abe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	1ad2      	subs	r2, r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d302      	bcc.n	800abd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e01b      	b.n	800ac0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abd2:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <prvInsertTimerInActiveList+0x7c>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3304      	adds	r3, #4
 800abda:	4619      	mov	r1, r3
 800abdc:	4610      	mov	r0, r2
 800abde:	f7fd fee6 	bl	80089ae <vListInsert>
 800abe2:	e012      	b.n	800ac0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d206      	bcs.n	800abfa <prvInsertTimerInActiveList+0x62>
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d302      	bcc.n	800abfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	e007      	b.n	800ac0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abfa:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <prvInsertTimerInActiveList+0x80>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fd fed2 	bl	80089ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac0a:	697b      	ldr	r3, [r7, #20]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20001300 	.word	0x20001300
 800ac18:	200012fc 	.word	0x200012fc

0800ac1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08e      	sub	sp, #56	; 0x38
 800ac20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac22:	e0ca      	b.n	800adba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	da18      	bge.n	800ac5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac2a:	1d3b      	adds	r3, r7, #4
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10a      	bne.n	800ac4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	61fb      	str	r3, [r7, #28]
}
 800ac48:	bf00      	nop
 800ac4a:	e7fe      	b.n	800ac4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac52:	6850      	ldr	r0, [r2, #4]
 800ac54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac56:	6892      	ldr	r2, [r2, #8]
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f2c0 80aa 	blt.w	800adb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	3304      	adds	r3, #4
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fd fed3 	bl	8008a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff ff6b 	bl	800ab58 <prvSampleTimeNow>
 800ac82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b09      	cmp	r3, #9
 800ac88:	f200 8097 	bhi.w	800adba <prvProcessReceivedCommands+0x19e>
 800ac8c:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <prvProcessReceivedCommands+0x78>)
 800ac8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac92:	bf00      	nop
 800ac94:	0800acbd 	.word	0x0800acbd
 800ac98:	0800acbd 	.word	0x0800acbd
 800ac9c:	0800acbd 	.word	0x0800acbd
 800aca0:	0800ad31 	.word	0x0800ad31
 800aca4:	0800ad45 	.word	0x0800ad45
 800aca8:	0800ad8f 	.word	0x0800ad8f
 800acac:	0800acbd 	.word	0x0800acbd
 800acb0:	0800acbd 	.word	0x0800acbd
 800acb4:	0800ad31 	.word	0x0800ad31
 800acb8:	0800ad45 	.word	0x0800ad45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	18d1      	adds	r1, r2, r3
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acdc:	f7ff ff5c 	bl	800ab98 <prvInsertTimerInActiveList>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d069      	beq.n	800adba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d05e      	beq.n	800adba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	441a      	add	r2, r3
 800ad04:	2300      	movs	r3, #0
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0e:	f7ff fe05 	bl	800a91c <xTimerGenericCommand>
 800ad12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d14f      	bne.n	800adba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	61bb      	str	r3, [r7, #24]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad42:	e03a      	b.n	800adba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad4a:	f043 0301 	orr.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	617b      	str	r3, [r7, #20]
}
 800ad76:	bf00      	nop
 800ad78:	e7fe      	b.n	800ad78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	18d1      	adds	r1, r2, r3
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad88:	f7ff ff06 	bl	800ab98 <prvInsertTimerInActiveList>
					break;
 800ad8c:	e015      	b.n	800adba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d103      	bne.n	800ada4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9e:	f000 fbdf 	bl	800b560 <vPortFree>
 800ada2:	e00a      	b.n	800adba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adaa:	f023 0301 	bic.w	r3, r3, #1
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adb6:	e000      	b.n	800adba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800adb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adba:	4b08      	ldr	r3, [pc, #32]	; (800addc <prvProcessReceivedCommands+0x1c0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	1d39      	adds	r1, r7, #4
 800adc0:	2200      	movs	r2, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe f9e4 	bl	8009190 <xQueueReceive>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f47f af2a 	bne.w	800ac24 <prvProcessReceivedCommands+0x8>
	}
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	3730      	adds	r7, #48	; 0x30
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20001304 	.word	0x20001304

0800ade0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ade6:	e048      	b.n	800ae7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade8:	4b2d      	ldr	r3, [pc, #180]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf2:	4b2b      	ldr	r3, [pc, #172]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fd fe0d 	bl	8008a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d02e      	beq.n	800ae7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4413      	add	r3, r2
 800ae24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d90e      	bls.n	800ae4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae3a:	4b19      	ldr	r3, [pc, #100]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3304      	adds	r3, #4
 800ae42:	4619      	mov	r1, r3
 800ae44:	4610      	mov	r0, r2
 800ae46:	f7fd fdb2 	bl	80089ae <vListInsert>
 800ae4a:	e016      	b.n	800ae7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2300      	movs	r3, #0
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	2100      	movs	r1, #0
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff fd60 	bl	800a91c <xTimerGenericCommand>
 800ae5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	603b      	str	r3, [r7, #0]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1b1      	bne.n	800ade8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae8a:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a04      	ldr	r2, [pc, #16]	; (800aea0 <prvSwitchTimerLists+0xc0>)
 800ae90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae92:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <prvSwitchTimerLists+0xc4>)
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	6013      	str	r3, [r2, #0]
}
 800ae98:	bf00      	nop
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	200012fc 	.word	0x200012fc
 800aea4:	20001300 	.word	0x20001300

0800aea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aeae:	f000 f969 	bl	800b184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <prvCheckForValidListAndQueue+0x60>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d120      	bne.n	800aefc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aeba:	4814      	ldr	r0, [pc, #80]	; (800af0c <prvCheckForValidListAndQueue+0x64>)
 800aebc:	f7fd fd26 	bl	800890c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aec0:	4813      	ldr	r0, [pc, #76]	; (800af10 <prvCheckForValidListAndQueue+0x68>)
 800aec2:	f7fd fd23 	bl	800890c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <prvCheckForValidListAndQueue+0x6c>)
 800aec8:	4a10      	ldr	r2, [pc, #64]	; (800af0c <prvCheckForValidListAndQueue+0x64>)
 800aeca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aecc:	4b12      	ldr	r3, [pc, #72]	; (800af18 <prvCheckForValidListAndQueue+0x70>)
 800aece:	4a10      	ldr	r2, [pc, #64]	; (800af10 <prvCheckForValidListAndQueue+0x68>)
 800aed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aed2:	2300      	movs	r3, #0
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <prvCheckForValidListAndQueue+0x74>)
 800aed8:	4a11      	ldr	r2, [pc, #68]	; (800af20 <prvCheckForValidListAndQueue+0x78>)
 800aeda:	2110      	movs	r1, #16
 800aedc:	200a      	movs	r0, #10
 800aede:	f7fd fe31 	bl	8008b44 <xQueueGenericCreateStatic>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4a08      	ldr	r2, [pc, #32]	; (800af08 <prvCheckForValidListAndQueue+0x60>)
 800aee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aee8:	4b07      	ldr	r3, [pc, #28]	; (800af08 <prvCheckForValidListAndQueue+0x60>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <prvCheckForValidListAndQueue+0x60>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	490b      	ldr	r1, [pc, #44]	; (800af24 <prvCheckForValidListAndQueue+0x7c>)
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fc5e 	bl	80097b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aefc:	f000 f972 	bl	800b1e4 <vPortExitCritical>
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20001304 	.word	0x20001304
 800af0c:	200012d4 	.word	0x200012d4
 800af10:	200012e8 	.word	0x200012e8
 800af14:	200012fc 	.word	0x200012fc
 800af18:	20001300 	.word	0x20001300
 800af1c:	200013b0 	.word	0x200013b0
 800af20:	20001310 	.word	0x20001310
 800af24:	080111a0 	.word	0x080111a0

0800af28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3b04      	subs	r3, #4
 800af38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3b04      	subs	r3, #4
 800af46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3b04      	subs	r3, #4
 800af56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af58:	4a0c      	ldr	r2, [pc, #48]	; (800af8c <pxPortInitialiseStack+0x64>)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3b14      	subs	r3, #20
 800af62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f06f 0202 	mvn.w	r2, #2
 800af76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3b20      	subs	r3, #32
 800af7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af7e:	68fb      	ldr	r3, [r7, #12]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	0800af91 	.word	0x0800af91

0800af90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af9a:	4b12      	ldr	r3, [pc, #72]	; (800afe4 <prvTaskExitError+0x54>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d00a      	beq.n	800afba <prvTaskExitError+0x2a>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	60fb      	str	r3, [r7, #12]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <prvTaskExitError+0x28>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	60bb      	str	r3, [r7, #8]
}
 800afcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800afce:	bf00      	nop
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0fc      	beq.n	800afd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	200000b4 	.word	0x200000b4
	...

0800aff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <pxCurrentTCBConst2>)
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	6808      	ldr	r0, [r1, #0]
 800aff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	f380 8809 	msr	PSP, r0
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f04f 0000 	mov.w	r0, #0
 800b006:	f380 8811 	msr	BASEPRI, r0
 800b00a:	4770      	bx	lr
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst2>:
 800b010:	20000dd4 	.word	0x20000dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b018:	4808      	ldr	r0, [pc, #32]	; (800b03c <prvPortStartFirstTask+0x24>)
 800b01a:	6800      	ldr	r0, [r0, #0]
 800b01c:	6800      	ldr	r0, [r0, #0]
 800b01e:	f380 8808 	msr	MSP, r0
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8814 	msr	CONTROL, r0
 800b02a:	b662      	cpsie	i
 800b02c:	b661      	cpsie	f
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	df00      	svc	0
 800b038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b03a:	bf00      	nop
 800b03c:	e000ed08 	.word	0xe000ed08

0800b040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b046:	4b46      	ldr	r3, [pc, #280]	; (800b160 <xPortStartScheduler+0x120>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a46      	ldr	r2, [pc, #280]	; (800b164 <xPortStartScheduler+0x124>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d10a      	bne.n	800b066 <xPortStartScheduler+0x26>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	613b      	str	r3, [r7, #16]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b066:	4b3e      	ldr	r3, [pc, #248]	; (800b160 <xPortStartScheduler+0x120>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a3f      	ldr	r2, [pc, #252]	; (800b168 <xPortStartScheduler+0x128>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d10a      	bne.n	800b086 <xPortStartScheduler+0x46>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60fb      	str	r3, [r7, #12]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b086:	4b39      	ldr	r3, [pc, #228]	; (800b16c <xPortStartScheduler+0x12c>)
 800b088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	22ff      	movs	r2, #255	; 0xff
 800b096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	4b31      	ldr	r3, [pc, #196]	; (800b170 <xPortStartScheduler+0x130>)
 800b0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0ae:	4b31      	ldr	r3, [pc, #196]	; (800b174 <xPortStartScheduler+0x134>)
 800b0b0:	2207      	movs	r2, #7
 800b0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0b4:	e009      	b.n	800b0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <xPortStartScheduler+0x134>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4a2d      	ldr	r2, [pc, #180]	; (800b174 <xPortStartScheduler+0x134>)
 800b0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ca:	78fb      	ldrb	r3, [r7, #3]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d2:	2b80      	cmp	r3, #128	; 0x80
 800b0d4:	d0ef      	beq.n	800b0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0d6:	4b27      	ldr	r3, [pc, #156]	; (800b174 <xPortStartScheduler+0x134>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f1c3 0307 	rsb	r3, r3, #7
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d00a      	beq.n	800b0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60bb      	str	r3, [r7, #8]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <xPortStartScheduler+0x134>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <xPortStartScheduler+0x134>)
 800b100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b102:	4b1c      	ldr	r3, [pc, #112]	; (800b174 <xPortStartScheduler+0x134>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b10a:	4a1a      	ldr	r2, [pc, #104]	; (800b174 <xPortStartScheduler+0x134>)
 800b10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	b2da      	uxtb	r2, r3
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b116:	4b18      	ldr	r3, [pc, #96]	; (800b178 <xPortStartScheduler+0x138>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a17      	ldr	r2, [pc, #92]	; (800b178 <xPortStartScheduler+0x138>)
 800b11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b122:	4b15      	ldr	r3, [pc, #84]	; (800b178 <xPortStartScheduler+0x138>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a14      	ldr	r2, [pc, #80]	; (800b178 <xPortStartScheduler+0x138>)
 800b128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b12e:	f000 f8dd 	bl	800b2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b132:	4b12      	ldr	r3, [pc, #72]	; (800b17c <xPortStartScheduler+0x13c>)
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b138:	f000 f8fc 	bl	800b334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b13c:	4b10      	ldr	r3, [pc, #64]	; (800b180 <xPortStartScheduler+0x140>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a0f      	ldr	r2, [pc, #60]	; (800b180 <xPortStartScheduler+0x140>)
 800b142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b148:	f7ff ff66 	bl	800b018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b14c:	f7fe ff44 	bl	8009fd8 <vTaskSwitchContext>
	prvTaskExitError();
 800b150:	f7ff ff1e 	bl	800af90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	e000ed00 	.word	0xe000ed00
 800b164:	410fc271 	.word	0x410fc271
 800b168:	410fc270 	.word	0x410fc270
 800b16c:	e000e400 	.word	0xe000e400
 800b170:	20001400 	.word	0x20001400
 800b174:	20001404 	.word	0x20001404
 800b178:	e000ed20 	.word	0xe000ed20
 800b17c:	200000b4 	.word	0x200000b4
 800b180:	e000ef34 	.word	0xe000ef34

0800b184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	607b      	str	r3, [r7, #4]
}
 800b19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a0d      	ldr	r2, [pc, #52]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1a8:	4b0c      	ldr	r3, [pc, #48]	; (800b1dc <vPortEnterCritical+0x58>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d10f      	bne.n	800b1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <vPortEnterCritical+0x5c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	603b      	str	r3, [r7, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <vPortEnterCritical+0x4a>
	}
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	200000b4 	.word	0x200000b4
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ea:	4b12      	ldr	r3, [pc, #72]	; (800b234 <vPortExitCritical+0x50>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <vPortExitCritical+0x24>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	607b      	str	r3, [r7, #4]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b208:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <vPortExitCritical+0x50>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	4a09      	ldr	r2, [pc, #36]	; (800b234 <vPortExitCritical+0x50>)
 800b210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <vPortExitCritical+0x42>
 800b21a:	2300      	movs	r3, #0
 800b21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	f383 8811 	msr	BASEPRI, r3
}
 800b224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	200000b4 	.word	0x200000b4
	...

0800b240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b240:	f3ef 8009 	mrs	r0, PSP
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <pxCurrentTCBConst>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f01e 0f10 	tst.w	lr, #16
 800b250:	bf08      	it	eq
 800b252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6010      	str	r0, [r2, #0]
 800b25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b264:	f380 8811 	msr	BASEPRI, r0
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f7fe feb2 	bl	8009fd8 <vTaskSwitchContext>
 800b274:	f04f 0000 	mov.w	r0, #0
 800b278:	f380 8811 	msr	BASEPRI, r0
 800b27c:	bc09      	pop	{r0, r3}
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	6808      	ldr	r0, [r1, #0]
 800b282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b286:	f01e 0f10 	tst.w	lr, #16
 800b28a:	bf08      	it	eq
 800b28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b290:	f380 8809 	msr	PSP, r0
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w

0800b2a0 <pxCurrentTCBConst>:
 800b2a0:	20000dd4 	.word	0x20000dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2c2:	f7fe fdcf 	bl	8009e64 <xTaskIncrementTick>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <xPortSysTickHandler+0x40>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	f383 8811 	msr	BASEPRI, r3
}
 800b2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <vPortSetupTimerInterrupt+0x38>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <vPortSetupTimerInterrupt+0x3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <vPortSetupTimerInterrupt+0x40>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	099b      	lsrs	r3, r3, #6
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <vPortSetupTimerInterrupt+0x44>)
 800b30a:	3b01      	subs	r3, #1
 800b30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010
 800b324:	e000e018 	.word	0xe000e018
 800b328:	200000a8 	.word	0x200000a8
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	e000e014 	.word	0xe000e014

0800b334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b344 <vPortEnableVFP+0x10>
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b33e:	6001      	str	r1, [r0, #0]
 800b340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b342:	bf00      	nop
 800b344:	e000ed88 	.word	0xe000ed88

0800b348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d914      	bls.n	800b384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b35a:	4a17      	ldr	r2, [pc, #92]	; (800b3b8 <vPortValidateInterruptPriority+0x70>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b364:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <vPortValidateInterruptPriority+0x74>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d20a      	bcs.n	800b384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	607b      	str	r3, [r7, #4]
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b384:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <vPortValidateInterruptPriority+0x78>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <vPortValidateInterruptPriority+0x7c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d90a      	bls.n	800b3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	603b      	str	r3, [r7, #0]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vPortValidateInterruptPriority+0x60>
	}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	e000e3f0 	.word	0xe000e3f0
 800b3bc:	20001400 	.word	0x20001400
 800b3c0:	e000ed0c 	.word	0xe000ed0c
 800b3c4:	20001404 	.word	0x20001404

0800b3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3d4:	f7fe fc8a 	bl	8009cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3d8:	4b5b      	ldr	r3, [pc, #364]	; (800b548 <pvPortMalloc+0x180>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3e0:	f000 f920 	bl	800b624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3e4:	4b59      	ldr	r3, [pc, #356]	; (800b54c <pvPortMalloc+0x184>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 8093 	bne.w	800b518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01d      	beq.n	800b434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	2b00      	cmp	r3, #0
 800b408:	d014      	beq.n	800b434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f023 0307 	bic.w	r3, r3, #7
 800b410:	3308      	adds	r3, #8
 800b412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <pvPortMalloc+0x6c>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	617b      	str	r3, [r7, #20]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d06e      	beq.n	800b518 <pvPortMalloc+0x150>
 800b43a:	4b45      	ldr	r3, [pc, #276]	; (800b550 <pvPortMalloc+0x188>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d869      	bhi.n	800b518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b444:	4b43      	ldr	r3, [pc, #268]	; (800b554 <pvPortMalloc+0x18c>)
 800b446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b448:	4b42      	ldr	r3, [pc, #264]	; (800b554 <pvPortMalloc+0x18c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b44e:	e004      	b.n	800b45a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	429a      	cmp	r2, r3
 800b462:	d903      	bls.n	800b46c <pvPortMalloc+0xa4>
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f1      	bne.n	800b450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b46c:	4b36      	ldr	r3, [pc, #216]	; (800b548 <pvPortMalloc+0x180>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b472:	429a      	cmp	r2, r3
 800b474:	d050      	beq.n	800b518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2208      	movs	r2, #8
 800b47c:	4413      	add	r3, r2
 800b47e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	1ad2      	subs	r2, r2, r3
 800b490:	2308      	movs	r3, #8
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	429a      	cmp	r2, r3
 800b496:	d91f      	bls.n	800b4d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4413      	add	r3, r2
 800b49e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f003 0307 	and.w	r3, r3, #7
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	613b      	str	r3, [r7, #16]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	1ad2      	subs	r2, r2, r3
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4d2:	69b8      	ldr	r0, [r7, #24]
 800b4d4:	f000 f908 	bl	800b6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4d8:	4b1d      	ldr	r3, [pc, #116]	; (800b550 <pvPortMalloc+0x188>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	4a1b      	ldr	r2, [pc, #108]	; (800b550 <pvPortMalloc+0x188>)
 800b4e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4e6:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <pvPortMalloc+0x188>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <pvPortMalloc+0x190>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d203      	bcs.n	800b4fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4f2:	4b17      	ldr	r3, [pc, #92]	; (800b550 <pvPortMalloc+0x188>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a18      	ldr	r2, [pc, #96]	; (800b558 <pvPortMalloc+0x190>)
 800b4f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <pvPortMalloc+0x184>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	431a      	orrs	r2, r3
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	2200      	movs	r2, #0
 800b50c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b50e:	4b13      	ldr	r3, [pc, #76]	; (800b55c <pvPortMalloc+0x194>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a11      	ldr	r2, [pc, #68]	; (800b55c <pvPortMalloc+0x194>)
 800b516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b518:	f7fe fbf6 	bl	8009d08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <pvPortMalloc+0x174>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	60fb      	str	r3, [r7, #12]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <pvPortMalloc+0x172>
	return pvReturn;
 800b53c:	69fb      	ldr	r3, [r7, #28]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3728      	adds	r7, #40	; 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20005010 	.word	0x20005010
 800b54c:	20005024 	.word	0x20005024
 800b550:	20005014 	.word	0x20005014
 800b554:	20005008 	.word	0x20005008
 800b558:	20005018 	.word	0x20005018
 800b55c:	2000501c 	.word	0x2000501c

0800b560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d04d      	beq.n	800b60e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b572:	2308      	movs	r3, #8
 800b574:	425b      	negs	r3, r3
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	4413      	add	r3, r2
 800b57a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	4b24      	ldr	r3, [pc, #144]	; (800b618 <vPortFree+0xb8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4013      	ands	r3, r2
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <vPortFree+0x44>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	60fb      	str	r3, [r7, #12]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <vPortFree+0x62>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	60bb      	str	r3, [r7, #8]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <vPortFree+0xb8>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01e      	beq.n	800b60e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11a      	bne.n	800b60e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	4b0e      	ldr	r3, [pc, #56]	; (800b618 <vPortFree+0xb8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	401a      	ands	r2, r3
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5e8:	f7fe fb80 	bl	8009cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <vPortFree+0xbc>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	4a09      	ldr	r2, [pc, #36]	; (800b61c <vPortFree+0xbc>)
 800b5f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5fa:	6938      	ldr	r0, [r7, #16]
 800b5fc:	f000 f874 	bl	800b6e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <vPortFree+0xc0>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	4a06      	ldr	r2, [pc, #24]	; (800b620 <vPortFree+0xc0>)
 800b608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b60a:	f7fe fb7d 	bl	8009d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b60e:	bf00      	nop
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20005024 	.word	0x20005024
 800b61c:	20005014 	.word	0x20005014
 800b620:	20005020 	.word	0x20005020

0800b624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b62a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b630:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <prvHeapInit+0xac>)
 800b632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00c      	beq.n	800b658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3307      	adds	r3, #7
 800b642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f023 0307 	bic.w	r3, r3, #7
 800b64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	4a1f      	ldr	r2, [pc, #124]	; (800b6d0 <prvHeapInit+0xac>)
 800b654:	4413      	add	r3, r2
 800b656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b65c:	4a1d      	ldr	r2, [pc, #116]	; (800b6d4 <prvHeapInit+0xb0>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b662:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <prvHeapInit+0xb0>)
 800b664:	2200      	movs	r2, #0
 800b666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	4413      	add	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b670:	2208      	movs	r2, #8
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 0307 	bic.w	r3, r3, #7
 800b67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4a15      	ldr	r2, [pc, #84]	; (800b6d8 <prvHeapInit+0xb4>)
 800b684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b686:	4b14      	ldr	r3, [pc, #80]	; (800b6d8 <prvHeapInit+0xb4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2200      	movs	r2, #0
 800b68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b68e:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <prvHeapInit+0xb4>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <prvHeapInit+0xb4>)
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	4a0a      	ldr	r2, [pc, #40]	; (800b6dc <prvHeapInit+0xb8>)
 800b6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	4a09      	ldr	r2, [pc, #36]	; (800b6e0 <prvHeapInit+0xbc>)
 800b6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6bc:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <prvHeapInit+0xc0>)
 800b6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6c2:	601a      	str	r2, [r3, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	20001408 	.word	0x20001408
 800b6d4:	20005008 	.word	0x20005008
 800b6d8:	20005010 	.word	0x20005010
 800b6dc:	20005018 	.word	0x20005018
 800b6e0:	20005014 	.word	0x20005014
 800b6e4:	20005024 	.word	0x20005024

0800b6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6f0:	4b28      	ldr	r3, [pc, #160]	; (800b794 <prvInsertBlockIntoFreeList+0xac>)
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e002      	b.n	800b6fc <prvInsertBlockIntoFreeList+0x14>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d8f7      	bhi.n	800b6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	4413      	add	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	429a      	cmp	r2, r3
 800b716:	d108      	bne.n	800b72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	441a      	add	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	441a      	add	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d118      	bne.n	800b770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	4b15      	ldr	r3, [pc, #84]	; (800b798 <prvInsertBlockIntoFreeList+0xb0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d00d      	beq.n	800b766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	441a      	add	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	e008      	b.n	800b778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b766:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <prvInsertBlockIntoFreeList+0xb0>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	e003      	b.n	800b778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d002      	beq.n	800b786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b786:	bf00      	nop
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20005008 	.word	0x20005008
 800b798:	20005010 	.word	0x20005010

0800b79c <__errno>:
 800b79c:	4b01      	ldr	r3, [pc, #4]	; (800b7a4 <__errno+0x8>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	200000b8 	.word	0x200000b8

0800b7a8 <__libc_init_array>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	4d0d      	ldr	r5, [pc, #52]	; (800b7e0 <__libc_init_array+0x38>)
 800b7ac:	4c0d      	ldr	r4, [pc, #52]	; (800b7e4 <__libc_init_array+0x3c>)
 800b7ae:	1b64      	subs	r4, r4, r5
 800b7b0:	10a4      	asrs	r4, r4, #2
 800b7b2:	2600      	movs	r6, #0
 800b7b4:	42a6      	cmp	r6, r4
 800b7b6:	d109      	bne.n	800b7cc <__libc_init_array+0x24>
 800b7b8:	4d0b      	ldr	r5, [pc, #44]	; (800b7e8 <__libc_init_array+0x40>)
 800b7ba:	4c0c      	ldr	r4, [pc, #48]	; (800b7ec <__libc_init_array+0x44>)
 800b7bc:	f005 fc1c 	bl	8010ff8 <_init>
 800b7c0:	1b64      	subs	r4, r4, r5
 800b7c2:	10a4      	asrs	r4, r4, #2
 800b7c4:	2600      	movs	r6, #0
 800b7c6:	42a6      	cmp	r6, r4
 800b7c8:	d105      	bne.n	800b7d6 <__libc_init_array+0x2e>
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d0:	4798      	blx	r3
 800b7d2:	3601      	adds	r6, #1
 800b7d4:	e7ee      	b.n	800b7b4 <__libc_init_array+0xc>
 800b7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7da:	4798      	blx	r3
 800b7dc:	3601      	adds	r6, #1
 800b7de:	e7f2      	b.n	800b7c6 <__libc_init_array+0x1e>
 800b7e0:	080119c8 	.word	0x080119c8
 800b7e4:	080119c8 	.word	0x080119c8
 800b7e8:	080119c8 	.word	0x080119c8
 800b7ec:	080119cc 	.word	0x080119cc

0800b7f0 <memcpy>:
 800b7f0:	440a      	add	r2, r1
 800b7f2:	4291      	cmp	r1, r2
 800b7f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7f8:	d100      	bne.n	800b7fc <memcpy+0xc>
 800b7fa:	4770      	bx	lr
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b802:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b806:	4291      	cmp	r1, r2
 800b808:	d1f9      	bne.n	800b7fe <memcpy+0xe>
 800b80a:	bd10      	pop	{r4, pc}

0800b80c <memset>:
 800b80c:	4402      	add	r2, r0
 800b80e:	4603      	mov	r3, r0
 800b810:	4293      	cmp	r3, r2
 800b812:	d100      	bne.n	800b816 <memset+0xa>
 800b814:	4770      	bx	lr
 800b816:	f803 1b01 	strb.w	r1, [r3], #1
 800b81a:	e7f9      	b.n	800b810 <memset+0x4>

0800b81c <__cvt>:
 800b81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	ec55 4b10 	vmov	r4, r5, d0
 800b824:	2d00      	cmp	r5, #0
 800b826:	460e      	mov	r6, r1
 800b828:	4619      	mov	r1, r3
 800b82a:	462b      	mov	r3, r5
 800b82c:	bfbb      	ittet	lt
 800b82e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b832:	461d      	movlt	r5, r3
 800b834:	2300      	movge	r3, #0
 800b836:	232d      	movlt	r3, #45	; 0x2d
 800b838:	700b      	strb	r3, [r1, #0]
 800b83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b840:	4691      	mov	r9, r2
 800b842:	f023 0820 	bic.w	r8, r3, #32
 800b846:	bfbc      	itt	lt
 800b848:	4622      	movlt	r2, r4
 800b84a:	4614      	movlt	r4, r2
 800b84c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b850:	d005      	beq.n	800b85e <__cvt+0x42>
 800b852:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b856:	d100      	bne.n	800b85a <__cvt+0x3e>
 800b858:	3601      	adds	r6, #1
 800b85a:	2102      	movs	r1, #2
 800b85c:	e000      	b.n	800b860 <__cvt+0x44>
 800b85e:	2103      	movs	r1, #3
 800b860:	ab03      	add	r3, sp, #12
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	ab02      	add	r3, sp, #8
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	ec45 4b10 	vmov	d0, r4, r5
 800b86c:	4653      	mov	r3, sl
 800b86e:	4632      	mov	r2, r6
 800b870:	f001 fe56 	bl	800d520 <_dtoa_r>
 800b874:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b878:	4607      	mov	r7, r0
 800b87a:	d102      	bne.n	800b882 <__cvt+0x66>
 800b87c:	f019 0f01 	tst.w	r9, #1
 800b880:	d022      	beq.n	800b8c8 <__cvt+0xac>
 800b882:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b886:	eb07 0906 	add.w	r9, r7, r6
 800b88a:	d110      	bne.n	800b8ae <__cvt+0x92>
 800b88c:	783b      	ldrb	r3, [r7, #0]
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d10a      	bne.n	800b8a8 <__cvt+0x8c>
 800b892:	2200      	movs	r2, #0
 800b894:	2300      	movs	r3, #0
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f5 f92d 	bl	8000af8 <__aeabi_dcmpeq>
 800b89e:	b918      	cbnz	r0, 800b8a8 <__cvt+0x8c>
 800b8a0:	f1c6 0601 	rsb	r6, r6, #1
 800b8a4:	f8ca 6000 	str.w	r6, [sl]
 800b8a8:	f8da 3000 	ldr.w	r3, [sl]
 800b8ac:	4499      	add	r9, r3
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7f5 f91f 	bl	8000af8 <__aeabi_dcmpeq>
 800b8ba:	b108      	cbz	r0, 800b8c0 <__cvt+0xa4>
 800b8bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8c0:	2230      	movs	r2, #48	; 0x30
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	454b      	cmp	r3, r9
 800b8c6:	d307      	bcc.n	800b8d8 <__cvt+0xbc>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8cc:	1bdb      	subs	r3, r3, r7
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	b004      	add	sp, #16
 800b8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d8:	1c59      	adds	r1, r3, #1
 800b8da:	9103      	str	r1, [sp, #12]
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	e7f0      	b.n	800b8c2 <__cvt+0xa6>

0800b8e0 <__exponent>:
 800b8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	bfb8      	it	lt
 800b8e8:	4249      	neglt	r1, r1
 800b8ea:	f803 2b02 	strb.w	r2, [r3], #2
 800b8ee:	bfb4      	ite	lt
 800b8f0:	222d      	movlt	r2, #45	; 0x2d
 800b8f2:	222b      	movge	r2, #43	; 0x2b
 800b8f4:	2909      	cmp	r1, #9
 800b8f6:	7042      	strb	r2, [r0, #1]
 800b8f8:	dd2a      	ble.n	800b950 <__exponent+0x70>
 800b8fa:	f10d 0407 	add.w	r4, sp, #7
 800b8fe:	46a4      	mov	ip, r4
 800b900:	270a      	movs	r7, #10
 800b902:	46a6      	mov	lr, r4
 800b904:	460a      	mov	r2, r1
 800b906:	fb91 f6f7 	sdiv	r6, r1, r7
 800b90a:	fb07 1516 	mls	r5, r7, r6, r1
 800b90e:	3530      	adds	r5, #48	; 0x30
 800b910:	2a63      	cmp	r2, #99	; 0x63
 800b912:	f104 34ff 	add.w	r4, r4, #4294967295
 800b916:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b91a:	4631      	mov	r1, r6
 800b91c:	dcf1      	bgt.n	800b902 <__exponent+0x22>
 800b91e:	3130      	adds	r1, #48	; 0x30
 800b920:	f1ae 0502 	sub.w	r5, lr, #2
 800b924:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b928:	1c44      	adds	r4, r0, #1
 800b92a:	4629      	mov	r1, r5
 800b92c:	4561      	cmp	r1, ip
 800b92e:	d30a      	bcc.n	800b946 <__exponent+0x66>
 800b930:	f10d 0209 	add.w	r2, sp, #9
 800b934:	eba2 020e 	sub.w	r2, r2, lr
 800b938:	4565      	cmp	r5, ip
 800b93a:	bf88      	it	hi
 800b93c:	2200      	movhi	r2, #0
 800b93e:	4413      	add	r3, r2
 800b940:	1a18      	subs	r0, r3, r0
 800b942:	b003      	add	sp, #12
 800b944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b94a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b94e:	e7ed      	b.n	800b92c <__exponent+0x4c>
 800b950:	2330      	movs	r3, #48	; 0x30
 800b952:	3130      	adds	r1, #48	; 0x30
 800b954:	7083      	strb	r3, [r0, #2]
 800b956:	70c1      	strb	r1, [r0, #3]
 800b958:	1d03      	adds	r3, r0, #4
 800b95a:	e7f1      	b.n	800b940 <__exponent+0x60>

0800b95c <_printf_float>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	ed2d 8b02 	vpush	{d8}
 800b964:	b08d      	sub	sp, #52	; 0x34
 800b966:	460c      	mov	r4, r1
 800b968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b96c:	4616      	mov	r6, r2
 800b96e:	461f      	mov	r7, r3
 800b970:	4605      	mov	r5, r0
 800b972:	f002 ff33 	bl	800e7dc <_localeconv_r>
 800b976:	f8d0 a000 	ldr.w	sl, [r0]
 800b97a:	4650      	mov	r0, sl
 800b97c:	f7f4 fc3a 	bl	80001f4 <strlen>
 800b980:	2300      	movs	r3, #0
 800b982:	930a      	str	r3, [sp, #40]	; 0x28
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	f8d8 3000 	ldr.w	r3, [r8]
 800b98c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b990:	3307      	adds	r3, #7
 800b992:	f023 0307 	bic.w	r3, r3, #7
 800b996:	f103 0208 	add.w	r2, r3, #8
 800b99a:	f8c8 2000 	str.w	r2, [r8]
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b9a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b9aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9b4:	ee08 0a10 	vmov	s16, r0
 800b9b8:	4b9f      	ldr	r3, [pc, #636]	; (800bc38 <_printf_float+0x2dc>)
 800b9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9be:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c2:	f7f5 f8cb 	bl	8000b5c <__aeabi_dcmpun>
 800b9c6:	bb88      	cbnz	r0, 800ba2c <_printf_float+0xd0>
 800b9c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9cc:	4b9a      	ldr	r3, [pc, #616]	; (800bc38 <_printf_float+0x2dc>)
 800b9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d2:	f7f5 f8a5 	bl	8000b20 <__aeabi_dcmple>
 800b9d6:	bb48      	cbnz	r0, 800ba2c <_printf_float+0xd0>
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4640      	mov	r0, r8
 800b9de:	4649      	mov	r1, r9
 800b9e0:	f7f5 f894 	bl	8000b0c <__aeabi_dcmplt>
 800b9e4:	b110      	cbz	r0, 800b9ec <_printf_float+0x90>
 800b9e6:	232d      	movs	r3, #45	; 0x2d
 800b9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ec:	4b93      	ldr	r3, [pc, #588]	; (800bc3c <_printf_float+0x2e0>)
 800b9ee:	4894      	ldr	r0, [pc, #592]	; (800bc40 <_printf_float+0x2e4>)
 800b9f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9f4:	bf94      	ite	ls
 800b9f6:	4698      	movls	r8, r3
 800b9f8:	4680      	movhi	r8, r0
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	6123      	str	r3, [r4, #16]
 800b9fe:	9b05      	ldr	r3, [sp, #20]
 800ba00:	f023 0204 	bic.w	r2, r3, #4
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	f04f 0900 	mov.w	r9, #0
 800ba0a:	9700      	str	r7, [sp, #0]
 800ba0c:	4633      	mov	r3, r6
 800ba0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba10:	4621      	mov	r1, r4
 800ba12:	4628      	mov	r0, r5
 800ba14:	f000 f9d8 	bl	800bdc8 <_printf_common>
 800ba18:	3001      	adds	r0, #1
 800ba1a:	f040 8090 	bne.w	800bb3e <_printf_float+0x1e2>
 800ba1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba22:	b00d      	add	sp, #52	; 0x34
 800ba24:	ecbd 8b02 	vpop	{d8}
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	4642      	mov	r2, r8
 800ba2e:	464b      	mov	r3, r9
 800ba30:	4640      	mov	r0, r8
 800ba32:	4649      	mov	r1, r9
 800ba34:	f7f5 f892 	bl	8000b5c <__aeabi_dcmpun>
 800ba38:	b140      	cbz	r0, 800ba4c <_printf_float+0xf0>
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfbc      	itt	lt
 800ba40:	232d      	movlt	r3, #45	; 0x2d
 800ba42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba46:	487f      	ldr	r0, [pc, #508]	; (800bc44 <_printf_float+0x2e8>)
 800ba48:	4b7f      	ldr	r3, [pc, #508]	; (800bc48 <_printf_float+0x2ec>)
 800ba4a:	e7d1      	b.n	800b9f0 <_printf_float+0x94>
 800ba4c:	6863      	ldr	r3, [r4, #4]
 800ba4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba52:	9206      	str	r2, [sp, #24]
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	d13f      	bne.n	800bad8 <_printf_float+0x17c>
 800ba58:	2306      	movs	r3, #6
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	9b05      	ldr	r3, [sp, #20]
 800ba5e:	6861      	ldr	r1, [r4, #4]
 800ba60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba64:	2300      	movs	r3, #0
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	ab0a      	add	r3, sp, #40	; 0x28
 800ba6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba6e:	ab09      	add	r3, sp, #36	; 0x24
 800ba70:	ec49 8b10 	vmov	d0, r8, r9
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	6022      	str	r2, [r4, #0]
 800ba78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f7ff fecd 	bl	800b81c <__cvt>
 800ba82:	9b06      	ldr	r3, [sp, #24]
 800ba84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba86:	2b47      	cmp	r3, #71	; 0x47
 800ba88:	4680      	mov	r8, r0
 800ba8a:	d108      	bne.n	800ba9e <_printf_float+0x142>
 800ba8c:	1cc8      	adds	r0, r1, #3
 800ba8e:	db02      	blt.n	800ba96 <_printf_float+0x13a>
 800ba90:	6863      	ldr	r3, [r4, #4]
 800ba92:	4299      	cmp	r1, r3
 800ba94:	dd41      	ble.n	800bb1a <_printf_float+0x1be>
 800ba96:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba9a:	fa5f fb8b 	uxtb.w	fp, fp
 800ba9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800baa2:	d820      	bhi.n	800bae6 <_printf_float+0x18a>
 800baa4:	3901      	subs	r1, #1
 800baa6:	465a      	mov	r2, fp
 800baa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800baac:	9109      	str	r1, [sp, #36]	; 0x24
 800baae:	f7ff ff17 	bl	800b8e0 <__exponent>
 800bab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bab4:	1813      	adds	r3, r2, r0
 800bab6:	2a01      	cmp	r2, #1
 800bab8:	4681      	mov	r9, r0
 800baba:	6123      	str	r3, [r4, #16]
 800babc:	dc02      	bgt.n	800bac4 <_printf_float+0x168>
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	07d2      	lsls	r2, r2, #31
 800bac2:	d501      	bpl.n	800bac8 <_printf_float+0x16c>
 800bac4:	3301      	adds	r3, #1
 800bac6:	6123      	str	r3, [r4, #16]
 800bac8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d09c      	beq.n	800ba0a <_printf_float+0xae>
 800bad0:	232d      	movs	r3, #45	; 0x2d
 800bad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad6:	e798      	b.n	800ba0a <_printf_float+0xae>
 800bad8:	9a06      	ldr	r2, [sp, #24]
 800bada:	2a47      	cmp	r2, #71	; 0x47
 800badc:	d1be      	bne.n	800ba5c <_printf_float+0x100>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1bc      	bne.n	800ba5c <_printf_float+0x100>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7b9      	b.n	800ba5a <_printf_float+0xfe>
 800bae6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800baea:	d118      	bne.n	800bb1e <_printf_float+0x1c2>
 800baec:	2900      	cmp	r1, #0
 800baee:	6863      	ldr	r3, [r4, #4]
 800baf0:	dd0b      	ble.n	800bb0a <_printf_float+0x1ae>
 800baf2:	6121      	str	r1, [r4, #16]
 800baf4:	b913      	cbnz	r3, 800bafc <_printf_float+0x1a0>
 800baf6:	6822      	ldr	r2, [r4, #0]
 800baf8:	07d0      	lsls	r0, r2, #31
 800bafa:	d502      	bpl.n	800bb02 <_printf_float+0x1a6>
 800bafc:	3301      	adds	r3, #1
 800bafe:	440b      	add	r3, r1
 800bb00:	6123      	str	r3, [r4, #16]
 800bb02:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb04:	f04f 0900 	mov.w	r9, #0
 800bb08:	e7de      	b.n	800bac8 <_printf_float+0x16c>
 800bb0a:	b913      	cbnz	r3, 800bb12 <_printf_float+0x1b6>
 800bb0c:	6822      	ldr	r2, [r4, #0]
 800bb0e:	07d2      	lsls	r2, r2, #31
 800bb10:	d501      	bpl.n	800bb16 <_printf_float+0x1ba>
 800bb12:	3302      	adds	r3, #2
 800bb14:	e7f4      	b.n	800bb00 <_printf_float+0x1a4>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e7f2      	b.n	800bb00 <_printf_float+0x1a4>
 800bb1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb20:	4299      	cmp	r1, r3
 800bb22:	db05      	blt.n	800bb30 <_printf_float+0x1d4>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	6121      	str	r1, [r4, #16]
 800bb28:	07d8      	lsls	r0, r3, #31
 800bb2a:	d5ea      	bpl.n	800bb02 <_printf_float+0x1a6>
 800bb2c:	1c4b      	adds	r3, r1, #1
 800bb2e:	e7e7      	b.n	800bb00 <_printf_float+0x1a4>
 800bb30:	2900      	cmp	r1, #0
 800bb32:	bfd4      	ite	le
 800bb34:	f1c1 0202 	rsble	r2, r1, #2
 800bb38:	2201      	movgt	r2, #1
 800bb3a:	4413      	add	r3, r2
 800bb3c:	e7e0      	b.n	800bb00 <_printf_float+0x1a4>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	055a      	lsls	r2, r3, #21
 800bb42:	d407      	bmi.n	800bb54 <_printf_float+0x1f8>
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	4642      	mov	r2, r8
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b8      	blx	r7
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d12c      	bne.n	800bbac <_printf_float+0x250>
 800bb52:	e764      	b.n	800ba1e <_printf_float+0xc2>
 800bb54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb58:	f240 80e0 	bls.w	800bd1c <_printf_float+0x3c0>
 800bb5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb60:	2200      	movs	r2, #0
 800bb62:	2300      	movs	r3, #0
 800bb64:	f7f4 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d034      	beq.n	800bbd6 <_printf_float+0x27a>
 800bb6c:	4a37      	ldr	r2, [pc, #220]	; (800bc4c <_printf_float+0x2f0>)
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	f43f af51 	beq.w	800ba1e <_printf_float+0xc2>
 800bb7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb80:	429a      	cmp	r2, r3
 800bb82:	db02      	blt.n	800bb8a <_printf_float+0x22e>
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	07d8      	lsls	r0, r3, #31
 800bb88:	d510      	bpl.n	800bbac <_printf_float+0x250>
 800bb8a:	ee18 3a10 	vmov	r3, s16
 800bb8e:	4652      	mov	r2, sl
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	f43f af41 	beq.w	800ba1e <_printf_float+0xc2>
 800bb9c:	f04f 0800 	mov.w	r8, #0
 800bba0:	f104 091a 	add.w	r9, r4, #26
 800bba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba6:	3b01      	subs	r3, #1
 800bba8:	4543      	cmp	r3, r8
 800bbaa:	dc09      	bgt.n	800bbc0 <_printf_float+0x264>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	079b      	lsls	r3, r3, #30
 800bbb0:	f100 8105 	bmi.w	800bdbe <_printf_float+0x462>
 800bbb4:	68e0      	ldr	r0, [r4, #12]
 800bbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb8:	4298      	cmp	r0, r3
 800bbba:	bfb8      	it	lt
 800bbbc:	4618      	movlt	r0, r3
 800bbbe:	e730      	b.n	800ba22 <_printf_float+0xc6>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	464a      	mov	r2, r9
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	47b8      	blx	r7
 800bbca:	3001      	adds	r0, #1
 800bbcc:	f43f af27 	beq.w	800ba1e <_printf_float+0xc2>
 800bbd0:	f108 0801 	add.w	r8, r8, #1
 800bbd4:	e7e6      	b.n	800bba4 <_printf_float+0x248>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc39      	bgt.n	800bc50 <_printf_float+0x2f4>
 800bbdc:	4a1b      	ldr	r2, [pc, #108]	; (800bc4c <_printf_float+0x2f0>)
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af19 	beq.w	800ba1e <_printf_float+0xc2>
 800bbec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d102      	bne.n	800bbfa <_printf_float+0x29e>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	07d9      	lsls	r1, r3, #31
 800bbf8:	d5d8      	bpl.n	800bbac <_printf_float+0x250>
 800bbfa:	ee18 3a10 	vmov	r3, s16
 800bbfe:	4652      	mov	r2, sl
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	f43f af09 	beq.w	800ba1e <_printf_float+0xc2>
 800bc0c:	f04f 0900 	mov.w	r9, #0
 800bc10:	f104 0a1a 	add.w	sl, r4, #26
 800bc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc16:	425b      	negs	r3, r3
 800bc18:	454b      	cmp	r3, r9
 800bc1a:	dc01      	bgt.n	800bc20 <_printf_float+0x2c4>
 800bc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc1e:	e792      	b.n	800bb46 <_printf_float+0x1ea>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4652      	mov	r2, sl
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f aef7 	beq.w	800ba1e <_printf_float+0xc2>
 800bc30:	f109 0901 	add.w	r9, r9, #1
 800bc34:	e7ee      	b.n	800bc14 <_printf_float+0x2b8>
 800bc36:	bf00      	nop
 800bc38:	7fefffff 	.word	0x7fefffff
 800bc3c:	08011494 	.word	0x08011494
 800bc40:	08011498 	.word	0x08011498
 800bc44:	080114a0 	.word	0x080114a0
 800bc48:	0801149c 	.word	0x0801149c
 800bc4c:	08011899 	.word	0x08011899
 800bc50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc54:	429a      	cmp	r2, r3
 800bc56:	bfa8      	it	ge
 800bc58:	461a      	movge	r2, r3
 800bc5a:	2a00      	cmp	r2, #0
 800bc5c:	4691      	mov	r9, r2
 800bc5e:	dc37      	bgt.n	800bcd0 <_printf_float+0x374>
 800bc60:	f04f 0b00 	mov.w	fp, #0
 800bc64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc68:	f104 021a 	add.w	r2, r4, #26
 800bc6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc6e:	9305      	str	r3, [sp, #20]
 800bc70:	eba3 0309 	sub.w	r3, r3, r9
 800bc74:	455b      	cmp	r3, fp
 800bc76:	dc33      	bgt.n	800bce0 <_printf_float+0x384>
 800bc78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	db3b      	blt.n	800bcf8 <_printf_float+0x39c>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07da      	lsls	r2, r3, #31
 800bc84:	d438      	bmi.n	800bcf8 <_printf_float+0x39c>
 800bc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc88:	9a05      	ldr	r2, [sp, #20]
 800bc8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc8c:	1a9a      	subs	r2, r3, r2
 800bc8e:	eba3 0901 	sub.w	r9, r3, r1
 800bc92:	4591      	cmp	r9, r2
 800bc94:	bfa8      	it	ge
 800bc96:	4691      	movge	r9, r2
 800bc98:	f1b9 0f00 	cmp.w	r9, #0
 800bc9c:	dc35      	bgt.n	800bd0a <_printf_float+0x3ae>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bca6:	f104 0a1a 	add.w	sl, r4, #26
 800bcaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcae:	1a9b      	subs	r3, r3, r2
 800bcb0:	eba3 0309 	sub.w	r3, r3, r9
 800bcb4:	4543      	cmp	r3, r8
 800bcb6:	f77f af79 	ble.w	800bbac <_printf_float+0x250>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4652      	mov	r2, sl
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f43f aeaa 	beq.w	800ba1e <_printf_float+0xc2>
 800bcca:	f108 0801 	add.w	r8, r8, #1
 800bcce:	e7ec      	b.n	800bcaa <_printf_float+0x34e>
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	4642      	mov	r2, r8
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	47b8      	blx	r7
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d1c0      	bne.n	800bc60 <_printf_float+0x304>
 800bcde:	e69e      	b.n	800ba1e <_printf_float+0xc2>
 800bce0:	2301      	movs	r3, #1
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	9205      	str	r2, [sp, #20]
 800bce8:	47b8      	blx	r7
 800bcea:	3001      	adds	r0, #1
 800bcec:	f43f ae97 	beq.w	800ba1e <_printf_float+0xc2>
 800bcf0:	9a05      	ldr	r2, [sp, #20]
 800bcf2:	f10b 0b01 	add.w	fp, fp, #1
 800bcf6:	e7b9      	b.n	800bc6c <_printf_float+0x310>
 800bcf8:	ee18 3a10 	vmov	r3, s16
 800bcfc:	4652      	mov	r2, sl
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	d1be      	bne.n	800bc86 <_printf_float+0x32a>
 800bd08:	e689      	b.n	800ba1e <_printf_float+0xc2>
 800bd0a:	9a05      	ldr	r2, [sp, #20]
 800bd0c:	464b      	mov	r3, r9
 800bd0e:	4442      	add	r2, r8
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	d1c1      	bne.n	800bc9e <_printf_float+0x342>
 800bd1a:	e680      	b.n	800ba1e <_printf_float+0xc2>
 800bd1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd1e:	2a01      	cmp	r2, #1
 800bd20:	dc01      	bgt.n	800bd26 <_printf_float+0x3ca>
 800bd22:	07db      	lsls	r3, r3, #31
 800bd24:	d538      	bpl.n	800bd98 <_printf_float+0x43c>
 800bd26:	2301      	movs	r3, #1
 800bd28:	4642      	mov	r2, r8
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	47b8      	blx	r7
 800bd30:	3001      	adds	r0, #1
 800bd32:	f43f ae74 	beq.w	800ba1e <_printf_float+0xc2>
 800bd36:	ee18 3a10 	vmov	r3, s16
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b8      	blx	r7
 800bd42:	3001      	adds	r0, #1
 800bd44:	f43f ae6b 	beq.w	800ba1e <_printf_float+0xc2>
 800bd48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f7f4 fed2 	bl	8000af8 <__aeabi_dcmpeq>
 800bd54:	b9d8      	cbnz	r0, 800bd8e <_printf_float+0x432>
 800bd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd58:	f108 0201 	add.w	r2, r8, #1
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4628      	mov	r0, r5
 800bd62:	47b8      	blx	r7
 800bd64:	3001      	adds	r0, #1
 800bd66:	d10e      	bne.n	800bd86 <_printf_float+0x42a>
 800bd68:	e659      	b.n	800ba1e <_printf_float+0xc2>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4652      	mov	r2, sl
 800bd6e:	4631      	mov	r1, r6
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b8      	blx	r7
 800bd74:	3001      	adds	r0, #1
 800bd76:	f43f ae52 	beq.w	800ba1e <_printf_float+0xc2>
 800bd7a:	f108 0801 	add.w	r8, r8, #1
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	3b01      	subs	r3, #1
 800bd82:	4543      	cmp	r3, r8
 800bd84:	dcf1      	bgt.n	800bd6a <_printf_float+0x40e>
 800bd86:	464b      	mov	r3, r9
 800bd88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd8c:	e6dc      	b.n	800bb48 <_printf_float+0x1ec>
 800bd8e:	f04f 0800 	mov.w	r8, #0
 800bd92:	f104 0a1a 	add.w	sl, r4, #26
 800bd96:	e7f2      	b.n	800bd7e <_printf_float+0x422>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	e7df      	b.n	800bd5e <_printf_float+0x402>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	464a      	mov	r2, r9
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f43f ae38 	beq.w	800ba1e <_printf_float+0xc2>
 800bdae:	f108 0801 	add.w	r8, r8, #1
 800bdb2:	68e3      	ldr	r3, [r4, #12]
 800bdb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdb6:	1a5b      	subs	r3, r3, r1
 800bdb8:	4543      	cmp	r3, r8
 800bdba:	dcf0      	bgt.n	800bd9e <_printf_float+0x442>
 800bdbc:	e6fa      	b.n	800bbb4 <_printf_float+0x258>
 800bdbe:	f04f 0800 	mov.w	r8, #0
 800bdc2:	f104 0919 	add.w	r9, r4, #25
 800bdc6:	e7f4      	b.n	800bdb2 <_printf_float+0x456>

0800bdc8 <_printf_common>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	4616      	mov	r6, r2
 800bdce:	4699      	mov	r9, r3
 800bdd0:	688a      	ldr	r2, [r1, #8]
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	bfb8      	it	lt
 800bddc:	4613      	movlt	r3, r2
 800bdde:	6033      	str	r3, [r6, #0]
 800bde0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bde4:	4607      	mov	r7, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	b10a      	cbz	r2, 800bdee <_printf_common+0x26>
 800bdea:	3301      	adds	r3, #1
 800bdec:	6033      	str	r3, [r6, #0]
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	0699      	lsls	r1, r3, #26
 800bdf2:	bf42      	ittt	mi
 800bdf4:	6833      	ldrmi	r3, [r6, #0]
 800bdf6:	3302      	addmi	r3, #2
 800bdf8:	6033      	strmi	r3, [r6, #0]
 800bdfa:	6825      	ldr	r5, [r4, #0]
 800bdfc:	f015 0506 	ands.w	r5, r5, #6
 800be00:	d106      	bne.n	800be10 <_printf_common+0x48>
 800be02:	f104 0a19 	add.w	sl, r4, #25
 800be06:	68e3      	ldr	r3, [r4, #12]
 800be08:	6832      	ldr	r2, [r6, #0]
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	42ab      	cmp	r3, r5
 800be0e:	dc26      	bgt.n	800be5e <_printf_common+0x96>
 800be10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be14:	1e13      	subs	r3, r2, #0
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	bf18      	it	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	0692      	lsls	r2, r2, #26
 800be1e:	d42b      	bmi.n	800be78 <_printf_common+0xb0>
 800be20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be24:	4649      	mov	r1, r9
 800be26:	4638      	mov	r0, r7
 800be28:	47c0      	blx	r8
 800be2a:	3001      	adds	r0, #1
 800be2c:	d01e      	beq.n	800be6c <_printf_common+0xa4>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	68e5      	ldr	r5, [r4, #12]
 800be32:	6832      	ldr	r2, [r6, #0]
 800be34:	f003 0306 	and.w	r3, r3, #6
 800be38:	2b04      	cmp	r3, #4
 800be3a:	bf08      	it	eq
 800be3c:	1aad      	subeq	r5, r5, r2
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	6922      	ldr	r2, [r4, #16]
 800be42:	bf0c      	ite	eq
 800be44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be48:	2500      	movne	r5, #0
 800be4a:	4293      	cmp	r3, r2
 800be4c:	bfc4      	itt	gt
 800be4e:	1a9b      	subgt	r3, r3, r2
 800be50:	18ed      	addgt	r5, r5, r3
 800be52:	2600      	movs	r6, #0
 800be54:	341a      	adds	r4, #26
 800be56:	42b5      	cmp	r5, r6
 800be58:	d11a      	bne.n	800be90 <_printf_common+0xc8>
 800be5a:	2000      	movs	r0, #0
 800be5c:	e008      	b.n	800be70 <_printf_common+0xa8>
 800be5e:	2301      	movs	r3, #1
 800be60:	4652      	mov	r2, sl
 800be62:	4649      	mov	r1, r9
 800be64:	4638      	mov	r0, r7
 800be66:	47c0      	blx	r8
 800be68:	3001      	adds	r0, #1
 800be6a:	d103      	bne.n	800be74 <_printf_common+0xac>
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295
 800be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be74:	3501      	adds	r5, #1
 800be76:	e7c6      	b.n	800be06 <_printf_common+0x3e>
 800be78:	18e1      	adds	r1, r4, r3
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	2030      	movs	r0, #48	; 0x30
 800be7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be82:	4422      	add	r2, r4
 800be84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be8c:	3302      	adds	r3, #2
 800be8e:	e7c7      	b.n	800be20 <_printf_common+0x58>
 800be90:	2301      	movs	r3, #1
 800be92:	4622      	mov	r2, r4
 800be94:	4649      	mov	r1, r9
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d0e6      	beq.n	800be6c <_printf_common+0xa4>
 800be9e:	3601      	adds	r6, #1
 800bea0:	e7d9      	b.n	800be56 <_printf_common+0x8e>
	...

0800bea4 <_printf_i>:
 800bea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	7e0f      	ldrb	r7, [r1, #24]
 800beaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800beac:	2f78      	cmp	r7, #120	; 0x78
 800beae:	4691      	mov	r9, r2
 800beb0:	4680      	mov	r8, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	469a      	mov	sl, r3
 800beb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800beba:	d807      	bhi.n	800becc <_printf_i+0x28>
 800bebc:	2f62      	cmp	r7, #98	; 0x62
 800bebe:	d80a      	bhi.n	800bed6 <_printf_i+0x32>
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	f000 80d8 	beq.w	800c076 <_printf_i+0x1d2>
 800bec6:	2f58      	cmp	r7, #88	; 0x58
 800bec8:	f000 80a3 	beq.w	800c012 <_printf_i+0x16e>
 800becc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bed4:	e03a      	b.n	800bf4c <_printf_i+0xa8>
 800bed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800beda:	2b15      	cmp	r3, #21
 800bedc:	d8f6      	bhi.n	800becc <_printf_i+0x28>
 800bede:	a101      	add	r1, pc, #4	; (adr r1, 800bee4 <_printf_i+0x40>)
 800bee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf51 	.word	0x0800bf51
 800beec:	0800becd 	.word	0x0800becd
 800bef0:	0800becd 	.word	0x0800becd
 800bef4:	0800becd 	.word	0x0800becd
 800bef8:	0800becd 	.word	0x0800becd
 800befc:	0800bf51 	.word	0x0800bf51
 800bf00:	0800becd 	.word	0x0800becd
 800bf04:	0800becd 	.word	0x0800becd
 800bf08:	0800becd 	.word	0x0800becd
 800bf0c:	0800becd 	.word	0x0800becd
 800bf10:	0800c05d 	.word	0x0800c05d
 800bf14:	0800bf81 	.word	0x0800bf81
 800bf18:	0800c03f 	.word	0x0800c03f
 800bf1c:	0800becd 	.word	0x0800becd
 800bf20:	0800becd 	.word	0x0800becd
 800bf24:	0800c07f 	.word	0x0800c07f
 800bf28:	0800becd 	.word	0x0800becd
 800bf2c:	0800bf81 	.word	0x0800bf81
 800bf30:	0800becd 	.word	0x0800becd
 800bf34:	0800becd 	.word	0x0800becd
 800bf38:	0800c047 	.word	0x0800c047
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	1d1a      	adds	r2, r3, #4
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	602a      	str	r2, [r5, #0]
 800bf44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e0a3      	b.n	800c098 <_printf_i+0x1f4>
 800bf50:	6820      	ldr	r0, [r4, #0]
 800bf52:	6829      	ldr	r1, [r5, #0]
 800bf54:	0606      	lsls	r6, r0, #24
 800bf56:	f101 0304 	add.w	r3, r1, #4
 800bf5a:	d50a      	bpl.n	800bf72 <_printf_i+0xce>
 800bf5c:	680e      	ldr	r6, [r1, #0]
 800bf5e:	602b      	str	r3, [r5, #0]
 800bf60:	2e00      	cmp	r6, #0
 800bf62:	da03      	bge.n	800bf6c <_printf_i+0xc8>
 800bf64:	232d      	movs	r3, #45	; 0x2d
 800bf66:	4276      	negs	r6, r6
 800bf68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf6c:	485e      	ldr	r0, [pc, #376]	; (800c0e8 <_printf_i+0x244>)
 800bf6e:	230a      	movs	r3, #10
 800bf70:	e019      	b.n	800bfa6 <_printf_i+0x102>
 800bf72:	680e      	ldr	r6, [r1, #0]
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf7a:	bf18      	it	ne
 800bf7c:	b236      	sxthne	r6, r6
 800bf7e:	e7ef      	b.n	800bf60 <_printf_i+0xbc>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	1d19      	adds	r1, r3, #4
 800bf86:	6029      	str	r1, [r5, #0]
 800bf88:	0601      	lsls	r1, r0, #24
 800bf8a:	d501      	bpl.n	800bf90 <_printf_i+0xec>
 800bf8c:	681e      	ldr	r6, [r3, #0]
 800bf8e:	e002      	b.n	800bf96 <_printf_i+0xf2>
 800bf90:	0646      	lsls	r6, r0, #25
 800bf92:	d5fb      	bpl.n	800bf8c <_printf_i+0xe8>
 800bf94:	881e      	ldrh	r6, [r3, #0]
 800bf96:	4854      	ldr	r0, [pc, #336]	; (800c0e8 <_printf_i+0x244>)
 800bf98:	2f6f      	cmp	r7, #111	; 0x6f
 800bf9a:	bf0c      	ite	eq
 800bf9c:	2308      	moveq	r3, #8
 800bf9e:	230a      	movne	r3, #10
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfa6:	6865      	ldr	r5, [r4, #4]
 800bfa8:	60a5      	str	r5, [r4, #8]
 800bfaa:	2d00      	cmp	r5, #0
 800bfac:	bfa2      	ittt	ge
 800bfae:	6821      	ldrge	r1, [r4, #0]
 800bfb0:	f021 0104 	bicge.w	r1, r1, #4
 800bfb4:	6021      	strge	r1, [r4, #0]
 800bfb6:	b90e      	cbnz	r6, 800bfbc <_printf_i+0x118>
 800bfb8:	2d00      	cmp	r5, #0
 800bfba:	d04d      	beq.n	800c058 <_printf_i+0x1b4>
 800bfbc:	4615      	mov	r5, r2
 800bfbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfc2:	fb03 6711 	mls	r7, r3, r1, r6
 800bfc6:	5dc7      	ldrb	r7, [r0, r7]
 800bfc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfcc:	4637      	mov	r7, r6
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	460e      	mov	r6, r1
 800bfd2:	d9f4      	bls.n	800bfbe <_printf_i+0x11a>
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d10b      	bne.n	800bff0 <_printf_i+0x14c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	07de      	lsls	r6, r3, #31
 800bfdc:	d508      	bpl.n	800bff0 <_printf_i+0x14c>
 800bfde:	6923      	ldr	r3, [r4, #16]
 800bfe0:	6861      	ldr	r1, [r4, #4]
 800bfe2:	4299      	cmp	r1, r3
 800bfe4:	bfde      	ittt	le
 800bfe6:	2330      	movle	r3, #48	; 0x30
 800bfe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bff0:	1b52      	subs	r2, r2, r5
 800bff2:	6122      	str	r2, [r4, #16]
 800bff4:	f8cd a000 	str.w	sl, [sp]
 800bff8:	464b      	mov	r3, r9
 800bffa:	aa03      	add	r2, sp, #12
 800bffc:	4621      	mov	r1, r4
 800bffe:	4640      	mov	r0, r8
 800c000:	f7ff fee2 	bl	800bdc8 <_printf_common>
 800c004:	3001      	adds	r0, #1
 800c006:	d14c      	bne.n	800c0a2 <_printf_i+0x1fe>
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	b004      	add	sp, #16
 800c00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c012:	4835      	ldr	r0, [pc, #212]	; (800c0e8 <_printf_i+0x244>)
 800c014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c018:	6829      	ldr	r1, [r5, #0]
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c020:	6029      	str	r1, [r5, #0]
 800c022:	061d      	lsls	r5, r3, #24
 800c024:	d514      	bpl.n	800c050 <_printf_i+0x1ac>
 800c026:	07df      	lsls	r7, r3, #31
 800c028:	bf44      	itt	mi
 800c02a:	f043 0320 	orrmi.w	r3, r3, #32
 800c02e:	6023      	strmi	r3, [r4, #0]
 800c030:	b91e      	cbnz	r6, 800c03a <_printf_i+0x196>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	f023 0320 	bic.w	r3, r3, #32
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	2310      	movs	r3, #16
 800c03c:	e7b0      	b.n	800bfa0 <_printf_i+0xfc>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	f043 0320 	orr.w	r3, r3, #32
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	2378      	movs	r3, #120	; 0x78
 800c048:	4828      	ldr	r0, [pc, #160]	; (800c0ec <_printf_i+0x248>)
 800c04a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c04e:	e7e3      	b.n	800c018 <_printf_i+0x174>
 800c050:	0659      	lsls	r1, r3, #25
 800c052:	bf48      	it	mi
 800c054:	b2b6      	uxthmi	r6, r6
 800c056:	e7e6      	b.n	800c026 <_printf_i+0x182>
 800c058:	4615      	mov	r5, r2
 800c05a:	e7bb      	b.n	800bfd4 <_printf_i+0x130>
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	6826      	ldr	r6, [r4, #0]
 800c060:	6961      	ldr	r1, [r4, #20]
 800c062:	1d18      	adds	r0, r3, #4
 800c064:	6028      	str	r0, [r5, #0]
 800c066:	0635      	lsls	r5, r6, #24
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	d501      	bpl.n	800c070 <_printf_i+0x1cc>
 800c06c:	6019      	str	r1, [r3, #0]
 800c06e:	e002      	b.n	800c076 <_printf_i+0x1d2>
 800c070:	0670      	lsls	r0, r6, #25
 800c072:	d5fb      	bpl.n	800c06c <_printf_i+0x1c8>
 800c074:	8019      	strh	r1, [r3, #0]
 800c076:	2300      	movs	r3, #0
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	4615      	mov	r5, r2
 800c07c:	e7ba      	b.n	800bff4 <_printf_i+0x150>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	1d1a      	adds	r2, r3, #4
 800c082:	602a      	str	r2, [r5, #0]
 800c084:	681d      	ldr	r5, [r3, #0]
 800c086:	6862      	ldr	r2, [r4, #4]
 800c088:	2100      	movs	r1, #0
 800c08a:	4628      	mov	r0, r5
 800c08c:	f7f4 f8c0 	bl	8000210 <memchr>
 800c090:	b108      	cbz	r0, 800c096 <_printf_i+0x1f2>
 800c092:	1b40      	subs	r0, r0, r5
 800c094:	6060      	str	r0, [r4, #4]
 800c096:	6863      	ldr	r3, [r4, #4]
 800c098:	6123      	str	r3, [r4, #16]
 800c09a:	2300      	movs	r3, #0
 800c09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a0:	e7a8      	b.n	800bff4 <_printf_i+0x150>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	47d0      	blx	sl
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d0ab      	beq.n	800c008 <_printf_i+0x164>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	079b      	lsls	r3, r3, #30
 800c0b4:	d413      	bmi.n	800c0de <_printf_i+0x23a>
 800c0b6:	68e0      	ldr	r0, [r4, #12]
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	4298      	cmp	r0, r3
 800c0bc:	bfb8      	it	lt
 800c0be:	4618      	movlt	r0, r3
 800c0c0:	e7a4      	b.n	800c00c <_printf_i+0x168>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	47d0      	blx	sl
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d09b      	beq.n	800c008 <_printf_i+0x164>
 800c0d0:	3501      	adds	r5, #1
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	9903      	ldr	r1, [sp, #12]
 800c0d6:	1a5b      	subs	r3, r3, r1
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dcf2      	bgt.n	800c0c2 <_printf_i+0x21e>
 800c0dc:	e7eb      	b.n	800c0b6 <_printf_i+0x212>
 800c0de:	2500      	movs	r5, #0
 800c0e0:	f104 0619 	add.w	r6, r4, #25
 800c0e4:	e7f5      	b.n	800c0d2 <_printf_i+0x22e>
 800c0e6:	bf00      	nop
 800c0e8:	080114a4 	.word	0x080114a4
 800c0ec:	080114b5 	.word	0x080114b5

0800c0f0 <_scanf_float>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	4617      	mov	r7, r2
 800c0f8:	9303      	str	r3, [sp, #12]
 800c0fa:	688b      	ldr	r3, [r1, #8]
 800c0fc:	1e5a      	subs	r2, r3, #1
 800c0fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c102:	bf83      	ittte	hi
 800c104:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c108:	195b      	addhi	r3, r3, r5
 800c10a:	9302      	strhi	r3, [sp, #8]
 800c10c:	2300      	movls	r3, #0
 800c10e:	bf86      	itte	hi
 800c110:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c114:	608b      	strhi	r3, [r1, #8]
 800c116:	9302      	strls	r3, [sp, #8]
 800c118:	680b      	ldr	r3, [r1, #0]
 800c11a:	468b      	mov	fp, r1
 800c11c:	2500      	movs	r5, #0
 800c11e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c122:	f84b 3b1c 	str.w	r3, [fp], #28
 800c126:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c12a:	4680      	mov	r8, r0
 800c12c:	460c      	mov	r4, r1
 800c12e:	465e      	mov	r6, fp
 800c130:	46aa      	mov	sl, r5
 800c132:	46a9      	mov	r9, r5
 800c134:	9501      	str	r5, [sp, #4]
 800c136:	68a2      	ldr	r2, [r4, #8]
 800c138:	b152      	cbz	r2, 800c150 <_scanf_float+0x60>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b4e      	cmp	r3, #78	; 0x4e
 800c140:	d864      	bhi.n	800c20c <_scanf_float+0x11c>
 800c142:	2b40      	cmp	r3, #64	; 0x40
 800c144:	d83c      	bhi.n	800c1c0 <_scanf_float+0xd0>
 800c146:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c14a:	b2c8      	uxtb	r0, r1
 800c14c:	280e      	cmp	r0, #14
 800c14e:	d93a      	bls.n	800c1c6 <_scanf_float+0xd6>
 800c150:	f1b9 0f00 	cmp.w	r9, #0
 800c154:	d003      	beq.n	800c15e <_scanf_float+0x6e>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c162:	f1ba 0f01 	cmp.w	sl, #1
 800c166:	f200 8113 	bhi.w	800c390 <_scanf_float+0x2a0>
 800c16a:	455e      	cmp	r6, fp
 800c16c:	f200 8105 	bhi.w	800c37a <_scanf_float+0x28a>
 800c170:	2501      	movs	r5, #1
 800c172:	4628      	mov	r0, r5
 800c174:	b007      	add	sp, #28
 800c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c17e:	2a0d      	cmp	r2, #13
 800c180:	d8e6      	bhi.n	800c150 <_scanf_float+0x60>
 800c182:	a101      	add	r1, pc, #4	; (adr r1, 800c188 <_scanf_float+0x98>)
 800c184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c188:	0800c2c7 	.word	0x0800c2c7
 800c18c:	0800c151 	.word	0x0800c151
 800c190:	0800c151 	.word	0x0800c151
 800c194:	0800c151 	.word	0x0800c151
 800c198:	0800c327 	.word	0x0800c327
 800c19c:	0800c2ff 	.word	0x0800c2ff
 800c1a0:	0800c151 	.word	0x0800c151
 800c1a4:	0800c151 	.word	0x0800c151
 800c1a8:	0800c2d5 	.word	0x0800c2d5
 800c1ac:	0800c151 	.word	0x0800c151
 800c1b0:	0800c151 	.word	0x0800c151
 800c1b4:	0800c151 	.word	0x0800c151
 800c1b8:	0800c151 	.word	0x0800c151
 800c1bc:	0800c28d 	.word	0x0800c28d
 800c1c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c1c4:	e7db      	b.n	800c17e <_scanf_float+0x8e>
 800c1c6:	290e      	cmp	r1, #14
 800c1c8:	d8c2      	bhi.n	800c150 <_scanf_float+0x60>
 800c1ca:	a001      	add	r0, pc, #4	; (adr r0, 800c1d0 <_scanf_float+0xe0>)
 800c1cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c1d0:	0800c27f 	.word	0x0800c27f
 800c1d4:	0800c151 	.word	0x0800c151
 800c1d8:	0800c27f 	.word	0x0800c27f
 800c1dc:	0800c313 	.word	0x0800c313
 800c1e0:	0800c151 	.word	0x0800c151
 800c1e4:	0800c22d 	.word	0x0800c22d
 800c1e8:	0800c269 	.word	0x0800c269
 800c1ec:	0800c269 	.word	0x0800c269
 800c1f0:	0800c269 	.word	0x0800c269
 800c1f4:	0800c269 	.word	0x0800c269
 800c1f8:	0800c269 	.word	0x0800c269
 800c1fc:	0800c269 	.word	0x0800c269
 800c200:	0800c269 	.word	0x0800c269
 800c204:	0800c269 	.word	0x0800c269
 800c208:	0800c269 	.word	0x0800c269
 800c20c:	2b6e      	cmp	r3, #110	; 0x6e
 800c20e:	d809      	bhi.n	800c224 <_scanf_float+0x134>
 800c210:	2b60      	cmp	r3, #96	; 0x60
 800c212:	d8b2      	bhi.n	800c17a <_scanf_float+0x8a>
 800c214:	2b54      	cmp	r3, #84	; 0x54
 800c216:	d077      	beq.n	800c308 <_scanf_float+0x218>
 800c218:	2b59      	cmp	r3, #89	; 0x59
 800c21a:	d199      	bne.n	800c150 <_scanf_float+0x60>
 800c21c:	2d07      	cmp	r5, #7
 800c21e:	d197      	bne.n	800c150 <_scanf_float+0x60>
 800c220:	2508      	movs	r5, #8
 800c222:	e029      	b.n	800c278 <_scanf_float+0x188>
 800c224:	2b74      	cmp	r3, #116	; 0x74
 800c226:	d06f      	beq.n	800c308 <_scanf_float+0x218>
 800c228:	2b79      	cmp	r3, #121	; 0x79
 800c22a:	e7f6      	b.n	800c21a <_scanf_float+0x12a>
 800c22c:	6821      	ldr	r1, [r4, #0]
 800c22e:	05c8      	lsls	r0, r1, #23
 800c230:	d51a      	bpl.n	800c268 <_scanf_float+0x178>
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c238:	6021      	str	r1, [r4, #0]
 800c23a:	f109 0901 	add.w	r9, r9, #1
 800c23e:	b11b      	cbz	r3, 800c248 <_scanf_float+0x158>
 800c240:	3b01      	subs	r3, #1
 800c242:	3201      	adds	r2, #1
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	60a2      	str	r2, [r4, #8]
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	3301      	adds	r3, #1
 800c252:	6123      	str	r3, [r4, #16]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3b01      	subs	r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	607b      	str	r3, [r7, #4]
 800c25c:	f340 8084 	ble.w	800c368 <_scanf_float+0x278>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	603b      	str	r3, [r7, #0]
 800c266:	e766      	b.n	800c136 <_scanf_float+0x46>
 800c268:	eb1a 0f05 	cmn.w	sl, r5
 800c26c:	f47f af70 	bne.w	800c150 <_scanf_float+0x60>
 800c270:	6822      	ldr	r2, [r4, #0]
 800c272:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c276:	6022      	str	r2, [r4, #0]
 800c278:	f806 3b01 	strb.w	r3, [r6], #1
 800c27c:	e7e4      	b.n	800c248 <_scanf_float+0x158>
 800c27e:	6822      	ldr	r2, [r4, #0]
 800c280:	0610      	lsls	r0, r2, #24
 800c282:	f57f af65 	bpl.w	800c150 <_scanf_float+0x60>
 800c286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c28a:	e7f4      	b.n	800c276 <_scanf_float+0x186>
 800c28c:	f1ba 0f00 	cmp.w	sl, #0
 800c290:	d10e      	bne.n	800c2b0 <_scanf_float+0x1c0>
 800c292:	f1b9 0f00 	cmp.w	r9, #0
 800c296:	d10e      	bne.n	800c2b6 <_scanf_float+0x1c6>
 800c298:	6822      	ldr	r2, [r4, #0]
 800c29a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c29e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2a2:	d108      	bne.n	800c2b6 <_scanf_float+0x1c6>
 800c2a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2a8:	6022      	str	r2, [r4, #0]
 800c2aa:	f04f 0a01 	mov.w	sl, #1
 800c2ae:	e7e3      	b.n	800c278 <_scanf_float+0x188>
 800c2b0:	f1ba 0f02 	cmp.w	sl, #2
 800c2b4:	d055      	beq.n	800c362 <_scanf_float+0x272>
 800c2b6:	2d01      	cmp	r5, #1
 800c2b8:	d002      	beq.n	800c2c0 <_scanf_float+0x1d0>
 800c2ba:	2d04      	cmp	r5, #4
 800c2bc:	f47f af48 	bne.w	800c150 <_scanf_float+0x60>
 800c2c0:	3501      	adds	r5, #1
 800c2c2:	b2ed      	uxtb	r5, r5
 800c2c4:	e7d8      	b.n	800c278 <_scanf_float+0x188>
 800c2c6:	f1ba 0f01 	cmp.w	sl, #1
 800c2ca:	f47f af41 	bne.w	800c150 <_scanf_float+0x60>
 800c2ce:	f04f 0a02 	mov.w	sl, #2
 800c2d2:	e7d1      	b.n	800c278 <_scanf_float+0x188>
 800c2d4:	b97d      	cbnz	r5, 800c2f6 <_scanf_float+0x206>
 800c2d6:	f1b9 0f00 	cmp.w	r9, #0
 800c2da:	f47f af3c 	bne.w	800c156 <_scanf_float+0x66>
 800c2de:	6822      	ldr	r2, [r4, #0]
 800c2e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c2e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2e8:	f47f af39 	bne.w	800c15e <_scanf_float+0x6e>
 800c2ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2f0:	6022      	str	r2, [r4, #0]
 800c2f2:	2501      	movs	r5, #1
 800c2f4:	e7c0      	b.n	800c278 <_scanf_float+0x188>
 800c2f6:	2d03      	cmp	r5, #3
 800c2f8:	d0e2      	beq.n	800c2c0 <_scanf_float+0x1d0>
 800c2fa:	2d05      	cmp	r5, #5
 800c2fc:	e7de      	b.n	800c2bc <_scanf_float+0x1cc>
 800c2fe:	2d02      	cmp	r5, #2
 800c300:	f47f af26 	bne.w	800c150 <_scanf_float+0x60>
 800c304:	2503      	movs	r5, #3
 800c306:	e7b7      	b.n	800c278 <_scanf_float+0x188>
 800c308:	2d06      	cmp	r5, #6
 800c30a:	f47f af21 	bne.w	800c150 <_scanf_float+0x60>
 800c30e:	2507      	movs	r5, #7
 800c310:	e7b2      	b.n	800c278 <_scanf_float+0x188>
 800c312:	6822      	ldr	r2, [r4, #0]
 800c314:	0591      	lsls	r1, r2, #22
 800c316:	f57f af1b 	bpl.w	800c150 <_scanf_float+0x60>
 800c31a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c31e:	6022      	str	r2, [r4, #0]
 800c320:	f8cd 9004 	str.w	r9, [sp, #4]
 800c324:	e7a8      	b.n	800c278 <_scanf_float+0x188>
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c32c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c330:	d006      	beq.n	800c340 <_scanf_float+0x250>
 800c332:	0550      	lsls	r0, r2, #21
 800c334:	f57f af0c 	bpl.w	800c150 <_scanf_float+0x60>
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	f43f af0f 	beq.w	800c15e <_scanf_float+0x6e>
 800c340:	0591      	lsls	r1, r2, #22
 800c342:	bf58      	it	pl
 800c344:	9901      	ldrpl	r1, [sp, #4]
 800c346:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c34a:	bf58      	it	pl
 800c34c:	eba9 0101 	subpl.w	r1, r9, r1
 800c350:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c354:	bf58      	it	pl
 800c356:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c35a:	6022      	str	r2, [r4, #0]
 800c35c:	f04f 0900 	mov.w	r9, #0
 800c360:	e78a      	b.n	800c278 <_scanf_float+0x188>
 800c362:	f04f 0a03 	mov.w	sl, #3
 800c366:	e787      	b.n	800c278 <_scanf_float+0x188>
 800c368:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c36c:	4639      	mov	r1, r7
 800c36e:	4640      	mov	r0, r8
 800c370:	4798      	blx	r3
 800c372:	2800      	cmp	r0, #0
 800c374:	f43f aedf 	beq.w	800c136 <_scanf_float+0x46>
 800c378:	e6ea      	b.n	800c150 <_scanf_float+0x60>
 800c37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c37e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c382:	463a      	mov	r2, r7
 800c384:	4640      	mov	r0, r8
 800c386:	4798      	blx	r3
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	6123      	str	r3, [r4, #16]
 800c38e:	e6ec      	b.n	800c16a <_scanf_float+0x7a>
 800c390:	1e6b      	subs	r3, r5, #1
 800c392:	2b06      	cmp	r3, #6
 800c394:	d825      	bhi.n	800c3e2 <_scanf_float+0x2f2>
 800c396:	2d02      	cmp	r5, #2
 800c398:	d836      	bhi.n	800c408 <_scanf_float+0x318>
 800c39a:	455e      	cmp	r6, fp
 800c39c:	f67f aee8 	bls.w	800c170 <_scanf_float+0x80>
 800c3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3a8:	463a      	mov	r2, r7
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4798      	blx	r3
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	6123      	str	r3, [r4, #16]
 800c3b4:	e7f1      	b.n	800c39a <_scanf_float+0x2aa>
 800c3b6:	9802      	ldr	r0, [sp, #8]
 800c3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c3c0:	9002      	str	r0, [sp, #8]
 800c3c2:	463a      	mov	r2, r7
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4798      	blx	r3
 800c3c8:	6923      	ldr	r3, [r4, #16]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3d2:	fa5f fa8a 	uxtb.w	sl, sl
 800c3d6:	f1ba 0f02 	cmp.w	sl, #2
 800c3da:	d1ec      	bne.n	800c3b6 <_scanf_float+0x2c6>
 800c3dc:	3d03      	subs	r5, #3
 800c3de:	b2ed      	uxtb	r5, r5
 800c3e0:	1b76      	subs	r6, r6, r5
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	05da      	lsls	r2, r3, #23
 800c3e6:	d52f      	bpl.n	800c448 <_scanf_float+0x358>
 800c3e8:	055b      	lsls	r3, r3, #21
 800c3ea:	d510      	bpl.n	800c40e <_scanf_float+0x31e>
 800c3ec:	455e      	cmp	r6, fp
 800c3ee:	f67f aebf 	bls.w	800c170 <_scanf_float+0x80>
 800c3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4798      	blx	r3
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	3b01      	subs	r3, #1
 800c404:	6123      	str	r3, [r4, #16]
 800c406:	e7f1      	b.n	800c3ec <_scanf_float+0x2fc>
 800c408:	46aa      	mov	sl, r5
 800c40a:	9602      	str	r6, [sp, #8]
 800c40c:	e7df      	b.n	800c3ce <_scanf_float+0x2de>
 800c40e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c412:	6923      	ldr	r3, [r4, #16]
 800c414:	2965      	cmp	r1, #101	; 0x65
 800c416:	f103 33ff 	add.w	r3, r3, #4294967295
 800c41a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c41e:	6123      	str	r3, [r4, #16]
 800c420:	d00c      	beq.n	800c43c <_scanf_float+0x34c>
 800c422:	2945      	cmp	r1, #69	; 0x45
 800c424:	d00a      	beq.n	800c43c <_scanf_float+0x34c>
 800c426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c42a:	463a      	mov	r2, r7
 800c42c:	4640      	mov	r0, r8
 800c42e:	4798      	blx	r3
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c436:	3b01      	subs	r3, #1
 800c438:	1eb5      	subs	r5, r6, #2
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c440:	463a      	mov	r2, r7
 800c442:	4640      	mov	r0, r8
 800c444:	4798      	blx	r3
 800c446:	462e      	mov	r6, r5
 800c448:	6825      	ldr	r5, [r4, #0]
 800c44a:	f015 0510 	ands.w	r5, r5, #16
 800c44e:	d159      	bne.n	800c504 <_scanf_float+0x414>
 800c450:	7035      	strb	r5, [r6, #0]
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c45c:	d11b      	bne.n	800c496 <_scanf_float+0x3a6>
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	454b      	cmp	r3, r9
 800c462:	eba3 0209 	sub.w	r2, r3, r9
 800c466:	d123      	bne.n	800c4b0 <_scanf_float+0x3c0>
 800c468:	2200      	movs	r2, #0
 800c46a:	4659      	mov	r1, fp
 800c46c:	4640      	mov	r0, r8
 800c46e:	f000 ff1d 	bl	800d2ac <_strtod_r>
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	f012 0f02 	tst.w	r2, #2
 800c47a:	ec57 6b10 	vmov	r6, r7, d0
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	d021      	beq.n	800c4c6 <_scanf_float+0x3d6>
 800c482:	9903      	ldr	r1, [sp, #12]
 800c484:	1d1a      	adds	r2, r3, #4
 800c486:	600a      	str	r2, [r1, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	e9c3 6700 	strd	r6, r7, [r3]
 800c48e:	68e3      	ldr	r3, [r4, #12]
 800c490:	3301      	adds	r3, #1
 800c492:	60e3      	str	r3, [r4, #12]
 800c494:	e66d      	b.n	800c172 <_scanf_float+0x82>
 800c496:	9b04      	ldr	r3, [sp, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d0e5      	beq.n	800c468 <_scanf_float+0x378>
 800c49c:	9905      	ldr	r1, [sp, #20]
 800c49e:	230a      	movs	r3, #10
 800c4a0:	462a      	mov	r2, r5
 800c4a2:	3101      	adds	r1, #1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	f000 ff89 	bl	800d3bc <_strtol_r>
 800c4aa:	9b04      	ldr	r3, [sp, #16]
 800c4ac:	9e05      	ldr	r6, [sp, #20]
 800c4ae:	1ac2      	subs	r2, r0, r3
 800c4b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c4b4:	429e      	cmp	r6, r3
 800c4b6:	bf28      	it	cs
 800c4b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c4bc:	4912      	ldr	r1, [pc, #72]	; (800c508 <_scanf_float+0x418>)
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f000 f82c 	bl	800c51c <siprintf>
 800c4c4:	e7d0      	b.n	800c468 <_scanf_float+0x378>
 800c4c6:	9903      	ldr	r1, [sp, #12]
 800c4c8:	f012 0f04 	tst.w	r2, #4
 800c4cc:	f103 0204 	add.w	r2, r3, #4
 800c4d0:	600a      	str	r2, [r1, #0]
 800c4d2:	d1d9      	bne.n	800c488 <_scanf_float+0x398>
 800c4d4:	f8d3 8000 	ldr.w	r8, [r3]
 800c4d8:	ee10 2a10 	vmov	r2, s0
 800c4dc:	ee10 0a10 	vmov	r0, s0
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f7f4 fb3a 	bl	8000b5c <__aeabi_dcmpun>
 800c4e8:	b128      	cbz	r0, 800c4f6 <_scanf_float+0x406>
 800c4ea:	4808      	ldr	r0, [pc, #32]	; (800c50c <_scanf_float+0x41c>)
 800c4ec:	f000 f810 	bl	800c510 <nanf>
 800c4f0:	ed88 0a00 	vstr	s0, [r8]
 800c4f4:	e7cb      	b.n	800c48e <_scanf_float+0x39e>
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f7f4 fb8d 	bl	8000c18 <__aeabi_d2f>
 800c4fe:	f8c8 0000 	str.w	r0, [r8]
 800c502:	e7c4      	b.n	800c48e <_scanf_float+0x39e>
 800c504:	2500      	movs	r5, #0
 800c506:	e634      	b.n	800c172 <_scanf_float+0x82>
 800c508:	080114c6 	.word	0x080114c6
 800c50c:	080118eb 	.word	0x080118eb

0800c510 <nanf>:
 800c510:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c518 <nanf+0x8>
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	7fc00000 	.word	0x7fc00000

0800c51c <siprintf>:
 800c51c:	b40e      	push	{r1, r2, r3}
 800c51e:	b500      	push	{lr}
 800c520:	b09c      	sub	sp, #112	; 0x70
 800c522:	ab1d      	add	r3, sp, #116	; 0x74
 800c524:	9002      	str	r0, [sp, #8]
 800c526:	9006      	str	r0, [sp, #24]
 800c528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c52c:	4809      	ldr	r0, [pc, #36]	; (800c554 <siprintf+0x38>)
 800c52e:	9107      	str	r1, [sp, #28]
 800c530:	9104      	str	r1, [sp, #16]
 800c532:	4909      	ldr	r1, [pc, #36]	; (800c558 <siprintf+0x3c>)
 800c534:	f853 2b04 	ldr.w	r2, [r3], #4
 800c538:	9105      	str	r1, [sp, #20]
 800c53a:	6800      	ldr	r0, [r0, #0]
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	a902      	add	r1, sp, #8
 800c540:	f002 ff90 	bl	800f464 <_svfiprintf_r>
 800c544:	9b02      	ldr	r3, [sp, #8]
 800c546:	2200      	movs	r2, #0
 800c548:	701a      	strb	r2, [r3, #0]
 800c54a:	b01c      	add	sp, #112	; 0x70
 800c54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c550:	b003      	add	sp, #12
 800c552:	4770      	bx	lr
 800c554:	200000b8 	.word	0x200000b8
 800c558:	ffff0208 	.word	0xffff0208

0800c55c <siscanf>:
 800c55c:	b40e      	push	{r1, r2, r3}
 800c55e:	b510      	push	{r4, lr}
 800c560:	b09f      	sub	sp, #124	; 0x7c
 800c562:	ac21      	add	r4, sp, #132	; 0x84
 800c564:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c568:	f854 2b04 	ldr.w	r2, [r4], #4
 800c56c:	9201      	str	r2, [sp, #4]
 800c56e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c572:	9004      	str	r0, [sp, #16]
 800c574:	9008      	str	r0, [sp, #32]
 800c576:	f7f3 fe3d 	bl	80001f4 <strlen>
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <siscanf+0x50>)
 800c57c:	9005      	str	r0, [sp, #20]
 800c57e:	9009      	str	r0, [sp, #36]	; 0x24
 800c580:	930d      	str	r3, [sp, #52]	; 0x34
 800c582:	480b      	ldr	r0, [pc, #44]	; (800c5b0 <siscanf+0x54>)
 800c584:	9a01      	ldr	r2, [sp, #4]
 800c586:	6800      	ldr	r0, [r0, #0]
 800c588:	9403      	str	r4, [sp, #12]
 800c58a:	2300      	movs	r3, #0
 800c58c:	9311      	str	r3, [sp, #68]	; 0x44
 800c58e:	9316      	str	r3, [sp, #88]	; 0x58
 800c590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c594:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c598:	a904      	add	r1, sp, #16
 800c59a:	4623      	mov	r3, r4
 800c59c:	f003 f8bc 	bl	800f718 <__ssvfiscanf_r>
 800c5a0:	b01f      	add	sp, #124	; 0x7c
 800c5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a6:	b003      	add	sp, #12
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	0800c5d7 	.word	0x0800c5d7
 800c5b0:	200000b8 	.word	0x200000b8

0800c5b4 <__sread>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5bc:	f003 fb76 	bl	800fcac <_read_r>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	bfab      	itete	ge
 800c5c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5c8:	181b      	addge	r3, r3, r0
 800c5ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5ce:	bfac      	ite	ge
 800c5d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5d2:	81a3      	strhlt	r3, [r4, #12]
 800c5d4:	bd10      	pop	{r4, pc}

0800c5d6 <__seofread>:
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	4770      	bx	lr

0800c5da <__swrite>:
 800c5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	461f      	mov	r7, r3
 800c5e0:	898b      	ldrh	r3, [r1, #12]
 800c5e2:	05db      	lsls	r3, r3, #23
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	d505      	bpl.n	800c5f8 <__swrite+0x1e>
 800c5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f002 f8f6 	bl	800e7e4 <_lseek_r>
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	4628      	mov	r0, r5
 800c60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c60e:	f000 bed7 	b.w	800d3c0 <_write_r>

0800c612 <__sseek>:
 800c612:	b510      	push	{r4, lr}
 800c614:	460c      	mov	r4, r1
 800c616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c61a:	f002 f8e3 	bl	800e7e4 <_lseek_r>
 800c61e:	1c43      	adds	r3, r0, #1
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	bf15      	itete	ne
 800c624:	6560      	strne	r0, [r4, #84]	; 0x54
 800c626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c62e:	81a3      	strheq	r3, [r4, #12]
 800c630:	bf18      	it	ne
 800c632:	81a3      	strhne	r3, [r4, #12]
 800c634:	bd10      	pop	{r4, pc}

0800c636 <__sclose>:
 800c636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c63a:	f000 bed3 	b.w	800d3e4 <_close_r>

0800c63e <strncmp>:
 800c63e:	b510      	push	{r4, lr}
 800c640:	b17a      	cbz	r2, 800c662 <strncmp+0x24>
 800c642:	4603      	mov	r3, r0
 800c644:	3901      	subs	r1, #1
 800c646:	1884      	adds	r4, r0, r2
 800c648:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c64c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c650:	4290      	cmp	r0, r2
 800c652:	d101      	bne.n	800c658 <strncmp+0x1a>
 800c654:	42a3      	cmp	r3, r4
 800c656:	d101      	bne.n	800c65c <strncmp+0x1e>
 800c658:	1a80      	subs	r0, r0, r2
 800c65a:	bd10      	pop	{r4, pc}
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1f3      	bne.n	800c648 <strncmp+0xa>
 800c660:	e7fa      	b.n	800c658 <strncmp+0x1a>
 800c662:	4610      	mov	r0, r2
 800c664:	e7f9      	b.n	800c65a <strncmp+0x1c>

0800c666 <sulp>:
 800c666:	b570      	push	{r4, r5, r6, lr}
 800c668:	4604      	mov	r4, r0
 800c66a:	460d      	mov	r5, r1
 800c66c:	ec45 4b10 	vmov	d0, r4, r5
 800c670:	4616      	mov	r6, r2
 800c672:	f002 fc55 	bl	800ef20 <__ulp>
 800c676:	ec51 0b10 	vmov	r0, r1, d0
 800c67a:	b17e      	cbz	r6, 800c69c <sulp+0x36>
 800c67c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c680:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c684:	2b00      	cmp	r3, #0
 800c686:	dd09      	ble.n	800c69c <sulp+0x36>
 800c688:	051b      	lsls	r3, r3, #20
 800c68a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c68e:	2400      	movs	r4, #0
 800c690:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c694:	4622      	mov	r2, r4
 800c696:	462b      	mov	r3, r5
 800c698:	f7f3 ffc6 	bl	8000628 <__aeabi_dmul>
 800c69c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6a0 <_strtod_l>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	ed2d 8b02 	vpush	{d8}
 800c6a8:	b09d      	sub	sp, #116	; 0x74
 800c6aa:	461f      	mov	r7, r3
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9318      	str	r3, [sp, #96]	; 0x60
 800c6b0:	4ba2      	ldr	r3, [pc, #648]	; (800c93c <_strtod_l+0x29c>)
 800c6b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9305      	str	r3, [sp, #20]
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	4688      	mov	r8, r1
 800c6be:	f7f3 fd99 	bl	80001f4 <strlen>
 800c6c2:	f04f 0a00 	mov.w	sl, #0
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	f04f 0b00 	mov.w	fp, #0
 800c6cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6d2:	781a      	ldrb	r2, [r3, #0]
 800c6d4:	2a2b      	cmp	r2, #43	; 0x2b
 800c6d6:	d04e      	beq.n	800c776 <_strtod_l+0xd6>
 800c6d8:	d83b      	bhi.n	800c752 <_strtod_l+0xb2>
 800c6da:	2a0d      	cmp	r2, #13
 800c6dc:	d834      	bhi.n	800c748 <_strtod_l+0xa8>
 800c6de:	2a08      	cmp	r2, #8
 800c6e0:	d834      	bhi.n	800c74c <_strtod_l+0xac>
 800c6e2:	2a00      	cmp	r2, #0
 800c6e4:	d03e      	beq.n	800c764 <_strtod_l+0xc4>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c6ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c6ec:	7833      	ldrb	r3, [r6, #0]
 800c6ee:	2b30      	cmp	r3, #48	; 0x30
 800c6f0:	f040 80b0 	bne.w	800c854 <_strtod_l+0x1b4>
 800c6f4:	7873      	ldrb	r3, [r6, #1]
 800c6f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6fa:	2b58      	cmp	r3, #88	; 0x58
 800c6fc:	d168      	bne.n	800c7d0 <_strtod_l+0x130>
 800c6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	ab18      	add	r3, sp, #96	; 0x60
 800c704:	9702      	str	r7, [sp, #8]
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	4a8d      	ldr	r2, [pc, #564]	; (800c940 <_strtod_l+0x2a0>)
 800c70a:	ab19      	add	r3, sp, #100	; 0x64
 800c70c:	a917      	add	r1, sp, #92	; 0x5c
 800c70e:	4620      	mov	r0, r4
 800c710:	f001 fd5c 	bl	800e1cc <__gethex>
 800c714:	f010 0707 	ands.w	r7, r0, #7
 800c718:	4605      	mov	r5, r0
 800c71a:	d005      	beq.n	800c728 <_strtod_l+0x88>
 800c71c:	2f06      	cmp	r7, #6
 800c71e:	d12c      	bne.n	800c77a <_strtod_l+0xda>
 800c720:	3601      	adds	r6, #1
 800c722:	2300      	movs	r3, #0
 800c724:	9617      	str	r6, [sp, #92]	; 0x5c
 800c726:	930a      	str	r3, [sp, #40]	; 0x28
 800c728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f040 8590 	bne.w	800d250 <_strtod_l+0xbb0>
 800c730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c732:	b1eb      	cbz	r3, 800c770 <_strtod_l+0xd0>
 800c734:	4652      	mov	r2, sl
 800c736:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c73a:	ec43 2b10 	vmov	d0, r2, r3
 800c73e:	b01d      	add	sp, #116	; 0x74
 800c740:	ecbd 8b02 	vpop	{d8}
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	2a20      	cmp	r2, #32
 800c74a:	d1cc      	bne.n	800c6e6 <_strtod_l+0x46>
 800c74c:	3301      	adds	r3, #1
 800c74e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c750:	e7be      	b.n	800c6d0 <_strtod_l+0x30>
 800c752:	2a2d      	cmp	r2, #45	; 0x2d
 800c754:	d1c7      	bne.n	800c6e6 <_strtod_l+0x46>
 800c756:	2201      	movs	r2, #1
 800c758:	920a      	str	r2, [sp, #40]	; 0x28
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c75e:	785b      	ldrb	r3, [r3, #1]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1c2      	bne.n	800c6ea <_strtod_l+0x4a>
 800c764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c766:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f040 856e 	bne.w	800d24c <_strtod_l+0xbac>
 800c770:	4652      	mov	r2, sl
 800c772:	465b      	mov	r3, fp
 800c774:	e7e1      	b.n	800c73a <_strtod_l+0x9a>
 800c776:	2200      	movs	r2, #0
 800c778:	e7ee      	b.n	800c758 <_strtod_l+0xb8>
 800c77a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c77c:	b13a      	cbz	r2, 800c78e <_strtod_l+0xee>
 800c77e:	2135      	movs	r1, #53	; 0x35
 800c780:	a81a      	add	r0, sp, #104	; 0x68
 800c782:	f002 fcd8 	bl	800f136 <__copybits>
 800c786:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c788:	4620      	mov	r0, r4
 800c78a:	f002 f897 	bl	800e8bc <_Bfree>
 800c78e:	3f01      	subs	r7, #1
 800c790:	2f04      	cmp	r7, #4
 800c792:	d806      	bhi.n	800c7a2 <_strtod_l+0x102>
 800c794:	e8df f007 	tbb	[pc, r7]
 800c798:	1714030a 	.word	0x1714030a
 800c79c:	0a          	.byte	0x0a
 800c79d:	00          	.byte	0x00
 800c79e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c7a2:	0728      	lsls	r0, r5, #28
 800c7a4:	d5c0      	bpl.n	800c728 <_strtod_l+0x88>
 800c7a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c7aa:	e7bd      	b.n	800c728 <_strtod_l+0x88>
 800c7ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c7b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c7b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c7b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c7ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c7be:	e7f0      	b.n	800c7a2 <_strtod_l+0x102>
 800c7c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c944 <_strtod_l+0x2a4>
 800c7c4:	e7ed      	b.n	800c7a2 <_strtod_l+0x102>
 800c7c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c7ca:	f04f 3aff 	mov.w	sl, #4294967295
 800c7ce:	e7e8      	b.n	800c7a2 <_strtod_l+0x102>
 800c7d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	2b30      	cmp	r3, #48	; 0x30
 800c7da:	d0f9      	beq.n	800c7d0 <_strtod_l+0x130>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0a3      	beq.n	800c728 <_strtod_l+0x88>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f04f 0900 	mov.w	r9, #0
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7ea:	9308      	str	r3, [sp, #32]
 800c7ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800c7f0:	464f      	mov	r7, r9
 800c7f2:	220a      	movs	r2, #10
 800c7f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c7f6:	7806      	ldrb	r6, [r0, #0]
 800c7f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c7fc:	b2d9      	uxtb	r1, r3
 800c7fe:	2909      	cmp	r1, #9
 800c800:	d92a      	bls.n	800c858 <_strtod_l+0x1b8>
 800c802:	9905      	ldr	r1, [sp, #20]
 800c804:	462a      	mov	r2, r5
 800c806:	f7ff ff1a 	bl	800c63e <strncmp>
 800c80a:	b398      	cbz	r0, 800c874 <_strtod_l+0x1d4>
 800c80c:	2000      	movs	r0, #0
 800c80e:	4632      	mov	r2, r6
 800c810:	463d      	mov	r5, r7
 800c812:	9005      	str	r0, [sp, #20]
 800c814:	4603      	mov	r3, r0
 800c816:	2a65      	cmp	r2, #101	; 0x65
 800c818:	d001      	beq.n	800c81e <_strtod_l+0x17e>
 800c81a:	2a45      	cmp	r2, #69	; 0x45
 800c81c:	d118      	bne.n	800c850 <_strtod_l+0x1b0>
 800c81e:	b91d      	cbnz	r5, 800c828 <_strtod_l+0x188>
 800c820:	9a04      	ldr	r2, [sp, #16]
 800c822:	4302      	orrs	r2, r0
 800c824:	d09e      	beq.n	800c764 <_strtod_l+0xc4>
 800c826:	2500      	movs	r5, #0
 800c828:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c82c:	f108 0201 	add.w	r2, r8, #1
 800c830:	9217      	str	r2, [sp, #92]	; 0x5c
 800c832:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c836:	2a2b      	cmp	r2, #43	; 0x2b
 800c838:	d075      	beq.n	800c926 <_strtod_l+0x286>
 800c83a:	2a2d      	cmp	r2, #45	; 0x2d
 800c83c:	d07b      	beq.n	800c936 <_strtod_l+0x296>
 800c83e:	f04f 0c00 	mov.w	ip, #0
 800c842:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c846:	2909      	cmp	r1, #9
 800c848:	f240 8082 	bls.w	800c950 <_strtod_l+0x2b0>
 800c84c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c850:	2600      	movs	r6, #0
 800c852:	e09d      	b.n	800c990 <_strtod_l+0x2f0>
 800c854:	2300      	movs	r3, #0
 800c856:	e7c4      	b.n	800c7e2 <_strtod_l+0x142>
 800c858:	2f08      	cmp	r7, #8
 800c85a:	bfd8      	it	le
 800c85c:	9907      	ldrle	r1, [sp, #28]
 800c85e:	f100 0001 	add.w	r0, r0, #1
 800c862:	bfda      	itte	le
 800c864:	fb02 3301 	mlale	r3, r2, r1, r3
 800c868:	9307      	strle	r3, [sp, #28]
 800c86a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c86e:	3701      	adds	r7, #1
 800c870:	9017      	str	r0, [sp, #92]	; 0x5c
 800c872:	e7bf      	b.n	800c7f4 <_strtod_l+0x154>
 800c874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c876:	195a      	adds	r2, r3, r5
 800c878:	9217      	str	r2, [sp, #92]	; 0x5c
 800c87a:	5d5a      	ldrb	r2, [r3, r5]
 800c87c:	2f00      	cmp	r7, #0
 800c87e:	d037      	beq.n	800c8f0 <_strtod_l+0x250>
 800c880:	9005      	str	r0, [sp, #20]
 800c882:	463d      	mov	r5, r7
 800c884:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c888:	2b09      	cmp	r3, #9
 800c88a:	d912      	bls.n	800c8b2 <_strtod_l+0x212>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e7c2      	b.n	800c816 <_strtod_l+0x176>
 800c890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	9217      	str	r2, [sp, #92]	; 0x5c
 800c896:	785a      	ldrb	r2, [r3, #1]
 800c898:	3001      	adds	r0, #1
 800c89a:	2a30      	cmp	r2, #48	; 0x30
 800c89c:	d0f8      	beq.n	800c890 <_strtod_l+0x1f0>
 800c89e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c8a2:	2b08      	cmp	r3, #8
 800c8a4:	f200 84d9 	bhi.w	800d25a <_strtod_l+0xbba>
 800c8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8aa:	9005      	str	r0, [sp, #20]
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	9308      	str	r3, [sp, #32]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	3a30      	subs	r2, #48	; 0x30
 800c8b4:	f100 0301 	add.w	r3, r0, #1
 800c8b8:	d014      	beq.n	800c8e4 <_strtod_l+0x244>
 800c8ba:	9905      	ldr	r1, [sp, #20]
 800c8bc:	4419      	add	r1, r3
 800c8be:	9105      	str	r1, [sp, #20]
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	eb00 0e05 	add.w	lr, r0, r5
 800c8c6:	210a      	movs	r1, #10
 800c8c8:	4573      	cmp	r3, lr
 800c8ca:	d113      	bne.n	800c8f4 <_strtod_l+0x254>
 800c8cc:	182b      	adds	r3, r5, r0
 800c8ce:	2b08      	cmp	r3, #8
 800c8d0:	f105 0501 	add.w	r5, r5, #1
 800c8d4:	4405      	add	r5, r0
 800c8d6:	dc1c      	bgt.n	800c912 <_strtod_l+0x272>
 800c8d8:	9907      	ldr	r1, [sp, #28]
 800c8da:	230a      	movs	r3, #10
 800c8dc:	fb03 2301 	mla	r3, r3, r1, r2
 800c8e0:	9307      	str	r3, [sp, #28]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8e6:	1c51      	adds	r1, r2, #1
 800c8e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8ea:	7852      	ldrb	r2, [r2, #1]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	e7c9      	b.n	800c884 <_strtod_l+0x1e4>
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	e7d2      	b.n	800c89a <_strtod_l+0x1fa>
 800c8f4:	2b08      	cmp	r3, #8
 800c8f6:	dc04      	bgt.n	800c902 <_strtod_l+0x262>
 800c8f8:	9e07      	ldr	r6, [sp, #28]
 800c8fa:	434e      	muls	r6, r1
 800c8fc:	9607      	str	r6, [sp, #28]
 800c8fe:	3301      	adds	r3, #1
 800c900:	e7e2      	b.n	800c8c8 <_strtod_l+0x228>
 800c902:	f103 0c01 	add.w	ip, r3, #1
 800c906:	f1bc 0f10 	cmp.w	ip, #16
 800c90a:	bfd8      	it	le
 800c90c:	fb01 f909 	mulle.w	r9, r1, r9
 800c910:	e7f5      	b.n	800c8fe <_strtod_l+0x25e>
 800c912:	2d10      	cmp	r5, #16
 800c914:	bfdc      	itt	le
 800c916:	230a      	movle	r3, #10
 800c918:	fb03 2909 	mlale	r9, r3, r9, r2
 800c91c:	e7e1      	b.n	800c8e2 <_strtod_l+0x242>
 800c91e:	2300      	movs	r3, #0
 800c920:	9305      	str	r3, [sp, #20]
 800c922:	2301      	movs	r3, #1
 800c924:	e77c      	b.n	800c820 <_strtod_l+0x180>
 800c926:	f04f 0c00 	mov.w	ip, #0
 800c92a:	f108 0202 	add.w	r2, r8, #2
 800c92e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c930:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c934:	e785      	b.n	800c842 <_strtod_l+0x1a2>
 800c936:	f04f 0c01 	mov.w	ip, #1
 800c93a:	e7f6      	b.n	800c92a <_strtod_l+0x28a>
 800c93c:	08011718 	.word	0x08011718
 800c940:	080114cc 	.word	0x080114cc
 800c944:	7ff00000 	.word	0x7ff00000
 800c948:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c94a:	1c51      	adds	r1, r2, #1
 800c94c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c94e:	7852      	ldrb	r2, [r2, #1]
 800c950:	2a30      	cmp	r2, #48	; 0x30
 800c952:	d0f9      	beq.n	800c948 <_strtod_l+0x2a8>
 800c954:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c958:	2908      	cmp	r1, #8
 800c95a:	f63f af79 	bhi.w	800c850 <_strtod_l+0x1b0>
 800c95e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c962:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c964:	9206      	str	r2, [sp, #24]
 800c966:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c968:	1c51      	adds	r1, r2, #1
 800c96a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c96c:	7852      	ldrb	r2, [r2, #1]
 800c96e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c972:	2e09      	cmp	r6, #9
 800c974:	d937      	bls.n	800c9e6 <_strtod_l+0x346>
 800c976:	9e06      	ldr	r6, [sp, #24]
 800c978:	1b89      	subs	r1, r1, r6
 800c97a:	2908      	cmp	r1, #8
 800c97c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c980:	dc02      	bgt.n	800c988 <_strtod_l+0x2e8>
 800c982:	4576      	cmp	r6, lr
 800c984:	bfa8      	it	ge
 800c986:	4676      	movge	r6, lr
 800c988:	f1bc 0f00 	cmp.w	ip, #0
 800c98c:	d000      	beq.n	800c990 <_strtod_l+0x2f0>
 800c98e:	4276      	negs	r6, r6
 800c990:	2d00      	cmp	r5, #0
 800c992:	d14d      	bne.n	800ca30 <_strtod_l+0x390>
 800c994:	9904      	ldr	r1, [sp, #16]
 800c996:	4301      	orrs	r1, r0
 800c998:	f47f aec6 	bne.w	800c728 <_strtod_l+0x88>
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f47f aee1 	bne.w	800c764 <_strtod_l+0xc4>
 800c9a2:	2a69      	cmp	r2, #105	; 0x69
 800c9a4:	d027      	beq.n	800c9f6 <_strtod_l+0x356>
 800c9a6:	dc24      	bgt.n	800c9f2 <_strtod_l+0x352>
 800c9a8:	2a49      	cmp	r2, #73	; 0x49
 800c9aa:	d024      	beq.n	800c9f6 <_strtod_l+0x356>
 800c9ac:	2a4e      	cmp	r2, #78	; 0x4e
 800c9ae:	f47f aed9 	bne.w	800c764 <_strtod_l+0xc4>
 800c9b2:	499f      	ldr	r1, [pc, #636]	; (800cc30 <_strtod_l+0x590>)
 800c9b4:	a817      	add	r0, sp, #92	; 0x5c
 800c9b6:	f001 fe61 	bl	800e67c <__match>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f aed2 	beq.w	800c764 <_strtod_l+0xc4>
 800c9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b28      	cmp	r3, #40	; 0x28
 800c9c6:	d12d      	bne.n	800ca24 <_strtod_l+0x384>
 800c9c8:	499a      	ldr	r1, [pc, #616]	; (800cc34 <_strtod_l+0x594>)
 800c9ca:	aa1a      	add	r2, sp, #104	; 0x68
 800c9cc:	a817      	add	r0, sp, #92	; 0x5c
 800c9ce:	f001 fe69 	bl	800e6a4 <__hexnan>
 800c9d2:	2805      	cmp	r0, #5
 800c9d4:	d126      	bne.n	800ca24 <_strtod_l+0x384>
 800c9d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c9dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c9e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c9e4:	e6a0      	b.n	800c728 <_strtod_l+0x88>
 800c9e6:	210a      	movs	r1, #10
 800c9e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c9ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c9f0:	e7b9      	b.n	800c966 <_strtod_l+0x2c6>
 800c9f2:	2a6e      	cmp	r2, #110	; 0x6e
 800c9f4:	e7db      	b.n	800c9ae <_strtod_l+0x30e>
 800c9f6:	4990      	ldr	r1, [pc, #576]	; (800cc38 <_strtod_l+0x598>)
 800c9f8:	a817      	add	r0, sp, #92	; 0x5c
 800c9fa:	f001 fe3f 	bl	800e67c <__match>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f43f aeb0 	beq.w	800c764 <_strtod_l+0xc4>
 800ca04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca06:	498d      	ldr	r1, [pc, #564]	; (800cc3c <_strtod_l+0x59c>)
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	a817      	add	r0, sp, #92	; 0x5c
 800ca0c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca0e:	f001 fe35 	bl	800e67c <__match>
 800ca12:	b910      	cbnz	r0, 800ca1a <_strtod_l+0x37a>
 800ca14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca16:	3301      	adds	r3, #1
 800ca18:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cc4c <_strtod_l+0x5ac>
 800ca1e:	f04f 0a00 	mov.w	sl, #0
 800ca22:	e681      	b.n	800c728 <_strtod_l+0x88>
 800ca24:	4886      	ldr	r0, [pc, #536]	; (800cc40 <_strtod_l+0x5a0>)
 800ca26:	f003 f953 	bl	800fcd0 <nan>
 800ca2a:	ec5b ab10 	vmov	sl, fp, d0
 800ca2e:	e67b      	b.n	800c728 <_strtod_l+0x88>
 800ca30:	9b05      	ldr	r3, [sp, #20]
 800ca32:	9807      	ldr	r0, [sp, #28]
 800ca34:	1af3      	subs	r3, r6, r3
 800ca36:	2f00      	cmp	r7, #0
 800ca38:	bf08      	it	eq
 800ca3a:	462f      	moveq	r7, r5
 800ca3c:	2d10      	cmp	r5, #16
 800ca3e:	9306      	str	r3, [sp, #24]
 800ca40:	46a8      	mov	r8, r5
 800ca42:	bfa8      	it	ge
 800ca44:	f04f 0810 	movge.w	r8, #16
 800ca48:	f7f3 fd74 	bl	8000534 <__aeabi_ui2d>
 800ca4c:	2d09      	cmp	r5, #9
 800ca4e:	4682      	mov	sl, r0
 800ca50:	468b      	mov	fp, r1
 800ca52:	dd13      	ble.n	800ca7c <_strtod_l+0x3dc>
 800ca54:	4b7b      	ldr	r3, [pc, #492]	; (800cc44 <_strtod_l+0x5a4>)
 800ca56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ca5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ca5e:	f7f3 fde3 	bl	8000628 <__aeabi_dmul>
 800ca62:	4682      	mov	sl, r0
 800ca64:	4648      	mov	r0, r9
 800ca66:	468b      	mov	fp, r1
 800ca68:	f7f3 fd64 	bl	8000534 <__aeabi_ui2d>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4650      	mov	r0, sl
 800ca72:	4659      	mov	r1, fp
 800ca74:	f7f3 fc22 	bl	80002bc <__adddf3>
 800ca78:	4682      	mov	sl, r0
 800ca7a:	468b      	mov	fp, r1
 800ca7c:	2d0f      	cmp	r5, #15
 800ca7e:	dc38      	bgt.n	800caf2 <_strtod_l+0x452>
 800ca80:	9b06      	ldr	r3, [sp, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f43f ae50 	beq.w	800c728 <_strtod_l+0x88>
 800ca88:	dd24      	ble.n	800cad4 <_strtod_l+0x434>
 800ca8a:	2b16      	cmp	r3, #22
 800ca8c:	dc0b      	bgt.n	800caa6 <_strtod_l+0x406>
 800ca8e:	496d      	ldr	r1, [pc, #436]	; (800cc44 <_strtod_l+0x5a4>)
 800ca90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca98:	4652      	mov	r2, sl
 800ca9a:	465b      	mov	r3, fp
 800ca9c:	f7f3 fdc4 	bl	8000628 <__aeabi_dmul>
 800caa0:	4682      	mov	sl, r0
 800caa2:	468b      	mov	fp, r1
 800caa4:	e640      	b.n	800c728 <_strtod_l+0x88>
 800caa6:	9a06      	ldr	r2, [sp, #24]
 800caa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800caac:	4293      	cmp	r3, r2
 800caae:	db20      	blt.n	800caf2 <_strtod_l+0x452>
 800cab0:	4c64      	ldr	r4, [pc, #400]	; (800cc44 <_strtod_l+0x5a4>)
 800cab2:	f1c5 050f 	rsb	r5, r5, #15
 800cab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800caba:	4652      	mov	r2, sl
 800cabc:	465b      	mov	r3, fp
 800cabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac2:	f7f3 fdb1 	bl	8000628 <__aeabi_dmul>
 800cac6:	9b06      	ldr	r3, [sp, #24]
 800cac8:	1b5d      	subs	r5, r3, r5
 800caca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cace:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cad2:	e7e3      	b.n	800ca9c <_strtod_l+0x3fc>
 800cad4:	9b06      	ldr	r3, [sp, #24]
 800cad6:	3316      	adds	r3, #22
 800cad8:	db0b      	blt.n	800caf2 <_strtod_l+0x452>
 800cada:	9b05      	ldr	r3, [sp, #20]
 800cadc:	1b9e      	subs	r6, r3, r6
 800cade:	4b59      	ldr	r3, [pc, #356]	; (800cc44 <_strtod_l+0x5a4>)
 800cae0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cae8:	4650      	mov	r0, sl
 800caea:	4659      	mov	r1, fp
 800caec:	f7f3 fec6 	bl	800087c <__aeabi_ddiv>
 800caf0:	e7d6      	b.n	800caa0 <_strtod_l+0x400>
 800caf2:	9b06      	ldr	r3, [sp, #24]
 800caf4:	eba5 0808 	sub.w	r8, r5, r8
 800caf8:	4498      	add	r8, r3
 800cafa:	f1b8 0f00 	cmp.w	r8, #0
 800cafe:	dd74      	ble.n	800cbea <_strtod_l+0x54a>
 800cb00:	f018 030f 	ands.w	r3, r8, #15
 800cb04:	d00a      	beq.n	800cb1c <_strtod_l+0x47c>
 800cb06:	494f      	ldr	r1, [pc, #316]	; (800cc44 <_strtod_l+0x5a4>)
 800cb08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb0c:	4652      	mov	r2, sl
 800cb0e:	465b      	mov	r3, fp
 800cb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb14:	f7f3 fd88 	bl	8000628 <__aeabi_dmul>
 800cb18:	4682      	mov	sl, r0
 800cb1a:	468b      	mov	fp, r1
 800cb1c:	f038 080f 	bics.w	r8, r8, #15
 800cb20:	d04f      	beq.n	800cbc2 <_strtod_l+0x522>
 800cb22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cb26:	dd22      	ble.n	800cb6e <_strtod_l+0x4ce>
 800cb28:	2500      	movs	r5, #0
 800cb2a:	462e      	mov	r6, r5
 800cb2c:	9507      	str	r5, [sp, #28]
 800cb2e:	9505      	str	r5, [sp, #20]
 800cb30:	2322      	movs	r3, #34	; 0x22
 800cb32:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cc4c <_strtod_l+0x5ac>
 800cb36:	6023      	str	r3, [r4, #0]
 800cb38:	f04f 0a00 	mov.w	sl, #0
 800cb3c:	9b07      	ldr	r3, [sp, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f43f adf2 	beq.w	800c728 <_strtod_l+0x88>
 800cb44:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb46:	4620      	mov	r0, r4
 800cb48:	f001 feb8 	bl	800e8bc <_Bfree>
 800cb4c:	9905      	ldr	r1, [sp, #20]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f001 feb4 	bl	800e8bc <_Bfree>
 800cb54:	4631      	mov	r1, r6
 800cb56:	4620      	mov	r0, r4
 800cb58:	f001 feb0 	bl	800e8bc <_Bfree>
 800cb5c:	9907      	ldr	r1, [sp, #28]
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f001 feac 	bl	800e8bc <_Bfree>
 800cb64:	4629      	mov	r1, r5
 800cb66:	4620      	mov	r0, r4
 800cb68:	f001 fea8 	bl	800e8bc <_Bfree>
 800cb6c:	e5dc      	b.n	800c728 <_strtod_l+0x88>
 800cb6e:	4b36      	ldr	r3, [pc, #216]	; (800cc48 <_strtod_l+0x5a8>)
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	2300      	movs	r3, #0
 800cb74:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cb78:	4650      	mov	r0, sl
 800cb7a:	4659      	mov	r1, fp
 800cb7c:	4699      	mov	r9, r3
 800cb7e:	f1b8 0f01 	cmp.w	r8, #1
 800cb82:	dc21      	bgt.n	800cbc8 <_strtod_l+0x528>
 800cb84:	b10b      	cbz	r3, 800cb8a <_strtod_l+0x4ea>
 800cb86:	4682      	mov	sl, r0
 800cb88:	468b      	mov	fp, r1
 800cb8a:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <_strtod_l+0x5a8>)
 800cb8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cb94:	4652      	mov	r2, sl
 800cb96:	465b      	mov	r3, fp
 800cb98:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb9c:	f7f3 fd44 	bl	8000628 <__aeabi_dmul>
 800cba0:	4b2a      	ldr	r3, [pc, #168]	; (800cc4c <_strtod_l+0x5ac>)
 800cba2:	460a      	mov	r2, r1
 800cba4:	400b      	ands	r3, r1
 800cba6:	492a      	ldr	r1, [pc, #168]	; (800cc50 <_strtod_l+0x5b0>)
 800cba8:	428b      	cmp	r3, r1
 800cbaa:	4682      	mov	sl, r0
 800cbac:	d8bc      	bhi.n	800cb28 <_strtod_l+0x488>
 800cbae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cbb2:	428b      	cmp	r3, r1
 800cbb4:	bf86      	itte	hi
 800cbb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cc54 <_strtod_l+0x5b4>
 800cbba:	f04f 3aff 	movhi.w	sl, #4294967295
 800cbbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	9304      	str	r3, [sp, #16]
 800cbc6:	e084      	b.n	800ccd2 <_strtod_l+0x632>
 800cbc8:	f018 0f01 	tst.w	r8, #1
 800cbcc:	d005      	beq.n	800cbda <_strtod_l+0x53a>
 800cbce:	9b04      	ldr	r3, [sp, #16]
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fd28 	bl	8000628 <__aeabi_dmul>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	9a04      	ldr	r2, [sp, #16]
 800cbdc:	3208      	adds	r2, #8
 800cbde:	f109 0901 	add.w	r9, r9, #1
 800cbe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cbe6:	9204      	str	r2, [sp, #16]
 800cbe8:	e7c9      	b.n	800cb7e <_strtod_l+0x4de>
 800cbea:	d0ea      	beq.n	800cbc2 <_strtod_l+0x522>
 800cbec:	f1c8 0800 	rsb	r8, r8, #0
 800cbf0:	f018 020f 	ands.w	r2, r8, #15
 800cbf4:	d00a      	beq.n	800cc0c <_strtod_l+0x56c>
 800cbf6:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <_strtod_l+0x5a4>)
 800cbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	f7f3 fe3a 	bl	800087c <__aeabi_ddiv>
 800cc08:	4682      	mov	sl, r0
 800cc0a:	468b      	mov	fp, r1
 800cc0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cc10:	d0d7      	beq.n	800cbc2 <_strtod_l+0x522>
 800cc12:	f1b8 0f1f 	cmp.w	r8, #31
 800cc16:	dd1f      	ble.n	800cc58 <_strtod_l+0x5b8>
 800cc18:	2500      	movs	r5, #0
 800cc1a:	462e      	mov	r6, r5
 800cc1c:	9507      	str	r5, [sp, #28]
 800cc1e:	9505      	str	r5, [sp, #20]
 800cc20:	2322      	movs	r3, #34	; 0x22
 800cc22:	f04f 0a00 	mov.w	sl, #0
 800cc26:	f04f 0b00 	mov.w	fp, #0
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	e786      	b.n	800cb3c <_strtod_l+0x49c>
 800cc2e:	bf00      	nop
 800cc30:	080114a1 	.word	0x080114a1
 800cc34:	080114e0 	.word	0x080114e0
 800cc38:	08011499 	.word	0x08011499
 800cc3c:	08011624 	.word	0x08011624
 800cc40:	080118eb 	.word	0x080118eb
 800cc44:	080117b0 	.word	0x080117b0
 800cc48:	08011788 	.word	0x08011788
 800cc4c:	7ff00000 	.word	0x7ff00000
 800cc50:	7ca00000 	.word	0x7ca00000
 800cc54:	7fefffff 	.word	0x7fefffff
 800cc58:	f018 0310 	ands.w	r3, r8, #16
 800cc5c:	bf18      	it	ne
 800cc5e:	236a      	movne	r3, #106	; 0x6a
 800cc60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d010 <_strtod_l+0x970>
 800cc64:	9304      	str	r3, [sp, #16]
 800cc66:	4650      	mov	r0, sl
 800cc68:	4659      	mov	r1, fp
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f018 0f01 	tst.w	r8, #1
 800cc70:	d004      	beq.n	800cc7c <_strtod_l+0x5dc>
 800cc72:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc76:	f7f3 fcd7 	bl	8000628 <__aeabi_dmul>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cc80:	f109 0908 	add.w	r9, r9, #8
 800cc84:	d1f2      	bne.n	800cc6c <_strtod_l+0x5cc>
 800cc86:	b10b      	cbz	r3, 800cc8c <_strtod_l+0x5ec>
 800cc88:	4682      	mov	sl, r0
 800cc8a:	468b      	mov	fp, r1
 800cc8c:	9b04      	ldr	r3, [sp, #16]
 800cc8e:	b1c3      	cbz	r3, 800ccc2 <_strtod_l+0x622>
 800cc90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	4659      	mov	r1, fp
 800cc9c:	dd11      	ble.n	800ccc2 <_strtod_l+0x622>
 800cc9e:	2b1f      	cmp	r3, #31
 800cca0:	f340 8124 	ble.w	800ceec <_strtod_l+0x84c>
 800cca4:	2b34      	cmp	r3, #52	; 0x34
 800cca6:	bfde      	ittt	le
 800cca8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ccac:	f04f 33ff 	movle.w	r3, #4294967295
 800ccb0:	fa03 f202 	lslle.w	r2, r3, r2
 800ccb4:	f04f 0a00 	mov.w	sl, #0
 800ccb8:	bfcc      	ite	gt
 800ccba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ccbe:	ea02 0b01 	andle.w	fp, r2, r1
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	4659      	mov	r1, fp
 800ccca:	f7f3 ff15 	bl	8000af8 <__aeabi_dcmpeq>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d1a2      	bne.n	800cc18 <_strtod_l+0x578>
 800ccd2:	9b07      	ldr	r3, [sp, #28]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	9908      	ldr	r1, [sp, #32]
 800ccd8:	462b      	mov	r3, r5
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f001 fe55 	bl	800e98c <__s2b>
 800cce2:	9007      	str	r0, [sp, #28]
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f43f af1f 	beq.w	800cb28 <_strtod_l+0x488>
 800ccea:	9b05      	ldr	r3, [sp, #20]
 800ccec:	1b9e      	subs	r6, r3, r6
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bfb4      	ite	lt
 800ccf4:	4633      	movlt	r3, r6
 800ccf6:	2300      	movge	r3, #0
 800ccf8:	930c      	str	r3, [sp, #48]	; 0x30
 800ccfa:	9b06      	ldr	r3, [sp, #24]
 800ccfc:	2500      	movs	r5, #0
 800ccfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd02:	9312      	str	r3, [sp, #72]	; 0x48
 800cd04:	462e      	mov	r6, r5
 800cd06:	9b07      	ldr	r3, [sp, #28]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	6859      	ldr	r1, [r3, #4]
 800cd0c:	f001 fd96 	bl	800e83c <_Balloc>
 800cd10:	9005      	str	r0, [sp, #20]
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f43f af0c 	beq.w	800cb30 <_strtod_l+0x490>
 800cd18:	9b07      	ldr	r3, [sp, #28]
 800cd1a:	691a      	ldr	r2, [r3, #16]
 800cd1c:	3202      	adds	r2, #2
 800cd1e:	f103 010c 	add.w	r1, r3, #12
 800cd22:	0092      	lsls	r2, r2, #2
 800cd24:	300c      	adds	r0, #12
 800cd26:	f7fe fd63 	bl	800b7f0 <memcpy>
 800cd2a:	ec4b ab10 	vmov	d0, sl, fp
 800cd2e:	aa1a      	add	r2, sp, #104	; 0x68
 800cd30:	a919      	add	r1, sp, #100	; 0x64
 800cd32:	4620      	mov	r0, r4
 800cd34:	f002 f970 	bl	800f018 <__d2b>
 800cd38:	ec4b ab18 	vmov	d8, sl, fp
 800cd3c:	9018      	str	r0, [sp, #96]	; 0x60
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f aef6 	beq.w	800cb30 <_strtod_l+0x490>
 800cd44:	2101      	movs	r1, #1
 800cd46:	4620      	mov	r0, r4
 800cd48:	f001 feba 	bl	800eac0 <__i2b>
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	f43f aeee 	beq.w	800cb30 <_strtod_l+0x490>
 800cd54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd56:	9904      	ldr	r1, [sp, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfab      	itete	ge
 800cd5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cd5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cd60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cd62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cd66:	bfac      	ite	ge
 800cd68:	eb03 0902 	addge.w	r9, r3, r2
 800cd6c:	1ad7      	sublt	r7, r2, r3
 800cd6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd70:	eba3 0801 	sub.w	r8, r3, r1
 800cd74:	4490      	add	r8, r2
 800cd76:	4ba1      	ldr	r3, [pc, #644]	; (800cffc <_strtod_l+0x95c>)
 800cd78:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd7c:	4598      	cmp	r8, r3
 800cd7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd82:	f280 80c7 	bge.w	800cf14 <_strtod_l+0x874>
 800cd86:	eba3 0308 	sub.w	r3, r3, r8
 800cd8a:	2b1f      	cmp	r3, #31
 800cd8c:	eba2 0203 	sub.w	r2, r2, r3
 800cd90:	f04f 0101 	mov.w	r1, #1
 800cd94:	f300 80b1 	bgt.w	800cefa <_strtod_l+0x85a>
 800cd98:	fa01 f303 	lsl.w	r3, r1, r3
 800cd9c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd9e:	2300      	movs	r3, #0
 800cda0:	9308      	str	r3, [sp, #32]
 800cda2:	eb09 0802 	add.w	r8, r9, r2
 800cda6:	9b04      	ldr	r3, [sp, #16]
 800cda8:	45c1      	cmp	r9, r8
 800cdaa:	4417      	add	r7, r2
 800cdac:	441f      	add	r7, r3
 800cdae:	464b      	mov	r3, r9
 800cdb0:	bfa8      	it	ge
 800cdb2:	4643      	movge	r3, r8
 800cdb4:	42bb      	cmp	r3, r7
 800cdb6:	bfa8      	it	ge
 800cdb8:	463b      	movge	r3, r7
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bfc2      	ittt	gt
 800cdbe:	eba8 0803 	subgt.w	r8, r8, r3
 800cdc2:	1aff      	subgt	r7, r7, r3
 800cdc4:	eba9 0903 	subgt.w	r9, r9, r3
 800cdc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dd17      	ble.n	800cdfe <_strtod_l+0x75e>
 800cdce:	4631      	mov	r1, r6
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f001 ff34 	bl	800ec40 <__pow5mult>
 800cdd8:	4606      	mov	r6, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f43f aea8 	beq.w	800cb30 <_strtod_l+0x490>
 800cde0:	4601      	mov	r1, r0
 800cde2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cde4:	4620      	mov	r0, r4
 800cde6:	f001 fe81 	bl	800eaec <__multiply>
 800cdea:	900b      	str	r0, [sp, #44]	; 0x2c
 800cdec:	2800      	cmp	r0, #0
 800cdee:	f43f ae9f 	beq.w	800cb30 <_strtod_l+0x490>
 800cdf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f001 fd61 	bl	800e8bc <_Bfree>
 800cdfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdfc:	9318      	str	r3, [sp, #96]	; 0x60
 800cdfe:	f1b8 0f00 	cmp.w	r8, #0
 800ce02:	f300 808c 	bgt.w	800cf1e <_strtod_l+0x87e>
 800ce06:	9b06      	ldr	r3, [sp, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	dd08      	ble.n	800ce1e <_strtod_l+0x77e>
 800ce0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce0e:	9905      	ldr	r1, [sp, #20]
 800ce10:	4620      	mov	r0, r4
 800ce12:	f001 ff15 	bl	800ec40 <__pow5mult>
 800ce16:	9005      	str	r0, [sp, #20]
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f43f ae89 	beq.w	800cb30 <_strtod_l+0x490>
 800ce1e:	2f00      	cmp	r7, #0
 800ce20:	dd08      	ble.n	800ce34 <_strtod_l+0x794>
 800ce22:	9905      	ldr	r1, [sp, #20]
 800ce24:	463a      	mov	r2, r7
 800ce26:	4620      	mov	r0, r4
 800ce28:	f001 ff64 	bl	800ecf4 <__lshift>
 800ce2c:	9005      	str	r0, [sp, #20]
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f43f ae7e 	beq.w	800cb30 <_strtod_l+0x490>
 800ce34:	f1b9 0f00 	cmp.w	r9, #0
 800ce38:	dd08      	ble.n	800ce4c <_strtod_l+0x7ac>
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 ff58 	bl	800ecf4 <__lshift>
 800ce44:	4606      	mov	r6, r0
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f43f ae72 	beq.w	800cb30 <_strtod_l+0x490>
 800ce4c:	9a05      	ldr	r2, [sp, #20]
 800ce4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce50:	4620      	mov	r0, r4
 800ce52:	f001 ffdb 	bl	800ee0c <__mdiff>
 800ce56:	4605      	mov	r5, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f43f ae69 	beq.w	800cb30 <_strtod_l+0x490>
 800ce5e:	68c3      	ldr	r3, [r0, #12]
 800ce60:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce62:	2300      	movs	r3, #0
 800ce64:	60c3      	str	r3, [r0, #12]
 800ce66:	4631      	mov	r1, r6
 800ce68:	f001 ffb4 	bl	800edd4 <__mcmp>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	da60      	bge.n	800cf32 <_strtod_l+0x892>
 800ce70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce72:	ea53 030a 	orrs.w	r3, r3, sl
 800ce76:	f040 8082 	bne.w	800cf7e <_strtod_l+0x8de>
 800ce7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d17d      	bne.n	800cf7e <_strtod_l+0x8de>
 800ce82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce86:	0d1b      	lsrs	r3, r3, #20
 800ce88:	051b      	lsls	r3, r3, #20
 800ce8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce8e:	d976      	bls.n	800cf7e <_strtod_l+0x8de>
 800ce90:	696b      	ldr	r3, [r5, #20]
 800ce92:	b913      	cbnz	r3, 800ce9a <_strtod_l+0x7fa>
 800ce94:	692b      	ldr	r3, [r5, #16]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	dd71      	ble.n	800cf7e <_strtod_l+0x8de>
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f001 ff28 	bl	800ecf4 <__lshift>
 800cea4:	4631      	mov	r1, r6
 800cea6:	4605      	mov	r5, r0
 800cea8:	f001 ff94 	bl	800edd4 <__mcmp>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	dd66      	ble.n	800cf7e <_strtod_l+0x8de>
 800ceb0:	9904      	ldr	r1, [sp, #16]
 800ceb2:	4a53      	ldr	r2, [pc, #332]	; (800d000 <_strtod_l+0x960>)
 800ceb4:	465b      	mov	r3, fp
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	f000 8081 	beq.w	800cfbe <_strtod_l+0x91e>
 800cebc:	ea02 010b 	and.w	r1, r2, fp
 800cec0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cec4:	dc7b      	bgt.n	800cfbe <_strtod_l+0x91e>
 800cec6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ceca:	f77f aea9 	ble.w	800cc20 <_strtod_l+0x580>
 800cece:	4b4d      	ldr	r3, [pc, #308]	; (800d004 <_strtod_l+0x964>)
 800ced0:	4650      	mov	r0, sl
 800ced2:	4659      	mov	r1, fp
 800ced4:	2200      	movs	r2, #0
 800ced6:	f7f3 fba7 	bl	8000628 <__aeabi_dmul>
 800ceda:	460b      	mov	r3, r1
 800cedc:	4303      	orrs	r3, r0
 800cede:	bf08      	it	eq
 800cee0:	2322      	moveq	r3, #34	; 0x22
 800cee2:	4682      	mov	sl, r0
 800cee4:	468b      	mov	fp, r1
 800cee6:	bf08      	it	eq
 800cee8:	6023      	streq	r3, [r4, #0]
 800ceea:	e62b      	b.n	800cb44 <_strtod_l+0x4a4>
 800ceec:	f04f 32ff 	mov.w	r2, #4294967295
 800cef0:	fa02 f303 	lsl.w	r3, r2, r3
 800cef4:	ea03 0a0a 	and.w	sl, r3, sl
 800cef8:	e6e3      	b.n	800ccc2 <_strtod_l+0x622>
 800cefa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cefe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cf02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cf06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cf0a:	fa01 f308 	lsl.w	r3, r1, r8
 800cf0e:	9308      	str	r3, [sp, #32]
 800cf10:	910d      	str	r1, [sp, #52]	; 0x34
 800cf12:	e746      	b.n	800cda2 <_strtod_l+0x702>
 800cf14:	2300      	movs	r3, #0
 800cf16:	9308      	str	r3, [sp, #32]
 800cf18:	2301      	movs	r3, #1
 800cf1a:	930d      	str	r3, [sp, #52]	; 0x34
 800cf1c:	e741      	b.n	800cda2 <_strtod_l+0x702>
 800cf1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf20:	4642      	mov	r2, r8
 800cf22:	4620      	mov	r0, r4
 800cf24:	f001 fee6 	bl	800ecf4 <__lshift>
 800cf28:	9018      	str	r0, [sp, #96]	; 0x60
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f47f af6b 	bne.w	800ce06 <_strtod_l+0x766>
 800cf30:	e5fe      	b.n	800cb30 <_strtod_l+0x490>
 800cf32:	465f      	mov	r7, fp
 800cf34:	d16e      	bne.n	800d014 <_strtod_l+0x974>
 800cf36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf3c:	b342      	cbz	r2, 800cf90 <_strtod_l+0x8f0>
 800cf3e:	4a32      	ldr	r2, [pc, #200]	; (800d008 <_strtod_l+0x968>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d128      	bne.n	800cf96 <_strtod_l+0x8f6>
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	4651      	mov	r1, sl
 800cf48:	b1eb      	cbz	r3, 800cf86 <_strtod_l+0x8e6>
 800cf4a:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <_strtod_l+0x960>)
 800cf4c:	403b      	ands	r3, r7
 800cf4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf52:	f04f 32ff 	mov.w	r2, #4294967295
 800cf56:	d819      	bhi.n	800cf8c <_strtod_l+0x8ec>
 800cf58:	0d1b      	lsrs	r3, r3, #20
 800cf5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf62:	4299      	cmp	r1, r3
 800cf64:	d117      	bne.n	800cf96 <_strtod_l+0x8f6>
 800cf66:	4b29      	ldr	r3, [pc, #164]	; (800d00c <_strtod_l+0x96c>)
 800cf68:	429f      	cmp	r7, r3
 800cf6a:	d102      	bne.n	800cf72 <_strtod_l+0x8d2>
 800cf6c:	3101      	adds	r1, #1
 800cf6e:	f43f addf 	beq.w	800cb30 <_strtod_l+0x490>
 800cf72:	4b23      	ldr	r3, [pc, #140]	; (800d000 <_strtod_l+0x960>)
 800cf74:	403b      	ands	r3, r7
 800cf76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cf7a:	f04f 0a00 	mov.w	sl, #0
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1a4      	bne.n	800cece <_strtod_l+0x82e>
 800cf84:	e5de      	b.n	800cb44 <_strtod_l+0x4a4>
 800cf86:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8a:	e7ea      	b.n	800cf62 <_strtod_l+0x8c2>
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	e7e8      	b.n	800cf62 <_strtod_l+0x8c2>
 800cf90:	ea53 030a 	orrs.w	r3, r3, sl
 800cf94:	d08c      	beq.n	800ceb0 <_strtod_l+0x810>
 800cf96:	9b08      	ldr	r3, [sp, #32]
 800cf98:	b1db      	cbz	r3, 800cfd2 <_strtod_l+0x932>
 800cf9a:	423b      	tst	r3, r7
 800cf9c:	d0ef      	beq.n	800cf7e <_strtod_l+0x8de>
 800cf9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfa0:	9a04      	ldr	r2, [sp, #16]
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	4659      	mov	r1, fp
 800cfa6:	b1c3      	cbz	r3, 800cfda <_strtod_l+0x93a>
 800cfa8:	f7ff fb5d 	bl	800c666 <sulp>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	ec51 0b18 	vmov	r0, r1, d8
 800cfb4:	f7f3 f982 	bl	80002bc <__adddf3>
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	e7df      	b.n	800cf7e <_strtod_l+0x8de>
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cfc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cfc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cfcc:	f04f 3aff 	mov.w	sl, #4294967295
 800cfd0:	e7d5      	b.n	800cf7e <_strtod_l+0x8de>
 800cfd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfd4:	ea13 0f0a 	tst.w	r3, sl
 800cfd8:	e7e0      	b.n	800cf9c <_strtod_l+0x8fc>
 800cfda:	f7ff fb44 	bl	800c666 <sulp>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	ec51 0b18 	vmov	r0, r1, d8
 800cfe6:	f7f3 f967 	bl	80002b8 <__aeabi_dsub>
 800cfea:	2200      	movs	r2, #0
 800cfec:	2300      	movs	r3, #0
 800cfee:	4682      	mov	sl, r0
 800cff0:	468b      	mov	fp, r1
 800cff2:	f7f3 fd81 	bl	8000af8 <__aeabi_dcmpeq>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d0c1      	beq.n	800cf7e <_strtod_l+0x8de>
 800cffa:	e611      	b.n	800cc20 <_strtod_l+0x580>
 800cffc:	fffffc02 	.word	0xfffffc02
 800d000:	7ff00000 	.word	0x7ff00000
 800d004:	39500000 	.word	0x39500000
 800d008:	000fffff 	.word	0x000fffff
 800d00c:	7fefffff 	.word	0x7fefffff
 800d010:	080114f8 	.word	0x080114f8
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	f002 f85a 	bl	800f0d0 <__ratio>
 800d01c:	ec59 8b10 	vmov	r8, r9, d0
 800d020:	ee10 0a10 	vmov	r0, s0
 800d024:	2200      	movs	r2, #0
 800d026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d02a:	4649      	mov	r1, r9
 800d02c:	f7f3 fd78 	bl	8000b20 <__aeabi_dcmple>
 800d030:	2800      	cmp	r0, #0
 800d032:	d07a      	beq.n	800d12a <_strtod_l+0xa8a>
 800d034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d04a      	beq.n	800d0d0 <_strtod_l+0xa30>
 800d03a:	4b95      	ldr	r3, [pc, #596]	; (800d290 <_strtod_l+0xbf0>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d042:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d290 <_strtod_l+0xbf0>
 800d046:	f04f 0800 	mov.w	r8, #0
 800d04a:	4b92      	ldr	r3, [pc, #584]	; (800d294 <_strtod_l+0xbf4>)
 800d04c:	403b      	ands	r3, r7
 800d04e:	930d      	str	r3, [sp, #52]	; 0x34
 800d050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d052:	4b91      	ldr	r3, [pc, #580]	; (800d298 <_strtod_l+0xbf8>)
 800d054:	429a      	cmp	r2, r3
 800d056:	f040 80b0 	bne.w	800d1ba <_strtod_l+0xb1a>
 800d05a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d05e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d062:	ec4b ab10 	vmov	d0, sl, fp
 800d066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d06a:	f001 ff59 	bl	800ef20 <__ulp>
 800d06e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d072:	ec53 2b10 	vmov	r2, r3, d0
 800d076:	f7f3 fad7 	bl	8000628 <__aeabi_dmul>
 800d07a:	4652      	mov	r2, sl
 800d07c:	465b      	mov	r3, fp
 800d07e:	f7f3 f91d 	bl	80002bc <__adddf3>
 800d082:	460b      	mov	r3, r1
 800d084:	4983      	ldr	r1, [pc, #524]	; (800d294 <_strtod_l+0xbf4>)
 800d086:	4a85      	ldr	r2, [pc, #532]	; (800d29c <_strtod_l+0xbfc>)
 800d088:	4019      	ands	r1, r3
 800d08a:	4291      	cmp	r1, r2
 800d08c:	4682      	mov	sl, r0
 800d08e:	d960      	bls.n	800d152 <_strtod_l+0xab2>
 800d090:	ee18 3a90 	vmov	r3, s17
 800d094:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d098:	4293      	cmp	r3, r2
 800d09a:	d104      	bne.n	800d0a6 <_strtod_l+0xa06>
 800d09c:	ee18 3a10 	vmov	r3, s16
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	f43f ad45 	beq.w	800cb30 <_strtod_l+0x490>
 800d0a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d2a8 <_strtod_l+0xc08>
 800d0aa:	f04f 3aff 	mov.w	sl, #4294967295
 800d0ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f001 fc03 	bl	800e8bc <_Bfree>
 800d0b6:	9905      	ldr	r1, [sp, #20]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f001 fbff 	bl	800e8bc <_Bfree>
 800d0be:	4631      	mov	r1, r6
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f001 fbfb 	bl	800e8bc <_Bfree>
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f001 fbf7 	bl	800e8bc <_Bfree>
 800d0ce:	e61a      	b.n	800cd06 <_strtod_l+0x666>
 800d0d0:	f1ba 0f00 	cmp.w	sl, #0
 800d0d4:	d11b      	bne.n	800d10e <_strtod_l+0xa6e>
 800d0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0da:	b9f3      	cbnz	r3, 800d11a <_strtod_l+0xa7a>
 800d0dc:	4b6c      	ldr	r3, [pc, #432]	; (800d290 <_strtod_l+0xbf0>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 fd12 	bl	8000b0c <__aeabi_dcmplt>
 800d0e8:	b9d0      	cbnz	r0, 800d120 <_strtod_l+0xa80>
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4b6c      	ldr	r3, [pc, #432]	; (800d2a0 <_strtod_l+0xc00>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f7f3 fa99 	bl	8000628 <__aeabi_dmul>
 800d0f6:	4680      	mov	r8, r0
 800d0f8:	4689      	mov	r9, r1
 800d0fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d102:	9315      	str	r3, [sp, #84]	; 0x54
 800d104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d108:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d10c:	e79d      	b.n	800d04a <_strtod_l+0x9aa>
 800d10e:	f1ba 0f01 	cmp.w	sl, #1
 800d112:	d102      	bne.n	800d11a <_strtod_l+0xa7a>
 800d114:	2f00      	cmp	r7, #0
 800d116:	f43f ad83 	beq.w	800cc20 <_strtod_l+0x580>
 800d11a:	4b62      	ldr	r3, [pc, #392]	; (800d2a4 <_strtod_l+0xc04>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	e78e      	b.n	800d03e <_strtod_l+0x99e>
 800d120:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d2a0 <_strtod_l+0xc00>
 800d124:	f04f 0800 	mov.w	r8, #0
 800d128:	e7e7      	b.n	800d0fa <_strtod_l+0xa5a>
 800d12a:	4b5d      	ldr	r3, [pc, #372]	; (800d2a0 <_strtod_l+0xc00>)
 800d12c:	4640      	mov	r0, r8
 800d12e:	4649      	mov	r1, r9
 800d130:	2200      	movs	r2, #0
 800d132:	f7f3 fa79 	bl	8000628 <__aeabi_dmul>
 800d136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d138:	4680      	mov	r8, r0
 800d13a:	4689      	mov	r9, r1
 800d13c:	b933      	cbnz	r3, 800d14c <_strtod_l+0xaac>
 800d13e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d142:	900e      	str	r0, [sp, #56]	; 0x38
 800d144:	930f      	str	r3, [sp, #60]	; 0x3c
 800d146:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d14a:	e7dd      	b.n	800d108 <_strtod_l+0xa68>
 800d14c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d150:	e7f9      	b.n	800d146 <_strtod_l+0xaa6>
 800d152:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1a8      	bne.n	800d0ae <_strtod_l+0xa0e>
 800d15c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d162:	0d1b      	lsrs	r3, r3, #20
 800d164:	051b      	lsls	r3, r3, #20
 800d166:	429a      	cmp	r2, r3
 800d168:	d1a1      	bne.n	800d0ae <_strtod_l+0xa0e>
 800d16a:	4640      	mov	r0, r8
 800d16c:	4649      	mov	r1, r9
 800d16e:	f7f3 fdbb 	bl	8000ce8 <__aeabi_d2lz>
 800d172:	f7f3 fa2b 	bl	80005cc <__aeabi_l2d>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4640      	mov	r0, r8
 800d17c:	4649      	mov	r1, r9
 800d17e:	f7f3 f89b 	bl	80002b8 <__aeabi_dsub>
 800d182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d188:	ea43 030a 	orr.w	r3, r3, sl
 800d18c:	4313      	orrs	r3, r2
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	d055      	beq.n	800d240 <_strtod_l+0xba0>
 800d194:	a336      	add	r3, pc, #216	; (adr r3, 800d270 <_strtod_l+0xbd0>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f7f3 fcb7 	bl	8000b0c <__aeabi_dcmplt>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	f47f acd0 	bne.w	800cb44 <_strtod_l+0x4a4>
 800d1a4:	a334      	add	r3, pc, #208	; (adr r3, 800d278 <_strtod_l+0xbd8>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	f7f3 fccb 	bl	8000b48 <__aeabi_dcmpgt>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	f43f af7b 	beq.w	800d0ae <_strtod_l+0xa0e>
 800d1b8:	e4c4      	b.n	800cb44 <_strtod_l+0x4a4>
 800d1ba:	9b04      	ldr	r3, [sp, #16]
 800d1bc:	b333      	cbz	r3, 800d20c <_strtod_l+0xb6c>
 800d1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d1c4:	d822      	bhi.n	800d20c <_strtod_l+0xb6c>
 800d1c6:	a32e      	add	r3, pc, #184	; (adr r3, 800d280 <_strtod_l+0xbe0>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	f7f3 fca6 	bl	8000b20 <__aeabi_dcmple>
 800d1d4:	b1a0      	cbz	r0, 800d200 <_strtod_l+0xb60>
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	4640      	mov	r0, r8
 800d1da:	f7f3 fcfd 	bl	8000bd8 <__aeabi_d2uiz>
 800d1de:	2801      	cmp	r0, #1
 800d1e0:	bf38      	it	cc
 800d1e2:	2001      	movcc	r0, #1
 800d1e4:	f7f3 f9a6 	bl	8000534 <__aeabi_ui2d>
 800d1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	bb23      	cbnz	r3, 800d23a <_strtod_l+0xb9a>
 800d1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1f4:	9010      	str	r0, [sp, #64]	; 0x40
 800d1f6:	9311      	str	r3, [sp, #68]	; 0x44
 800d1f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d204:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d208:	1a9b      	subs	r3, r3, r2
 800d20a:	9309      	str	r3, [sp, #36]	; 0x24
 800d20c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d210:	eeb0 0a48 	vmov.f32	s0, s16
 800d214:	eef0 0a68 	vmov.f32	s1, s17
 800d218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d21c:	f001 fe80 	bl	800ef20 <__ulp>
 800d220:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d224:	ec53 2b10 	vmov	r2, r3, d0
 800d228:	f7f3 f9fe 	bl	8000628 <__aeabi_dmul>
 800d22c:	ec53 2b18 	vmov	r2, r3, d8
 800d230:	f7f3 f844 	bl	80002bc <__adddf3>
 800d234:	4682      	mov	sl, r0
 800d236:	468b      	mov	fp, r1
 800d238:	e78d      	b.n	800d156 <_strtod_l+0xab6>
 800d23a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d23e:	e7db      	b.n	800d1f8 <_strtod_l+0xb58>
 800d240:	a311      	add	r3, pc, #68	; (adr r3, 800d288 <_strtod_l+0xbe8>)
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f7f3 fc61 	bl	8000b0c <__aeabi_dcmplt>
 800d24a:	e7b2      	b.n	800d1b2 <_strtod_l+0xb12>
 800d24c:	2300      	movs	r3, #0
 800d24e:	930a      	str	r3, [sp, #40]	; 0x28
 800d250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	f7ff ba6b 	b.w	800c730 <_strtod_l+0x90>
 800d25a:	2a65      	cmp	r2, #101	; 0x65
 800d25c:	f43f ab5f 	beq.w	800c91e <_strtod_l+0x27e>
 800d260:	2a45      	cmp	r2, #69	; 0x45
 800d262:	f43f ab5c 	beq.w	800c91e <_strtod_l+0x27e>
 800d266:	2301      	movs	r3, #1
 800d268:	f7ff bb94 	b.w	800c994 <_strtod_l+0x2f4>
 800d26c:	f3af 8000 	nop.w
 800d270:	94a03595 	.word	0x94a03595
 800d274:	3fdfffff 	.word	0x3fdfffff
 800d278:	35afe535 	.word	0x35afe535
 800d27c:	3fe00000 	.word	0x3fe00000
 800d280:	ffc00000 	.word	0xffc00000
 800d284:	41dfffff 	.word	0x41dfffff
 800d288:	94a03595 	.word	0x94a03595
 800d28c:	3fcfffff 	.word	0x3fcfffff
 800d290:	3ff00000 	.word	0x3ff00000
 800d294:	7ff00000 	.word	0x7ff00000
 800d298:	7fe00000 	.word	0x7fe00000
 800d29c:	7c9fffff 	.word	0x7c9fffff
 800d2a0:	3fe00000 	.word	0x3fe00000
 800d2a4:	bff00000 	.word	0xbff00000
 800d2a8:	7fefffff 	.word	0x7fefffff

0800d2ac <_strtod_r>:
 800d2ac:	4b01      	ldr	r3, [pc, #4]	; (800d2b4 <_strtod_r+0x8>)
 800d2ae:	f7ff b9f7 	b.w	800c6a0 <_strtod_l>
 800d2b2:	bf00      	nop
 800d2b4:	20000120 	.word	0x20000120

0800d2b8 <_strtol_l.constprop.0>:
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2be:	d001      	beq.n	800d2c4 <_strtol_l.constprop.0+0xc>
 800d2c0:	2b24      	cmp	r3, #36	; 0x24
 800d2c2:	d906      	bls.n	800d2d2 <_strtol_l.constprop.0+0x1a>
 800d2c4:	f7fe fa6a 	bl	800b79c <__errno>
 800d2c8:	2316      	movs	r3, #22
 800d2ca:	6003      	str	r3, [r0, #0]
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d3b8 <_strtol_l.constprop.0+0x100>
 800d2d6:	460d      	mov	r5, r1
 800d2d8:	462e      	mov	r6, r5
 800d2da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d2e2:	f017 0708 	ands.w	r7, r7, #8
 800d2e6:	d1f7      	bne.n	800d2d8 <_strtol_l.constprop.0+0x20>
 800d2e8:	2c2d      	cmp	r4, #45	; 0x2d
 800d2ea:	d132      	bne.n	800d352 <_strtol_l.constprop.0+0x9a>
 800d2ec:	782c      	ldrb	r4, [r5, #0]
 800d2ee:	2701      	movs	r7, #1
 800d2f0:	1cb5      	adds	r5, r6, #2
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d05b      	beq.n	800d3ae <_strtol_l.constprop.0+0xf6>
 800d2f6:	2b10      	cmp	r3, #16
 800d2f8:	d109      	bne.n	800d30e <_strtol_l.constprop.0+0x56>
 800d2fa:	2c30      	cmp	r4, #48	; 0x30
 800d2fc:	d107      	bne.n	800d30e <_strtol_l.constprop.0+0x56>
 800d2fe:	782c      	ldrb	r4, [r5, #0]
 800d300:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d304:	2c58      	cmp	r4, #88	; 0x58
 800d306:	d14d      	bne.n	800d3a4 <_strtol_l.constprop.0+0xec>
 800d308:	786c      	ldrb	r4, [r5, #1]
 800d30a:	2310      	movs	r3, #16
 800d30c:	3502      	adds	r5, #2
 800d30e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d312:	f108 38ff 	add.w	r8, r8, #4294967295
 800d316:	f04f 0c00 	mov.w	ip, #0
 800d31a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d31e:	4666      	mov	r6, ip
 800d320:	fb03 8a19 	mls	sl, r3, r9, r8
 800d324:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d328:	f1be 0f09 	cmp.w	lr, #9
 800d32c:	d816      	bhi.n	800d35c <_strtol_l.constprop.0+0xa4>
 800d32e:	4674      	mov	r4, lr
 800d330:	42a3      	cmp	r3, r4
 800d332:	dd24      	ble.n	800d37e <_strtol_l.constprop.0+0xc6>
 800d334:	f1bc 0f00 	cmp.w	ip, #0
 800d338:	db1e      	blt.n	800d378 <_strtol_l.constprop.0+0xc0>
 800d33a:	45b1      	cmp	r9, r6
 800d33c:	d31c      	bcc.n	800d378 <_strtol_l.constprop.0+0xc0>
 800d33e:	d101      	bne.n	800d344 <_strtol_l.constprop.0+0x8c>
 800d340:	45a2      	cmp	sl, r4
 800d342:	db19      	blt.n	800d378 <_strtol_l.constprop.0+0xc0>
 800d344:	fb06 4603 	mla	r6, r6, r3, r4
 800d348:	f04f 0c01 	mov.w	ip, #1
 800d34c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d350:	e7e8      	b.n	800d324 <_strtol_l.constprop.0+0x6c>
 800d352:	2c2b      	cmp	r4, #43	; 0x2b
 800d354:	bf04      	itt	eq
 800d356:	782c      	ldrbeq	r4, [r5, #0]
 800d358:	1cb5      	addeq	r5, r6, #2
 800d35a:	e7ca      	b.n	800d2f2 <_strtol_l.constprop.0+0x3a>
 800d35c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d360:	f1be 0f19 	cmp.w	lr, #25
 800d364:	d801      	bhi.n	800d36a <_strtol_l.constprop.0+0xb2>
 800d366:	3c37      	subs	r4, #55	; 0x37
 800d368:	e7e2      	b.n	800d330 <_strtol_l.constprop.0+0x78>
 800d36a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d36e:	f1be 0f19 	cmp.w	lr, #25
 800d372:	d804      	bhi.n	800d37e <_strtol_l.constprop.0+0xc6>
 800d374:	3c57      	subs	r4, #87	; 0x57
 800d376:	e7db      	b.n	800d330 <_strtol_l.constprop.0+0x78>
 800d378:	f04f 3cff 	mov.w	ip, #4294967295
 800d37c:	e7e6      	b.n	800d34c <_strtol_l.constprop.0+0x94>
 800d37e:	f1bc 0f00 	cmp.w	ip, #0
 800d382:	da05      	bge.n	800d390 <_strtol_l.constprop.0+0xd8>
 800d384:	2322      	movs	r3, #34	; 0x22
 800d386:	6003      	str	r3, [r0, #0]
 800d388:	4646      	mov	r6, r8
 800d38a:	b942      	cbnz	r2, 800d39e <_strtol_l.constprop.0+0xe6>
 800d38c:	4630      	mov	r0, r6
 800d38e:	e79e      	b.n	800d2ce <_strtol_l.constprop.0+0x16>
 800d390:	b107      	cbz	r7, 800d394 <_strtol_l.constprop.0+0xdc>
 800d392:	4276      	negs	r6, r6
 800d394:	2a00      	cmp	r2, #0
 800d396:	d0f9      	beq.n	800d38c <_strtol_l.constprop.0+0xd4>
 800d398:	f1bc 0f00 	cmp.w	ip, #0
 800d39c:	d000      	beq.n	800d3a0 <_strtol_l.constprop.0+0xe8>
 800d39e:	1e69      	subs	r1, r5, #1
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	e7f3      	b.n	800d38c <_strtol_l.constprop.0+0xd4>
 800d3a4:	2430      	movs	r4, #48	; 0x30
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1b1      	bne.n	800d30e <_strtol_l.constprop.0+0x56>
 800d3aa:	2308      	movs	r3, #8
 800d3ac:	e7af      	b.n	800d30e <_strtol_l.constprop.0+0x56>
 800d3ae:	2c30      	cmp	r4, #48	; 0x30
 800d3b0:	d0a5      	beq.n	800d2fe <_strtol_l.constprop.0+0x46>
 800d3b2:	230a      	movs	r3, #10
 800d3b4:	e7ab      	b.n	800d30e <_strtol_l.constprop.0+0x56>
 800d3b6:	bf00      	nop
 800d3b8:	08011521 	.word	0x08011521

0800d3bc <_strtol_r>:
 800d3bc:	f7ff bf7c 	b.w	800d2b8 <_strtol_l.constprop.0>

0800d3c0 <_write_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_write_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f7 fb77 	bl	8004ac2 <_write>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_write_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_write_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20005030 	.word	0x20005030

0800d3e4 <_close_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d06      	ldr	r5, [pc, #24]	; (800d400 <_close_r+0x1c>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	f7f7 fb83 	bl	8004afa <_close>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	d102      	bne.n	800d3fe <_close_r+0x1a>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b103      	cbz	r3, 800d3fe <_close_r+0x1a>
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20005030 	.word	0x20005030

0800d404 <quorem>:
 800d404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d408:	6903      	ldr	r3, [r0, #16]
 800d40a:	690c      	ldr	r4, [r1, #16]
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	4607      	mov	r7, r0
 800d410:	f2c0 8081 	blt.w	800d516 <quorem+0x112>
 800d414:	3c01      	subs	r4, #1
 800d416:	f101 0814 	add.w	r8, r1, #20
 800d41a:	f100 0514 	add.w	r5, r0, #20
 800d41e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d42c:	3301      	adds	r3, #1
 800d42e:	429a      	cmp	r2, r3
 800d430:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d438:	fbb2 f6f3 	udiv	r6, r2, r3
 800d43c:	d331      	bcc.n	800d4a2 <quorem+0x9e>
 800d43e:	f04f 0e00 	mov.w	lr, #0
 800d442:	4640      	mov	r0, r8
 800d444:	46ac      	mov	ip, r5
 800d446:	46f2      	mov	sl, lr
 800d448:	f850 2b04 	ldr.w	r2, [r0], #4
 800d44c:	b293      	uxth	r3, r2
 800d44e:	fb06 e303 	mla	r3, r6, r3, lr
 800d452:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d456:	b29b      	uxth	r3, r3
 800d458:	ebaa 0303 	sub.w	r3, sl, r3
 800d45c:	f8dc a000 	ldr.w	sl, [ip]
 800d460:	0c12      	lsrs	r2, r2, #16
 800d462:	fa13 f38a 	uxtah	r3, r3, sl
 800d466:	fb06 e202 	mla	r2, r6, r2, lr
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d472:	b292      	uxth	r2, r2
 800d474:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d47c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d480:	4581      	cmp	r9, r0
 800d482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d486:	f84c 3b04 	str.w	r3, [ip], #4
 800d48a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d48e:	d2db      	bcs.n	800d448 <quorem+0x44>
 800d490:	f855 300b 	ldr.w	r3, [r5, fp]
 800d494:	b92b      	cbnz	r3, 800d4a2 <quorem+0x9e>
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	3b04      	subs	r3, #4
 800d49a:	429d      	cmp	r5, r3
 800d49c:	461a      	mov	r2, r3
 800d49e:	d32e      	bcc.n	800d4fe <quorem+0xfa>
 800d4a0:	613c      	str	r4, [r7, #16]
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	f001 fc96 	bl	800edd4 <__mcmp>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	db24      	blt.n	800d4f6 <quorem+0xf2>
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f04f 0c00 	mov.w	ip, #0
 800d4b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4b8:	f8d0 e000 	ldr.w	lr, [r0]
 800d4bc:	b293      	uxth	r3, r2
 800d4be:	ebac 0303 	sub.w	r3, ip, r3
 800d4c2:	0c12      	lsrs	r2, r2, #16
 800d4c4:	fa13 f38e 	uxtah	r3, r3, lr
 800d4c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d4cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4d6:	45c1      	cmp	r9, r8
 800d4d8:	f840 3b04 	str.w	r3, [r0], #4
 800d4dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4e0:	d2e8      	bcs.n	800d4b4 <quorem+0xb0>
 800d4e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ea:	b922      	cbnz	r2, 800d4f6 <quorem+0xf2>
 800d4ec:	3b04      	subs	r3, #4
 800d4ee:	429d      	cmp	r5, r3
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	d30a      	bcc.n	800d50a <quorem+0x106>
 800d4f4:	613c      	str	r4, [r7, #16]
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	b003      	add	sp, #12
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	6812      	ldr	r2, [r2, #0]
 800d500:	3b04      	subs	r3, #4
 800d502:	2a00      	cmp	r2, #0
 800d504:	d1cc      	bne.n	800d4a0 <quorem+0x9c>
 800d506:	3c01      	subs	r4, #1
 800d508:	e7c7      	b.n	800d49a <quorem+0x96>
 800d50a:	6812      	ldr	r2, [r2, #0]
 800d50c:	3b04      	subs	r3, #4
 800d50e:	2a00      	cmp	r2, #0
 800d510:	d1f0      	bne.n	800d4f4 <quorem+0xf0>
 800d512:	3c01      	subs	r4, #1
 800d514:	e7eb      	b.n	800d4ee <quorem+0xea>
 800d516:	2000      	movs	r0, #0
 800d518:	e7ee      	b.n	800d4f8 <quorem+0xf4>
 800d51a:	0000      	movs	r0, r0
 800d51c:	0000      	movs	r0, r0
	...

0800d520 <_dtoa_r>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	ed2d 8b04 	vpush	{d8-d9}
 800d528:	ec57 6b10 	vmov	r6, r7, d0
 800d52c:	b093      	sub	sp, #76	; 0x4c
 800d52e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d530:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d534:	9106      	str	r1, [sp, #24]
 800d536:	ee10 aa10 	vmov	sl, s0
 800d53a:	4604      	mov	r4, r0
 800d53c:	9209      	str	r2, [sp, #36]	; 0x24
 800d53e:	930c      	str	r3, [sp, #48]	; 0x30
 800d540:	46bb      	mov	fp, r7
 800d542:	b975      	cbnz	r5, 800d562 <_dtoa_r+0x42>
 800d544:	2010      	movs	r0, #16
 800d546:	f001 f95f 	bl	800e808 <malloc>
 800d54a:	4602      	mov	r2, r0
 800d54c:	6260      	str	r0, [r4, #36]	; 0x24
 800d54e:	b920      	cbnz	r0, 800d55a <_dtoa_r+0x3a>
 800d550:	4ba7      	ldr	r3, [pc, #668]	; (800d7f0 <_dtoa_r+0x2d0>)
 800d552:	21ea      	movs	r1, #234	; 0xea
 800d554:	48a7      	ldr	r0, [pc, #668]	; (800d7f4 <_dtoa_r+0x2d4>)
 800d556:	f002 fcc7 	bl	800fee8 <__assert_func>
 800d55a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d55e:	6005      	str	r5, [r0, #0]
 800d560:	60c5      	str	r5, [r0, #12]
 800d562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d564:	6819      	ldr	r1, [r3, #0]
 800d566:	b151      	cbz	r1, 800d57e <_dtoa_r+0x5e>
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	604a      	str	r2, [r1, #4]
 800d56c:	2301      	movs	r3, #1
 800d56e:	4093      	lsls	r3, r2
 800d570:	608b      	str	r3, [r1, #8]
 800d572:	4620      	mov	r0, r4
 800d574:	f001 f9a2 	bl	800e8bc <_Bfree>
 800d578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	1e3b      	subs	r3, r7, #0
 800d580:	bfaa      	itet	ge
 800d582:	2300      	movge	r3, #0
 800d584:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d588:	f8c8 3000 	strge.w	r3, [r8]
 800d58c:	4b9a      	ldr	r3, [pc, #616]	; (800d7f8 <_dtoa_r+0x2d8>)
 800d58e:	bfbc      	itt	lt
 800d590:	2201      	movlt	r2, #1
 800d592:	f8c8 2000 	strlt.w	r2, [r8]
 800d596:	ea33 030b 	bics.w	r3, r3, fp
 800d59a:	d11b      	bne.n	800d5d4 <_dtoa_r+0xb4>
 800d59c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d59e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5a8:	4333      	orrs	r3, r6
 800d5aa:	f000 8592 	beq.w	800e0d2 <_dtoa_r+0xbb2>
 800d5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5b0:	b963      	cbnz	r3, 800d5cc <_dtoa_r+0xac>
 800d5b2:	4b92      	ldr	r3, [pc, #584]	; (800d7fc <_dtoa_r+0x2dc>)
 800d5b4:	e022      	b.n	800d5fc <_dtoa_r+0xdc>
 800d5b6:	4b92      	ldr	r3, [pc, #584]	; (800d800 <_dtoa_r+0x2e0>)
 800d5b8:	9301      	str	r3, [sp, #4]
 800d5ba:	3308      	adds	r3, #8
 800d5bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	9801      	ldr	r0, [sp, #4]
 800d5c2:	b013      	add	sp, #76	; 0x4c
 800d5c4:	ecbd 8b04 	vpop	{d8-d9}
 800d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5cc:	4b8b      	ldr	r3, [pc, #556]	; (800d7fc <_dtoa_r+0x2dc>)
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	3303      	adds	r3, #3
 800d5d2:	e7f3      	b.n	800d5bc <_dtoa_r+0x9c>
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4650      	mov	r0, sl
 800d5da:	4659      	mov	r1, fp
 800d5dc:	f7f3 fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 800d5e0:	ec4b ab19 	vmov	d9, sl, fp
 800d5e4:	4680      	mov	r8, r0
 800d5e6:	b158      	cbz	r0, 800d600 <_dtoa_r+0xe0>
 800d5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	6013      	str	r3, [r2, #0]
 800d5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 856b 	beq.w	800e0cc <_dtoa_r+0xbac>
 800d5f6:	4883      	ldr	r0, [pc, #524]	; (800d804 <_dtoa_r+0x2e4>)
 800d5f8:	6018      	str	r0, [r3, #0]
 800d5fa:	1e43      	subs	r3, r0, #1
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	e7df      	b.n	800d5c0 <_dtoa_r+0xa0>
 800d600:	ec4b ab10 	vmov	d0, sl, fp
 800d604:	aa10      	add	r2, sp, #64	; 0x40
 800d606:	a911      	add	r1, sp, #68	; 0x44
 800d608:	4620      	mov	r0, r4
 800d60a:	f001 fd05 	bl	800f018 <__d2b>
 800d60e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d612:	ee08 0a10 	vmov	s16, r0
 800d616:	2d00      	cmp	r5, #0
 800d618:	f000 8084 	beq.w	800d724 <_dtoa_r+0x204>
 800d61c:	ee19 3a90 	vmov	r3, s19
 800d620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d624:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d628:	4656      	mov	r6, sl
 800d62a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d62e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d632:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d636:	4b74      	ldr	r3, [pc, #464]	; (800d808 <_dtoa_r+0x2e8>)
 800d638:	2200      	movs	r2, #0
 800d63a:	4630      	mov	r0, r6
 800d63c:	4639      	mov	r1, r7
 800d63e:	f7f2 fe3b 	bl	80002b8 <__aeabi_dsub>
 800d642:	a365      	add	r3, pc, #404	; (adr r3, 800d7d8 <_dtoa_r+0x2b8>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	f7f2 ffee 	bl	8000628 <__aeabi_dmul>
 800d64c:	a364      	add	r3, pc, #400	; (adr r3, 800d7e0 <_dtoa_r+0x2c0>)
 800d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d652:	f7f2 fe33 	bl	80002bc <__adddf3>
 800d656:	4606      	mov	r6, r0
 800d658:	4628      	mov	r0, r5
 800d65a:	460f      	mov	r7, r1
 800d65c:	f7f2 ff7a 	bl	8000554 <__aeabi_i2d>
 800d660:	a361      	add	r3, pc, #388	; (adr r3, 800d7e8 <_dtoa_r+0x2c8>)
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	f7f2 ffdf 	bl	8000628 <__aeabi_dmul>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	4630      	mov	r0, r6
 800d670:	4639      	mov	r1, r7
 800d672:	f7f2 fe23 	bl	80002bc <__adddf3>
 800d676:	4606      	mov	r6, r0
 800d678:	460f      	mov	r7, r1
 800d67a:	f7f3 fa85 	bl	8000b88 <__aeabi_d2iz>
 800d67e:	2200      	movs	r2, #0
 800d680:	9000      	str	r0, [sp, #0]
 800d682:	2300      	movs	r3, #0
 800d684:	4630      	mov	r0, r6
 800d686:	4639      	mov	r1, r7
 800d688:	f7f3 fa40 	bl	8000b0c <__aeabi_dcmplt>
 800d68c:	b150      	cbz	r0, 800d6a4 <_dtoa_r+0x184>
 800d68e:	9800      	ldr	r0, [sp, #0]
 800d690:	f7f2 ff60 	bl	8000554 <__aeabi_i2d>
 800d694:	4632      	mov	r2, r6
 800d696:	463b      	mov	r3, r7
 800d698:	f7f3 fa2e 	bl	8000af8 <__aeabi_dcmpeq>
 800d69c:	b910      	cbnz	r0, 800d6a4 <_dtoa_r+0x184>
 800d69e:	9b00      	ldr	r3, [sp, #0]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	9b00      	ldr	r3, [sp, #0]
 800d6a6:	2b16      	cmp	r3, #22
 800d6a8:	d85a      	bhi.n	800d760 <_dtoa_r+0x240>
 800d6aa:	9a00      	ldr	r2, [sp, #0]
 800d6ac:	4b57      	ldr	r3, [pc, #348]	; (800d80c <_dtoa_r+0x2ec>)
 800d6ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	ec51 0b19 	vmov	r0, r1, d9
 800d6ba:	f7f3 fa27 	bl	8000b0c <__aeabi_dcmplt>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d050      	beq.n	800d764 <_dtoa_r+0x244>
 800d6c2:	9b00      	ldr	r3, [sp, #0]
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ce:	1b5d      	subs	r5, r3, r5
 800d6d0:	1e6b      	subs	r3, r5, #1
 800d6d2:	9305      	str	r3, [sp, #20]
 800d6d4:	bf45      	ittet	mi
 800d6d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d6da:	9304      	strmi	r3, [sp, #16]
 800d6dc:	2300      	movpl	r3, #0
 800d6de:	2300      	movmi	r3, #0
 800d6e0:	bf4c      	ite	mi
 800d6e2:	9305      	strmi	r3, [sp, #20]
 800d6e4:	9304      	strpl	r3, [sp, #16]
 800d6e6:	9b00      	ldr	r3, [sp, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	db3d      	blt.n	800d768 <_dtoa_r+0x248>
 800d6ec:	9b05      	ldr	r3, [sp, #20]
 800d6ee:	9a00      	ldr	r2, [sp, #0]
 800d6f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d6f2:	4413      	add	r3, r2
 800d6f4:	9305      	str	r3, [sp, #20]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9307      	str	r3, [sp, #28]
 800d6fa:	9b06      	ldr	r3, [sp, #24]
 800d6fc:	2b09      	cmp	r3, #9
 800d6fe:	f200 8089 	bhi.w	800d814 <_dtoa_r+0x2f4>
 800d702:	2b05      	cmp	r3, #5
 800d704:	bfc4      	itt	gt
 800d706:	3b04      	subgt	r3, #4
 800d708:	9306      	strgt	r3, [sp, #24]
 800d70a:	9b06      	ldr	r3, [sp, #24]
 800d70c:	f1a3 0302 	sub.w	r3, r3, #2
 800d710:	bfcc      	ite	gt
 800d712:	2500      	movgt	r5, #0
 800d714:	2501      	movle	r5, #1
 800d716:	2b03      	cmp	r3, #3
 800d718:	f200 8087 	bhi.w	800d82a <_dtoa_r+0x30a>
 800d71c:	e8df f003 	tbb	[pc, r3]
 800d720:	59383a2d 	.word	0x59383a2d
 800d724:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d728:	441d      	add	r5, r3
 800d72a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d72e:	2b20      	cmp	r3, #32
 800d730:	bfc1      	itttt	gt
 800d732:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d736:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d73a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d73e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d742:	bfda      	itte	le
 800d744:	f1c3 0320 	rsble	r3, r3, #32
 800d748:	fa06 f003 	lslle.w	r0, r6, r3
 800d74c:	4318      	orrgt	r0, r3
 800d74e:	f7f2 fef1 	bl	8000534 <__aeabi_ui2d>
 800d752:	2301      	movs	r3, #1
 800d754:	4606      	mov	r6, r0
 800d756:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d75a:	3d01      	subs	r5, #1
 800d75c:	930e      	str	r3, [sp, #56]	; 0x38
 800d75e:	e76a      	b.n	800d636 <_dtoa_r+0x116>
 800d760:	2301      	movs	r3, #1
 800d762:	e7b2      	b.n	800d6ca <_dtoa_r+0x1aa>
 800d764:	900b      	str	r0, [sp, #44]	; 0x2c
 800d766:	e7b1      	b.n	800d6cc <_dtoa_r+0x1ac>
 800d768:	9b04      	ldr	r3, [sp, #16]
 800d76a:	9a00      	ldr	r2, [sp, #0]
 800d76c:	1a9b      	subs	r3, r3, r2
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	4253      	negs	r3, r2
 800d772:	9307      	str	r3, [sp, #28]
 800d774:	2300      	movs	r3, #0
 800d776:	930a      	str	r3, [sp, #40]	; 0x28
 800d778:	e7bf      	b.n	800d6fa <_dtoa_r+0x1da>
 800d77a:	2300      	movs	r3, #0
 800d77c:	9308      	str	r3, [sp, #32]
 800d77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d780:	2b00      	cmp	r3, #0
 800d782:	dc55      	bgt.n	800d830 <_dtoa_r+0x310>
 800d784:	2301      	movs	r3, #1
 800d786:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d78a:	461a      	mov	r2, r3
 800d78c:	9209      	str	r2, [sp, #36]	; 0x24
 800d78e:	e00c      	b.n	800d7aa <_dtoa_r+0x28a>
 800d790:	2301      	movs	r3, #1
 800d792:	e7f3      	b.n	800d77c <_dtoa_r+0x25c>
 800d794:	2300      	movs	r3, #0
 800d796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d798:	9308      	str	r3, [sp, #32]
 800d79a:	9b00      	ldr	r3, [sp, #0]
 800d79c:	4413      	add	r3, r2
 800d79e:	9302      	str	r3, [sp, #8]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	9303      	str	r3, [sp, #12]
 800d7a6:	bfb8      	it	lt
 800d7a8:	2301      	movlt	r3, #1
 800d7aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	6042      	str	r2, [r0, #4]
 800d7b0:	2204      	movs	r2, #4
 800d7b2:	f102 0614 	add.w	r6, r2, #20
 800d7b6:	429e      	cmp	r6, r3
 800d7b8:	6841      	ldr	r1, [r0, #4]
 800d7ba:	d93d      	bls.n	800d838 <_dtoa_r+0x318>
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f001 f83d 	bl	800e83c <_Balloc>
 800d7c2:	9001      	str	r0, [sp, #4]
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d13b      	bne.n	800d840 <_dtoa_r+0x320>
 800d7c8:	4b11      	ldr	r3, [pc, #68]	; (800d810 <_dtoa_r+0x2f0>)
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7d0:	e6c0      	b.n	800d554 <_dtoa_r+0x34>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e7df      	b.n	800d796 <_dtoa_r+0x276>
 800d7d6:	bf00      	nop
 800d7d8:	636f4361 	.word	0x636f4361
 800d7dc:	3fd287a7 	.word	0x3fd287a7
 800d7e0:	8b60c8b3 	.word	0x8b60c8b3
 800d7e4:	3fc68a28 	.word	0x3fc68a28
 800d7e8:	509f79fb 	.word	0x509f79fb
 800d7ec:	3fd34413 	.word	0x3fd34413
 800d7f0:	0801162e 	.word	0x0801162e
 800d7f4:	08011645 	.word	0x08011645
 800d7f8:	7ff00000 	.word	0x7ff00000
 800d7fc:	0801162a 	.word	0x0801162a
 800d800:	08011621 	.word	0x08011621
 800d804:	0801189a 	.word	0x0801189a
 800d808:	3ff80000 	.word	0x3ff80000
 800d80c:	080117b0 	.word	0x080117b0
 800d810:	080116a0 	.word	0x080116a0
 800d814:	2501      	movs	r5, #1
 800d816:	2300      	movs	r3, #0
 800d818:	9306      	str	r3, [sp, #24]
 800d81a:	9508      	str	r5, [sp, #32]
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295
 800d820:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d824:	2200      	movs	r2, #0
 800d826:	2312      	movs	r3, #18
 800d828:	e7b0      	b.n	800d78c <_dtoa_r+0x26c>
 800d82a:	2301      	movs	r3, #1
 800d82c:	9308      	str	r3, [sp, #32]
 800d82e:	e7f5      	b.n	800d81c <_dtoa_r+0x2fc>
 800d830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d832:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d836:	e7b8      	b.n	800d7aa <_dtoa_r+0x28a>
 800d838:	3101      	adds	r1, #1
 800d83a:	6041      	str	r1, [r0, #4]
 800d83c:	0052      	lsls	r2, r2, #1
 800d83e:	e7b8      	b.n	800d7b2 <_dtoa_r+0x292>
 800d840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d842:	9a01      	ldr	r2, [sp, #4]
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	2b0e      	cmp	r3, #14
 800d84a:	f200 809d 	bhi.w	800d988 <_dtoa_r+0x468>
 800d84e:	2d00      	cmp	r5, #0
 800d850:	f000 809a 	beq.w	800d988 <_dtoa_r+0x468>
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	dd32      	ble.n	800d8c0 <_dtoa_r+0x3a0>
 800d85a:	4ab7      	ldr	r2, [pc, #732]	; (800db38 <_dtoa_r+0x618>)
 800d85c:	f003 030f 	and.w	r3, r3, #15
 800d860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d864:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d868:	9b00      	ldr	r3, [sp, #0]
 800d86a:	05d8      	lsls	r0, r3, #23
 800d86c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d870:	d516      	bpl.n	800d8a0 <_dtoa_r+0x380>
 800d872:	4bb2      	ldr	r3, [pc, #712]	; (800db3c <_dtoa_r+0x61c>)
 800d874:	ec51 0b19 	vmov	r0, r1, d9
 800d878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d87c:	f7f2 fffe 	bl	800087c <__aeabi_ddiv>
 800d880:	f007 070f 	and.w	r7, r7, #15
 800d884:	4682      	mov	sl, r0
 800d886:	468b      	mov	fp, r1
 800d888:	2503      	movs	r5, #3
 800d88a:	4eac      	ldr	r6, [pc, #688]	; (800db3c <_dtoa_r+0x61c>)
 800d88c:	b957      	cbnz	r7, 800d8a4 <_dtoa_r+0x384>
 800d88e:	4642      	mov	r2, r8
 800d890:	464b      	mov	r3, r9
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 fff1 	bl	800087c <__aeabi_ddiv>
 800d89a:	4682      	mov	sl, r0
 800d89c:	468b      	mov	fp, r1
 800d89e:	e028      	b.n	800d8f2 <_dtoa_r+0x3d2>
 800d8a0:	2502      	movs	r5, #2
 800d8a2:	e7f2      	b.n	800d88a <_dtoa_r+0x36a>
 800d8a4:	07f9      	lsls	r1, r7, #31
 800d8a6:	d508      	bpl.n	800d8ba <_dtoa_r+0x39a>
 800d8a8:	4640      	mov	r0, r8
 800d8aa:	4649      	mov	r1, r9
 800d8ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8b0:	f7f2 feba 	bl	8000628 <__aeabi_dmul>
 800d8b4:	3501      	adds	r5, #1
 800d8b6:	4680      	mov	r8, r0
 800d8b8:	4689      	mov	r9, r1
 800d8ba:	107f      	asrs	r7, r7, #1
 800d8bc:	3608      	adds	r6, #8
 800d8be:	e7e5      	b.n	800d88c <_dtoa_r+0x36c>
 800d8c0:	f000 809b 	beq.w	800d9fa <_dtoa_r+0x4da>
 800d8c4:	9b00      	ldr	r3, [sp, #0]
 800d8c6:	4f9d      	ldr	r7, [pc, #628]	; (800db3c <_dtoa_r+0x61c>)
 800d8c8:	425e      	negs	r6, r3
 800d8ca:	4b9b      	ldr	r3, [pc, #620]	; (800db38 <_dtoa_r+0x618>)
 800d8cc:	f006 020f 	and.w	r2, r6, #15
 800d8d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	ec51 0b19 	vmov	r0, r1, d9
 800d8dc:	f7f2 fea4 	bl	8000628 <__aeabi_dmul>
 800d8e0:	1136      	asrs	r6, r6, #4
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	468b      	mov	fp, r1
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	2502      	movs	r5, #2
 800d8ea:	2e00      	cmp	r6, #0
 800d8ec:	d17a      	bne.n	800d9e4 <_dtoa_r+0x4c4>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1d3      	bne.n	800d89a <_dtoa_r+0x37a>
 800d8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 8082 	beq.w	800d9fe <_dtoa_r+0x4de>
 800d8fa:	4b91      	ldr	r3, [pc, #580]	; (800db40 <_dtoa_r+0x620>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4650      	mov	r0, sl
 800d900:	4659      	mov	r1, fp
 800d902:	f7f3 f903 	bl	8000b0c <__aeabi_dcmplt>
 800d906:	2800      	cmp	r0, #0
 800d908:	d079      	beq.n	800d9fe <_dtoa_r+0x4de>
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d076      	beq.n	800d9fe <_dtoa_r+0x4de>
 800d910:	9b02      	ldr	r3, [sp, #8]
 800d912:	2b00      	cmp	r3, #0
 800d914:	dd36      	ble.n	800d984 <_dtoa_r+0x464>
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	4650      	mov	r0, sl
 800d91a:	4659      	mov	r1, fp
 800d91c:	1e5f      	subs	r7, r3, #1
 800d91e:	2200      	movs	r2, #0
 800d920:	4b88      	ldr	r3, [pc, #544]	; (800db44 <_dtoa_r+0x624>)
 800d922:	f7f2 fe81 	bl	8000628 <__aeabi_dmul>
 800d926:	9e02      	ldr	r6, [sp, #8]
 800d928:	4682      	mov	sl, r0
 800d92a:	468b      	mov	fp, r1
 800d92c:	3501      	adds	r5, #1
 800d92e:	4628      	mov	r0, r5
 800d930:	f7f2 fe10 	bl	8000554 <__aeabi_i2d>
 800d934:	4652      	mov	r2, sl
 800d936:	465b      	mov	r3, fp
 800d938:	f7f2 fe76 	bl	8000628 <__aeabi_dmul>
 800d93c:	4b82      	ldr	r3, [pc, #520]	; (800db48 <_dtoa_r+0x628>)
 800d93e:	2200      	movs	r2, #0
 800d940:	f7f2 fcbc 	bl	80002bc <__adddf3>
 800d944:	46d0      	mov	r8, sl
 800d946:	46d9      	mov	r9, fp
 800d948:	4682      	mov	sl, r0
 800d94a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d94e:	2e00      	cmp	r6, #0
 800d950:	d158      	bne.n	800da04 <_dtoa_r+0x4e4>
 800d952:	4b7e      	ldr	r3, [pc, #504]	; (800db4c <_dtoa_r+0x62c>)
 800d954:	2200      	movs	r2, #0
 800d956:	4640      	mov	r0, r8
 800d958:	4649      	mov	r1, r9
 800d95a:	f7f2 fcad 	bl	80002b8 <__aeabi_dsub>
 800d95e:	4652      	mov	r2, sl
 800d960:	465b      	mov	r3, fp
 800d962:	4680      	mov	r8, r0
 800d964:	4689      	mov	r9, r1
 800d966:	f7f3 f8ef 	bl	8000b48 <__aeabi_dcmpgt>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f040 8295 	bne.w	800de9a <_dtoa_r+0x97a>
 800d970:	4652      	mov	r2, sl
 800d972:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d976:	4640      	mov	r0, r8
 800d978:	4649      	mov	r1, r9
 800d97a:	f7f3 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800d97e:	2800      	cmp	r0, #0
 800d980:	f040 8289 	bne.w	800de96 <_dtoa_r+0x976>
 800d984:	ec5b ab19 	vmov	sl, fp, d9
 800d988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f2c0 8148 	blt.w	800dc20 <_dtoa_r+0x700>
 800d990:	9a00      	ldr	r2, [sp, #0]
 800d992:	2a0e      	cmp	r2, #14
 800d994:	f300 8144 	bgt.w	800dc20 <_dtoa_r+0x700>
 800d998:	4b67      	ldr	r3, [pc, #412]	; (800db38 <_dtoa_r+0x618>)
 800d99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d99e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f280 80d5 	bge.w	800db54 <_dtoa_r+0x634>
 800d9aa:	9b03      	ldr	r3, [sp, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f300 80d1 	bgt.w	800db54 <_dtoa_r+0x634>
 800d9b2:	f040 826f 	bne.w	800de94 <_dtoa_r+0x974>
 800d9b6:	4b65      	ldr	r3, [pc, #404]	; (800db4c <_dtoa_r+0x62c>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fe33 	bl	8000628 <__aeabi_dmul>
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	465b      	mov	r3, fp
 800d9c6:	f7f3 f8b5 	bl	8000b34 <__aeabi_dcmpge>
 800d9ca:	9e03      	ldr	r6, [sp, #12]
 800d9cc:	4637      	mov	r7, r6
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	f040 8245 	bne.w	800de5e <_dtoa_r+0x93e>
 800d9d4:	9d01      	ldr	r5, [sp, #4]
 800d9d6:	2331      	movs	r3, #49	; 0x31
 800d9d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d9dc:	9b00      	ldr	r3, [sp, #0]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	e240      	b.n	800de66 <_dtoa_r+0x946>
 800d9e4:	07f2      	lsls	r2, r6, #31
 800d9e6:	d505      	bpl.n	800d9f4 <_dtoa_r+0x4d4>
 800d9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ec:	f7f2 fe1c 	bl	8000628 <__aeabi_dmul>
 800d9f0:	3501      	adds	r5, #1
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	1076      	asrs	r6, r6, #1
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	e777      	b.n	800d8ea <_dtoa_r+0x3ca>
 800d9fa:	2502      	movs	r5, #2
 800d9fc:	e779      	b.n	800d8f2 <_dtoa_r+0x3d2>
 800d9fe:	9f00      	ldr	r7, [sp, #0]
 800da00:	9e03      	ldr	r6, [sp, #12]
 800da02:	e794      	b.n	800d92e <_dtoa_r+0x40e>
 800da04:	9901      	ldr	r1, [sp, #4]
 800da06:	4b4c      	ldr	r3, [pc, #304]	; (800db38 <_dtoa_r+0x618>)
 800da08:	4431      	add	r1, r6
 800da0a:	910d      	str	r1, [sp, #52]	; 0x34
 800da0c:	9908      	ldr	r1, [sp, #32]
 800da0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800da12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da16:	2900      	cmp	r1, #0
 800da18:	d043      	beq.n	800daa2 <_dtoa_r+0x582>
 800da1a:	494d      	ldr	r1, [pc, #308]	; (800db50 <_dtoa_r+0x630>)
 800da1c:	2000      	movs	r0, #0
 800da1e:	f7f2 ff2d 	bl	800087c <__aeabi_ddiv>
 800da22:	4652      	mov	r2, sl
 800da24:	465b      	mov	r3, fp
 800da26:	f7f2 fc47 	bl	80002b8 <__aeabi_dsub>
 800da2a:	9d01      	ldr	r5, [sp, #4]
 800da2c:	4682      	mov	sl, r0
 800da2e:	468b      	mov	fp, r1
 800da30:	4649      	mov	r1, r9
 800da32:	4640      	mov	r0, r8
 800da34:	f7f3 f8a8 	bl	8000b88 <__aeabi_d2iz>
 800da38:	4606      	mov	r6, r0
 800da3a:	f7f2 fd8b 	bl	8000554 <__aeabi_i2d>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f2 fc37 	bl	80002b8 <__aeabi_dsub>
 800da4a:	3630      	adds	r6, #48	; 0x30
 800da4c:	f805 6b01 	strb.w	r6, [r5], #1
 800da50:	4652      	mov	r2, sl
 800da52:	465b      	mov	r3, fp
 800da54:	4680      	mov	r8, r0
 800da56:	4689      	mov	r9, r1
 800da58:	f7f3 f858 	bl	8000b0c <__aeabi_dcmplt>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d163      	bne.n	800db28 <_dtoa_r+0x608>
 800da60:	4642      	mov	r2, r8
 800da62:	464b      	mov	r3, r9
 800da64:	4936      	ldr	r1, [pc, #216]	; (800db40 <_dtoa_r+0x620>)
 800da66:	2000      	movs	r0, #0
 800da68:	f7f2 fc26 	bl	80002b8 <__aeabi_dsub>
 800da6c:	4652      	mov	r2, sl
 800da6e:	465b      	mov	r3, fp
 800da70:	f7f3 f84c 	bl	8000b0c <__aeabi_dcmplt>
 800da74:	2800      	cmp	r0, #0
 800da76:	f040 80b5 	bne.w	800dbe4 <_dtoa_r+0x6c4>
 800da7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da7c:	429d      	cmp	r5, r3
 800da7e:	d081      	beq.n	800d984 <_dtoa_r+0x464>
 800da80:	4b30      	ldr	r3, [pc, #192]	; (800db44 <_dtoa_r+0x624>)
 800da82:	2200      	movs	r2, #0
 800da84:	4650      	mov	r0, sl
 800da86:	4659      	mov	r1, fp
 800da88:	f7f2 fdce 	bl	8000628 <__aeabi_dmul>
 800da8c:	4b2d      	ldr	r3, [pc, #180]	; (800db44 <_dtoa_r+0x624>)
 800da8e:	4682      	mov	sl, r0
 800da90:	468b      	mov	fp, r1
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	2200      	movs	r2, #0
 800da98:	f7f2 fdc6 	bl	8000628 <__aeabi_dmul>
 800da9c:	4680      	mov	r8, r0
 800da9e:	4689      	mov	r9, r1
 800daa0:	e7c6      	b.n	800da30 <_dtoa_r+0x510>
 800daa2:	4650      	mov	r0, sl
 800daa4:	4659      	mov	r1, fp
 800daa6:	f7f2 fdbf 	bl	8000628 <__aeabi_dmul>
 800daaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800daac:	9d01      	ldr	r5, [sp, #4]
 800daae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab0:	4682      	mov	sl, r0
 800dab2:	468b      	mov	fp, r1
 800dab4:	4649      	mov	r1, r9
 800dab6:	4640      	mov	r0, r8
 800dab8:	f7f3 f866 	bl	8000b88 <__aeabi_d2iz>
 800dabc:	4606      	mov	r6, r0
 800dabe:	f7f2 fd49 	bl	8000554 <__aeabi_i2d>
 800dac2:	3630      	adds	r6, #48	; 0x30
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4640      	mov	r0, r8
 800daca:	4649      	mov	r1, r9
 800dacc:	f7f2 fbf4 	bl	80002b8 <__aeabi_dsub>
 800dad0:	f805 6b01 	strb.w	r6, [r5], #1
 800dad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dad6:	429d      	cmp	r5, r3
 800dad8:	4680      	mov	r8, r0
 800dada:	4689      	mov	r9, r1
 800dadc:	f04f 0200 	mov.w	r2, #0
 800dae0:	d124      	bne.n	800db2c <_dtoa_r+0x60c>
 800dae2:	4b1b      	ldr	r3, [pc, #108]	; (800db50 <_dtoa_r+0x630>)
 800dae4:	4650      	mov	r0, sl
 800dae6:	4659      	mov	r1, fp
 800dae8:	f7f2 fbe8 	bl	80002bc <__adddf3>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4640      	mov	r0, r8
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7f3 f828 	bl	8000b48 <__aeabi_dcmpgt>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d173      	bne.n	800dbe4 <_dtoa_r+0x6c4>
 800dafc:	4652      	mov	r2, sl
 800dafe:	465b      	mov	r3, fp
 800db00:	4913      	ldr	r1, [pc, #76]	; (800db50 <_dtoa_r+0x630>)
 800db02:	2000      	movs	r0, #0
 800db04:	f7f2 fbd8 	bl	80002b8 <__aeabi_dsub>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4640      	mov	r0, r8
 800db0e:	4649      	mov	r1, r9
 800db10:	f7f2 fffc 	bl	8000b0c <__aeabi_dcmplt>
 800db14:	2800      	cmp	r0, #0
 800db16:	f43f af35 	beq.w	800d984 <_dtoa_r+0x464>
 800db1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800db1c:	1e6b      	subs	r3, r5, #1
 800db1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db24:	2b30      	cmp	r3, #48	; 0x30
 800db26:	d0f8      	beq.n	800db1a <_dtoa_r+0x5fa>
 800db28:	9700      	str	r7, [sp, #0]
 800db2a:	e049      	b.n	800dbc0 <_dtoa_r+0x6a0>
 800db2c:	4b05      	ldr	r3, [pc, #20]	; (800db44 <_dtoa_r+0x624>)
 800db2e:	f7f2 fd7b 	bl	8000628 <__aeabi_dmul>
 800db32:	4680      	mov	r8, r0
 800db34:	4689      	mov	r9, r1
 800db36:	e7bd      	b.n	800dab4 <_dtoa_r+0x594>
 800db38:	080117b0 	.word	0x080117b0
 800db3c:	08011788 	.word	0x08011788
 800db40:	3ff00000 	.word	0x3ff00000
 800db44:	40240000 	.word	0x40240000
 800db48:	401c0000 	.word	0x401c0000
 800db4c:	40140000 	.word	0x40140000
 800db50:	3fe00000 	.word	0x3fe00000
 800db54:	9d01      	ldr	r5, [sp, #4]
 800db56:	4656      	mov	r6, sl
 800db58:	465f      	mov	r7, fp
 800db5a:	4642      	mov	r2, r8
 800db5c:	464b      	mov	r3, r9
 800db5e:	4630      	mov	r0, r6
 800db60:	4639      	mov	r1, r7
 800db62:	f7f2 fe8b 	bl	800087c <__aeabi_ddiv>
 800db66:	f7f3 f80f 	bl	8000b88 <__aeabi_d2iz>
 800db6a:	4682      	mov	sl, r0
 800db6c:	f7f2 fcf2 	bl	8000554 <__aeabi_i2d>
 800db70:	4642      	mov	r2, r8
 800db72:	464b      	mov	r3, r9
 800db74:	f7f2 fd58 	bl	8000628 <__aeabi_dmul>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4630      	mov	r0, r6
 800db7e:	4639      	mov	r1, r7
 800db80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db84:	f7f2 fb98 	bl	80002b8 <__aeabi_dsub>
 800db88:	f805 6b01 	strb.w	r6, [r5], #1
 800db8c:	9e01      	ldr	r6, [sp, #4]
 800db8e:	9f03      	ldr	r7, [sp, #12]
 800db90:	1bae      	subs	r6, r5, r6
 800db92:	42b7      	cmp	r7, r6
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	d135      	bne.n	800dc06 <_dtoa_r+0x6e6>
 800db9a:	f7f2 fb8f 	bl	80002bc <__adddf3>
 800db9e:	4642      	mov	r2, r8
 800dba0:	464b      	mov	r3, r9
 800dba2:	4606      	mov	r6, r0
 800dba4:	460f      	mov	r7, r1
 800dba6:	f7f2 ffcf 	bl	8000b48 <__aeabi_dcmpgt>
 800dbaa:	b9d0      	cbnz	r0, 800dbe2 <_dtoa_r+0x6c2>
 800dbac:	4642      	mov	r2, r8
 800dbae:	464b      	mov	r3, r9
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	f7f2 ffa0 	bl	8000af8 <__aeabi_dcmpeq>
 800dbb8:	b110      	cbz	r0, 800dbc0 <_dtoa_r+0x6a0>
 800dbba:	f01a 0f01 	tst.w	sl, #1
 800dbbe:	d110      	bne.n	800dbe2 <_dtoa_r+0x6c2>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	ee18 1a10 	vmov	r1, s16
 800dbc6:	f000 fe79 	bl	800e8bc <_Bfree>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9800      	ldr	r0, [sp, #0]
 800dbce:	702b      	strb	r3, [r5, #0]
 800dbd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	6018      	str	r0, [r3, #0]
 800dbd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f43f acf1 	beq.w	800d5c0 <_dtoa_r+0xa0>
 800dbde:	601d      	str	r5, [r3, #0]
 800dbe0:	e4ee      	b.n	800d5c0 <_dtoa_r+0xa0>
 800dbe2:	9f00      	ldr	r7, [sp, #0]
 800dbe4:	462b      	mov	r3, r5
 800dbe6:	461d      	mov	r5, r3
 800dbe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbec:	2a39      	cmp	r2, #57	; 0x39
 800dbee:	d106      	bne.n	800dbfe <_dtoa_r+0x6de>
 800dbf0:	9a01      	ldr	r2, [sp, #4]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d1f7      	bne.n	800dbe6 <_dtoa_r+0x6c6>
 800dbf6:	9901      	ldr	r1, [sp, #4]
 800dbf8:	2230      	movs	r2, #48	; 0x30
 800dbfa:	3701      	adds	r7, #1
 800dbfc:	700a      	strb	r2, [r1, #0]
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	3201      	adds	r2, #1
 800dc02:	701a      	strb	r2, [r3, #0]
 800dc04:	e790      	b.n	800db28 <_dtoa_r+0x608>
 800dc06:	4ba6      	ldr	r3, [pc, #664]	; (800dea0 <_dtoa_r+0x980>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f7f2 fd0d 	bl	8000628 <__aeabi_dmul>
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2300      	movs	r3, #0
 800dc12:	4606      	mov	r6, r0
 800dc14:	460f      	mov	r7, r1
 800dc16:	f7f2 ff6f 	bl	8000af8 <__aeabi_dcmpeq>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d09d      	beq.n	800db5a <_dtoa_r+0x63a>
 800dc1e:	e7cf      	b.n	800dbc0 <_dtoa_r+0x6a0>
 800dc20:	9a08      	ldr	r2, [sp, #32]
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	f000 80d7 	beq.w	800ddd6 <_dtoa_r+0x8b6>
 800dc28:	9a06      	ldr	r2, [sp, #24]
 800dc2a:	2a01      	cmp	r2, #1
 800dc2c:	f300 80ba 	bgt.w	800dda4 <_dtoa_r+0x884>
 800dc30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	f000 80b2 	beq.w	800dd9c <_dtoa_r+0x87c>
 800dc38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc3c:	9e07      	ldr	r6, [sp, #28]
 800dc3e:	9d04      	ldr	r5, [sp, #16]
 800dc40:	9a04      	ldr	r2, [sp, #16]
 800dc42:	441a      	add	r2, r3
 800dc44:	9204      	str	r2, [sp, #16]
 800dc46:	9a05      	ldr	r2, [sp, #20]
 800dc48:	2101      	movs	r1, #1
 800dc4a:	441a      	add	r2, r3
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	9205      	str	r2, [sp, #20]
 800dc50:	f000 ff36 	bl	800eac0 <__i2b>
 800dc54:	4607      	mov	r7, r0
 800dc56:	2d00      	cmp	r5, #0
 800dc58:	dd0c      	ble.n	800dc74 <_dtoa_r+0x754>
 800dc5a:	9b05      	ldr	r3, [sp, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd09      	ble.n	800dc74 <_dtoa_r+0x754>
 800dc60:	42ab      	cmp	r3, r5
 800dc62:	9a04      	ldr	r2, [sp, #16]
 800dc64:	bfa8      	it	ge
 800dc66:	462b      	movge	r3, r5
 800dc68:	1ad2      	subs	r2, r2, r3
 800dc6a:	9204      	str	r2, [sp, #16]
 800dc6c:	9a05      	ldr	r2, [sp, #20]
 800dc6e:	1aed      	subs	r5, r5, r3
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	9305      	str	r3, [sp, #20]
 800dc74:	9b07      	ldr	r3, [sp, #28]
 800dc76:	b31b      	cbz	r3, 800dcc0 <_dtoa_r+0x7a0>
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 80af 	beq.w	800ddde <_dtoa_r+0x8be>
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	dd13      	ble.n	800dcac <_dtoa_r+0x78c>
 800dc84:	4639      	mov	r1, r7
 800dc86:	4632      	mov	r2, r6
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 ffd9 	bl	800ec40 <__pow5mult>
 800dc8e:	ee18 2a10 	vmov	r2, s16
 800dc92:	4601      	mov	r1, r0
 800dc94:	4607      	mov	r7, r0
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 ff28 	bl	800eaec <__multiply>
 800dc9c:	ee18 1a10 	vmov	r1, s16
 800dca0:	4680      	mov	r8, r0
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 fe0a 	bl	800e8bc <_Bfree>
 800dca8:	ee08 8a10 	vmov	s16, r8
 800dcac:	9b07      	ldr	r3, [sp, #28]
 800dcae:	1b9a      	subs	r2, r3, r6
 800dcb0:	d006      	beq.n	800dcc0 <_dtoa_r+0x7a0>
 800dcb2:	ee18 1a10 	vmov	r1, s16
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f000 ffc2 	bl	800ec40 <__pow5mult>
 800dcbc:	ee08 0a10 	vmov	s16, r0
 800dcc0:	2101      	movs	r1, #1
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fefc 	bl	800eac0 <__i2b>
 800dcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	4606      	mov	r6, r0
 800dcce:	f340 8088 	ble.w	800dde2 <_dtoa_r+0x8c2>
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	4601      	mov	r1, r0
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 ffb2 	bl	800ec40 <__pow5mult>
 800dcdc:	9b06      	ldr	r3, [sp, #24]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	4606      	mov	r6, r0
 800dce2:	f340 8081 	ble.w	800dde8 <_dtoa_r+0x8c8>
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	6933      	ldr	r3, [r6, #16]
 800dcec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dcf0:	6918      	ldr	r0, [r3, #16]
 800dcf2:	f000 fe95 	bl	800ea20 <__hi0bits>
 800dcf6:	f1c0 0020 	rsb	r0, r0, #32
 800dcfa:	9b05      	ldr	r3, [sp, #20]
 800dcfc:	4418      	add	r0, r3
 800dcfe:	f010 001f 	ands.w	r0, r0, #31
 800dd02:	f000 8092 	beq.w	800de2a <_dtoa_r+0x90a>
 800dd06:	f1c0 0320 	rsb	r3, r0, #32
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	f340 808a 	ble.w	800de24 <_dtoa_r+0x904>
 800dd10:	f1c0 001c 	rsb	r0, r0, #28
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	4403      	add	r3, r0
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	9b05      	ldr	r3, [sp, #20]
 800dd1c:	4403      	add	r3, r0
 800dd1e:	4405      	add	r5, r0
 800dd20:	9305      	str	r3, [sp, #20]
 800dd22:	9b04      	ldr	r3, [sp, #16]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	dd07      	ble.n	800dd38 <_dtoa_r+0x818>
 800dd28:	ee18 1a10 	vmov	r1, s16
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f000 ffe0 	bl	800ecf4 <__lshift>
 800dd34:	ee08 0a10 	vmov	s16, r0
 800dd38:	9b05      	ldr	r3, [sp, #20]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd05      	ble.n	800dd4a <_dtoa_r+0x82a>
 800dd3e:	4631      	mov	r1, r6
 800dd40:	461a      	mov	r2, r3
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 ffd6 	bl	800ecf4 <__lshift>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d06e      	beq.n	800de2e <_dtoa_r+0x90e>
 800dd50:	ee18 0a10 	vmov	r0, s16
 800dd54:	4631      	mov	r1, r6
 800dd56:	f001 f83d 	bl	800edd4 <__mcmp>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	da67      	bge.n	800de2e <_dtoa_r+0x90e>
 800dd5e:	9b00      	ldr	r3, [sp, #0]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	ee18 1a10 	vmov	r1, s16
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	220a      	movs	r2, #10
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 fdc7 	bl	800e900 <__multadd>
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	ee08 0a10 	vmov	s16, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 81b1 	beq.w	800e0e0 <_dtoa_r+0xbc0>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	4639      	mov	r1, r7
 800dd82:	220a      	movs	r2, #10
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 fdbb 	bl	800e900 <__multadd>
 800dd8a:	9b02      	ldr	r3, [sp, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	4607      	mov	r7, r0
 800dd90:	f300 808e 	bgt.w	800deb0 <_dtoa_r+0x990>
 800dd94:	9b06      	ldr	r3, [sp, #24]
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	dc51      	bgt.n	800de3e <_dtoa_r+0x91e>
 800dd9a:	e089      	b.n	800deb0 <_dtoa_r+0x990>
 800dd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dda2:	e74b      	b.n	800dc3c <_dtoa_r+0x71c>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	1e5e      	subs	r6, r3, #1
 800dda8:	9b07      	ldr	r3, [sp, #28]
 800ddaa:	42b3      	cmp	r3, r6
 800ddac:	bfbf      	itttt	lt
 800ddae:	9b07      	ldrlt	r3, [sp, #28]
 800ddb0:	9607      	strlt	r6, [sp, #28]
 800ddb2:	1af2      	sublt	r2, r6, r3
 800ddb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ddb6:	bfb6      	itet	lt
 800ddb8:	189b      	addlt	r3, r3, r2
 800ddba:	1b9e      	subge	r6, r3, r6
 800ddbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	bfb8      	it	lt
 800ddc2:	2600      	movlt	r6, #0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bfb7      	itett	lt
 800ddc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ddcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ddd0:	1a9d      	sublt	r5, r3, r2
 800ddd2:	2300      	movlt	r3, #0
 800ddd4:	e734      	b.n	800dc40 <_dtoa_r+0x720>
 800ddd6:	9e07      	ldr	r6, [sp, #28]
 800ddd8:	9d04      	ldr	r5, [sp, #16]
 800ddda:	9f08      	ldr	r7, [sp, #32]
 800dddc:	e73b      	b.n	800dc56 <_dtoa_r+0x736>
 800ddde:	9a07      	ldr	r2, [sp, #28]
 800dde0:	e767      	b.n	800dcb2 <_dtoa_r+0x792>
 800dde2:	9b06      	ldr	r3, [sp, #24]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	dc18      	bgt.n	800de1a <_dtoa_r+0x8fa>
 800dde8:	f1ba 0f00 	cmp.w	sl, #0
 800ddec:	d115      	bne.n	800de1a <_dtoa_r+0x8fa>
 800ddee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddf2:	b993      	cbnz	r3, 800de1a <_dtoa_r+0x8fa>
 800ddf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddf8:	0d1b      	lsrs	r3, r3, #20
 800ddfa:	051b      	lsls	r3, r3, #20
 800ddfc:	b183      	cbz	r3, 800de20 <_dtoa_r+0x900>
 800ddfe:	9b04      	ldr	r3, [sp, #16]
 800de00:	3301      	adds	r3, #1
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	9b05      	ldr	r3, [sp, #20]
 800de06:	3301      	adds	r3, #1
 800de08:	9305      	str	r3, [sp, #20]
 800de0a:	f04f 0801 	mov.w	r8, #1
 800de0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de10:	2b00      	cmp	r3, #0
 800de12:	f47f af6a 	bne.w	800dcea <_dtoa_r+0x7ca>
 800de16:	2001      	movs	r0, #1
 800de18:	e76f      	b.n	800dcfa <_dtoa_r+0x7da>
 800de1a:	f04f 0800 	mov.w	r8, #0
 800de1e:	e7f6      	b.n	800de0e <_dtoa_r+0x8ee>
 800de20:	4698      	mov	r8, r3
 800de22:	e7f4      	b.n	800de0e <_dtoa_r+0x8ee>
 800de24:	f43f af7d 	beq.w	800dd22 <_dtoa_r+0x802>
 800de28:	4618      	mov	r0, r3
 800de2a:	301c      	adds	r0, #28
 800de2c:	e772      	b.n	800dd14 <_dtoa_r+0x7f4>
 800de2e:	9b03      	ldr	r3, [sp, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	dc37      	bgt.n	800dea4 <_dtoa_r+0x984>
 800de34:	9b06      	ldr	r3, [sp, #24]
 800de36:	2b02      	cmp	r3, #2
 800de38:	dd34      	ble.n	800dea4 <_dtoa_r+0x984>
 800de3a:	9b03      	ldr	r3, [sp, #12]
 800de3c:	9302      	str	r3, [sp, #8]
 800de3e:	9b02      	ldr	r3, [sp, #8]
 800de40:	b96b      	cbnz	r3, 800de5e <_dtoa_r+0x93e>
 800de42:	4631      	mov	r1, r6
 800de44:	2205      	movs	r2, #5
 800de46:	4620      	mov	r0, r4
 800de48:	f000 fd5a 	bl	800e900 <__multadd>
 800de4c:	4601      	mov	r1, r0
 800de4e:	4606      	mov	r6, r0
 800de50:	ee18 0a10 	vmov	r0, s16
 800de54:	f000 ffbe 	bl	800edd4 <__mcmp>
 800de58:	2800      	cmp	r0, #0
 800de5a:	f73f adbb 	bgt.w	800d9d4 <_dtoa_r+0x4b4>
 800de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de60:	9d01      	ldr	r5, [sp, #4]
 800de62:	43db      	mvns	r3, r3
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	f04f 0800 	mov.w	r8, #0
 800de6a:	4631      	mov	r1, r6
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fd25 	bl	800e8bc <_Bfree>
 800de72:	2f00      	cmp	r7, #0
 800de74:	f43f aea4 	beq.w	800dbc0 <_dtoa_r+0x6a0>
 800de78:	f1b8 0f00 	cmp.w	r8, #0
 800de7c:	d005      	beq.n	800de8a <_dtoa_r+0x96a>
 800de7e:	45b8      	cmp	r8, r7
 800de80:	d003      	beq.n	800de8a <_dtoa_r+0x96a>
 800de82:	4641      	mov	r1, r8
 800de84:	4620      	mov	r0, r4
 800de86:	f000 fd19 	bl	800e8bc <_Bfree>
 800de8a:	4639      	mov	r1, r7
 800de8c:	4620      	mov	r0, r4
 800de8e:	f000 fd15 	bl	800e8bc <_Bfree>
 800de92:	e695      	b.n	800dbc0 <_dtoa_r+0x6a0>
 800de94:	2600      	movs	r6, #0
 800de96:	4637      	mov	r7, r6
 800de98:	e7e1      	b.n	800de5e <_dtoa_r+0x93e>
 800de9a:	9700      	str	r7, [sp, #0]
 800de9c:	4637      	mov	r7, r6
 800de9e:	e599      	b.n	800d9d4 <_dtoa_r+0x4b4>
 800dea0:	40240000 	.word	0x40240000
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f000 80ca 	beq.w	800e040 <_dtoa_r+0xb20>
 800deac:	9b03      	ldr	r3, [sp, #12]
 800deae:	9302      	str	r3, [sp, #8]
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	dd05      	ble.n	800dec0 <_dtoa_r+0x9a0>
 800deb4:	4639      	mov	r1, r7
 800deb6:	462a      	mov	r2, r5
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 ff1b 	bl	800ecf4 <__lshift>
 800debe:	4607      	mov	r7, r0
 800dec0:	f1b8 0f00 	cmp.w	r8, #0
 800dec4:	d05b      	beq.n	800df7e <_dtoa_r+0xa5e>
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fcb7 	bl	800e83c <_Balloc>
 800dece:	4605      	mov	r5, r0
 800ded0:	b928      	cbnz	r0, 800dede <_dtoa_r+0x9be>
 800ded2:	4b87      	ldr	r3, [pc, #540]	; (800e0f0 <_dtoa_r+0xbd0>)
 800ded4:	4602      	mov	r2, r0
 800ded6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800deda:	f7ff bb3b 	b.w	800d554 <_dtoa_r+0x34>
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	3202      	adds	r2, #2
 800dee2:	0092      	lsls	r2, r2, #2
 800dee4:	f107 010c 	add.w	r1, r7, #12
 800dee8:	300c      	adds	r0, #12
 800deea:	f7fd fc81 	bl	800b7f0 <memcpy>
 800deee:	2201      	movs	r2, #1
 800def0:	4629      	mov	r1, r5
 800def2:	4620      	mov	r0, r4
 800def4:	f000 fefe 	bl	800ecf4 <__lshift>
 800def8:	9b01      	ldr	r3, [sp, #4]
 800defa:	f103 0901 	add.w	r9, r3, #1
 800defe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800df02:	4413      	add	r3, r2
 800df04:	9305      	str	r3, [sp, #20]
 800df06:	f00a 0301 	and.w	r3, sl, #1
 800df0a:	46b8      	mov	r8, r7
 800df0c:	9304      	str	r3, [sp, #16]
 800df0e:	4607      	mov	r7, r0
 800df10:	4631      	mov	r1, r6
 800df12:	ee18 0a10 	vmov	r0, s16
 800df16:	f7ff fa75 	bl	800d404 <quorem>
 800df1a:	4641      	mov	r1, r8
 800df1c:	9002      	str	r0, [sp, #8]
 800df1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df22:	ee18 0a10 	vmov	r0, s16
 800df26:	f000 ff55 	bl	800edd4 <__mcmp>
 800df2a:	463a      	mov	r2, r7
 800df2c:	9003      	str	r0, [sp, #12]
 800df2e:	4631      	mov	r1, r6
 800df30:	4620      	mov	r0, r4
 800df32:	f000 ff6b 	bl	800ee0c <__mdiff>
 800df36:	68c2      	ldr	r2, [r0, #12]
 800df38:	f109 3bff 	add.w	fp, r9, #4294967295
 800df3c:	4605      	mov	r5, r0
 800df3e:	bb02      	cbnz	r2, 800df82 <_dtoa_r+0xa62>
 800df40:	4601      	mov	r1, r0
 800df42:	ee18 0a10 	vmov	r0, s16
 800df46:	f000 ff45 	bl	800edd4 <__mcmp>
 800df4a:	4602      	mov	r2, r0
 800df4c:	4629      	mov	r1, r5
 800df4e:	4620      	mov	r0, r4
 800df50:	9207      	str	r2, [sp, #28]
 800df52:	f000 fcb3 	bl	800e8bc <_Bfree>
 800df56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800df5a:	ea43 0102 	orr.w	r1, r3, r2
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	430b      	orrs	r3, r1
 800df62:	464d      	mov	r5, r9
 800df64:	d10f      	bne.n	800df86 <_dtoa_r+0xa66>
 800df66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df6a:	d02a      	beq.n	800dfc2 <_dtoa_r+0xaa2>
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dd02      	ble.n	800df78 <_dtoa_r+0xa58>
 800df72:	9b02      	ldr	r3, [sp, #8]
 800df74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df78:	f88b a000 	strb.w	sl, [fp]
 800df7c:	e775      	b.n	800de6a <_dtoa_r+0x94a>
 800df7e:	4638      	mov	r0, r7
 800df80:	e7ba      	b.n	800def8 <_dtoa_r+0x9d8>
 800df82:	2201      	movs	r2, #1
 800df84:	e7e2      	b.n	800df4c <_dtoa_r+0xa2c>
 800df86:	9b03      	ldr	r3, [sp, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	db04      	blt.n	800df96 <_dtoa_r+0xa76>
 800df8c:	9906      	ldr	r1, [sp, #24]
 800df8e:	430b      	orrs	r3, r1
 800df90:	9904      	ldr	r1, [sp, #16]
 800df92:	430b      	orrs	r3, r1
 800df94:	d122      	bne.n	800dfdc <_dtoa_r+0xabc>
 800df96:	2a00      	cmp	r2, #0
 800df98:	ddee      	ble.n	800df78 <_dtoa_r+0xa58>
 800df9a:	ee18 1a10 	vmov	r1, s16
 800df9e:	2201      	movs	r2, #1
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f000 fea7 	bl	800ecf4 <__lshift>
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	ee08 0a10 	vmov	s16, r0
 800dfac:	f000 ff12 	bl	800edd4 <__mcmp>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	dc03      	bgt.n	800dfbc <_dtoa_r+0xa9c>
 800dfb4:	d1e0      	bne.n	800df78 <_dtoa_r+0xa58>
 800dfb6:	f01a 0f01 	tst.w	sl, #1
 800dfba:	d0dd      	beq.n	800df78 <_dtoa_r+0xa58>
 800dfbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfc0:	d1d7      	bne.n	800df72 <_dtoa_r+0xa52>
 800dfc2:	2339      	movs	r3, #57	; 0x39
 800dfc4:	f88b 3000 	strb.w	r3, [fp]
 800dfc8:	462b      	mov	r3, r5
 800dfca:	461d      	mov	r5, r3
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dfd2:	2a39      	cmp	r2, #57	; 0x39
 800dfd4:	d071      	beq.n	800e0ba <_dtoa_r+0xb9a>
 800dfd6:	3201      	adds	r2, #1
 800dfd8:	701a      	strb	r2, [r3, #0]
 800dfda:	e746      	b.n	800de6a <_dtoa_r+0x94a>
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	dd07      	ble.n	800dff0 <_dtoa_r+0xad0>
 800dfe0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfe4:	d0ed      	beq.n	800dfc2 <_dtoa_r+0xaa2>
 800dfe6:	f10a 0301 	add.w	r3, sl, #1
 800dfea:	f88b 3000 	strb.w	r3, [fp]
 800dfee:	e73c      	b.n	800de6a <_dtoa_r+0x94a>
 800dff0:	9b05      	ldr	r3, [sp, #20]
 800dff2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dff6:	4599      	cmp	r9, r3
 800dff8:	d047      	beq.n	800e08a <_dtoa_r+0xb6a>
 800dffa:	ee18 1a10 	vmov	r1, s16
 800dffe:	2300      	movs	r3, #0
 800e000:	220a      	movs	r2, #10
 800e002:	4620      	mov	r0, r4
 800e004:	f000 fc7c 	bl	800e900 <__multadd>
 800e008:	45b8      	cmp	r8, r7
 800e00a:	ee08 0a10 	vmov	s16, r0
 800e00e:	f04f 0300 	mov.w	r3, #0
 800e012:	f04f 020a 	mov.w	r2, #10
 800e016:	4641      	mov	r1, r8
 800e018:	4620      	mov	r0, r4
 800e01a:	d106      	bne.n	800e02a <_dtoa_r+0xb0a>
 800e01c:	f000 fc70 	bl	800e900 <__multadd>
 800e020:	4680      	mov	r8, r0
 800e022:	4607      	mov	r7, r0
 800e024:	f109 0901 	add.w	r9, r9, #1
 800e028:	e772      	b.n	800df10 <_dtoa_r+0x9f0>
 800e02a:	f000 fc69 	bl	800e900 <__multadd>
 800e02e:	4639      	mov	r1, r7
 800e030:	4680      	mov	r8, r0
 800e032:	2300      	movs	r3, #0
 800e034:	220a      	movs	r2, #10
 800e036:	4620      	mov	r0, r4
 800e038:	f000 fc62 	bl	800e900 <__multadd>
 800e03c:	4607      	mov	r7, r0
 800e03e:	e7f1      	b.n	800e024 <_dtoa_r+0xb04>
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	9302      	str	r3, [sp, #8]
 800e044:	9d01      	ldr	r5, [sp, #4]
 800e046:	ee18 0a10 	vmov	r0, s16
 800e04a:	4631      	mov	r1, r6
 800e04c:	f7ff f9da 	bl	800d404 <quorem>
 800e050:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	f805 ab01 	strb.w	sl, [r5], #1
 800e05a:	1aea      	subs	r2, r5, r3
 800e05c:	9b02      	ldr	r3, [sp, #8]
 800e05e:	4293      	cmp	r3, r2
 800e060:	dd09      	ble.n	800e076 <_dtoa_r+0xb56>
 800e062:	ee18 1a10 	vmov	r1, s16
 800e066:	2300      	movs	r3, #0
 800e068:	220a      	movs	r2, #10
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 fc48 	bl	800e900 <__multadd>
 800e070:	ee08 0a10 	vmov	s16, r0
 800e074:	e7e7      	b.n	800e046 <_dtoa_r+0xb26>
 800e076:	9b02      	ldr	r3, [sp, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bfc8      	it	gt
 800e07c:	461d      	movgt	r5, r3
 800e07e:	9b01      	ldr	r3, [sp, #4]
 800e080:	bfd8      	it	le
 800e082:	2501      	movle	r5, #1
 800e084:	441d      	add	r5, r3
 800e086:	f04f 0800 	mov.w	r8, #0
 800e08a:	ee18 1a10 	vmov	r1, s16
 800e08e:	2201      	movs	r2, #1
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fe2f 	bl	800ecf4 <__lshift>
 800e096:	4631      	mov	r1, r6
 800e098:	ee08 0a10 	vmov	s16, r0
 800e09c:	f000 fe9a 	bl	800edd4 <__mcmp>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	dc91      	bgt.n	800dfc8 <_dtoa_r+0xaa8>
 800e0a4:	d102      	bne.n	800e0ac <_dtoa_r+0xb8c>
 800e0a6:	f01a 0f01 	tst.w	sl, #1
 800e0aa:	d18d      	bne.n	800dfc8 <_dtoa_r+0xaa8>
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	461d      	mov	r5, r3
 800e0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0b4:	2a30      	cmp	r2, #48	; 0x30
 800e0b6:	d0fa      	beq.n	800e0ae <_dtoa_r+0xb8e>
 800e0b8:	e6d7      	b.n	800de6a <_dtoa_r+0x94a>
 800e0ba:	9a01      	ldr	r2, [sp, #4]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d184      	bne.n	800dfca <_dtoa_r+0xaaa>
 800e0c0:	9b00      	ldr	r3, [sp, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	2331      	movs	r3, #49	; 0x31
 800e0c8:	7013      	strb	r3, [r2, #0]
 800e0ca:	e6ce      	b.n	800de6a <_dtoa_r+0x94a>
 800e0cc:	4b09      	ldr	r3, [pc, #36]	; (800e0f4 <_dtoa_r+0xbd4>)
 800e0ce:	f7ff ba95 	b.w	800d5fc <_dtoa_r+0xdc>
 800e0d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f47f aa6e 	bne.w	800d5b6 <_dtoa_r+0x96>
 800e0da:	4b07      	ldr	r3, [pc, #28]	; (800e0f8 <_dtoa_r+0xbd8>)
 800e0dc:	f7ff ba8e 	b.w	800d5fc <_dtoa_r+0xdc>
 800e0e0:	9b02      	ldr	r3, [sp, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dcae      	bgt.n	800e044 <_dtoa_r+0xb24>
 800e0e6:	9b06      	ldr	r3, [sp, #24]
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	f73f aea8 	bgt.w	800de3e <_dtoa_r+0x91e>
 800e0ee:	e7a9      	b.n	800e044 <_dtoa_r+0xb24>
 800e0f0:	080116a0 	.word	0x080116a0
 800e0f4:	08011899 	.word	0x08011899
 800e0f8:	08011621 	.word	0x08011621

0800e0fc <rshift>:
 800e0fc:	6903      	ldr	r3, [r0, #16]
 800e0fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e106:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e10a:	f100 0414 	add.w	r4, r0, #20
 800e10e:	dd45      	ble.n	800e19c <rshift+0xa0>
 800e110:	f011 011f 	ands.w	r1, r1, #31
 800e114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e11c:	d10c      	bne.n	800e138 <rshift+0x3c>
 800e11e:	f100 0710 	add.w	r7, r0, #16
 800e122:	4629      	mov	r1, r5
 800e124:	42b1      	cmp	r1, r6
 800e126:	d334      	bcc.n	800e192 <rshift+0x96>
 800e128:	1a9b      	subs	r3, r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	1eea      	subs	r2, r5, #3
 800e12e:	4296      	cmp	r6, r2
 800e130:	bf38      	it	cc
 800e132:	2300      	movcc	r3, #0
 800e134:	4423      	add	r3, r4
 800e136:	e015      	b.n	800e164 <rshift+0x68>
 800e138:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e13c:	f1c1 0820 	rsb	r8, r1, #32
 800e140:	40cf      	lsrs	r7, r1
 800e142:	f105 0e04 	add.w	lr, r5, #4
 800e146:	46a1      	mov	r9, r4
 800e148:	4576      	cmp	r6, lr
 800e14a:	46f4      	mov	ip, lr
 800e14c:	d815      	bhi.n	800e17a <rshift+0x7e>
 800e14e:	1a9a      	subs	r2, r3, r2
 800e150:	0092      	lsls	r2, r2, #2
 800e152:	3a04      	subs	r2, #4
 800e154:	3501      	adds	r5, #1
 800e156:	42ae      	cmp	r6, r5
 800e158:	bf38      	it	cc
 800e15a:	2200      	movcc	r2, #0
 800e15c:	18a3      	adds	r3, r4, r2
 800e15e:	50a7      	str	r7, [r4, r2]
 800e160:	b107      	cbz	r7, 800e164 <rshift+0x68>
 800e162:	3304      	adds	r3, #4
 800e164:	1b1a      	subs	r2, r3, r4
 800e166:	42a3      	cmp	r3, r4
 800e168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e16c:	bf08      	it	eq
 800e16e:	2300      	moveq	r3, #0
 800e170:	6102      	str	r2, [r0, #16]
 800e172:	bf08      	it	eq
 800e174:	6143      	streq	r3, [r0, #20]
 800e176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17a:	f8dc c000 	ldr.w	ip, [ip]
 800e17e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e182:	ea4c 0707 	orr.w	r7, ip, r7
 800e186:	f849 7b04 	str.w	r7, [r9], #4
 800e18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e18e:	40cf      	lsrs	r7, r1
 800e190:	e7da      	b.n	800e148 <rshift+0x4c>
 800e192:	f851 cb04 	ldr.w	ip, [r1], #4
 800e196:	f847 cf04 	str.w	ip, [r7, #4]!
 800e19a:	e7c3      	b.n	800e124 <rshift+0x28>
 800e19c:	4623      	mov	r3, r4
 800e19e:	e7e1      	b.n	800e164 <rshift+0x68>

0800e1a0 <__hexdig_fun>:
 800e1a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e1a4:	2b09      	cmp	r3, #9
 800e1a6:	d802      	bhi.n	800e1ae <__hexdig_fun+0xe>
 800e1a8:	3820      	subs	r0, #32
 800e1aa:	b2c0      	uxtb	r0, r0
 800e1ac:	4770      	bx	lr
 800e1ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e1b2:	2b05      	cmp	r3, #5
 800e1b4:	d801      	bhi.n	800e1ba <__hexdig_fun+0x1a>
 800e1b6:	3847      	subs	r0, #71	; 0x47
 800e1b8:	e7f7      	b.n	800e1aa <__hexdig_fun+0xa>
 800e1ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	d801      	bhi.n	800e1c6 <__hexdig_fun+0x26>
 800e1c2:	3827      	subs	r0, #39	; 0x27
 800e1c4:	e7f1      	b.n	800e1aa <__hexdig_fun+0xa>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	4770      	bx	lr
	...

0800e1cc <__gethex>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	ed2d 8b02 	vpush	{d8}
 800e1d4:	b089      	sub	sp, #36	; 0x24
 800e1d6:	ee08 0a10 	vmov	s16, r0
 800e1da:	9304      	str	r3, [sp, #16]
 800e1dc:	4bb4      	ldr	r3, [pc, #720]	; (800e4b0 <__gethex+0x2e4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	468b      	mov	fp, r1
 800e1e6:	4690      	mov	r8, r2
 800e1e8:	f7f2 f804 	bl	80001f4 <strlen>
 800e1ec:	9b01      	ldr	r3, [sp, #4]
 800e1ee:	f8db 2000 	ldr.w	r2, [fp]
 800e1f2:	4403      	add	r3, r0
 800e1f4:	4682      	mov	sl, r0
 800e1f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e1fa:	9305      	str	r3, [sp, #20]
 800e1fc:	1c93      	adds	r3, r2, #2
 800e1fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e202:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e206:	32fe      	adds	r2, #254	; 0xfe
 800e208:	18d1      	adds	r1, r2, r3
 800e20a:	461f      	mov	r7, r3
 800e20c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e210:	9100      	str	r1, [sp, #0]
 800e212:	2830      	cmp	r0, #48	; 0x30
 800e214:	d0f8      	beq.n	800e208 <__gethex+0x3c>
 800e216:	f7ff ffc3 	bl	800e1a0 <__hexdig_fun>
 800e21a:	4604      	mov	r4, r0
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d13a      	bne.n	800e296 <__gethex+0xca>
 800e220:	9901      	ldr	r1, [sp, #4]
 800e222:	4652      	mov	r2, sl
 800e224:	4638      	mov	r0, r7
 800e226:	f7fe fa0a 	bl	800c63e <strncmp>
 800e22a:	4605      	mov	r5, r0
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d168      	bne.n	800e302 <__gethex+0x136>
 800e230:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e234:	eb07 060a 	add.w	r6, r7, sl
 800e238:	f7ff ffb2 	bl	800e1a0 <__hexdig_fun>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d062      	beq.n	800e306 <__gethex+0x13a>
 800e240:	4633      	mov	r3, r6
 800e242:	7818      	ldrb	r0, [r3, #0]
 800e244:	2830      	cmp	r0, #48	; 0x30
 800e246:	461f      	mov	r7, r3
 800e248:	f103 0301 	add.w	r3, r3, #1
 800e24c:	d0f9      	beq.n	800e242 <__gethex+0x76>
 800e24e:	f7ff ffa7 	bl	800e1a0 <__hexdig_fun>
 800e252:	2301      	movs	r3, #1
 800e254:	fab0 f480 	clz	r4, r0
 800e258:	0964      	lsrs	r4, r4, #5
 800e25a:	4635      	mov	r5, r6
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	463a      	mov	r2, r7
 800e260:	4616      	mov	r6, r2
 800e262:	3201      	adds	r2, #1
 800e264:	7830      	ldrb	r0, [r6, #0]
 800e266:	f7ff ff9b 	bl	800e1a0 <__hexdig_fun>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d1f8      	bne.n	800e260 <__gethex+0x94>
 800e26e:	9901      	ldr	r1, [sp, #4]
 800e270:	4652      	mov	r2, sl
 800e272:	4630      	mov	r0, r6
 800e274:	f7fe f9e3 	bl	800c63e <strncmp>
 800e278:	b980      	cbnz	r0, 800e29c <__gethex+0xd0>
 800e27a:	b94d      	cbnz	r5, 800e290 <__gethex+0xc4>
 800e27c:	eb06 050a 	add.w	r5, r6, sl
 800e280:	462a      	mov	r2, r5
 800e282:	4616      	mov	r6, r2
 800e284:	3201      	adds	r2, #1
 800e286:	7830      	ldrb	r0, [r6, #0]
 800e288:	f7ff ff8a 	bl	800e1a0 <__hexdig_fun>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d1f8      	bne.n	800e282 <__gethex+0xb6>
 800e290:	1bad      	subs	r5, r5, r6
 800e292:	00ad      	lsls	r5, r5, #2
 800e294:	e004      	b.n	800e2a0 <__gethex+0xd4>
 800e296:	2400      	movs	r4, #0
 800e298:	4625      	mov	r5, r4
 800e29a:	e7e0      	b.n	800e25e <__gethex+0x92>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	d1f7      	bne.n	800e290 <__gethex+0xc4>
 800e2a0:	7833      	ldrb	r3, [r6, #0]
 800e2a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2a6:	2b50      	cmp	r3, #80	; 0x50
 800e2a8:	d13b      	bne.n	800e322 <__gethex+0x156>
 800e2aa:	7873      	ldrb	r3, [r6, #1]
 800e2ac:	2b2b      	cmp	r3, #43	; 0x2b
 800e2ae:	d02c      	beq.n	800e30a <__gethex+0x13e>
 800e2b0:	2b2d      	cmp	r3, #45	; 0x2d
 800e2b2:	d02e      	beq.n	800e312 <__gethex+0x146>
 800e2b4:	1c71      	adds	r1, r6, #1
 800e2b6:	f04f 0900 	mov.w	r9, #0
 800e2ba:	7808      	ldrb	r0, [r1, #0]
 800e2bc:	f7ff ff70 	bl	800e1a0 <__hexdig_fun>
 800e2c0:	1e43      	subs	r3, r0, #1
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b18      	cmp	r3, #24
 800e2c6:	d82c      	bhi.n	800e322 <__gethex+0x156>
 800e2c8:	f1a0 0210 	sub.w	r2, r0, #16
 800e2cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e2d0:	f7ff ff66 	bl	800e1a0 <__hexdig_fun>
 800e2d4:	1e43      	subs	r3, r0, #1
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b18      	cmp	r3, #24
 800e2da:	d91d      	bls.n	800e318 <__gethex+0x14c>
 800e2dc:	f1b9 0f00 	cmp.w	r9, #0
 800e2e0:	d000      	beq.n	800e2e4 <__gethex+0x118>
 800e2e2:	4252      	negs	r2, r2
 800e2e4:	4415      	add	r5, r2
 800e2e6:	f8cb 1000 	str.w	r1, [fp]
 800e2ea:	b1e4      	cbz	r4, 800e326 <__gethex+0x15a>
 800e2ec:	9b00      	ldr	r3, [sp, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bf14      	ite	ne
 800e2f2:	2700      	movne	r7, #0
 800e2f4:	2706      	moveq	r7, #6
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	b009      	add	sp, #36	; 0x24
 800e2fa:	ecbd 8b02 	vpop	{d8}
 800e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e302:	463e      	mov	r6, r7
 800e304:	4625      	mov	r5, r4
 800e306:	2401      	movs	r4, #1
 800e308:	e7ca      	b.n	800e2a0 <__gethex+0xd4>
 800e30a:	f04f 0900 	mov.w	r9, #0
 800e30e:	1cb1      	adds	r1, r6, #2
 800e310:	e7d3      	b.n	800e2ba <__gethex+0xee>
 800e312:	f04f 0901 	mov.w	r9, #1
 800e316:	e7fa      	b.n	800e30e <__gethex+0x142>
 800e318:	230a      	movs	r3, #10
 800e31a:	fb03 0202 	mla	r2, r3, r2, r0
 800e31e:	3a10      	subs	r2, #16
 800e320:	e7d4      	b.n	800e2cc <__gethex+0x100>
 800e322:	4631      	mov	r1, r6
 800e324:	e7df      	b.n	800e2e6 <__gethex+0x11a>
 800e326:	1bf3      	subs	r3, r6, r7
 800e328:	3b01      	subs	r3, #1
 800e32a:	4621      	mov	r1, r4
 800e32c:	2b07      	cmp	r3, #7
 800e32e:	dc0b      	bgt.n	800e348 <__gethex+0x17c>
 800e330:	ee18 0a10 	vmov	r0, s16
 800e334:	f000 fa82 	bl	800e83c <_Balloc>
 800e338:	4604      	mov	r4, r0
 800e33a:	b940      	cbnz	r0, 800e34e <__gethex+0x182>
 800e33c:	4b5d      	ldr	r3, [pc, #372]	; (800e4b4 <__gethex+0x2e8>)
 800e33e:	4602      	mov	r2, r0
 800e340:	21de      	movs	r1, #222	; 0xde
 800e342:	485d      	ldr	r0, [pc, #372]	; (800e4b8 <__gethex+0x2ec>)
 800e344:	f001 fdd0 	bl	800fee8 <__assert_func>
 800e348:	3101      	adds	r1, #1
 800e34a:	105b      	asrs	r3, r3, #1
 800e34c:	e7ee      	b.n	800e32c <__gethex+0x160>
 800e34e:	f100 0914 	add.w	r9, r0, #20
 800e352:	f04f 0b00 	mov.w	fp, #0
 800e356:	f1ca 0301 	rsb	r3, sl, #1
 800e35a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e35e:	f8cd b000 	str.w	fp, [sp]
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	42b7      	cmp	r7, r6
 800e366:	d340      	bcc.n	800e3ea <__gethex+0x21e>
 800e368:	9802      	ldr	r0, [sp, #8]
 800e36a:	9b00      	ldr	r3, [sp, #0]
 800e36c:	f840 3b04 	str.w	r3, [r0], #4
 800e370:	eba0 0009 	sub.w	r0, r0, r9
 800e374:	1080      	asrs	r0, r0, #2
 800e376:	0146      	lsls	r6, r0, #5
 800e378:	6120      	str	r0, [r4, #16]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 fb50 	bl	800ea20 <__hi0bits>
 800e380:	1a30      	subs	r0, r6, r0
 800e382:	f8d8 6000 	ldr.w	r6, [r8]
 800e386:	42b0      	cmp	r0, r6
 800e388:	dd63      	ble.n	800e452 <__gethex+0x286>
 800e38a:	1b87      	subs	r7, r0, r6
 800e38c:	4639      	mov	r1, r7
 800e38e:	4620      	mov	r0, r4
 800e390:	f000 fef4 	bl	800f17c <__any_on>
 800e394:	4682      	mov	sl, r0
 800e396:	b1a8      	cbz	r0, 800e3c4 <__gethex+0x1f8>
 800e398:	1e7b      	subs	r3, r7, #1
 800e39a:	1159      	asrs	r1, r3, #5
 800e39c:	f003 021f 	and.w	r2, r3, #31
 800e3a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e3a4:	f04f 0a01 	mov.w	sl, #1
 800e3a8:	fa0a f202 	lsl.w	r2, sl, r2
 800e3ac:	420a      	tst	r2, r1
 800e3ae:	d009      	beq.n	800e3c4 <__gethex+0x1f8>
 800e3b0:	4553      	cmp	r3, sl
 800e3b2:	dd05      	ble.n	800e3c0 <__gethex+0x1f4>
 800e3b4:	1eb9      	subs	r1, r7, #2
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f000 fee0 	bl	800f17c <__any_on>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d145      	bne.n	800e44c <__gethex+0x280>
 800e3c0:	f04f 0a02 	mov.w	sl, #2
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f7ff fe98 	bl	800e0fc <rshift>
 800e3cc:	443d      	add	r5, r7
 800e3ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3d2:	42ab      	cmp	r3, r5
 800e3d4:	da4c      	bge.n	800e470 <__gethex+0x2a4>
 800e3d6:	ee18 0a10 	vmov	r0, s16
 800e3da:	4621      	mov	r1, r4
 800e3dc:	f000 fa6e 	bl	800e8bc <_Bfree>
 800e3e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	27a3      	movs	r7, #163	; 0xa3
 800e3e8:	e785      	b.n	800e2f6 <__gethex+0x12a>
 800e3ea:	1e73      	subs	r3, r6, #1
 800e3ec:	9a05      	ldr	r2, [sp, #20]
 800e3ee:	9303      	str	r3, [sp, #12]
 800e3f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d019      	beq.n	800e42c <__gethex+0x260>
 800e3f8:	f1bb 0f20 	cmp.w	fp, #32
 800e3fc:	d107      	bne.n	800e40e <__gethex+0x242>
 800e3fe:	9b02      	ldr	r3, [sp, #8]
 800e400:	9a00      	ldr	r2, [sp, #0]
 800e402:	f843 2b04 	str.w	r2, [r3], #4
 800e406:	9302      	str	r3, [sp, #8]
 800e408:	2300      	movs	r3, #0
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	469b      	mov	fp, r3
 800e40e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e412:	f7ff fec5 	bl	800e1a0 <__hexdig_fun>
 800e416:	9b00      	ldr	r3, [sp, #0]
 800e418:	f000 000f 	and.w	r0, r0, #15
 800e41c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e420:	4303      	orrs	r3, r0
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	f10b 0b04 	add.w	fp, fp, #4
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	e00d      	b.n	800e448 <__gethex+0x27c>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	9a06      	ldr	r2, [sp, #24]
 800e430:	4413      	add	r3, r2
 800e432:	42bb      	cmp	r3, r7
 800e434:	d3e0      	bcc.n	800e3f8 <__gethex+0x22c>
 800e436:	4618      	mov	r0, r3
 800e438:	9901      	ldr	r1, [sp, #4]
 800e43a:	9307      	str	r3, [sp, #28]
 800e43c:	4652      	mov	r2, sl
 800e43e:	f7fe f8fe 	bl	800c63e <strncmp>
 800e442:	9b07      	ldr	r3, [sp, #28]
 800e444:	2800      	cmp	r0, #0
 800e446:	d1d7      	bne.n	800e3f8 <__gethex+0x22c>
 800e448:	461e      	mov	r6, r3
 800e44a:	e78b      	b.n	800e364 <__gethex+0x198>
 800e44c:	f04f 0a03 	mov.w	sl, #3
 800e450:	e7b8      	b.n	800e3c4 <__gethex+0x1f8>
 800e452:	da0a      	bge.n	800e46a <__gethex+0x29e>
 800e454:	1a37      	subs	r7, r6, r0
 800e456:	4621      	mov	r1, r4
 800e458:	ee18 0a10 	vmov	r0, s16
 800e45c:	463a      	mov	r2, r7
 800e45e:	f000 fc49 	bl	800ecf4 <__lshift>
 800e462:	1bed      	subs	r5, r5, r7
 800e464:	4604      	mov	r4, r0
 800e466:	f100 0914 	add.w	r9, r0, #20
 800e46a:	f04f 0a00 	mov.w	sl, #0
 800e46e:	e7ae      	b.n	800e3ce <__gethex+0x202>
 800e470:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e474:	42a8      	cmp	r0, r5
 800e476:	dd72      	ble.n	800e55e <__gethex+0x392>
 800e478:	1b45      	subs	r5, r0, r5
 800e47a:	42ae      	cmp	r6, r5
 800e47c:	dc36      	bgt.n	800e4ec <__gethex+0x320>
 800e47e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e482:	2b02      	cmp	r3, #2
 800e484:	d02a      	beq.n	800e4dc <__gethex+0x310>
 800e486:	2b03      	cmp	r3, #3
 800e488:	d02c      	beq.n	800e4e4 <__gethex+0x318>
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d11c      	bne.n	800e4c8 <__gethex+0x2fc>
 800e48e:	42ae      	cmp	r6, r5
 800e490:	d11a      	bne.n	800e4c8 <__gethex+0x2fc>
 800e492:	2e01      	cmp	r6, #1
 800e494:	d112      	bne.n	800e4bc <__gethex+0x2f0>
 800e496:	9a04      	ldr	r2, [sp, #16]
 800e498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	6123      	str	r3, [r4, #16]
 800e4a2:	f8c9 3000 	str.w	r3, [r9]
 800e4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4a8:	2762      	movs	r7, #98	; 0x62
 800e4aa:	601c      	str	r4, [r3, #0]
 800e4ac:	e723      	b.n	800e2f6 <__gethex+0x12a>
 800e4ae:	bf00      	nop
 800e4b0:	08011718 	.word	0x08011718
 800e4b4:	080116a0 	.word	0x080116a0
 800e4b8:	080116b1 	.word	0x080116b1
 800e4bc:	1e71      	subs	r1, r6, #1
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f000 fe5c 	bl	800f17c <__any_on>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d1e6      	bne.n	800e496 <__gethex+0x2ca>
 800e4c8:	ee18 0a10 	vmov	r0, s16
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	f000 f9f5 	bl	800e8bc <_Bfree>
 800e4d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	2750      	movs	r7, #80	; 0x50
 800e4da:	e70c      	b.n	800e2f6 <__gethex+0x12a>
 800e4dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1f2      	bne.n	800e4c8 <__gethex+0x2fc>
 800e4e2:	e7d8      	b.n	800e496 <__gethex+0x2ca>
 800e4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1d5      	bne.n	800e496 <__gethex+0x2ca>
 800e4ea:	e7ed      	b.n	800e4c8 <__gethex+0x2fc>
 800e4ec:	1e6f      	subs	r7, r5, #1
 800e4ee:	f1ba 0f00 	cmp.w	sl, #0
 800e4f2:	d131      	bne.n	800e558 <__gethex+0x38c>
 800e4f4:	b127      	cbz	r7, 800e500 <__gethex+0x334>
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f000 fe3f 	bl	800f17c <__any_on>
 800e4fe:	4682      	mov	sl, r0
 800e500:	117b      	asrs	r3, r7, #5
 800e502:	2101      	movs	r1, #1
 800e504:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e508:	f007 071f 	and.w	r7, r7, #31
 800e50c:	fa01 f707 	lsl.w	r7, r1, r7
 800e510:	421f      	tst	r7, r3
 800e512:	4629      	mov	r1, r5
 800e514:	4620      	mov	r0, r4
 800e516:	bf18      	it	ne
 800e518:	f04a 0a02 	orrne.w	sl, sl, #2
 800e51c:	1b76      	subs	r6, r6, r5
 800e51e:	f7ff fded 	bl	800e0fc <rshift>
 800e522:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e526:	2702      	movs	r7, #2
 800e528:	f1ba 0f00 	cmp.w	sl, #0
 800e52c:	d048      	beq.n	800e5c0 <__gethex+0x3f4>
 800e52e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d015      	beq.n	800e562 <__gethex+0x396>
 800e536:	2b03      	cmp	r3, #3
 800e538:	d017      	beq.n	800e56a <__gethex+0x39e>
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d109      	bne.n	800e552 <__gethex+0x386>
 800e53e:	f01a 0f02 	tst.w	sl, #2
 800e542:	d006      	beq.n	800e552 <__gethex+0x386>
 800e544:	f8d9 0000 	ldr.w	r0, [r9]
 800e548:	ea4a 0a00 	orr.w	sl, sl, r0
 800e54c:	f01a 0f01 	tst.w	sl, #1
 800e550:	d10e      	bne.n	800e570 <__gethex+0x3a4>
 800e552:	f047 0710 	orr.w	r7, r7, #16
 800e556:	e033      	b.n	800e5c0 <__gethex+0x3f4>
 800e558:	f04f 0a01 	mov.w	sl, #1
 800e55c:	e7d0      	b.n	800e500 <__gethex+0x334>
 800e55e:	2701      	movs	r7, #1
 800e560:	e7e2      	b.n	800e528 <__gethex+0x35c>
 800e562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e564:	f1c3 0301 	rsb	r3, r3, #1
 800e568:	9315      	str	r3, [sp, #84]	; 0x54
 800e56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d0f0      	beq.n	800e552 <__gethex+0x386>
 800e570:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e574:	f104 0314 	add.w	r3, r4, #20
 800e578:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e57c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e580:	f04f 0c00 	mov.w	ip, #0
 800e584:	4618      	mov	r0, r3
 800e586:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e58e:	d01c      	beq.n	800e5ca <__gethex+0x3fe>
 800e590:	3201      	adds	r2, #1
 800e592:	6002      	str	r2, [r0, #0]
 800e594:	2f02      	cmp	r7, #2
 800e596:	f104 0314 	add.w	r3, r4, #20
 800e59a:	d13f      	bne.n	800e61c <__gethex+0x450>
 800e59c:	f8d8 2000 	ldr.w	r2, [r8]
 800e5a0:	3a01      	subs	r2, #1
 800e5a2:	42b2      	cmp	r2, r6
 800e5a4:	d10a      	bne.n	800e5bc <__gethex+0x3f0>
 800e5a6:	1171      	asrs	r1, r6, #5
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5ae:	f006 061f 	and.w	r6, r6, #31
 800e5b2:	fa02 f606 	lsl.w	r6, r2, r6
 800e5b6:	421e      	tst	r6, r3
 800e5b8:	bf18      	it	ne
 800e5ba:	4617      	movne	r7, r2
 800e5bc:	f047 0720 	orr.w	r7, r7, #32
 800e5c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5c2:	601c      	str	r4, [r3, #0]
 800e5c4:	9b04      	ldr	r3, [sp, #16]
 800e5c6:	601d      	str	r5, [r3, #0]
 800e5c8:	e695      	b.n	800e2f6 <__gethex+0x12a>
 800e5ca:	4299      	cmp	r1, r3
 800e5cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5d0:	d8d8      	bhi.n	800e584 <__gethex+0x3b8>
 800e5d2:	68a3      	ldr	r3, [r4, #8]
 800e5d4:	459b      	cmp	fp, r3
 800e5d6:	db19      	blt.n	800e60c <__gethex+0x440>
 800e5d8:	6861      	ldr	r1, [r4, #4]
 800e5da:	ee18 0a10 	vmov	r0, s16
 800e5de:	3101      	adds	r1, #1
 800e5e0:	f000 f92c 	bl	800e83c <_Balloc>
 800e5e4:	4681      	mov	r9, r0
 800e5e6:	b918      	cbnz	r0, 800e5f0 <__gethex+0x424>
 800e5e8:	4b1a      	ldr	r3, [pc, #104]	; (800e654 <__gethex+0x488>)
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	2184      	movs	r1, #132	; 0x84
 800e5ee:	e6a8      	b.n	800e342 <__gethex+0x176>
 800e5f0:	6922      	ldr	r2, [r4, #16]
 800e5f2:	3202      	adds	r2, #2
 800e5f4:	f104 010c 	add.w	r1, r4, #12
 800e5f8:	0092      	lsls	r2, r2, #2
 800e5fa:	300c      	adds	r0, #12
 800e5fc:	f7fd f8f8 	bl	800b7f0 <memcpy>
 800e600:	4621      	mov	r1, r4
 800e602:	ee18 0a10 	vmov	r0, s16
 800e606:	f000 f959 	bl	800e8bc <_Bfree>
 800e60a:	464c      	mov	r4, r9
 800e60c:	6923      	ldr	r3, [r4, #16]
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e614:	6122      	str	r2, [r4, #16]
 800e616:	2201      	movs	r2, #1
 800e618:	615a      	str	r2, [r3, #20]
 800e61a:	e7bb      	b.n	800e594 <__gethex+0x3c8>
 800e61c:	6922      	ldr	r2, [r4, #16]
 800e61e:	455a      	cmp	r2, fp
 800e620:	dd0b      	ble.n	800e63a <__gethex+0x46e>
 800e622:	2101      	movs	r1, #1
 800e624:	4620      	mov	r0, r4
 800e626:	f7ff fd69 	bl	800e0fc <rshift>
 800e62a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e62e:	3501      	adds	r5, #1
 800e630:	42ab      	cmp	r3, r5
 800e632:	f6ff aed0 	blt.w	800e3d6 <__gethex+0x20a>
 800e636:	2701      	movs	r7, #1
 800e638:	e7c0      	b.n	800e5bc <__gethex+0x3f0>
 800e63a:	f016 061f 	ands.w	r6, r6, #31
 800e63e:	d0fa      	beq.n	800e636 <__gethex+0x46a>
 800e640:	4453      	add	r3, sl
 800e642:	f1c6 0620 	rsb	r6, r6, #32
 800e646:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e64a:	f000 f9e9 	bl	800ea20 <__hi0bits>
 800e64e:	42b0      	cmp	r0, r6
 800e650:	dbe7      	blt.n	800e622 <__gethex+0x456>
 800e652:	e7f0      	b.n	800e636 <__gethex+0x46a>
 800e654:	080116a0 	.word	0x080116a0

0800e658 <L_shift>:
 800e658:	f1c2 0208 	rsb	r2, r2, #8
 800e65c:	0092      	lsls	r2, r2, #2
 800e65e:	b570      	push	{r4, r5, r6, lr}
 800e660:	f1c2 0620 	rsb	r6, r2, #32
 800e664:	6843      	ldr	r3, [r0, #4]
 800e666:	6804      	ldr	r4, [r0, #0]
 800e668:	fa03 f506 	lsl.w	r5, r3, r6
 800e66c:	432c      	orrs	r4, r5
 800e66e:	40d3      	lsrs	r3, r2
 800e670:	6004      	str	r4, [r0, #0]
 800e672:	f840 3f04 	str.w	r3, [r0, #4]!
 800e676:	4288      	cmp	r0, r1
 800e678:	d3f4      	bcc.n	800e664 <L_shift+0xc>
 800e67a:	bd70      	pop	{r4, r5, r6, pc}

0800e67c <__match>:
 800e67c:	b530      	push	{r4, r5, lr}
 800e67e:	6803      	ldr	r3, [r0, #0]
 800e680:	3301      	adds	r3, #1
 800e682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e686:	b914      	cbnz	r4, 800e68e <__match+0x12>
 800e688:	6003      	str	r3, [r0, #0]
 800e68a:	2001      	movs	r0, #1
 800e68c:	bd30      	pop	{r4, r5, pc}
 800e68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e696:	2d19      	cmp	r5, #25
 800e698:	bf98      	it	ls
 800e69a:	3220      	addls	r2, #32
 800e69c:	42a2      	cmp	r2, r4
 800e69e:	d0f0      	beq.n	800e682 <__match+0x6>
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	e7f3      	b.n	800e68c <__match+0x10>

0800e6a4 <__hexnan>:
 800e6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a8:	680b      	ldr	r3, [r1, #0]
 800e6aa:	115e      	asrs	r6, r3, #5
 800e6ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6b0:	f013 031f 	ands.w	r3, r3, #31
 800e6b4:	b087      	sub	sp, #28
 800e6b6:	bf18      	it	ne
 800e6b8:	3604      	addne	r6, #4
 800e6ba:	2500      	movs	r5, #0
 800e6bc:	1f37      	subs	r7, r6, #4
 800e6be:	4690      	mov	r8, r2
 800e6c0:	6802      	ldr	r2, [r0, #0]
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6ca:	46b9      	mov	r9, r7
 800e6cc:	463c      	mov	r4, r7
 800e6ce:	9502      	str	r5, [sp, #8]
 800e6d0:	46ab      	mov	fp, r5
 800e6d2:	7851      	ldrb	r1, [r2, #1]
 800e6d4:	1c53      	adds	r3, r2, #1
 800e6d6:	9303      	str	r3, [sp, #12]
 800e6d8:	b341      	cbz	r1, 800e72c <__hexnan+0x88>
 800e6da:	4608      	mov	r0, r1
 800e6dc:	9205      	str	r2, [sp, #20]
 800e6de:	9104      	str	r1, [sp, #16]
 800e6e0:	f7ff fd5e 	bl	800e1a0 <__hexdig_fun>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d14f      	bne.n	800e788 <__hexnan+0xe4>
 800e6e8:	9904      	ldr	r1, [sp, #16]
 800e6ea:	9a05      	ldr	r2, [sp, #20]
 800e6ec:	2920      	cmp	r1, #32
 800e6ee:	d818      	bhi.n	800e722 <__hexnan+0x7e>
 800e6f0:	9b02      	ldr	r3, [sp, #8]
 800e6f2:	459b      	cmp	fp, r3
 800e6f4:	dd13      	ble.n	800e71e <__hexnan+0x7a>
 800e6f6:	454c      	cmp	r4, r9
 800e6f8:	d206      	bcs.n	800e708 <__hexnan+0x64>
 800e6fa:	2d07      	cmp	r5, #7
 800e6fc:	dc04      	bgt.n	800e708 <__hexnan+0x64>
 800e6fe:	462a      	mov	r2, r5
 800e700:	4649      	mov	r1, r9
 800e702:	4620      	mov	r0, r4
 800e704:	f7ff ffa8 	bl	800e658 <L_shift>
 800e708:	4544      	cmp	r4, r8
 800e70a:	d950      	bls.n	800e7ae <__hexnan+0x10a>
 800e70c:	2300      	movs	r3, #0
 800e70e:	f1a4 0904 	sub.w	r9, r4, #4
 800e712:	f844 3c04 	str.w	r3, [r4, #-4]
 800e716:	f8cd b008 	str.w	fp, [sp, #8]
 800e71a:	464c      	mov	r4, r9
 800e71c:	461d      	mov	r5, r3
 800e71e:	9a03      	ldr	r2, [sp, #12]
 800e720:	e7d7      	b.n	800e6d2 <__hexnan+0x2e>
 800e722:	2929      	cmp	r1, #41	; 0x29
 800e724:	d156      	bne.n	800e7d4 <__hexnan+0x130>
 800e726:	3202      	adds	r2, #2
 800e728:	f8ca 2000 	str.w	r2, [sl]
 800e72c:	f1bb 0f00 	cmp.w	fp, #0
 800e730:	d050      	beq.n	800e7d4 <__hexnan+0x130>
 800e732:	454c      	cmp	r4, r9
 800e734:	d206      	bcs.n	800e744 <__hexnan+0xa0>
 800e736:	2d07      	cmp	r5, #7
 800e738:	dc04      	bgt.n	800e744 <__hexnan+0xa0>
 800e73a:	462a      	mov	r2, r5
 800e73c:	4649      	mov	r1, r9
 800e73e:	4620      	mov	r0, r4
 800e740:	f7ff ff8a 	bl	800e658 <L_shift>
 800e744:	4544      	cmp	r4, r8
 800e746:	d934      	bls.n	800e7b2 <__hexnan+0x10e>
 800e748:	f1a8 0204 	sub.w	r2, r8, #4
 800e74c:	4623      	mov	r3, r4
 800e74e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e752:	f842 1f04 	str.w	r1, [r2, #4]!
 800e756:	429f      	cmp	r7, r3
 800e758:	d2f9      	bcs.n	800e74e <__hexnan+0xaa>
 800e75a:	1b3b      	subs	r3, r7, r4
 800e75c:	f023 0303 	bic.w	r3, r3, #3
 800e760:	3304      	adds	r3, #4
 800e762:	3401      	adds	r4, #1
 800e764:	3e03      	subs	r6, #3
 800e766:	42b4      	cmp	r4, r6
 800e768:	bf88      	it	hi
 800e76a:	2304      	movhi	r3, #4
 800e76c:	4443      	add	r3, r8
 800e76e:	2200      	movs	r2, #0
 800e770:	f843 2b04 	str.w	r2, [r3], #4
 800e774:	429f      	cmp	r7, r3
 800e776:	d2fb      	bcs.n	800e770 <__hexnan+0xcc>
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	b91b      	cbnz	r3, 800e784 <__hexnan+0xe0>
 800e77c:	4547      	cmp	r7, r8
 800e77e:	d127      	bne.n	800e7d0 <__hexnan+0x12c>
 800e780:	2301      	movs	r3, #1
 800e782:	603b      	str	r3, [r7, #0]
 800e784:	2005      	movs	r0, #5
 800e786:	e026      	b.n	800e7d6 <__hexnan+0x132>
 800e788:	3501      	adds	r5, #1
 800e78a:	2d08      	cmp	r5, #8
 800e78c:	f10b 0b01 	add.w	fp, fp, #1
 800e790:	dd06      	ble.n	800e7a0 <__hexnan+0xfc>
 800e792:	4544      	cmp	r4, r8
 800e794:	d9c3      	bls.n	800e71e <__hexnan+0x7a>
 800e796:	2300      	movs	r3, #0
 800e798:	f844 3c04 	str.w	r3, [r4, #-4]
 800e79c:	2501      	movs	r5, #1
 800e79e:	3c04      	subs	r4, #4
 800e7a0:	6822      	ldr	r2, [r4, #0]
 800e7a2:	f000 000f 	and.w	r0, r0, #15
 800e7a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e7aa:	6022      	str	r2, [r4, #0]
 800e7ac:	e7b7      	b.n	800e71e <__hexnan+0x7a>
 800e7ae:	2508      	movs	r5, #8
 800e7b0:	e7b5      	b.n	800e71e <__hexnan+0x7a>
 800e7b2:	9b01      	ldr	r3, [sp, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d0df      	beq.n	800e778 <__hexnan+0xd4>
 800e7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7bc:	f1c3 0320 	rsb	r3, r3, #32
 800e7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7c8:	401a      	ands	r2, r3
 800e7ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800e7ce:	e7d3      	b.n	800e778 <__hexnan+0xd4>
 800e7d0:	3f04      	subs	r7, #4
 800e7d2:	e7d1      	b.n	800e778 <__hexnan+0xd4>
 800e7d4:	2004      	movs	r0, #4
 800e7d6:	b007      	add	sp, #28
 800e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7dc <_localeconv_r>:
 800e7dc:	4800      	ldr	r0, [pc, #0]	; (800e7e0 <_localeconv_r+0x4>)
 800e7de:	4770      	bx	lr
 800e7e0:	20000210 	.word	0x20000210

0800e7e4 <_lseek_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d07      	ldr	r5, [pc, #28]	; (800e804 <_lseek_r+0x20>)
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	4608      	mov	r0, r1
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	602a      	str	r2, [r5, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f7f6 f9a8 	bl	8004b48 <_lseek>
 800e7f8:	1c43      	adds	r3, r0, #1
 800e7fa:	d102      	bne.n	800e802 <_lseek_r+0x1e>
 800e7fc:	682b      	ldr	r3, [r5, #0]
 800e7fe:	b103      	cbz	r3, 800e802 <_lseek_r+0x1e>
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	bd38      	pop	{r3, r4, r5, pc}
 800e804:	20005030 	.word	0x20005030

0800e808 <malloc>:
 800e808:	4b02      	ldr	r3, [pc, #8]	; (800e814 <malloc+0xc>)
 800e80a:	4601      	mov	r1, r0
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f000 bd59 	b.w	800f2c4 <_malloc_r>
 800e812:	bf00      	nop
 800e814:	200000b8 	.word	0x200000b8

0800e818 <__ascii_mbtowc>:
 800e818:	b082      	sub	sp, #8
 800e81a:	b901      	cbnz	r1, 800e81e <__ascii_mbtowc+0x6>
 800e81c:	a901      	add	r1, sp, #4
 800e81e:	b142      	cbz	r2, 800e832 <__ascii_mbtowc+0x1a>
 800e820:	b14b      	cbz	r3, 800e836 <__ascii_mbtowc+0x1e>
 800e822:	7813      	ldrb	r3, [r2, #0]
 800e824:	600b      	str	r3, [r1, #0]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	1e10      	subs	r0, r2, #0
 800e82a:	bf18      	it	ne
 800e82c:	2001      	movne	r0, #1
 800e82e:	b002      	add	sp, #8
 800e830:	4770      	bx	lr
 800e832:	4610      	mov	r0, r2
 800e834:	e7fb      	b.n	800e82e <__ascii_mbtowc+0x16>
 800e836:	f06f 0001 	mvn.w	r0, #1
 800e83a:	e7f8      	b.n	800e82e <__ascii_mbtowc+0x16>

0800e83c <_Balloc>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e840:	4604      	mov	r4, r0
 800e842:	460d      	mov	r5, r1
 800e844:	b976      	cbnz	r6, 800e864 <_Balloc+0x28>
 800e846:	2010      	movs	r0, #16
 800e848:	f7ff ffde 	bl	800e808 <malloc>
 800e84c:	4602      	mov	r2, r0
 800e84e:	6260      	str	r0, [r4, #36]	; 0x24
 800e850:	b920      	cbnz	r0, 800e85c <_Balloc+0x20>
 800e852:	4b18      	ldr	r3, [pc, #96]	; (800e8b4 <_Balloc+0x78>)
 800e854:	4818      	ldr	r0, [pc, #96]	; (800e8b8 <_Balloc+0x7c>)
 800e856:	2166      	movs	r1, #102	; 0x66
 800e858:	f001 fb46 	bl	800fee8 <__assert_func>
 800e85c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e860:	6006      	str	r6, [r0, #0]
 800e862:	60c6      	str	r6, [r0, #12]
 800e864:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e866:	68f3      	ldr	r3, [r6, #12]
 800e868:	b183      	cbz	r3, 800e88c <_Balloc+0x50>
 800e86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e872:	b9b8      	cbnz	r0, 800e8a4 <_Balloc+0x68>
 800e874:	2101      	movs	r1, #1
 800e876:	fa01 f605 	lsl.w	r6, r1, r5
 800e87a:	1d72      	adds	r2, r6, #5
 800e87c:	0092      	lsls	r2, r2, #2
 800e87e:	4620      	mov	r0, r4
 800e880:	f000 fc9d 	bl	800f1be <_calloc_r>
 800e884:	b160      	cbz	r0, 800e8a0 <_Balloc+0x64>
 800e886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e88a:	e00e      	b.n	800e8aa <_Balloc+0x6e>
 800e88c:	2221      	movs	r2, #33	; 0x21
 800e88e:	2104      	movs	r1, #4
 800e890:	4620      	mov	r0, r4
 800e892:	f000 fc94 	bl	800f1be <_calloc_r>
 800e896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e898:	60f0      	str	r0, [r6, #12]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1e4      	bne.n	800e86a <_Balloc+0x2e>
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	6802      	ldr	r2, [r0, #0]
 800e8a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8b0:	e7f7      	b.n	800e8a2 <_Balloc+0x66>
 800e8b2:	bf00      	nop
 800e8b4:	0801162e 	.word	0x0801162e
 800e8b8:	0801172c 	.word	0x0801172c

0800e8bc <_Bfree>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	b976      	cbnz	r6, 800e8e4 <_Bfree+0x28>
 800e8c6:	2010      	movs	r0, #16
 800e8c8:	f7ff ff9e 	bl	800e808 <malloc>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	6268      	str	r0, [r5, #36]	; 0x24
 800e8d0:	b920      	cbnz	r0, 800e8dc <_Bfree+0x20>
 800e8d2:	4b09      	ldr	r3, [pc, #36]	; (800e8f8 <_Bfree+0x3c>)
 800e8d4:	4809      	ldr	r0, [pc, #36]	; (800e8fc <_Bfree+0x40>)
 800e8d6:	218a      	movs	r1, #138	; 0x8a
 800e8d8:	f001 fb06 	bl	800fee8 <__assert_func>
 800e8dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8e0:	6006      	str	r6, [r0, #0]
 800e8e2:	60c6      	str	r6, [r0, #12]
 800e8e4:	b13c      	cbz	r4, 800e8f6 <_Bfree+0x3a>
 800e8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8e8:	6862      	ldr	r2, [r4, #4]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8f0:	6021      	str	r1, [r4, #0]
 800e8f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8f6:	bd70      	pop	{r4, r5, r6, pc}
 800e8f8:	0801162e 	.word	0x0801162e
 800e8fc:	0801172c 	.word	0x0801172c

0800e900 <__multadd>:
 800e900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e904:	690d      	ldr	r5, [r1, #16]
 800e906:	4607      	mov	r7, r0
 800e908:	460c      	mov	r4, r1
 800e90a:	461e      	mov	r6, r3
 800e90c:	f101 0c14 	add.w	ip, r1, #20
 800e910:	2000      	movs	r0, #0
 800e912:	f8dc 3000 	ldr.w	r3, [ip]
 800e916:	b299      	uxth	r1, r3
 800e918:	fb02 6101 	mla	r1, r2, r1, r6
 800e91c:	0c1e      	lsrs	r6, r3, #16
 800e91e:	0c0b      	lsrs	r3, r1, #16
 800e920:	fb02 3306 	mla	r3, r2, r6, r3
 800e924:	b289      	uxth	r1, r1
 800e926:	3001      	adds	r0, #1
 800e928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e92c:	4285      	cmp	r5, r0
 800e92e:	f84c 1b04 	str.w	r1, [ip], #4
 800e932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e936:	dcec      	bgt.n	800e912 <__multadd+0x12>
 800e938:	b30e      	cbz	r6, 800e97e <__multadd+0x7e>
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	42ab      	cmp	r3, r5
 800e93e:	dc19      	bgt.n	800e974 <__multadd+0x74>
 800e940:	6861      	ldr	r1, [r4, #4]
 800e942:	4638      	mov	r0, r7
 800e944:	3101      	adds	r1, #1
 800e946:	f7ff ff79 	bl	800e83c <_Balloc>
 800e94a:	4680      	mov	r8, r0
 800e94c:	b928      	cbnz	r0, 800e95a <__multadd+0x5a>
 800e94e:	4602      	mov	r2, r0
 800e950:	4b0c      	ldr	r3, [pc, #48]	; (800e984 <__multadd+0x84>)
 800e952:	480d      	ldr	r0, [pc, #52]	; (800e988 <__multadd+0x88>)
 800e954:	21b5      	movs	r1, #181	; 0xb5
 800e956:	f001 fac7 	bl	800fee8 <__assert_func>
 800e95a:	6922      	ldr	r2, [r4, #16]
 800e95c:	3202      	adds	r2, #2
 800e95e:	f104 010c 	add.w	r1, r4, #12
 800e962:	0092      	lsls	r2, r2, #2
 800e964:	300c      	adds	r0, #12
 800e966:	f7fc ff43 	bl	800b7f0 <memcpy>
 800e96a:	4621      	mov	r1, r4
 800e96c:	4638      	mov	r0, r7
 800e96e:	f7ff ffa5 	bl	800e8bc <_Bfree>
 800e972:	4644      	mov	r4, r8
 800e974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e978:	3501      	adds	r5, #1
 800e97a:	615e      	str	r6, [r3, #20]
 800e97c:	6125      	str	r5, [r4, #16]
 800e97e:	4620      	mov	r0, r4
 800e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e984:	080116a0 	.word	0x080116a0
 800e988:	0801172c 	.word	0x0801172c

0800e98c <__s2b>:
 800e98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e990:	460c      	mov	r4, r1
 800e992:	4615      	mov	r5, r2
 800e994:	461f      	mov	r7, r3
 800e996:	2209      	movs	r2, #9
 800e998:	3308      	adds	r3, #8
 800e99a:	4606      	mov	r6, r0
 800e99c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	db09      	blt.n	800e9bc <__s2b+0x30>
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7ff ff47 	bl	800e83c <_Balloc>
 800e9ae:	b940      	cbnz	r0, 800e9c2 <__s2b+0x36>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <__s2b+0x8c>)
 800e9b4:	4819      	ldr	r0, [pc, #100]	; (800ea1c <__s2b+0x90>)
 800e9b6:	21ce      	movs	r1, #206	; 0xce
 800e9b8:	f001 fa96 	bl	800fee8 <__assert_func>
 800e9bc:	0052      	lsls	r2, r2, #1
 800e9be:	3101      	adds	r1, #1
 800e9c0:	e7f0      	b.n	800e9a4 <__s2b+0x18>
 800e9c2:	9b08      	ldr	r3, [sp, #32]
 800e9c4:	6143      	str	r3, [r0, #20]
 800e9c6:	2d09      	cmp	r5, #9
 800e9c8:	f04f 0301 	mov.w	r3, #1
 800e9cc:	6103      	str	r3, [r0, #16]
 800e9ce:	dd16      	ble.n	800e9fe <__s2b+0x72>
 800e9d0:	f104 0909 	add.w	r9, r4, #9
 800e9d4:	46c8      	mov	r8, r9
 800e9d6:	442c      	add	r4, r5
 800e9d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9dc:	4601      	mov	r1, r0
 800e9de:	3b30      	subs	r3, #48	; 0x30
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7ff ff8c 	bl	800e900 <__multadd>
 800e9e8:	45a0      	cmp	r8, r4
 800e9ea:	d1f5      	bne.n	800e9d8 <__s2b+0x4c>
 800e9ec:	f1a5 0408 	sub.w	r4, r5, #8
 800e9f0:	444c      	add	r4, r9
 800e9f2:	1b2d      	subs	r5, r5, r4
 800e9f4:	1963      	adds	r3, r4, r5
 800e9f6:	42bb      	cmp	r3, r7
 800e9f8:	db04      	blt.n	800ea04 <__s2b+0x78>
 800e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fe:	340a      	adds	r4, #10
 800ea00:	2509      	movs	r5, #9
 800ea02:	e7f6      	b.n	800e9f2 <__s2b+0x66>
 800ea04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea08:	4601      	mov	r1, r0
 800ea0a:	3b30      	subs	r3, #48	; 0x30
 800ea0c:	220a      	movs	r2, #10
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7ff ff76 	bl	800e900 <__multadd>
 800ea14:	e7ee      	b.n	800e9f4 <__s2b+0x68>
 800ea16:	bf00      	nop
 800ea18:	080116a0 	.word	0x080116a0
 800ea1c:	0801172c 	.word	0x0801172c

0800ea20 <__hi0bits>:
 800ea20:	0c03      	lsrs	r3, r0, #16
 800ea22:	041b      	lsls	r3, r3, #16
 800ea24:	b9d3      	cbnz	r3, 800ea5c <__hi0bits+0x3c>
 800ea26:	0400      	lsls	r0, r0, #16
 800ea28:	2310      	movs	r3, #16
 800ea2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea2e:	bf04      	itt	eq
 800ea30:	0200      	lsleq	r0, r0, #8
 800ea32:	3308      	addeq	r3, #8
 800ea34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ea38:	bf04      	itt	eq
 800ea3a:	0100      	lsleq	r0, r0, #4
 800ea3c:	3304      	addeq	r3, #4
 800ea3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ea42:	bf04      	itt	eq
 800ea44:	0080      	lsleq	r0, r0, #2
 800ea46:	3302      	addeq	r3, #2
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	db05      	blt.n	800ea58 <__hi0bits+0x38>
 800ea4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ea50:	f103 0301 	add.w	r3, r3, #1
 800ea54:	bf08      	it	eq
 800ea56:	2320      	moveq	r3, #32
 800ea58:	4618      	mov	r0, r3
 800ea5a:	4770      	bx	lr
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	e7e4      	b.n	800ea2a <__hi0bits+0xa>

0800ea60 <__lo0bits>:
 800ea60:	6803      	ldr	r3, [r0, #0]
 800ea62:	f013 0207 	ands.w	r2, r3, #7
 800ea66:	4601      	mov	r1, r0
 800ea68:	d00b      	beq.n	800ea82 <__lo0bits+0x22>
 800ea6a:	07da      	lsls	r2, r3, #31
 800ea6c:	d423      	bmi.n	800eab6 <__lo0bits+0x56>
 800ea6e:	0798      	lsls	r0, r3, #30
 800ea70:	bf49      	itett	mi
 800ea72:	085b      	lsrmi	r3, r3, #1
 800ea74:	089b      	lsrpl	r3, r3, #2
 800ea76:	2001      	movmi	r0, #1
 800ea78:	600b      	strmi	r3, [r1, #0]
 800ea7a:	bf5c      	itt	pl
 800ea7c:	600b      	strpl	r3, [r1, #0]
 800ea7e:	2002      	movpl	r0, #2
 800ea80:	4770      	bx	lr
 800ea82:	b298      	uxth	r0, r3
 800ea84:	b9a8      	cbnz	r0, 800eab2 <__lo0bits+0x52>
 800ea86:	0c1b      	lsrs	r3, r3, #16
 800ea88:	2010      	movs	r0, #16
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	b90a      	cbnz	r2, 800ea92 <__lo0bits+0x32>
 800ea8e:	3008      	adds	r0, #8
 800ea90:	0a1b      	lsrs	r3, r3, #8
 800ea92:	071a      	lsls	r2, r3, #28
 800ea94:	bf04      	itt	eq
 800ea96:	091b      	lsreq	r3, r3, #4
 800ea98:	3004      	addeq	r0, #4
 800ea9a:	079a      	lsls	r2, r3, #30
 800ea9c:	bf04      	itt	eq
 800ea9e:	089b      	lsreq	r3, r3, #2
 800eaa0:	3002      	addeq	r0, #2
 800eaa2:	07da      	lsls	r2, r3, #31
 800eaa4:	d403      	bmi.n	800eaae <__lo0bits+0x4e>
 800eaa6:	085b      	lsrs	r3, r3, #1
 800eaa8:	f100 0001 	add.w	r0, r0, #1
 800eaac:	d005      	beq.n	800eaba <__lo0bits+0x5a>
 800eaae:	600b      	str	r3, [r1, #0]
 800eab0:	4770      	bx	lr
 800eab2:	4610      	mov	r0, r2
 800eab4:	e7e9      	b.n	800ea8a <__lo0bits+0x2a>
 800eab6:	2000      	movs	r0, #0
 800eab8:	4770      	bx	lr
 800eaba:	2020      	movs	r0, #32
 800eabc:	4770      	bx	lr
	...

0800eac0 <__i2b>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	2101      	movs	r1, #1
 800eac6:	f7ff feb9 	bl	800e83c <_Balloc>
 800eaca:	4602      	mov	r2, r0
 800eacc:	b928      	cbnz	r0, 800eada <__i2b+0x1a>
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <__i2b+0x24>)
 800ead0:	4805      	ldr	r0, [pc, #20]	; (800eae8 <__i2b+0x28>)
 800ead2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ead6:	f001 fa07 	bl	800fee8 <__assert_func>
 800eada:	2301      	movs	r3, #1
 800eadc:	6144      	str	r4, [r0, #20]
 800eade:	6103      	str	r3, [r0, #16]
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	080116a0 	.word	0x080116a0
 800eae8:	0801172c 	.word	0x0801172c

0800eaec <__multiply>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4691      	mov	r9, r2
 800eaf2:	690a      	ldr	r2, [r1, #16]
 800eaf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	bfb8      	it	lt
 800eafc:	460b      	movlt	r3, r1
 800eafe:	460c      	mov	r4, r1
 800eb00:	bfbc      	itt	lt
 800eb02:	464c      	movlt	r4, r9
 800eb04:	4699      	movlt	r9, r3
 800eb06:	6927      	ldr	r7, [r4, #16]
 800eb08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb0c:	68a3      	ldr	r3, [r4, #8]
 800eb0e:	6861      	ldr	r1, [r4, #4]
 800eb10:	eb07 060a 	add.w	r6, r7, sl
 800eb14:	42b3      	cmp	r3, r6
 800eb16:	b085      	sub	sp, #20
 800eb18:	bfb8      	it	lt
 800eb1a:	3101      	addlt	r1, #1
 800eb1c:	f7ff fe8e 	bl	800e83c <_Balloc>
 800eb20:	b930      	cbnz	r0, 800eb30 <__multiply+0x44>
 800eb22:	4602      	mov	r2, r0
 800eb24:	4b44      	ldr	r3, [pc, #272]	; (800ec38 <__multiply+0x14c>)
 800eb26:	4845      	ldr	r0, [pc, #276]	; (800ec3c <__multiply+0x150>)
 800eb28:	f240 115d 	movw	r1, #349	; 0x15d
 800eb2c:	f001 f9dc 	bl	800fee8 <__assert_func>
 800eb30:	f100 0514 	add.w	r5, r0, #20
 800eb34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb38:	462b      	mov	r3, r5
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4543      	cmp	r3, r8
 800eb3e:	d321      	bcc.n	800eb84 <__multiply+0x98>
 800eb40:	f104 0314 	add.w	r3, r4, #20
 800eb44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eb48:	f109 0314 	add.w	r3, r9, #20
 800eb4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eb50:	9202      	str	r2, [sp, #8]
 800eb52:	1b3a      	subs	r2, r7, r4
 800eb54:	3a15      	subs	r2, #21
 800eb56:	f022 0203 	bic.w	r2, r2, #3
 800eb5a:	3204      	adds	r2, #4
 800eb5c:	f104 0115 	add.w	r1, r4, #21
 800eb60:	428f      	cmp	r7, r1
 800eb62:	bf38      	it	cc
 800eb64:	2204      	movcc	r2, #4
 800eb66:	9201      	str	r2, [sp, #4]
 800eb68:	9a02      	ldr	r2, [sp, #8]
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d80c      	bhi.n	800eb8a <__multiply+0x9e>
 800eb70:	2e00      	cmp	r6, #0
 800eb72:	dd03      	ble.n	800eb7c <__multiply+0x90>
 800eb74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d05a      	beq.n	800ec32 <__multiply+0x146>
 800eb7c:	6106      	str	r6, [r0, #16]
 800eb7e:	b005      	add	sp, #20
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	f843 2b04 	str.w	r2, [r3], #4
 800eb88:	e7d8      	b.n	800eb3c <__multiply+0x50>
 800eb8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb8e:	f1ba 0f00 	cmp.w	sl, #0
 800eb92:	d024      	beq.n	800ebde <__multiply+0xf2>
 800eb94:	f104 0e14 	add.w	lr, r4, #20
 800eb98:	46a9      	mov	r9, r5
 800eb9a:	f04f 0c00 	mov.w	ip, #0
 800eb9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eba2:	f8d9 1000 	ldr.w	r1, [r9]
 800eba6:	fa1f fb82 	uxth.w	fp, r2
 800ebaa:	b289      	uxth	r1, r1
 800ebac:	fb0a 110b 	mla	r1, sl, fp, r1
 800ebb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ebb4:	f8d9 2000 	ldr.w	r2, [r9]
 800ebb8:	4461      	add	r1, ip
 800ebba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800ebc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebc6:	b289      	uxth	r1, r1
 800ebc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ebcc:	4577      	cmp	r7, lr
 800ebce:	f849 1b04 	str.w	r1, [r9], #4
 800ebd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebd6:	d8e2      	bhi.n	800eb9e <__multiply+0xb2>
 800ebd8:	9a01      	ldr	r2, [sp, #4]
 800ebda:	f845 c002 	str.w	ip, [r5, r2]
 800ebde:	9a03      	ldr	r2, [sp, #12]
 800ebe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	f1b9 0f00 	cmp.w	r9, #0
 800ebea:	d020      	beq.n	800ec2e <__multiply+0x142>
 800ebec:	6829      	ldr	r1, [r5, #0]
 800ebee:	f104 0c14 	add.w	ip, r4, #20
 800ebf2:	46ae      	mov	lr, r5
 800ebf4:	f04f 0a00 	mov.w	sl, #0
 800ebf8:	f8bc b000 	ldrh.w	fp, [ip]
 800ebfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ec00:	fb09 220b 	mla	r2, r9, fp, r2
 800ec04:	4492      	add	sl, r2
 800ec06:	b289      	uxth	r1, r1
 800ec08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ec0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ec10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec14:	f8be 1000 	ldrh.w	r1, [lr]
 800ec18:	0c12      	lsrs	r2, r2, #16
 800ec1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ec1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ec22:	4567      	cmp	r7, ip
 800ec24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ec28:	d8e6      	bhi.n	800ebf8 <__multiply+0x10c>
 800ec2a:	9a01      	ldr	r2, [sp, #4]
 800ec2c:	50a9      	str	r1, [r5, r2]
 800ec2e:	3504      	adds	r5, #4
 800ec30:	e79a      	b.n	800eb68 <__multiply+0x7c>
 800ec32:	3e01      	subs	r6, #1
 800ec34:	e79c      	b.n	800eb70 <__multiply+0x84>
 800ec36:	bf00      	nop
 800ec38:	080116a0 	.word	0x080116a0
 800ec3c:	0801172c 	.word	0x0801172c

0800ec40 <__pow5mult>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4615      	mov	r5, r2
 800ec46:	f012 0203 	ands.w	r2, r2, #3
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	d007      	beq.n	800ec60 <__pow5mult+0x20>
 800ec50:	4c25      	ldr	r4, [pc, #148]	; (800ece8 <__pow5mult+0xa8>)
 800ec52:	3a01      	subs	r2, #1
 800ec54:	2300      	movs	r3, #0
 800ec56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec5a:	f7ff fe51 	bl	800e900 <__multadd>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	10ad      	asrs	r5, r5, #2
 800ec62:	d03d      	beq.n	800ece0 <__pow5mult+0xa0>
 800ec64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec66:	b97c      	cbnz	r4, 800ec88 <__pow5mult+0x48>
 800ec68:	2010      	movs	r0, #16
 800ec6a:	f7ff fdcd 	bl	800e808 <malloc>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	6270      	str	r0, [r6, #36]	; 0x24
 800ec72:	b928      	cbnz	r0, 800ec80 <__pow5mult+0x40>
 800ec74:	4b1d      	ldr	r3, [pc, #116]	; (800ecec <__pow5mult+0xac>)
 800ec76:	481e      	ldr	r0, [pc, #120]	; (800ecf0 <__pow5mult+0xb0>)
 800ec78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec7c:	f001 f934 	bl	800fee8 <__assert_func>
 800ec80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec84:	6004      	str	r4, [r0, #0]
 800ec86:	60c4      	str	r4, [r0, #12]
 800ec88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec90:	b94c      	cbnz	r4, 800eca6 <__pow5mult+0x66>
 800ec92:	f240 2171 	movw	r1, #625	; 0x271
 800ec96:	4630      	mov	r0, r6
 800ec98:	f7ff ff12 	bl	800eac0 <__i2b>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eca2:	4604      	mov	r4, r0
 800eca4:	6003      	str	r3, [r0, #0]
 800eca6:	f04f 0900 	mov.w	r9, #0
 800ecaa:	07eb      	lsls	r3, r5, #31
 800ecac:	d50a      	bpl.n	800ecc4 <__pow5mult+0x84>
 800ecae:	4639      	mov	r1, r7
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f7ff ff1a 	bl	800eaec <__multiply>
 800ecb8:	4639      	mov	r1, r7
 800ecba:	4680      	mov	r8, r0
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7ff fdfd 	bl	800e8bc <_Bfree>
 800ecc2:	4647      	mov	r7, r8
 800ecc4:	106d      	asrs	r5, r5, #1
 800ecc6:	d00b      	beq.n	800ece0 <__pow5mult+0xa0>
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	b938      	cbnz	r0, 800ecdc <__pow5mult+0x9c>
 800eccc:	4622      	mov	r2, r4
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7ff ff0b 	bl	800eaec <__multiply>
 800ecd6:	6020      	str	r0, [r4, #0]
 800ecd8:	f8c0 9000 	str.w	r9, [r0]
 800ecdc:	4604      	mov	r4, r0
 800ecde:	e7e4      	b.n	800ecaa <__pow5mult+0x6a>
 800ece0:	4638      	mov	r0, r7
 800ece2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece6:	bf00      	nop
 800ece8:	08011878 	.word	0x08011878
 800ecec:	0801162e 	.word	0x0801162e
 800ecf0:	0801172c 	.word	0x0801172c

0800ecf4 <__lshift>:
 800ecf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	6849      	ldr	r1, [r1, #4]
 800ecfc:	6923      	ldr	r3, [r4, #16]
 800ecfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	4607      	mov	r7, r0
 800ed06:	4691      	mov	r9, r2
 800ed08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed0c:	f108 0601 	add.w	r6, r8, #1
 800ed10:	42b3      	cmp	r3, r6
 800ed12:	db0b      	blt.n	800ed2c <__lshift+0x38>
 800ed14:	4638      	mov	r0, r7
 800ed16:	f7ff fd91 	bl	800e83c <_Balloc>
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	b948      	cbnz	r0, 800ed32 <__lshift+0x3e>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	4b2a      	ldr	r3, [pc, #168]	; (800edcc <__lshift+0xd8>)
 800ed22:	482b      	ldr	r0, [pc, #172]	; (800edd0 <__lshift+0xdc>)
 800ed24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ed28:	f001 f8de 	bl	800fee8 <__assert_func>
 800ed2c:	3101      	adds	r1, #1
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	e7ee      	b.n	800ed10 <__lshift+0x1c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	f100 0114 	add.w	r1, r0, #20
 800ed38:	f100 0210 	add.w	r2, r0, #16
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	4553      	cmp	r3, sl
 800ed40:	db37      	blt.n	800edb2 <__lshift+0xbe>
 800ed42:	6920      	ldr	r0, [r4, #16]
 800ed44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed48:	f104 0314 	add.w	r3, r4, #20
 800ed4c:	f019 091f 	ands.w	r9, r9, #31
 800ed50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ed58:	d02f      	beq.n	800edba <__lshift+0xc6>
 800ed5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed5e:	468a      	mov	sl, r1
 800ed60:	f04f 0c00 	mov.w	ip, #0
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	fa02 f209 	lsl.w	r2, r2, r9
 800ed6a:	ea42 020c 	orr.w	r2, r2, ip
 800ed6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ed72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed76:	4298      	cmp	r0, r3
 800ed78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ed7c:	d8f2      	bhi.n	800ed64 <__lshift+0x70>
 800ed7e:	1b03      	subs	r3, r0, r4
 800ed80:	3b15      	subs	r3, #21
 800ed82:	f023 0303 	bic.w	r3, r3, #3
 800ed86:	3304      	adds	r3, #4
 800ed88:	f104 0215 	add.w	r2, r4, #21
 800ed8c:	4290      	cmp	r0, r2
 800ed8e:	bf38      	it	cc
 800ed90:	2304      	movcc	r3, #4
 800ed92:	f841 c003 	str.w	ip, [r1, r3]
 800ed96:	f1bc 0f00 	cmp.w	ip, #0
 800ed9a:	d001      	beq.n	800eda0 <__lshift+0xac>
 800ed9c:	f108 0602 	add.w	r6, r8, #2
 800eda0:	3e01      	subs	r6, #1
 800eda2:	4638      	mov	r0, r7
 800eda4:	612e      	str	r6, [r5, #16]
 800eda6:	4621      	mov	r1, r4
 800eda8:	f7ff fd88 	bl	800e8bc <_Bfree>
 800edac:	4628      	mov	r0, r5
 800edae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800edb6:	3301      	adds	r3, #1
 800edb8:	e7c1      	b.n	800ed3e <__lshift+0x4a>
 800edba:	3904      	subs	r1, #4
 800edbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800edc4:	4298      	cmp	r0, r3
 800edc6:	d8f9      	bhi.n	800edbc <__lshift+0xc8>
 800edc8:	e7ea      	b.n	800eda0 <__lshift+0xac>
 800edca:	bf00      	nop
 800edcc:	080116a0 	.word	0x080116a0
 800edd0:	0801172c 	.word	0x0801172c

0800edd4 <__mcmp>:
 800edd4:	b530      	push	{r4, r5, lr}
 800edd6:	6902      	ldr	r2, [r0, #16]
 800edd8:	690c      	ldr	r4, [r1, #16]
 800edda:	1b12      	subs	r2, r2, r4
 800eddc:	d10e      	bne.n	800edfc <__mcmp+0x28>
 800edde:	f100 0314 	add.w	r3, r0, #20
 800ede2:	3114      	adds	r1, #20
 800ede4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ede8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800edec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800edf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800edf4:	42a5      	cmp	r5, r4
 800edf6:	d003      	beq.n	800ee00 <__mcmp+0x2c>
 800edf8:	d305      	bcc.n	800ee06 <__mcmp+0x32>
 800edfa:	2201      	movs	r2, #1
 800edfc:	4610      	mov	r0, r2
 800edfe:	bd30      	pop	{r4, r5, pc}
 800ee00:	4283      	cmp	r3, r0
 800ee02:	d3f3      	bcc.n	800edec <__mcmp+0x18>
 800ee04:	e7fa      	b.n	800edfc <__mcmp+0x28>
 800ee06:	f04f 32ff 	mov.w	r2, #4294967295
 800ee0a:	e7f7      	b.n	800edfc <__mcmp+0x28>

0800ee0c <__mdiff>:
 800ee0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee10:	460c      	mov	r4, r1
 800ee12:	4606      	mov	r6, r0
 800ee14:	4611      	mov	r1, r2
 800ee16:	4620      	mov	r0, r4
 800ee18:	4690      	mov	r8, r2
 800ee1a:	f7ff ffdb 	bl	800edd4 <__mcmp>
 800ee1e:	1e05      	subs	r5, r0, #0
 800ee20:	d110      	bne.n	800ee44 <__mdiff+0x38>
 800ee22:	4629      	mov	r1, r5
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7ff fd09 	bl	800e83c <_Balloc>
 800ee2a:	b930      	cbnz	r0, 800ee3a <__mdiff+0x2e>
 800ee2c:	4b3a      	ldr	r3, [pc, #232]	; (800ef18 <__mdiff+0x10c>)
 800ee2e:	4602      	mov	r2, r0
 800ee30:	f240 2132 	movw	r1, #562	; 0x232
 800ee34:	4839      	ldr	r0, [pc, #228]	; (800ef1c <__mdiff+0x110>)
 800ee36:	f001 f857 	bl	800fee8 <__assert_func>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee44:	bfa4      	itt	ge
 800ee46:	4643      	movge	r3, r8
 800ee48:	46a0      	movge	r8, r4
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee50:	bfa6      	itte	ge
 800ee52:	461c      	movge	r4, r3
 800ee54:	2500      	movge	r5, #0
 800ee56:	2501      	movlt	r5, #1
 800ee58:	f7ff fcf0 	bl	800e83c <_Balloc>
 800ee5c:	b920      	cbnz	r0, 800ee68 <__mdiff+0x5c>
 800ee5e:	4b2e      	ldr	r3, [pc, #184]	; (800ef18 <__mdiff+0x10c>)
 800ee60:	4602      	mov	r2, r0
 800ee62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee66:	e7e5      	b.n	800ee34 <__mdiff+0x28>
 800ee68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee6c:	6926      	ldr	r6, [r4, #16]
 800ee6e:	60c5      	str	r5, [r0, #12]
 800ee70:	f104 0914 	add.w	r9, r4, #20
 800ee74:	f108 0514 	add.w	r5, r8, #20
 800ee78:	f100 0e14 	add.w	lr, r0, #20
 800ee7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee84:	f108 0210 	add.w	r2, r8, #16
 800ee88:	46f2      	mov	sl, lr
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee94:	fa1f f883 	uxth.w	r8, r3
 800ee98:	fa11 f18b 	uxtah	r1, r1, fp
 800ee9c:	0c1b      	lsrs	r3, r3, #16
 800ee9e:	eba1 0808 	sub.w	r8, r1, r8
 800eea2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eea6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eeaa:	fa1f f888 	uxth.w	r8, r8
 800eeae:	1419      	asrs	r1, r3, #16
 800eeb0:	454e      	cmp	r6, r9
 800eeb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eeb6:	f84a 3b04 	str.w	r3, [sl], #4
 800eeba:	d8e7      	bhi.n	800ee8c <__mdiff+0x80>
 800eebc:	1b33      	subs	r3, r6, r4
 800eebe:	3b15      	subs	r3, #21
 800eec0:	f023 0303 	bic.w	r3, r3, #3
 800eec4:	3304      	adds	r3, #4
 800eec6:	3415      	adds	r4, #21
 800eec8:	42a6      	cmp	r6, r4
 800eeca:	bf38      	it	cc
 800eecc:	2304      	movcc	r3, #4
 800eece:	441d      	add	r5, r3
 800eed0:	4473      	add	r3, lr
 800eed2:	469e      	mov	lr, r3
 800eed4:	462e      	mov	r6, r5
 800eed6:	4566      	cmp	r6, ip
 800eed8:	d30e      	bcc.n	800eef8 <__mdiff+0xec>
 800eeda:	f10c 0203 	add.w	r2, ip, #3
 800eede:	1b52      	subs	r2, r2, r5
 800eee0:	f022 0203 	bic.w	r2, r2, #3
 800eee4:	3d03      	subs	r5, #3
 800eee6:	45ac      	cmp	ip, r5
 800eee8:	bf38      	it	cc
 800eeea:	2200      	movcc	r2, #0
 800eeec:	441a      	add	r2, r3
 800eeee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eef2:	b17b      	cbz	r3, 800ef14 <__mdiff+0x108>
 800eef4:	6107      	str	r7, [r0, #16]
 800eef6:	e7a3      	b.n	800ee40 <__mdiff+0x34>
 800eef8:	f856 8b04 	ldr.w	r8, [r6], #4
 800eefc:	fa11 f288 	uxtah	r2, r1, r8
 800ef00:	1414      	asrs	r4, r2, #16
 800ef02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ef06:	b292      	uxth	r2, r2
 800ef08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ef0c:	f84e 2b04 	str.w	r2, [lr], #4
 800ef10:	1421      	asrs	r1, r4, #16
 800ef12:	e7e0      	b.n	800eed6 <__mdiff+0xca>
 800ef14:	3f01      	subs	r7, #1
 800ef16:	e7ea      	b.n	800eeee <__mdiff+0xe2>
 800ef18:	080116a0 	.word	0x080116a0
 800ef1c:	0801172c 	.word	0x0801172c

0800ef20 <__ulp>:
 800ef20:	b082      	sub	sp, #8
 800ef22:	ed8d 0b00 	vstr	d0, [sp]
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	4912      	ldr	r1, [pc, #72]	; (800ef74 <__ulp+0x54>)
 800ef2a:	4019      	ands	r1, r3
 800ef2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ef30:	2900      	cmp	r1, #0
 800ef32:	dd05      	ble.n	800ef40 <__ulp+0x20>
 800ef34:	2200      	movs	r2, #0
 800ef36:	460b      	mov	r3, r1
 800ef38:	ec43 2b10 	vmov	d0, r2, r3
 800ef3c:	b002      	add	sp, #8
 800ef3e:	4770      	bx	lr
 800ef40:	4249      	negs	r1, r1
 800ef42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ef46:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ef4a:	f04f 0200 	mov.w	r2, #0
 800ef4e:	f04f 0300 	mov.w	r3, #0
 800ef52:	da04      	bge.n	800ef5e <__ulp+0x3e>
 800ef54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ef58:	fa41 f300 	asr.w	r3, r1, r0
 800ef5c:	e7ec      	b.n	800ef38 <__ulp+0x18>
 800ef5e:	f1a0 0114 	sub.w	r1, r0, #20
 800ef62:	291e      	cmp	r1, #30
 800ef64:	bfda      	itte	le
 800ef66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ef6a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ef6e:	2101      	movgt	r1, #1
 800ef70:	460a      	mov	r2, r1
 800ef72:	e7e1      	b.n	800ef38 <__ulp+0x18>
 800ef74:	7ff00000 	.word	0x7ff00000

0800ef78 <__b2d>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	6905      	ldr	r5, [r0, #16]
 800ef7c:	f100 0714 	add.w	r7, r0, #20
 800ef80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ef84:	1f2e      	subs	r6, r5, #4
 800ef86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff fd48 	bl	800ea20 <__hi0bits>
 800ef90:	f1c0 0320 	rsb	r3, r0, #32
 800ef94:	280a      	cmp	r0, #10
 800ef96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f014 <__b2d+0x9c>
 800ef9a:	600b      	str	r3, [r1, #0]
 800ef9c:	dc14      	bgt.n	800efc8 <__b2d+0x50>
 800ef9e:	f1c0 0e0b 	rsb	lr, r0, #11
 800efa2:	fa24 f10e 	lsr.w	r1, r4, lr
 800efa6:	42b7      	cmp	r7, r6
 800efa8:	ea41 030c 	orr.w	r3, r1, ip
 800efac:	bf34      	ite	cc
 800efae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efb2:	2100      	movcs	r1, #0
 800efb4:	3015      	adds	r0, #21
 800efb6:	fa04 f000 	lsl.w	r0, r4, r0
 800efba:	fa21 f10e 	lsr.w	r1, r1, lr
 800efbe:	ea40 0201 	orr.w	r2, r0, r1
 800efc2:	ec43 2b10 	vmov	d0, r2, r3
 800efc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc8:	42b7      	cmp	r7, r6
 800efca:	bf3a      	itte	cc
 800efcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efd0:	f1a5 0608 	subcc.w	r6, r5, #8
 800efd4:	2100      	movcs	r1, #0
 800efd6:	380b      	subs	r0, #11
 800efd8:	d017      	beq.n	800f00a <__b2d+0x92>
 800efda:	f1c0 0c20 	rsb	ip, r0, #32
 800efde:	fa04 f500 	lsl.w	r5, r4, r0
 800efe2:	42be      	cmp	r6, r7
 800efe4:	fa21 f40c 	lsr.w	r4, r1, ip
 800efe8:	ea45 0504 	orr.w	r5, r5, r4
 800efec:	bf8c      	ite	hi
 800efee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eff2:	2400      	movls	r4, #0
 800eff4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800eff8:	fa01 f000 	lsl.w	r0, r1, r0
 800effc:	fa24 f40c 	lsr.w	r4, r4, ip
 800f000:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f004:	ea40 0204 	orr.w	r2, r0, r4
 800f008:	e7db      	b.n	800efc2 <__b2d+0x4a>
 800f00a:	ea44 030c 	orr.w	r3, r4, ip
 800f00e:	460a      	mov	r2, r1
 800f010:	e7d7      	b.n	800efc2 <__b2d+0x4a>
 800f012:	bf00      	nop
 800f014:	3ff00000 	.word	0x3ff00000

0800f018 <__d2b>:
 800f018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f01c:	4689      	mov	r9, r1
 800f01e:	2101      	movs	r1, #1
 800f020:	ec57 6b10 	vmov	r6, r7, d0
 800f024:	4690      	mov	r8, r2
 800f026:	f7ff fc09 	bl	800e83c <_Balloc>
 800f02a:	4604      	mov	r4, r0
 800f02c:	b930      	cbnz	r0, 800f03c <__d2b+0x24>
 800f02e:	4602      	mov	r2, r0
 800f030:	4b25      	ldr	r3, [pc, #148]	; (800f0c8 <__d2b+0xb0>)
 800f032:	4826      	ldr	r0, [pc, #152]	; (800f0cc <__d2b+0xb4>)
 800f034:	f240 310a 	movw	r1, #778	; 0x30a
 800f038:	f000 ff56 	bl	800fee8 <__assert_func>
 800f03c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f044:	bb35      	cbnz	r5, 800f094 <__d2b+0x7c>
 800f046:	2e00      	cmp	r6, #0
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	d028      	beq.n	800f09e <__d2b+0x86>
 800f04c:	4668      	mov	r0, sp
 800f04e:	9600      	str	r6, [sp, #0]
 800f050:	f7ff fd06 	bl	800ea60 <__lo0bits>
 800f054:	9900      	ldr	r1, [sp, #0]
 800f056:	b300      	cbz	r0, 800f09a <__d2b+0x82>
 800f058:	9a01      	ldr	r2, [sp, #4]
 800f05a:	f1c0 0320 	rsb	r3, r0, #32
 800f05e:	fa02 f303 	lsl.w	r3, r2, r3
 800f062:	430b      	orrs	r3, r1
 800f064:	40c2      	lsrs	r2, r0
 800f066:	6163      	str	r3, [r4, #20]
 800f068:	9201      	str	r2, [sp, #4]
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	61a3      	str	r3, [r4, #24]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bf14      	ite	ne
 800f072:	2202      	movne	r2, #2
 800f074:	2201      	moveq	r2, #1
 800f076:	6122      	str	r2, [r4, #16]
 800f078:	b1d5      	cbz	r5, 800f0b0 <__d2b+0x98>
 800f07a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f07e:	4405      	add	r5, r0
 800f080:	f8c9 5000 	str.w	r5, [r9]
 800f084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f088:	f8c8 0000 	str.w	r0, [r8]
 800f08c:	4620      	mov	r0, r4
 800f08e:	b003      	add	sp, #12
 800f090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f098:	e7d5      	b.n	800f046 <__d2b+0x2e>
 800f09a:	6161      	str	r1, [r4, #20]
 800f09c:	e7e5      	b.n	800f06a <__d2b+0x52>
 800f09e:	a801      	add	r0, sp, #4
 800f0a0:	f7ff fcde 	bl	800ea60 <__lo0bits>
 800f0a4:	9b01      	ldr	r3, [sp, #4]
 800f0a6:	6163      	str	r3, [r4, #20]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	6122      	str	r2, [r4, #16]
 800f0ac:	3020      	adds	r0, #32
 800f0ae:	e7e3      	b.n	800f078 <__d2b+0x60>
 800f0b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0b8:	f8c9 0000 	str.w	r0, [r9]
 800f0bc:	6918      	ldr	r0, [r3, #16]
 800f0be:	f7ff fcaf 	bl	800ea20 <__hi0bits>
 800f0c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0c6:	e7df      	b.n	800f088 <__d2b+0x70>
 800f0c8:	080116a0 	.word	0x080116a0
 800f0cc:	0801172c 	.word	0x0801172c

0800f0d0 <__ratio>:
 800f0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	4688      	mov	r8, r1
 800f0d6:	4669      	mov	r1, sp
 800f0d8:	4681      	mov	r9, r0
 800f0da:	f7ff ff4d 	bl	800ef78 <__b2d>
 800f0de:	a901      	add	r1, sp, #4
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	ec55 4b10 	vmov	r4, r5, d0
 800f0e6:	f7ff ff47 	bl	800ef78 <__b2d>
 800f0ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f0f2:	eba3 0c02 	sub.w	ip, r3, r2
 800f0f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0fa:	1a9b      	subs	r3, r3, r2
 800f0fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f100:	ec51 0b10 	vmov	r0, r1, d0
 800f104:	2b00      	cmp	r3, #0
 800f106:	bfd6      	itet	le
 800f108:	460a      	movle	r2, r1
 800f10a:	462a      	movgt	r2, r5
 800f10c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f110:	468b      	mov	fp, r1
 800f112:	462f      	mov	r7, r5
 800f114:	bfd4      	ite	le
 800f116:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f11a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f11e:	4620      	mov	r0, r4
 800f120:	ee10 2a10 	vmov	r2, s0
 800f124:	465b      	mov	r3, fp
 800f126:	4639      	mov	r1, r7
 800f128:	f7f1 fba8 	bl	800087c <__aeabi_ddiv>
 800f12c:	ec41 0b10 	vmov	d0, r0, r1
 800f130:	b003      	add	sp, #12
 800f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f136 <__copybits>:
 800f136:	3901      	subs	r1, #1
 800f138:	b570      	push	{r4, r5, r6, lr}
 800f13a:	1149      	asrs	r1, r1, #5
 800f13c:	6914      	ldr	r4, [r2, #16]
 800f13e:	3101      	adds	r1, #1
 800f140:	f102 0314 	add.w	r3, r2, #20
 800f144:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f148:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f14c:	1f05      	subs	r5, r0, #4
 800f14e:	42a3      	cmp	r3, r4
 800f150:	d30c      	bcc.n	800f16c <__copybits+0x36>
 800f152:	1aa3      	subs	r3, r4, r2
 800f154:	3b11      	subs	r3, #17
 800f156:	f023 0303 	bic.w	r3, r3, #3
 800f15a:	3211      	adds	r2, #17
 800f15c:	42a2      	cmp	r2, r4
 800f15e:	bf88      	it	hi
 800f160:	2300      	movhi	r3, #0
 800f162:	4418      	add	r0, r3
 800f164:	2300      	movs	r3, #0
 800f166:	4288      	cmp	r0, r1
 800f168:	d305      	bcc.n	800f176 <__copybits+0x40>
 800f16a:	bd70      	pop	{r4, r5, r6, pc}
 800f16c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f170:	f845 6f04 	str.w	r6, [r5, #4]!
 800f174:	e7eb      	b.n	800f14e <__copybits+0x18>
 800f176:	f840 3b04 	str.w	r3, [r0], #4
 800f17a:	e7f4      	b.n	800f166 <__copybits+0x30>

0800f17c <__any_on>:
 800f17c:	f100 0214 	add.w	r2, r0, #20
 800f180:	6900      	ldr	r0, [r0, #16]
 800f182:	114b      	asrs	r3, r1, #5
 800f184:	4298      	cmp	r0, r3
 800f186:	b510      	push	{r4, lr}
 800f188:	db11      	blt.n	800f1ae <__any_on+0x32>
 800f18a:	dd0a      	ble.n	800f1a2 <__any_on+0x26>
 800f18c:	f011 011f 	ands.w	r1, r1, #31
 800f190:	d007      	beq.n	800f1a2 <__any_on+0x26>
 800f192:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f196:	fa24 f001 	lsr.w	r0, r4, r1
 800f19a:	fa00 f101 	lsl.w	r1, r0, r1
 800f19e:	428c      	cmp	r4, r1
 800f1a0:	d10b      	bne.n	800f1ba <__any_on+0x3e>
 800f1a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d803      	bhi.n	800f1b2 <__any_on+0x36>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	bd10      	pop	{r4, pc}
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	e7f7      	b.n	800f1a2 <__any_on+0x26>
 800f1b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	d0f5      	beq.n	800f1a6 <__any_on+0x2a>
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	e7f6      	b.n	800f1ac <__any_on+0x30>

0800f1be <_calloc_r>:
 800f1be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1c0:	fba1 2402 	umull	r2, r4, r1, r2
 800f1c4:	b94c      	cbnz	r4, 800f1da <_calloc_r+0x1c>
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	9201      	str	r2, [sp, #4]
 800f1ca:	f000 f87b 	bl	800f2c4 <_malloc_r>
 800f1ce:	9a01      	ldr	r2, [sp, #4]
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	b930      	cbnz	r0, 800f1e2 <_calloc_r+0x24>
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	b003      	add	sp, #12
 800f1d8:	bd30      	pop	{r4, r5, pc}
 800f1da:	220c      	movs	r2, #12
 800f1dc:	6002      	str	r2, [r0, #0]
 800f1de:	2500      	movs	r5, #0
 800f1e0:	e7f8      	b.n	800f1d4 <_calloc_r+0x16>
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	f7fc fb12 	bl	800b80c <memset>
 800f1e8:	e7f4      	b.n	800f1d4 <_calloc_r+0x16>
	...

0800f1ec <_free_r>:
 800f1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1ee:	2900      	cmp	r1, #0
 800f1f0:	d044      	beq.n	800f27c <_free_r+0x90>
 800f1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1f6:	9001      	str	r0, [sp, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800f1fe:	bfb8      	it	lt
 800f200:	18e4      	addlt	r4, r4, r3
 800f202:	f001 f875 	bl	80102f0 <__malloc_lock>
 800f206:	4a1e      	ldr	r2, [pc, #120]	; (800f280 <_free_r+0x94>)
 800f208:	9801      	ldr	r0, [sp, #4]
 800f20a:	6813      	ldr	r3, [r2, #0]
 800f20c:	b933      	cbnz	r3, 800f21c <_free_r+0x30>
 800f20e:	6063      	str	r3, [r4, #4]
 800f210:	6014      	str	r4, [r2, #0]
 800f212:	b003      	add	sp, #12
 800f214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f218:	f001 b870 	b.w	80102fc <__malloc_unlock>
 800f21c:	42a3      	cmp	r3, r4
 800f21e:	d908      	bls.n	800f232 <_free_r+0x46>
 800f220:	6825      	ldr	r5, [r4, #0]
 800f222:	1961      	adds	r1, r4, r5
 800f224:	428b      	cmp	r3, r1
 800f226:	bf01      	itttt	eq
 800f228:	6819      	ldreq	r1, [r3, #0]
 800f22a:	685b      	ldreq	r3, [r3, #4]
 800f22c:	1949      	addeq	r1, r1, r5
 800f22e:	6021      	streq	r1, [r4, #0]
 800f230:	e7ed      	b.n	800f20e <_free_r+0x22>
 800f232:	461a      	mov	r2, r3
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	b10b      	cbz	r3, 800f23c <_free_r+0x50>
 800f238:	42a3      	cmp	r3, r4
 800f23a:	d9fa      	bls.n	800f232 <_free_r+0x46>
 800f23c:	6811      	ldr	r1, [r2, #0]
 800f23e:	1855      	adds	r5, r2, r1
 800f240:	42a5      	cmp	r5, r4
 800f242:	d10b      	bne.n	800f25c <_free_r+0x70>
 800f244:	6824      	ldr	r4, [r4, #0]
 800f246:	4421      	add	r1, r4
 800f248:	1854      	adds	r4, r2, r1
 800f24a:	42a3      	cmp	r3, r4
 800f24c:	6011      	str	r1, [r2, #0]
 800f24e:	d1e0      	bne.n	800f212 <_free_r+0x26>
 800f250:	681c      	ldr	r4, [r3, #0]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	6053      	str	r3, [r2, #4]
 800f256:	4421      	add	r1, r4
 800f258:	6011      	str	r1, [r2, #0]
 800f25a:	e7da      	b.n	800f212 <_free_r+0x26>
 800f25c:	d902      	bls.n	800f264 <_free_r+0x78>
 800f25e:	230c      	movs	r3, #12
 800f260:	6003      	str	r3, [r0, #0]
 800f262:	e7d6      	b.n	800f212 <_free_r+0x26>
 800f264:	6825      	ldr	r5, [r4, #0]
 800f266:	1961      	adds	r1, r4, r5
 800f268:	428b      	cmp	r3, r1
 800f26a:	bf04      	itt	eq
 800f26c:	6819      	ldreq	r1, [r3, #0]
 800f26e:	685b      	ldreq	r3, [r3, #4]
 800f270:	6063      	str	r3, [r4, #4]
 800f272:	bf04      	itt	eq
 800f274:	1949      	addeq	r1, r1, r5
 800f276:	6021      	streq	r1, [r4, #0]
 800f278:	6054      	str	r4, [r2, #4]
 800f27a:	e7ca      	b.n	800f212 <_free_r+0x26>
 800f27c:	b003      	add	sp, #12
 800f27e:	bd30      	pop	{r4, r5, pc}
 800f280:	20005028 	.word	0x20005028

0800f284 <sbrk_aligned>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	4e0e      	ldr	r6, [pc, #56]	; (800f2c0 <sbrk_aligned+0x3c>)
 800f288:	460c      	mov	r4, r1
 800f28a:	6831      	ldr	r1, [r6, #0]
 800f28c:	4605      	mov	r5, r0
 800f28e:	b911      	cbnz	r1, 800f296 <sbrk_aligned+0x12>
 800f290:	f000 fd26 	bl	800fce0 <_sbrk_r>
 800f294:	6030      	str	r0, [r6, #0]
 800f296:	4621      	mov	r1, r4
 800f298:	4628      	mov	r0, r5
 800f29a:	f000 fd21 	bl	800fce0 <_sbrk_r>
 800f29e:	1c43      	adds	r3, r0, #1
 800f2a0:	d00a      	beq.n	800f2b8 <sbrk_aligned+0x34>
 800f2a2:	1cc4      	adds	r4, r0, #3
 800f2a4:	f024 0403 	bic.w	r4, r4, #3
 800f2a8:	42a0      	cmp	r0, r4
 800f2aa:	d007      	beq.n	800f2bc <sbrk_aligned+0x38>
 800f2ac:	1a21      	subs	r1, r4, r0
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f000 fd16 	bl	800fce0 <_sbrk_r>
 800f2b4:	3001      	adds	r0, #1
 800f2b6:	d101      	bne.n	800f2bc <sbrk_aligned+0x38>
 800f2b8:	f04f 34ff 	mov.w	r4, #4294967295
 800f2bc:	4620      	mov	r0, r4
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	2000502c 	.word	0x2000502c

0800f2c4 <_malloc_r>:
 800f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	1ccd      	adds	r5, r1, #3
 800f2ca:	f025 0503 	bic.w	r5, r5, #3
 800f2ce:	3508      	adds	r5, #8
 800f2d0:	2d0c      	cmp	r5, #12
 800f2d2:	bf38      	it	cc
 800f2d4:	250c      	movcc	r5, #12
 800f2d6:	2d00      	cmp	r5, #0
 800f2d8:	4607      	mov	r7, r0
 800f2da:	db01      	blt.n	800f2e0 <_malloc_r+0x1c>
 800f2dc:	42a9      	cmp	r1, r5
 800f2de:	d905      	bls.n	800f2ec <_malloc_r+0x28>
 800f2e0:	230c      	movs	r3, #12
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	2600      	movs	r6, #0
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ec:	4e2e      	ldr	r6, [pc, #184]	; (800f3a8 <_malloc_r+0xe4>)
 800f2ee:	f000 ffff 	bl	80102f0 <__malloc_lock>
 800f2f2:	6833      	ldr	r3, [r6, #0]
 800f2f4:	461c      	mov	r4, r3
 800f2f6:	bb34      	cbnz	r4, 800f346 <_malloc_r+0x82>
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	f7ff ffc2 	bl	800f284 <sbrk_aligned>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	4604      	mov	r4, r0
 800f304:	d14d      	bne.n	800f3a2 <_malloc_r+0xde>
 800f306:	6834      	ldr	r4, [r6, #0]
 800f308:	4626      	mov	r6, r4
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	d140      	bne.n	800f390 <_malloc_r+0xcc>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	4631      	mov	r1, r6
 800f312:	4638      	mov	r0, r7
 800f314:	eb04 0803 	add.w	r8, r4, r3
 800f318:	f000 fce2 	bl	800fce0 <_sbrk_r>
 800f31c:	4580      	cmp	r8, r0
 800f31e:	d13a      	bne.n	800f396 <_malloc_r+0xd2>
 800f320:	6821      	ldr	r1, [r4, #0]
 800f322:	3503      	adds	r5, #3
 800f324:	1a6d      	subs	r5, r5, r1
 800f326:	f025 0503 	bic.w	r5, r5, #3
 800f32a:	3508      	adds	r5, #8
 800f32c:	2d0c      	cmp	r5, #12
 800f32e:	bf38      	it	cc
 800f330:	250c      	movcc	r5, #12
 800f332:	4629      	mov	r1, r5
 800f334:	4638      	mov	r0, r7
 800f336:	f7ff ffa5 	bl	800f284 <sbrk_aligned>
 800f33a:	3001      	adds	r0, #1
 800f33c:	d02b      	beq.n	800f396 <_malloc_r+0xd2>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	442b      	add	r3, r5
 800f342:	6023      	str	r3, [r4, #0]
 800f344:	e00e      	b.n	800f364 <_malloc_r+0xa0>
 800f346:	6822      	ldr	r2, [r4, #0]
 800f348:	1b52      	subs	r2, r2, r5
 800f34a:	d41e      	bmi.n	800f38a <_malloc_r+0xc6>
 800f34c:	2a0b      	cmp	r2, #11
 800f34e:	d916      	bls.n	800f37e <_malloc_r+0xba>
 800f350:	1961      	adds	r1, r4, r5
 800f352:	42a3      	cmp	r3, r4
 800f354:	6025      	str	r5, [r4, #0]
 800f356:	bf18      	it	ne
 800f358:	6059      	strne	r1, [r3, #4]
 800f35a:	6863      	ldr	r3, [r4, #4]
 800f35c:	bf08      	it	eq
 800f35e:	6031      	streq	r1, [r6, #0]
 800f360:	5162      	str	r2, [r4, r5]
 800f362:	604b      	str	r3, [r1, #4]
 800f364:	4638      	mov	r0, r7
 800f366:	f104 060b 	add.w	r6, r4, #11
 800f36a:	f000 ffc7 	bl	80102fc <__malloc_unlock>
 800f36e:	f026 0607 	bic.w	r6, r6, #7
 800f372:	1d23      	adds	r3, r4, #4
 800f374:	1af2      	subs	r2, r6, r3
 800f376:	d0b6      	beq.n	800f2e6 <_malloc_r+0x22>
 800f378:	1b9b      	subs	r3, r3, r6
 800f37a:	50a3      	str	r3, [r4, r2]
 800f37c:	e7b3      	b.n	800f2e6 <_malloc_r+0x22>
 800f37e:	6862      	ldr	r2, [r4, #4]
 800f380:	42a3      	cmp	r3, r4
 800f382:	bf0c      	ite	eq
 800f384:	6032      	streq	r2, [r6, #0]
 800f386:	605a      	strne	r2, [r3, #4]
 800f388:	e7ec      	b.n	800f364 <_malloc_r+0xa0>
 800f38a:	4623      	mov	r3, r4
 800f38c:	6864      	ldr	r4, [r4, #4]
 800f38e:	e7b2      	b.n	800f2f6 <_malloc_r+0x32>
 800f390:	4634      	mov	r4, r6
 800f392:	6876      	ldr	r6, [r6, #4]
 800f394:	e7b9      	b.n	800f30a <_malloc_r+0x46>
 800f396:	230c      	movs	r3, #12
 800f398:	603b      	str	r3, [r7, #0]
 800f39a:	4638      	mov	r0, r7
 800f39c:	f000 ffae 	bl	80102fc <__malloc_unlock>
 800f3a0:	e7a1      	b.n	800f2e6 <_malloc_r+0x22>
 800f3a2:	6025      	str	r5, [r4, #0]
 800f3a4:	e7de      	b.n	800f364 <_malloc_r+0xa0>
 800f3a6:	bf00      	nop
 800f3a8:	20005028 	.word	0x20005028

0800f3ac <__ssputs_r>:
 800f3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b0:	688e      	ldr	r6, [r1, #8]
 800f3b2:	429e      	cmp	r6, r3
 800f3b4:	4682      	mov	sl, r0
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	4690      	mov	r8, r2
 800f3ba:	461f      	mov	r7, r3
 800f3bc:	d838      	bhi.n	800f430 <__ssputs_r+0x84>
 800f3be:	898a      	ldrh	r2, [r1, #12]
 800f3c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3c4:	d032      	beq.n	800f42c <__ssputs_r+0x80>
 800f3c6:	6825      	ldr	r5, [r4, #0]
 800f3c8:	6909      	ldr	r1, [r1, #16]
 800f3ca:	eba5 0901 	sub.w	r9, r5, r1
 800f3ce:	6965      	ldr	r5, [r4, #20]
 800f3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3d8:	3301      	adds	r3, #1
 800f3da:	444b      	add	r3, r9
 800f3dc:	106d      	asrs	r5, r5, #1
 800f3de:	429d      	cmp	r5, r3
 800f3e0:	bf38      	it	cc
 800f3e2:	461d      	movcc	r5, r3
 800f3e4:	0553      	lsls	r3, r2, #21
 800f3e6:	d531      	bpl.n	800f44c <__ssputs_r+0xa0>
 800f3e8:	4629      	mov	r1, r5
 800f3ea:	f7ff ff6b 	bl	800f2c4 <_malloc_r>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	b950      	cbnz	r0, 800f408 <__ssputs_r+0x5c>
 800f3f2:	230c      	movs	r3, #12
 800f3f4:	f8ca 3000 	str.w	r3, [sl]
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	f04f 30ff 	mov.w	r0, #4294967295
 800f404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f408:	6921      	ldr	r1, [r4, #16]
 800f40a:	464a      	mov	r2, r9
 800f40c:	f7fc f9f0 	bl	800b7f0 <memcpy>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	6126      	str	r6, [r4, #16]
 800f41e:	6165      	str	r5, [r4, #20]
 800f420:	444e      	add	r6, r9
 800f422:	eba5 0509 	sub.w	r5, r5, r9
 800f426:	6026      	str	r6, [r4, #0]
 800f428:	60a5      	str	r5, [r4, #8]
 800f42a:	463e      	mov	r6, r7
 800f42c:	42be      	cmp	r6, r7
 800f42e:	d900      	bls.n	800f432 <__ssputs_r+0x86>
 800f430:	463e      	mov	r6, r7
 800f432:	6820      	ldr	r0, [r4, #0]
 800f434:	4632      	mov	r2, r6
 800f436:	4641      	mov	r1, r8
 800f438:	f000 ff40 	bl	80102bc <memmove>
 800f43c:	68a3      	ldr	r3, [r4, #8]
 800f43e:	1b9b      	subs	r3, r3, r6
 800f440:	60a3      	str	r3, [r4, #8]
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	4433      	add	r3, r6
 800f446:	6023      	str	r3, [r4, #0]
 800f448:	2000      	movs	r0, #0
 800f44a:	e7db      	b.n	800f404 <__ssputs_r+0x58>
 800f44c:	462a      	mov	r2, r5
 800f44e:	f000 ff5b 	bl	8010308 <_realloc_r>
 800f452:	4606      	mov	r6, r0
 800f454:	2800      	cmp	r0, #0
 800f456:	d1e1      	bne.n	800f41c <__ssputs_r+0x70>
 800f458:	6921      	ldr	r1, [r4, #16]
 800f45a:	4650      	mov	r0, sl
 800f45c:	f7ff fec6 	bl	800f1ec <_free_r>
 800f460:	e7c7      	b.n	800f3f2 <__ssputs_r+0x46>
	...

0800f464 <_svfiprintf_r>:
 800f464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f468:	4698      	mov	r8, r3
 800f46a:	898b      	ldrh	r3, [r1, #12]
 800f46c:	061b      	lsls	r3, r3, #24
 800f46e:	b09d      	sub	sp, #116	; 0x74
 800f470:	4607      	mov	r7, r0
 800f472:	460d      	mov	r5, r1
 800f474:	4614      	mov	r4, r2
 800f476:	d50e      	bpl.n	800f496 <_svfiprintf_r+0x32>
 800f478:	690b      	ldr	r3, [r1, #16]
 800f47a:	b963      	cbnz	r3, 800f496 <_svfiprintf_r+0x32>
 800f47c:	2140      	movs	r1, #64	; 0x40
 800f47e:	f7ff ff21 	bl	800f2c4 <_malloc_r>
 800f482:	6028      	str	r0, [r5, #0]
 800f484:	6128      	str	r0, [r5, #16]
 800f486:	b920      	cbnz	r0, 800f492 <_svfiprintf_r+0x2e>
 800f488:	230c      	movs	r3, #12
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295
 800f490:	e0d1      	b.n	800f636 <_svfiprintf_r+0x1d2>
 800f492:	2340      	movs	r3, #64	; 0x40
 800f494:	616b      	str	r3, [r5, #20]
 800f496:	2300      	movs	r3, #0
 800f498:	9309      	str	r3, [sp, #36]	; 0x24
 800f49a:	2320      	movs	r3, #32
 800f49c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4a4:	2330      	movs	r3, #48	; 0x30
 800f4a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f650 <_svfiprintf_r+0x1ec>
 800f4aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4ae:	f04f 0901 	mov.w	r9, #1
 800f4b2:	4623      	mov	r3, r4
 800f4b4:	469a      	mov	sl, r3
 800f4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ba:	b10a      	cbz	r2, 800f4c0 <_svfiprintf_r+0x5c>
 800f4bc:	2a25      	cmp	r2, #37	; 0x25
 800f4be:	d1f9      	bne.n	800f4b4 <_svfiprintf_r+0x50>
 800f4c0:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c4:	d00b      	beq.n	800f4de <_svfiprintf_r+0x7a>
 800f4c6:	465b      	mov	r3, fp
 800f4c8:	4622      	mov	r2, r4
 800f4ca:	4629      	mov	r1, r5
 800f4cc:	4638      	mov	r0, r7
 800f4ce:	f7ff ff6d 	bl	800f3ac <__ssputs_r>
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	f000 80aa 	beq.w	800f62c <_svfiprintf_r+0x1c8>
 800f4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4da:	445a      	add	r2, fp
 800f4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800f4de:	f89a 3000 	ldrb.w	r3, [sl]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	f000 80a2 	beq.w	800f62c <_svfiprintf_r+0x1c8>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4f2:	f10a 0a01 	add.w	sl, sl, #1
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	9307      	str	r3, [sp, #28]
 800f4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4fe:	931a      	str	r3, [sp, #104]	; 0x68
 800f500:	4654      	mov	r4, sl
 800f502:	2205      	movs	r2, #5
 800f504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f508:	4851      	ldr	r0, [pc, #324]	; (800f650 <_svfiprintf_r+0x1ec>)
 800f50a:	f7f0 fe81 	bl	8000210 <memchr>
 800f50e:	9a04      	ldr	r2, [sp, #16]
 800f510:	b9d8      	cbnz	r0, 800f54a <_svfiprintf_r+0xe6>
 800f512:	06d0      	lsls	r0, r2, #27
 800f514:	bf44      	itt	mi
 800f516:	2320      	movmi	r3, #32
 800f518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f51c:	0711      	lsls	r1, r2, #28
 800f51e:	bf44      	itt	mi
 800f520:	232b      	movmi	r3, #43	; 0x2b
 800f522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f526:	f89a 3000 	ldrb.w	r3, [sl]
 800f52a:	2b2a      	cmp	r3, #42	; 0x2a
 800f52c:	d015      	beq.n	800f55a <_svfiprintf_r+0xf6>
 800f52e:	9a07      	ldr	r2, [sp, #28]
 800f530:	4654      	mov	r4, sl
 800f532:	2000      	movs	r0, #0
 800f534:	f04f 0c0a 	mov.w	ip, #10
 800f538:	4621      	mov	r1, r4
 800f53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f53e:	3b30      	subs	r3, #48	; 0x30
 800f540:	2b09      	cmp	r3, #9
 800f542:	d94e      	bls.n	800f5e2 <_svfiprintf_r+0x17e>
 800f544:	b1b0      	cbz	r0, 800f574 <_svfiprintf_r+0x110>
 800f546:	9207      	str	r2, [sp, #28]
 800f548:	e014      	b.n	800f574 <_svfiprintf_r+0x110>
 800f54a:	eba0 0308 	sub.w	r3, r0, r8
 800f54e:	fa09 f303 	lsl.w	r3, r9, r3
 800f552:	4313      	orrs	r3, r2
 800f554:	9304      	str	r3, [sp, #16]
 800f556:	46a2      	mov	sl, r4
 800f558:	e7d2      	b.n	800f500 <_svfiprintf_r+0x9c>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	1d19      	adds	r1, r3, #4
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	9103      	str	r1, [sp, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	bfbb      	ittet	lt
 800f566:	425b      	neglt	r3, r3
 800f568:	f042 0202 	orrlt.w	r2, r2, #2
 800f56c:	9307      	strge	r3, [sp, #28]
 800f56e:	9307      	strlt	r3, [sp, #28]
 800f570:	bfb8      	it	lt
 800f572:	9204      	strlt	r2, [sp, #16]
 800f574:	7823      	ldrb	r3, [r4, #0]
 800f576:	2b2e      	cmp	r3, #46	; 0x2e
 800f578:	d10c      	bne.n	800f594 <_svfiprintf_r+0x130>
 800f57a:	7863      	ldrb	r3, [r4, #1]
 800f57c:	2b2a      	cmp	r3, #42	; 0x2a
 800f57e:	d135      	bne.n	800f5ec <_svfiprintf_r+0x188>
 800f580:	9b03      	ldr	r3, [sp, #12]
 800f582:	1d1a      	adds	r2, r3, #4
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	9203      	str	r2, [sp, #12]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	bfb8      	it	lt
 800f58c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f590:	3402      	adds	r4, #2
 800f592:	9305      	str	r3, [sp, #20]
 800f594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f660 <_svfiprintf_r+0x1fc>
 800f598:	7821      	ldrb	r1, [r4, #0]
 800f59a:	2203      	movs	r2, #3
 800f59c:	4650      	mov	r0, sl
 800f59e:	f7f0 fe37 	bl	8000210 <memchr>
 800f5a2:	b140      	cbz	r0, 800f5b6 <_svfiprintf_r+0x152>
 800f5a4:	2340      	movs	r3, #64	; 0x40
 800f5a6:	eba0 000a 	sub.w	r0, r0, sl
 800f5aa:	fa03 f000 	lsl.w	r0, r3, r0
 800f5ae:	9b04      	ldr	r3, [sp, #16]
 800f5b0:	4303      	orrs	r3, r0
 800f5b2:	3401      	adds	r4, #1
 800f5b4:	9304      	str	r3, [sp, #16]
 800f5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ba:	4826      	ldr	r0, [pc, #152]	; (800f654 <_svfiprintf_r+0x1f0>)
 800f5bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5c0:	2206      	movs	r2, #6
 800f5c2:	f7f0 fe25 	bl	8000210 <memchr>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d038      	beq.n	800f63c <_svfiprintf_r+0x1d8>
 800f5ca:	4b23      	ldr	r3, [pc, #140]	; (800f658 <_svfiprintf_r+0x1f4>)
 800f5cc:	bb1b      	cbnz	r3, 800f616 <_svfiprintf_r+0x1b2>
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	3307      	adds	r3, #7
 800f5d2:	f023 0307 	bic.w	r3, r3, #7
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	9303      	str	r3, [sp, #12]
 800f5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5dc:	4433      	add	r3, r6
 800f5de:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e0:	e767      	b.n	800f4b2 <_svfiprintf_r+0x4e>
 800f5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	e7a5      	b.n	800f538 <_svfiprintf_r+0xd4>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	3401      	adds	r4, #1
 800f5f0:	9305      	str	r3, [sp, #20]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	f04f 0c0a 	mov.w	ip, #10
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5fe:	3a30      	subs	r2, #48	; 0x30
 800f600:	2a09      	cmp	r2, #9
 800f602:	d903      	bls.n	800f60c <_svfiprintf_r+0x1a8>
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0c5      	beq.n	800f594 <_svfiprintf_r+0x130>
 800f608:	9105      	str	r1, [sp, #20]
 800f60a:	e7c3      	b.n	800f594 <_svfiprintf_r+0x130>
 800f60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f610:	4604      	mov	r4, r0
 800f612:	2301      	movs	r3, #1
 800f614:	e7f0      	b.n	800f5f8 <_svfiprintf_r+0x194>
 800f616:	ab03      	add	r3, sp, #12
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	462a      	mov	r2, r5
 800f61c:	4b0f      	ldr	r3, [pc, #60]	; (800f65c <_svfiprintf_r+0x1f8>)
 800f61e:	a904      	add	r1, sp, #16
 800f620:	4638      	mov	r0, r7
 800f622:	f7fc f99b 	bl	800b95c <_printf_float>
 800f626:	1c42      	adds	r2, r0, #1
 800f628:	4606      	mov	r6, r0
 800f62a:	d1d6      	bne.n	800f5da <_svfiprintf_r+0x176>
 800f62c:	89ab      	ldrh	r3, [r5, #12]
 800f62e:	065b      	lsls	r3, r3, #25
 800f630:	f53f af2c 	bmi.w	800f48c <_svfiprintf_r+0x28>
 800f634:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f636:	b01d      	add	sp, #116	; 0x74
 800f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	ab03      	add	r3, sp, #12
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	462a      	mov	r2, r5
 800f642:	4b06      	ldr	r3, [pc, #24]	; (800f65c <_svfiprintf_r+0x1f8>)
 800f644:	a904      	add	r1, sp, #16
 800f646:	4638      	mov	r0, r7
 800f648:	f7fc fc2c 	bl	800bea4 <_printf_i>
 800f64c:	e7eb      	b.n	800f626 <_svfiprintf_r+0x1c2>
 800f64e:	bf00      	nop
 800f650:	08011884 	.word	0x08011884
 800f654:	0801188e 	.word	0x0801188e
 800f658:	0800b95d 	.word	0x0800b95d
 800f65c:	0800f3ad 	.word	0x0800f3ad
 800f660:	0801188a 	.word	0x0801188a

0800f664 <_sungetc_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	1c4b      	adds	r3, r1, #1
 800f668:	4614      	mov	r4, r2
 800f66a:	d103      	bne.n	800f674 <_sungetc_r+0x10>
 800f66c:	f04f 35ff 	mov.w	r5, #4294967295
 800f670:	4628      	mov	r0, r5
 800f672:	bd38      	pop	{r3, r4, r5, pc}
 800f674:	8993      	ldrh	r3, [r2, #12]
 800f676:	f023 0320 	bic.w	r3, r3, #32
 800f67a:	8193      	strh	r3, [r2, #12]
 800f67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f67e:	6852      	ldr	r2, [r2, #4]
 800f680:	b2cd      	uxtb	r5, r1
 800f682:	b18b      	cbz	r3, 800f6a8 <_sungetc_r+0x44>
 800f684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f686:	4293      	cmp	r3, r2
 800f688:	dd08      	ble.n	800f69c <_sungetc_r+0x38>
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	1e5a      	subs	r2, r3, #1
 800f68e:	6022      	str	r2, [r4, #0]
 800f690:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f694:	6863      	ldr	r3, [r4, #4]
 800f696:	3301      	adds	r3, #1
 800f698:	6063      	str	r3, [r4, #4]
 800f69a:	e7e9      	b.n	800f670 <_sungetc_r+0xc>
 800f69c:	4621      	mov	r1, r4
 800f69e:	f000 fbdb 	bl	800fe58 <__submore>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d0f1      	beq.n	800f68a <_sungetc_r+0x26>
 800f6a6:	e7e1      	b.n	800f66c <_sungetc_r+0x8>
 800f6a8:	6921      	ldr	r1, [r4, #16]
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	b151      	cbz	r1, 800f6c4 <_sungetc_r+0x60>
 800f6ae:	4299      	cmp	r1, r3
 800f6b0:	d208      	bcs.n	800f6c4 <_sungetc_r+0x60>
 800f6b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f6b6:	42a9      	cmp	r1, r5
 800f6b8:	d104      	bne.n	800f6c4 <_sungetc_r+0x60>
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	3201      	adds	r2, #1
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	6062      	str	r2, [r4, #4]
 800f6c2:	e7d5      	b.n	800f670 <_sungetc_r+0xc>
 800f6c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800f6d2:	4623      	mov	r3, r4
 800f6d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e7dc      	b.n	800f698 <_sungetc_r+0x34>

0800f6de <__ssrefill_r>:
 800f6de:	b510      	push	{r4, lr}
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f6e4:	b169      	cbz	r1, 800f702 <__ssrefill_r+0x24>
 800f6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6ea:	4299      	cmp	r1, r3
 800f6ec:	d001      	beq.n	800f6f2 <__ssrefill_r+0x14>
 800f6ee:	f7ff fd7d 	bl	800f1ec <_free_r>
 800f6f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6f4:	6063      	str	r3, [r4, #4]
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800f6fa:	b113      	cbz	r3, 800f702 <__ssrefill_r+0x24>
 800f6fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	bd10      	pop	{r4, pc}
 800f702:	6923      	ldr	r3, [r4, #16]
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	2300      	movs	r3, #0
 800f708:	6063      	str	r3, [r4, #4]
 800f70a:	89a3      	ldrh	r3, [r4, #12]
 800f70c:	f043 0320 	orr.w	r3, r3, #32
 800f710:	81a3      	strh	r3, [r4, #12]
 800f712:	f04f 30ff 	mov.w	r0, #4294967295
 800f716:	e7f3      	b.n	800f700 <__ssrefill_r+0x22>

0800f718 <__ssvfiscanf_r>:
 800f718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f71c:	460c      	mov	r4, r1
 800f71e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f722:	2100      	movs	r1, #0
 800f724:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f728:	49a6      	ldr	r1, [pc, #664]	; (800f9c4 <__ssvfiscanf_r+0x2ac>)
 800f72a:	91a0      	str	r1, [sp, #640]	; 0x280
 800f72c:	f10d 0804 	add.w	r8, sp, #4
 800f730:	49a5      	ldr	r1, [pc, #660]	; (800f9c8 <__ssvfiscanf_r+0x2b0>)
 800f732:	4fa6      	ldr	r7, [pc, #664]	; (800f9cc <__ssvfiscanf_r+0x2b4>)
 800f734:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f9d0 <__ssvfiscanf_r+0x2b8>
 800f738:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f73c:	4606      	mov	r6, r0
 800f73e:	91a1      	str	r1, [sp, #644]	; 0x284
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	7813      	ldrb	r3, [r2, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 815a 	beq.w	800f9fe <__ssvfiscanf_r+0x2e6>
 800f74a:	5dd9      	ldrb	r1, [r3, r7]
 800f74c:	f011 0108 	ands.w	r1, r1, #8
 800f750:	f102 0501 	add.w	r5, r2, #1
 800f754:	d019      	beq.n	800f78a <__ssvfiscanf_r+0x72>
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dd0f      	ble.n	800f77c <__ssvfiscanf_r+0x64>
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	781a      	ldrb	r2, [r3, #0]
 800f760:	5cba      	ldrb	r2, [r7, r2]
 800f762:	0712      	lsls	r2, r2, #28
 800f764:	d401      	bmi.n	800f76a <__ssvfiscanf_r+0x52>
 800f766:	462a      	mov	r2, r5
 800f768:	e7eb      	b.n	800f742 <__ssvfiscanf_r+0x2a>
 800f76a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f76c:	3201      	adds	r2, #1
 800f76e:	9245      	str	r2, [sp, #276]	; 0x114
 800f770:	6862      	ldr	r2, [r4, #4]
 800f772:	3301      	adds	r3, #1
 800f774:	3a01      	subs	r2, #1
 800f776:	6062      	str	r2, [r4, #4]
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	e7ec      	b.n	800f756 <__ssvfiscanf_r+0x3e>
 800f77c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f77e:	4621      	mov	r1, r4
 800f780:	4630      	mov	r0, r6
 800f782:	4798      	blx	r3
 800f784:	2800      	cmp	r0, #0
 800f786:	d0e9      	beq.n	800f75c <__ssvfiscanf_r+0x44>
 800f788:	e7ed      	b.n	800f766 <__ssvfiscanf_r+0x4e>
 800f78a:	2b25      	cmp	r3, #37	; 0x25
 800f78c:	d012      	beq.n	800f7b4 <__ssvfiscanf_r+0x9c>
 800f78e:	469a      	mov	sl, r3
 800f790:	6863      	ldr	r3, [r4, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	f340 8091 	ble.w	800f8ba <__ssvfiscanf_r+0x1a2>
 800f798:	6822      	ldr	r2, [r4, #0]
 800f79a:	7813      	ldrb	r3, [r2, #0]
 800f79c:	4553      	cmp	r3, sl
 800f79e:	f040 812e 	bne.w	800f9fe <__ssvfiscanf_r+0x2e6>
 800f7a2:	6863      	ldr	r3, [r4, #4]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	6063      	str	r3, [r4, #4]
 800f7a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f7aa:	3201      	adds	r2, #1
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	6022      	str	r2, [r4, #0]
 800f7b0:	9345      	str	r3, [sp, #276]	; 0x114
 800f7b2:	e7d8      	b.n	800f766 <__ssvfiscanf_r+0x4e>
 800f7b4:	9141      	str	r1, [sp, #260]	; 0x104
 800f7b6:	9143      	str	r1, [sp, #268]	; 0x10c
 800f7b8:	7853      	ldrb	r3, [r2, #1]
 800f7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f7bc:	bf02      	ittt	eq
 800f7be:	2310      	moveq	r3, #16
 800f7c0:	1c95      	addeq	r5, r2, #2
 800f7c2:	9341      	streq	r3, [sp, #260]	; 0x104
 800f7c4:	220a      	movs	r2, #10
 800f7c6:	46aa      	mov	sl, r5
 800f7c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f7cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f7d0:	2b09      	cmp	r3, #9
 800f7d2:	d91d      	bls.n	800f810 <__ssvfiscanf_r+0xf8>
 800f7d4:	487e      	ldr	r0, [pc, #504]	; (800f9d0 <__ssvfiscanf_r+0x2b8>)
 800f7d6:	2203      	movs	r2, #3
 800f7d8:	f7f0 fd1a 	bl	8000210 <memchr>
 800f7dc:	b140      	cbz	r0, 800f7f0 <__ssvfiscanf_r+0xd8>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	eba0 0009 	sub.w	r0, r0, r9
 800f7e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f7e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f7ea:	4318      	orrs	r0, r3
 800f7ec:	9041      	str	r0, [sp, #260]	; 0x104
 800f7ee:	4655      	mov	r5, sl
 800f7f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f7f4:	2b78      	cmp	r3, #120	; 0x78
 800f7f6:	d806      	bhi.n	800f806 <__ssvfiscanf_r+0xee>
 800f7f8:	2b57      	cmp	r3, #87	; 0x57
 800f7fa:	d810      	bhi.n	800f81e <__ssvfiscanf_r+0x106>
 800f7fc:	2b25      	cmp	r3, #37	; 0x25
 800f7fe:	d0c6      	beq.n	800f78e <__ssvfiscanf_r+0x76>
 800f800:	d856      	bhi.n	800f8b0 <__ssvfiscanf_r+0x198>
 800f802:	2b00      	cmp	r3, #0
 800f804:	d064      	beq.n	800f8d0 <__ssvfiscanf_r+0x1b8>
 800f806:	2303      	movs	r3, #3
 800f808:	9347      	str	r3, [sp, #284]	; 0x11c
 800f80a:	230a      	movs	r3, #10
 800f80c:	9342      	str	r3, [sp, #264]	; 0x108
 800f80e:	e071      	b.n	800f8f4 <__ssvfiscanf_r+0x1dc>
 800f810:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f812:	fb02 1103 	mla	r1, r2, r3, r1
 800f816:	3930      	subs	r1, #48	; 0x30
 800f818:	9143      	str	r1, [sp, #268]	; 0x10c
 800f81a:	4655      	mov	r5, sl
 800f81c:	e7d3      	b.n	800f7c6 <__ssvfiscanf_r+0xae>
 800f81e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f822:	2a20      	cmp	r2, #32
 800f824:	d8ef      	bhi.n	800f806 <__ssvfiscanf_r+0xee>
 800f826:	a101      	add	r1, pc, #4	; (adr r1, 800f82c <__ssvfiscanf_r+0x114>)
 800f828:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f82c:	0800f8df 	.word	0x0800f8df
 800f830:	0800f807 	.word	0x0800f807
 800f834:	0800f807 	.word	0x0800f807
 800f838:	0800f93d 	.word	0x0800f93d
 800f83c:	0800f807 	.word	0x0800f807
 800f840:	0800f807 	.word	0x0800f807
 800f844:	0800f807 	.word	0x0800f807
 800f848:	0800f807 	.word	0x0800f807
 800f84c:	0800f807 	.word	0x0800f807
 800f850:	0800f807 	.word	0x0800f807
 800f854:	0800f807 	.word	0x0800f807
 800f858:	0800f953 	.word	0x0800f953
 800f85c:	0800f929 	.word	0x0800f929
 800f860:	0800f8b7 	.word	0x0800f8b7
 800f864:	0800f8b7 	.word	0x0800f8b7
 800f868:	0800f8b7 	.word	0x0800f8b7
 800f86c:	0800f807 	.word	0x0800f807
 800f870:	0800f92d 	.word	0x0800f92d
 800f874:	0800f807 	.word	0x0800f807
 800f878:	0800f807 	.word	0x0800f807
 800f87c:	0800f807 	.word	0x0800f807
 800f880:	0800f807 	.word	0x0800f807
 800f884:	0800f963 	.word	0x0800f963
 800f888:	0800f935 	.word	0x0800f935
 800f88c:	0800f8d7 	.word	0x0800f8d7
 800f890:	0800f807 	.word	0x0800f807
 800f894:	0800f807 	.word	0x0800f807
 800f898:	0800f95f 	.word	0x0800f95f
 800f89c:	0800f807 	.word	0x0800f807
 800f8a0:	0800f929 	.word	0x0800f929
 800f8a4:	0800f807 	.word	0x0800f807
 800f8a8:	0800f807 	.word	0x0800f807
 800f8ac:	0800f8df 	.word	0x0800f8df
 800f8b0:	3b45      	subs	r3, #69	; 0x45
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d8a7      	bhi.n	800f806 <__ssvfiscanf_r+0xee>
 800f8b6:	2305      	movs	r3, #5
 800f8b8:	e01b      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f8ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f8bc:	4621      	mov	r1, r4
 800f8be:	4630      	mov	r0, r6
 800f8c0:	4798      	blx	r3
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	f43f af68 	beq.w	800f798 <__ssvfiscanf_r+0x80>
 800f8c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f040 808d 	bne.w	800f9ea <__ssvfiscanf_r+0x2d2>
 800f8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8d4:	e08f      	b.n	800f9f6 <__ssvfiscanf_r+0x2de>
 800f8d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f8d8:	f042 0220 	orr.w	r2, r2, #32
 800f8dc:	9241      	str	r2, [sp, #260]	; 0x104
 800f8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8e4:	9241      	str	r2, [sp, #260]	; 0x104
 800f8e6:	2210      	movs	r2, #16
 800f8e8:	2b6f      	cmp	r3, #111	; 0x6f
 800f8ea:	9242      	str	r2, [sp, #264]	; 0x108
 800f8ec:	bf34      	ite	cc
 800f8ee:	2303      	movcc	r3, #3
 800f8f0:	2304      	movcs	r3, #4
 800f8f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800f8f4:	6863      	ldr	r3, [r4, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	dd42      	ble.n	800f980 <__ssvfiscanf_r+0x268>
 800f8fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8fc:	0659      	lsls	r1, r3, #25
 800f8fe:	d404      	bmi.n	800f90a <__ssvfiscanf_r+0x1f2>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	5cba      	ldrb	r2, [r7, r2]
 800f906:	0712      	lsls	r2, r2, #28
 800f908:	d441      	bmi.n	800f98e <__ssvfiscanf_r+0x276>
 800f90a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	dc50      	bgt.n	800f9b2 <__ssvfiscanf_r+0x29a>
 800f910:	466b      	mov	r3, sp
 800f912:	4622      	mov	r2, r4
 800f914:	a941      	add	r1, sp, #260	; 0x104
 800f916:	4630      	mov	r0, r6
 800f918:	f000 f876 	bl	800fa08 <_scanf_chars>
 800f91c:	2801      	cmp	r0, #1
 800f91e:	d06e      	beq.n	800f9fe <__ssvfiscanf_r+0x2e6>
 800f920:	2802      	cmp	r0, #2
 800f922:	f47f af20 	bne.w	800f766 <__ssvfiscanf_r+0x4e>
 800f926:	e7cf      	b.n	800f8c8 <__ssvfiscanf_r+0x1b0>
 800f928:	220a      	movs	r2, #10
 800f92a:	e7dd      	b.n	800f8e8 <__ssvfiscanf_r+0x1d0>
 800f92c:	2300      	movs	r3, #0
 800f92e:	9342      	str	r3, [sp, #264]	; 0x108
 800f930:	2303      	movs	r3, #3
 800f932:	e7de      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f934:	2308      	movs	r3, #8
 800f936:	9342      	str	r3, [sp, #264]	; 0x108
 800f938:	2304      	movs	r3, #4
 800f93a:	e7da      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f93c:	4629      	mov	r1, r5
 800f93e:	4640      	mov	r0, r8
 800f940:	f000 f9de 	bl	800fd00 <__sccl>
 800f944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f94a:	9341      	str	r3, [sp, #260]	; 0x104
 800f94c:	4605      	mov	r5, r0
 800f94e:	2301      	movs	r3, #1
 800f950:	e7cf      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f958:	9341      	str	r3, [sp, #260]	; 0x104
 800f95a:	2300      	movs	r3, #0
 800f95c:	e7c9      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f95e:	2302      	movs	r3, #2
 800f960:	e7c7      	b.n	800f8f2 <__ssvfiscanf_r+0x1da>
 800f962:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f964:	06c3      	lsls	r3, r0, #27
 800f966:	f53f aefe 	bmi.w	800f766 <__ssvfiscanf_r+0x4e>
 800f96a:	9b00      	ldr	r3, [sp, #0]
 800f96c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f96e:	1d19      	adds	r1, r3, #4
 800f970:	9100      	str	r1, [sp, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f010 0f01 	tst.w	r0, #1
 800f978:	bf14      	ite	ne
 800f97a:	801a      	strhne	r2, [r3, #0]
 800f97c:	601a      	streq	r2, [r3, #0]
 800f97e:	e6f2      	b.n	800f766 <__ssvfiscanf_r+0x4e>
 800f980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f982:	4621      	mov	r1, r4
 800f984:	4630      	mov	r0, r6
 800f986:	4798      	blx	r3
 800f988:	2800      	cmp	r0, #0
 800f98a:	d0b6      	beq.n	800f8fa <__ssvfiscanf_r+0x1e2>
 800f98c:	e79c      	b.n	800f8c8 <__ssvfiscanf_r+0x1b0>
 800f98e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f990:	3201      	adds	r2, #1
 800f992:	9245      	str	r2, [sp, #276]	; 0x114
 800f994:	6862      	ldr	r2, [r4, #4]
 800f996:	3a01      	subs	r2, #1
 800f998:	2a00      	cmp	r2, #0
 800f99a:	6062      	str	r2, [r4, #4]
 800f99c:	dd02      	ble.n	800f9a4 <__ssvfiscanf_r+0x28c>
 800f99e:	3301      	adds	r3, #1
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	e7ad      	b.n	800f900 <__ssvfiscanf_r+0x1e8>
 800f9a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4798      	blx	r3
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d0a7      	beq.n	800f900 <__ssvfiscanf_r+0x1e8>
 800f9b0:	e78a      	b.n	800f8c8 <__ssvfiscanf_r+0x1b0>
 800f9b2:	2b04      	cmp	r3, #4
 800f9b4:	dc0e      	bgt.n	800f9d4 <__ssvfiscanf_r+0x2bc>
 800f9b6:	466b      	mov	r3, sp
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	a941      	add	r1, sp, #260	; 0x104
 800f9bc:	4630      	mov	r0, r6
 800f9be:	f000 f87d 	bl	800fabc <_scanf_i>
 800f9c2:	e7ab      	b.n	800f91c <__ssvfiscanf_r+0x204>
 800f9c4:	0800f665 	.word	0x0800f665
 800f9c8:	0800f6df 	.word	0x0800f6df
 800f9cc:	08011521 	.word	0x08011521
 800f9d0:	0801188a 	.word	0x0801188a
 800f9d4:	4b0b      	ldr	r3, [pc, #44]	; (800fa04 <__ssvfiscanf_r+0x2ec>)
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	f43f aec5 	beq.w	800f766 <__ssvfiscanf_r+0x4e>
 800f9dc:	466b      	mov	r3, sp
 800f9de:	4622      	mov	r2, r4
 800f9e0:	a941      	add	r1, sp, #260	; 0x104
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f7fc fb84 	bl	800c0f0 <_scanf_float>
 800f9e8:	e798      	b.n	800f91c <__ssvfiscanf_r+0x204>
 800f9ea:	89a3      	ldrh	r3, [r4, #12]
 800f9ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f9f0:	bf18      	it	ne
 800f9f2:	f04f 30ff 	movne.w	r0, #4294967295
 800f9f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fa00:	e7f9      	b.n	800f9f6 <__ssvfiscanf_r+0x2de>
 800fa02:	bf00      	nop
 800fa04:	0800c0f1 	.word	0x0800c0f1

0800fa08 <_scanf_chars>:
 800fa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa0c:	4615      	mov	r5, r2
 800fa0e:	688a      	ldr	r2, [r1, #8]
 800fa10:	4680      	mov	r8, r0
 800fa12:	460c      	mov	r4, r1
 800fa14:	b932      	cbnz	r2, 800fa24 <_scanf_chars+0x1c>
 800fa16:	698a      	ldr	r2, [r1, #24]
 800fa18:	2a00      	cmp	r2, #0
 800fa1a:	bf0c      	ite	eq
 800fa1c:	2201      	moveq	r2, #1
 800fa1e:	f04f 32ff 	movne.w	r2, #4294967295
 800fa22:	608a      	str	r2, [r1, #8]
 800fa24:	6822      	ldr	r2, [r4, #0]
 800fa26:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fab8 <_scanf_chars+0xb0>
 800fa2a:	06d1      	lsls	r1, r2, #27
 800fa2c:	bf5f      	itttt	pl
 800fa2e:	681a      	ldrpl	r2, [r3, #0]
 800fa30:	1d11      	addpl	r1, r2, #4
 800fa32:	6019      	strpl	r1, [r3, #0]
 800fa34:	6816      	ldrpl	r6, [r2, #0]
 800fa36:	2700      	movs	r7, #0
 800fa38:	69a0      	ldr	r0, [r4, #24]
 800fa3a:	b188      	cbz	r0, 800fa60 <_scanf_chars+0x58>
 800fa3c:	2801      	cmp	r0, #1
 800fa3e:	d107      	bne.n	800fa50 <_scanf_chars+0x48>
 800fa40:	682a      	ldr	r2, [r5, #0]
 800fa42:	7811      	ldrb	r1, [r2, #0]
 800fa44:	6962      	ldr	r2, [r4, #20]
 800fa46:	5c52      	ldrb	r2, [r2, r1]
 800fa48:	b952      	cbnz	r2, 800fa60 <_scanf_chars+0x58>
 800fa4a:	2f00      	cmp	r7, #0
 800fa4c:	d031      	beq.n	800fab2 <_scanf_chars+0xaa>
 800fa4e:	e022      	b.n	800fa96 <_scanf_chars+0x8e>
 800fa50:	2802      	cmp	r0, #2
 800fa52:	d120      	bne.n	800fa96 <_scanf_chars+0x8e>
 800fa54:	682b      	ldr	r3, [r5, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fa5c:	071b      	lsls	r3, r3, #28
 800fa5e:	d41a      	bmi.n	800fa96 <_scanf_chars+0x8e>
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	06da      	lsls	r2, r3, #27
 800fa64:	bf5e      	ittt	pl
 800fa66:	682b      	ldrpl	r3, [r5, #0]
 800fa68:	781b      	ldrbpl	r3, [r3, #0]
 800fa6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fa6e:	682a      	ldr	r2, [r5, #0]
 800fa70:	686b      	ldr	r3, [r5, #4]
 800fa72:	3201      	adds	r2, #1
 800fa74:	602a      	str	r2, [r5, #0]
 800fa76:	68a2      	ldr	r2, [r4, #8]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	3a01      	subs	r2, #1
 800fa7c:	606b      	str	r3, [r5, #4]
 800fa7e:	3701      	adds	r7, #1
 800fa80:	60a2      	str	r2, [r4, #8]
 800fa82:	b142      	cbz	r2, 800fa96 <_scanf_chars+0x8e>
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dcd7      	bgt.n	800fa38 <_scanf_chars+0x30>
 800fa88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	4640      	mov	r0, r8
 800fa90:	4798      	blx	r3
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d0d0      	beq.n	800fa38 <_scanf_chars+0x30>
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	f013 0310 	ands.w	r3, r3, #16
 800fa9c:	d105      	bne.n	800faaa <_scanf_chars+0xa2>
 800fa9e:	68e2      	ldr	r2, [r4, #12]
 800faa0:	3201      	adds	r2, #1
 800faa2:	60e2      	str	r2, [r4, #12]
 800faa4:	69a2      	ldr	r2, [r4, #24]
 800faa6:	b102      	cbz	r2, 800faaa <_scanf_chars+0xa2>
 800faa8:	7033      	strb	r3, [r6, #0]
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	443b      	add	r3, r7
 800faae:	6123      	str	r3, [r4, #16]
 800fab0:	2000      	movs	r0, #0
 800fab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab6:	bf00      	nop
 800fab8:	08011521 	.word	0x08011521

0800fabc <_scanf_i>:
 800fabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac0:	4698      	mov	r8, r3
 800fac2:	4b76      	ldr	r3, [pc, #472]	; (800fc9c <_scanf_i+0x1e0>)
 800fac4:	460c      	mov	r4, r1
 800fac6:	4682      	mov	sl, r0
 800fac8:	4616      	mov	r6, r2
 800faca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800face:	b087      	sub	sp, #28
 800fad0:	ab03      	add	r3, sp, #12
 800fad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fad6:	4b72      	ldr	r3, [pc, #456]	; (800fca0 <_scanf_i+0x1e4>)
 800fad8:	69a1      	ldr	r1, [r4, #24]
 800fada:	4a72      	ldr	r2, [pc, #456]	; (800fca4 <_scanf_i+0x1e8>)
 800fadc:	2903      	cmp	r1, #3
 800fade:	bf18      	it	ne
 800fae0:	461a      	movne	r2, r3
 800fae2:	68a3      	ldr	r3, [r4, #8]
 800fae4:	9201      	str	r2, [sp, #4]
 800fae6:	1e5a      	subs	r2, r3, #1
 800fae8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800faec:	bf88      	it	hi
 800faee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800faf2:	4627      	mov	r7, r4
 800faf4:	bf82      	ittt	hi
 800faf6:	eb03 0905 	addhi.w	r9, r3, r5
 800fafa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fafe:	60a3      	strhi	r3, [r4, #8]
 800fb00:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fb04:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fb08:	bf98      	it	ls
 800fb0a:	f04f 0900 	movls.w	r9, #0
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	463d      	mov	r5, r7
 800fb12:	f04f 0b00 	mov.w	fp, #0
 800fb16:	6831      	ldr	r1, [r6, #0]
 800fb18:	ab03      	add	r3, sp, #12
 800fb1a:	7809      	ldrb	r1, [r1, #0]
 800fb1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fb20:	2202      	movs	r2, #2
 800fb22:	f7f0 fb75 	bl	8000210 <memchr>
 800fb26:	b328      	cbz	r0, 800fb74 <_scanf_i+0xb8>
 800fb28:	f1bb 0f01 	cmp.w	fp, #1
 800fb2c:	d159      	bne.n	800fbe2 <_scanf_i+0x126>
 800fb2e:	6862      	ldr	r2, [r4, #4]
 800fb30:	b92a      	cbnz	r2, 800fb3e <_scanf_i+0x82>
 800fb32:	6822      	ldr	r2, [r4, #0]
 800fb34:	2308      	movs	r3, #8
 800fb36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb3a:	6063      	str	r3, [r4, #4]
 800fb3c:	6022      	str	r2, [r4, #0]
 800fb3e:	6822      	ldr	r2, [r4, #0]
 800fb40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fb44:	6022      	str	r2, [r4, #0]
 800fb46:	68a2      	ldr	r2, [r4, #8]
 800fb48:	1e51      	subs	r1, r2, #1
 800fb4a:	60a1      	str	r1, [r4, #8]
 800fb4c:	b192      	cbz	r2, 800fb74 <_scanf_i+0xb8>
 800fb4e:	6832      	ldr	r2, [r6, #0]
 800fb50:	1c51      	adds	r1, r2, #1
 800fb52:	6031      	str	r1, [r6, #0]
 800fb54:	7812      	ldrb	r2, [r2, #0]
 800fb56:	f805 2b01 	strb.w	r2, [r5], #1
 800fb5a:	6872      	ldr	r2, [r6, #4]
 800fb5c:	3a01      	subs	r2, #1
 800fb5e:	2a00      	cmp	r2, #0
 800fb60:	6072      	str	r2, [r6, #4]
 800fb62:	dc07      	bgt.n	800fb74 <_scanf_i+0xb8>
 800fb64:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	4790      	blx	r2
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f040 8085 	bne.w	800fc7e <_scanf_i+0x1c2>
 800fb74:	f10b 0b01 	add.w	fp, fp, #1
 800fb78:	f1bb 0f03 	cmp.w	fp, #3
 800fb7c:	d1cb      	bne.n	800fb16 <_scanf_i+0x5a>
 800fb7e:	6863      	ldr	r3, [r4, #4]
 800fb80:	b90b      	cbnz	r3, 800fb86 <_scanf_i+0xca>
 800fb82:	230a      	movs	r3, #10
 800fb84:	6063      	str	r3, [r4, #4]
 800fb86:	6863      	ldr	r3, [r4, #4]
 800fb88:	4947      	ldr	r1, [pc, #284]	; (800fca8 <_scanf_i+0x1ec>)
 800fb8a:	6960      	ldr	r0, [r4, #20]
 800fb8c:	1ac9      	subs	r1, r1, r3
 800fb8e:	f000 f8b7 	bl	800fd00 <__sccl>
 800fb92:	f04f 0b00 	mov.w	fp, #0
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	6822      	ldr	r2, [r4, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d03d      	beq.n	800fc1a <_scanf_i+0x15e>
 800fb9e:	6831      	ldr	r1, [r6, #0]
 800fba0:	6960      	ldr	r0, [r4, #20]
 800fba2:	f891 c000 	ldrb.w	ip, [r1]
 800fba6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d035      	beq.n	800fc1a <_scanf_i+0x15e>
 800fbae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fbb2:	d124      	bne.n	800fbfe <_scanf_i+0x142>
 800fbb4:	0510      	lsls	r0, r2, #20
 800fbb6:	d522      	bpl.n	800fbfe <_scanf_i+0x142>
 800fbb8:	f10b 0b01 	add.w	fp, fp, #1
 800fbbc:	f1b9 0f00 	cmp.w	r9, #0
 800fbc0:	d003      	beq.n	800fbca <_scanf_i+0x10e>
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	f109 39ff 	add.w	r9, r9, #4294967295
 800fbc8:	60a3      	str	r3, [r4, #8]
 800fbca:	6873      	ldr	r3, [r6, #4]
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	6073      	str	r3, [r6, #4]
 800fbd2:	dd1b      	ble.n	800fc0c <_scanf_i+0x150>
 800fbd4:	6833      	ldr	r3, [r6, #0]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	6033      	str	r3, [r6, #0]
 800fbda:	68a3      	ldr	r3, [r4, #8]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	60a3      	str	r3, [r4, #8]
 800fbe0:	e7d9      	b.n	800fb96 <_scanf_i+0xda>
 800fbe2:	f1bb 0f02 	cmp.w	fp, #2
 800fbe6:	d1ae      	bne.n	800fb46 <_scanf_i+0x8a>
 800fbe8:	6822      	ldr	r2, [r4, #0]
 800fbea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fbee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fbf2:	d1bf      	bne.n	800fb74 <_scanf_i+0xb8>
 800fbf4:	2310      	movs	r3, #16
 800fbf6:	6063      	str	r3, [r4, #4]
 800fbf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fbfc:	e7a2      	b.n	800fb44 <_scanf_i+0x88>
 800fbfe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fc02:	6022      	str	r2, [r4, #0]
 800fc04:	780b      	ldrb	r3, [r1, #0]
 800fc06:	f805 3b01 	strb.w	r3, [r5], #1
 800fc0a:	e7de      	b.n	800fbca <_scanf_i+0x10e>
 800fc0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fc10:	4631      	mov	r1, r6
 800fc12:	4650      	mov	r0, sl
 800fc14:	4798      	blx	r3
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d0df      	beq.n	800fbda <_scanf_i+0x11e>
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	05db      	lsls	r3, r3, #23
 800fc1e:	d50d      	bpl.n	800fc3c <_scanf_i+0x180>
 800fc20:	42bd      	cmp	r5, r7
 800fc22:	d909      	bls.n	800fc38 <_scanf_i+0x17c>
 800fc24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fc28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc2c:	4632      	mov	r2, r6
 800fc2e:	4650      	mov	r0, sl
 800fc30:	4798      	blx	r3
 800fc32:	f105 39ff 	add.w	r9, r5, #4294967295
 800fc36:	464d      	mov	r5, r9
 800fc38:	42bd      	cmp	r5, r7
 800fc3a:	d02d      	beq.n	800fc98 <_scanf_i+0x1dc>
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	f012 0210 	ands.w	r2, r2, #16
 800fc42:	d113      	bne.n	800fc6c <_scanf_i+0x1b0>
 800fc44:	702a      	strb	r2, [r5, #0]
 800fc46:	6863      	ldr	r3, [r4, #4]
 800fc48:	9e01      	ldr	r6, [sp, #4]
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	4650      	mov	r0, sl
 800fc4e:	47b0      	blx	r6
 800fc50:	6821      	ldr	r1, [r4, #0]
 800fc52:	f8d8 3000 	ldr.w	r3, [r8]
 800fc56:	f011 0f20 	tst.w	r1, #32
 800fc5a:	d013      	beq.n	800fc84 <_scanf_i+0x1c8>
 800fc5c:	1d1a      	adds	r2, r3, #4
 800fc5e:	f8c8 2000 	str.w	r2, [r8]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	6018      	str	r0, [r3, #0]
 800fc66:	68e3      	ldr	r3, [r4, #12]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	60e3      	str	r3, [r4, #12]
 800fc6c:	1bed      	subs	r5, r5, r7
 800fc6e:	44ab      	add	fp, r5
 800fc70:	6925      	ldr	r5, [r4, #16]
 800fc72:	445d      	add	r5, fp
 800fc74:	6125      	str	r5, [r4, #16]
 800fc76:	2000      	movs	r0, #0
 800fc78:	b007      	add	sp, #28
 800fc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7e:	f04f 0b00 	mov.w	fp, #0
 800fc82:	e7ca      	b.n	800fc1a <_scanf_i+0x15e>
 800fc84:	1d1a      	adds	r2, r3, #4
 800fc86:	f8c8 2000 	str.w	r2, [r8]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f011 0f01 	tst.w	r1, #1
 800fc90:	bf14      	ite	ne
 800fc92:	8018      	strhne	r0, [r3, #0]
 800fc94:	6018      	streq	r0, [r3, #0]
 800fc96:	e7e6      	b.n	800fc66 <_scanf_i+0x1aa>
 800fc98:	2001      	movs	r0, #1
 800fc9a:	e7ed      	b.n	800fc78 <_scanf_i+0x1bc>
 800fc9c:	080111a8 	.word	0x080111a8
 800fca0:	0800fe55 	.word	0x0800fe55
 800fca4:	0800d3bd 	.word	0x0800d3bd
 800fca8:	080118ae 	.word	0x080118ae

0800fcac <_read_r>:
 800fcac:	b538      	push	{r3, r4, r5, lr}
 800fcae:	4d07      	ldr	r5, [pc, #28]	; (800fccc <_read_r+0x20>)
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	4608      	mov	r0, r1
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	602a      	str	r2, [r5, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	f7f4 fee4 	bl	8004a88 <_read>
 800fcc0:	1c43      	adds	r3, r0, #1
 800fcc2:	d102      	bne.n	800fcca <_read_r+0x1e>
 800fcc4:	682b      	ldr	r3, [r5, #0]
 800fcc6:	b103      	cbz	r3, 800fcca <_read_r+0x1e>
 800fcc8:	6023      	str	r3, [r4, #0]
 800fcca:	bd38      	pop	{r3, r4, r5, pc}
 800fccc:	20005030 	.word	0x20005030

0800fcd0 <nan>:
 800fcd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fcd8 <nan+0x8>
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	00000000 	.word	0x00000000
 800fcdc:	7ff80000 	.word	0x7ff80000

0800fce0 <_sbrk_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	; (800fcfc <_sbrk_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f4 ff3a 	bl	8004b64 <_sbrk>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_sbrk_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_sbrk_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	20005030 	.word	0x20005030

0800fd00 <__sccl>:
 800fd00:	b570      	push	{r4, r5, r6, lr}
 800fd02:	780b      	ldrb	r3, [r1, #0]
 800fd04:	4604      	mov	r4, r0
 800fd06:	2b5e      	cmp	r3, #94	; 0x5e
 800fd08:	bf0b      	itete	eq
 800fd0a:	784b      	ldrbeq	r3, [r1, #1]
 800fd0c:	1c48      	addne	r0, r1, #1
 800fd0e:	1c88      	addeq	r0, r1, #2
 800fd10:	2200      	movne	r2, #0
 800fd12:	bf08      	it	eq
 800fd14:	2201      	moveq	r2, #1
 800fd16:	1e61      	subs	r1, r4, #1
 800fd18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fd1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fd20:	42a9      	cmp	r1, r5
 800fd22:	d1fb      	bne.n	800fd1c <__sccl+0x1c>
 800fd24:	b90b      	cbnz	r3, 800fd2a <__sccl+0x2a>
 800fd26:	3801      	subs	r0, #1
 800fd28:	bd70      	pop	{r4, r5, r6, pc}
 800fd2a:	f082 0201 	eor.w	r2, r2, #1
 800fd2e:	54e2      	strb	r2, [r4, r3]
 800fd30:	4605      	mov	r5, r0
 800fd32:	4628      	mov	r0, r5
 800fd34:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fd38:	292d      	cmp	r1, #45	; 0x2d
 800fd3a:	d006      	beq.n	800fd4a <__sccl+0x4a>
 800fd3c:	295d      	cmp	r1, #93	; 0x5d
 800fd3e:	d0f3      	beq.n	800fd28 <__sccl+0x28>
 800fd40:	b909      	cbnz	r1, 800fd46 <__sccl+0x46>
 800fd42:	4628      	mov	r0, r5
 800fd44:	e7f0      	b.n	800fd28 <__sccl+0x28>
 800fd46:	460b      	mov	r3, r1
 800fd48:	e7f1      	b.n	800fd2e <__sccl+0x2e>
 800fd4a:	786e      	ldrb	r6, [r5, #1]
 800fd4c:	2e5d      	cmp	r6, #93	; 0x5d
 800fd4e:	d0fa      	beq.n	800fd46 <__sccl+0x46>
 800fd50:	42b3      	cmp	r3, r6
 800fd52:	dcf8      	bgt.n	800fd46 <__sccl+0x46>
 800fd54:	3502      	adds	r5, #2
 800fd56:	4619      	mov	r1, r3
 800fd58:	3101      	adds	r1, #1
 800fd5a:	428e      	cmp	r6, r1
 800fd5c:	5462      	strb	r2, [r4, r1]
 800fd5e:	dcfb      	bgt.n	800fd58 <__sccl+0x58>
 800fd60:	1af1      	subs	r1, r6, r3
 800fd62:	3901      	subs	r1, #1
 800fd64:	1c58      	adds	r0, r3, #1
 800fd66:	42b3      	cmp	r3, r6
 800fd68:	bfa8      	it	ge
 800fd6a:	2100      	movge	r1, #0
 800fd6c:	1843      	adds	r3, r0, r1
 800fd6e:	e7e0      	b.n	800fd32 <__sccl+0x32>

0800fd70 <_strtoul_l.constprop.0>:
 800fd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd74:	4f36      	ldr	r7, [pc, #216]	; (800fe50 <_strtoul_l.constprop.0+0xe0>)
 800fd76:	4686      	mov	lr, r0
 800fd78:	460d      	mov	r5, r1
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd80:	5de6      	ldrb	r6, [r4, r7]
 800fd82:	f016 0608 	ands.w	r6, r6, #8
 800fd86:	d1f8      	bne.n	800fd7a <_strtoul_l.constprop.0+0xa>
 800fd88:	2c2d      	cmp	r4, #45	; 0x2d
 800fd8a:	d12f      	bne.n	800fdec <_strtoul_l.constprop.0+0x7c>
 800fd8c:	782c      	ldrb	r4, [r5, #0]
 800fd8e:	2601      	movs	r6, #1
 800fd90:	1c85      	adds	r5, r0, #2
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d057      	beq.n	800fe46 <_strtoul_l.constprop.0+0xd6>
 800fd96:	2b10      	cmp	r3, #16
 800fd98:	d109      	bne.n	800fdae <_strtoul_l.constprop.0+0x3e>
 800fd9a:	2c30      	cmp	r4, #48	; 0x30
 800fd9c:	d107      	bne.n	800fdae <_strtoul_l.constprop.0+0x3e>
 800fd9e:	7828      	ldrb	r0, [r5, #0]
 800fda0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fda4:	2858      	cmp	r0, #88	; 0x58
 800fda6:	d149      	bne.n	800fe3c <_strtoul_l.constprop.0+0xcc>
 800fda8:	786c      	ldrb	r4, [r5, #1]
 800fdaa:	2310      	movs	r3, #16
 800fdac:	3502      	adds	r5, #2
 800fdae:	f04f 38ff 	mov.w	r8, #4294967295
 800fdb2:	2700      	movs	r7, #0
 800fdb4:	fbb8 f8f3 	udiv	r8, r8, r3
 800fdb8:	fb03 f908 	mul.w	r9, r3, r8
 800fdbc:	ea6f 0909 	mvn.w	r9, r9
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fdc6:	f1bc 0f09 	cmp.w	ip, #9
 800fdca:	d814      	bhi.n	800fdf6 <_strtoul_l.constprop.0+0x86>
 800fdcc:	4664      	mov	r4, ip
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	dd22      	ble.n	800fe18 <_strtoul_l.constprop.0+0xa8>
 800fdd2:	2f00      	cmp	r7, #0
 800fdd4:	db1d      	blt.n	800fe12 <_strtoul_l.constprop.0+0xa2>
 800fdd6:	4580      	cmp	r8, r0
 800fdd8:	d31b      	bcc.n	800fe12 <_strtoul_l.constprop.0+0xa2>
 800fdda:	d101      	bne.n	800fde0 <_strtoul_l.constprop.0+0x70>
 800fddc:	45a1      	cmp	r9, r4
 800fdde:	db18      	blt.n	800fe12 <_strtoul_l.constprop.0+0xa2>
 800fde0:	fb00 4003 	mla	r0, r0, r3, r4
 800fde4:	2701      	movs	r7, #1
 800fde6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdea:	e7ea      	b.n	800fdc2 <_strtoul_l.constprop.0+0x52>
 800fdec:	2c2b      	cmp	r4, #43	; 0x2b
 800fdee:	bf04      	itt	eq
 800fdf0:	782c      	ldrbeq	r4, [r5, #0]
 800fdf2:	1c85      	addeq	r5, r0, #2
 800fdf4:	e7cd      	b.n	800fd92 <_strtoul_l.constprop.0+0x22>
 800fdf6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fdfa:	f1bc 0f19 	cmp.w	ip, #25
 800fdfe:	d801      	bhi.n	800fe04 <_strtoul_l.constprop.0+0x94>
 800fe00:	3c37      	subs	r4, #55	; 0x37
 800fe02:	e7e4      	b.n	800fdce <_strtoul_l.constprop.0+0x5e>
 800fe04:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe08:	f1bc 0f19 	cmp.w	ip, #25
 800fe0c:	d804      	bhi.n	800fe18 <_strtoul_l.constprop.0+0xa8>
 800fe0e:	3c57      	subs	r4, #87	; 0x57
 800fe10:	e7dd      	b.n	800fdce <_strtoul_l.constprop.0+0x5e>
 800fe12:	f04f 37ff 	mov.w	r7, #4294967295
 800fe16:	e7e6      	b.n	800fde6 <_strtoul_l.constprop.0+0x76>
 800fe18:	2f00      	cmp	r7, #0
 800fe1a:	da07      	bge.n	800fe2c <_strtoul_l.constprop.0+0xbc>
 800fe1c:	2322      	movs	r3, #34	; 0x22
 800fe1e:	f8ce 3000 	str.w	r3, [lr]
 800fe22:	f04f 30ff 	mov.w	r0, #4294967295
 800fe26:	b932      	cbnz	r2, 800fe36 <_strtoul_l.constprop.0+0xc6>
 800fe28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe2c:	b106      	cbz	r6, 800fe30 <_strtoul_l.constprop.0+0xc0>
 800fe2e:	4240      	negs	r0, r0
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	d0f9      	beq.n	800fe28 <_strtoul_l.constprop.0+0xb8>
 800fe34:	b107      	cbz	r7, 800fe38 <_strtoul_l.constprop.0+0xc8>
 800fe36:	1e69      	subs	r1, r5, #1
 800fe38:	6011      	str	r1, [r2, #0]
 800fe3a:	e7f5      	b.n	800fe28 <_strtoul_l.constprop.0+0xb8>
 800fe3c:	2430      	movs	r4, #48	; 0x30
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1b5      	bne.n	800fdae <_strtoul_l.constprop.0+0x3e>
 800fe42:	2308      	movs	r3, #8
 800fe44:	e7b3      	b.n	800fdae <_strtoul_l.constprop.0+0x3e>
 800fe46:	2c30      	cmp	r4, #48	; 0x30
 800fe48:	d0a9      	beq.n	800fd9e <_strtoul_l.constprop.0+0x2e>
 800fe4a:	230a      	movs	r3, #10
 800fe4c:	e7af      	b.n	800fdae <_strtoul_l.constprop.0+0x3e>
 800fe4e:	bf00      	nop
 800fe50:	08011521 	.word	0x08011521

0800fe54 <_strtoul_r>:
 800fe54:	f7ff bf8c 	b.w	800fd70 <_strtoul_l.constprop.0>

0800fe58 <__submore>:
 800fe58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5c:	460c      	mov	r4, r1
 800fe5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fe60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe64:	4299      	cmp	r1, r3
 800fe66:	d11d      	bne.n	800fea4 <__submore+0x4c>
 800fe68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe6c:	f7ff fa2a 	bl	800f2c4 <_malloc_r>
 800fe70:	b918      	cbnz	r0, 800fe7a <__submore+0x22>
 800fe72:	f04f 30ff 	mov.w	r0, #4294967295
 800fe76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fe84:	6360      	str	r0, [r4, #52]	; 0x34
 800fe86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fe8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fe8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fe92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fe96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fe9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fe9e:	6020      	str	r0, [r4, #0]
 800fea0:	2000      	movs	r0, #0
 800fea2:	e7e8      	b.n	800fe76 <__submore+0x1e>
 800fea4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fea6:	0077      	lsls	r7, r6, #1
 800fea8:	463a      	mov	r2, r7
 800feaa:	f000 fa2d 	bl	8010308 <_realloc_r>
 800feae:	4605      	mov	r5, r0
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d0de      	beq.n	800fe72 <__submore+0x1a>
 800feb4:	eb00 0806 	add.w	r8, r0, r6
 800feb8:	4601      	mov	r1, r0
 800feba:	4632      	mov	r2, r6
 800febc:	4640      	mov	r0, r8
 800febe:	f7fb fc97 	bl	800b7f0 <memcpy>
 800fec2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fec6:	f8c4 8000 	str.w	r8, [r4]
 800feca:	e7e9      	b.n	800fea0 <__submore+0x48>

0800fecc <__ascii_wctomb>:
 800fecc:	b149      	cbz	r1, 800fee2 <__ascii_wctomb+0x16>
 800fece:	2aff      	cmp	r2, #255	; 0xff
 800fed0:	bf85      	ittet	hi
 800fed2:	238a      	movhi	r3, #138	; 0x8a
 800fed4:	6003      	strhi	r3, [r0, #0]
 800fed6:	700a      	strbls	r2, [r1, #0]
 800fed8:	f04f 30ff 	movhi.w	r0, #4294967295
 800fedc:	bf98      	it	ls
 800fede:	2001      	movls	r0, #1
 800fee0:	4770      	bx	lr
 800fee2:	4608      	mov	r0, r1
 800fee4:	4770      	bx	lr
	...

0800fee8 <__assert_func>:
 800fee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feea:	4614      	mov	r4, r2
 800feec:	461a      	mov	r2, r3
 800feee:	4b09      	ldr	r3, [pc, #36]	; (800ff14 <__assert_func+0x2c>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4605      	mov	r5, r0
 800fef4:	68d8      	ldr	r0, [r3, #12]
 800fef6:	b14c      	cbz	r4, 800ff0c <__assert_func+0x24>
 800fef8:	4b07      	ldr	r3, [pc, #28]	; (800ff18 <__assert_func+0x30>)
 800fefa:	9100      	str	r1, [sp, #0]
 800fefc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff00:	4906      	ldr	r1, [pc, #24]	; (800ff1c <__assert_func+0x34>)
 800ff02:	462b      	mov	r3, r5
 800ff04:	f000 f9a6 	bl	8010254 <fiprintf>
 800ff08:	f000 fc46 	bl	8010798 <abort>
 800ff0c:	4b04      	ldr	r3, [pc, #16]	; (800ff20 <__assert_func+0x38>)
 800ff0e:	461c      	mov	r4, r3
 800ff10:	e7f3      	b.n	800fefa <__assert_func+0x12>
 800ff12:	bf00      	nop
 800ff14:	200000b8 	.word	0x200000b8
 800ff18:	080118b0 	.word	0x080118b0
 800ff1c:	080118bd 	.word	0x080118bd
 800ff20:	080118eb 	.word	0x080118eb

0800ff24 <__sflush_r>:
 800ff24:	898a      	ldrh	r2, [r1, #12]
 800ff26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	0710      	lsls	r0, r2, #28
 800ff2e:	460c      	mov	r4, r1
 800ff30:	d458      	bmi.n	800ffe4 <__sflush_r+0xc0>
 800ff32:	684b      	ldr	r3, [r1, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	dc05      	bgt.n	800ff44 <__sflush_r+0x20>
 800ff38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	dc02      	bgt.n	800ff44 <__sflush_r+0x20>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	d0f9      	beq.n	800ff3e <__sflush_r+0x1a>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff50:	682f      	ldr	r7, [r5, #0]
 800ff52:	602b      	str	r3, [r5, #0]
 800ff54:	d032      	beq.n	800ffbc <__sflush_r+0x98>
 800ff56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	075a      	lsls	r2, r3, #29
 800ff5c:	d505      	bpl.n	800ff6a <__sflush_r+0x46>
 800ff5e:	6863      	ldr	r3, [r4, #4]
 800ff60:	1ac0      	subs	r0, r0, r3
 800ff62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff64:	b10b      	cbz	r3, 800ff6a <__sflush_r+0x46>
 800ff66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff68:	1ac0      	subs	r0, r0, r3
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff70:	6a21      	ldr	r1, [r4, #32]
 800ff72:	4628      	mov	r0, r5
 800ff74:	47b0      	blx	r6
 800ff76:	1c43      	adds	r3, r0, #1
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	d106      	bne.n	800ff8a <__sflush_r+0x66>
 800ff7c:	6829      	ldr	r1, [r5, #0]
 800ff7e:	291d      	cmp	r1, #29
 800ff80:	d82c      	bhi.n	800ffdc <__sflush_r+0xb8>
 800ff82:	4a2a      	ldr	r2, [pc, #168]	; (801002c <__sflush_r+0x108>)
 800ff84:	40ca      	lsrs	r2, r1
 800ff86:	07d6      	lsls	r6, r2, #31
 800ff88:	d528      	bpl.n	800ffdc <__sflush_r+0xb8>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	6062      	str	r2, [r4, #4]
 800ff8e:	04d9      	lsls	r1, r3, #19
 800ff90:	6922      	ldr	r2, [r4, #16]
 800ff92:	6022      	str	r2, [r4, #0]
 800ff94:	d504      	bpl.n	800ffa0 <__sflush_r+0x7c>
 800ff96:	1c42      	adds	r2, r0, #1
 800ff98:	d101      	bne.n	800ff9e <__sflush_r+0x7a>
 800ff9a:	682b      	ldr	r3, [r5, #0]
 800ff9c:	b903      	cbnz	r3, 800ffa0 <__sflush_r+0x7c>
 800ff9e:	6560      	str	r0, [r4, #84]	; 0x54
 800ffa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffa2:	602f      	str	r7, [r5, #0]
 800ffa4:	2900      	cmp	r1, #0
 800ffa6:	d0ca      	beq.n	800ff3e <__sflush_r+0x1a>
 800ffa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffac:	4299      	cmp	r1, r3
 800ffae:	d002      	beq.n	800ffb6 <__sflush_r+0x92>
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f7ff f91b 	bl	800f1ec <_free_r>
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	6360      	str	r0, [r4, #52]	; 0x34
 800ffba:	e7c1      	b.n	800ff40 <__sflush_r+0x1c>
 800ffbc:	6a21      	ldr	r1, [r4, #32]
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	47b0      	blx	r6
 800ffc4:	1c41      	adds	r1, r0, #1
 800ffc6:	d1c7      	bne.n	800ff58 <__sflush_r+0x34>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0c4      	beq.n	800ff58 <__sflush_r+0x34>
 800ffce:	2b1d      	cmp	r3, #29
 800ffd0:	d001      	beq.n	800ffd6 <__sflush_r+0xb2>
 800ffd2:	2b16      	cmp	r3, #22
 800ffd4:	d101      	bne.n	800ffda <__sflush_r+0xb6>
 800ffd6:	602f      	str	r7, [r5, #0]
 800ffd8:	e7b1      	b.n	800ff3e <__sflush_r+0x1a>
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe0:	81a3      	strh	r3, [r4, #12]
 800ffe2:	e7ad      	b.n	800ff40 <__sflush_r+0x1c>
 800ffe4:	690f      	ldr	r7, [r1, #16]
 800ffe6:	2f00      	cmp	r7, #0
 800ffe8:	d0a9      	beq.n	800ff3e <__sflush_r+0x1a>
 800ffea:	0793      	lsls	r3, r2, #30
 800ffec:	680e      	ldr	r6, [r1, #0]
 800ffee:	bf08      	it	eq
 800fff0:	694b      	ldreq	r3, [r1, #20]
 800fff2:	600f      	str	r7, [r1, #0]
 800fff4:	bf18      	it	ne
 800fff6:	2300      	movne	r3, #0
 800fff8:	eba6 0807 	sub.w	r8, r6, r7
 800fffc:	608b      	str	r3, [r1, #8]
 800fffe:	f1b8 0f00 	cmp.w	r8, #0
 8010002:	dd9c      	ble.n	800ff3e <__sflush_r+0x1a>
 8010004:	6a21      	ldr	r1, [r4, #32]
 8010006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010008:	4643      	mov	r3, r8
 801000a:	463a      	mov	r2, r7
 801000c:	4628      	mov	r0, r5
 801000e:	47b0      	blx	r6
 8010010:	2800      	cmp	r0, #0
 8010012:	dc06      	bgt.n	8010022 <__sflush_r+0xfe>
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801001a:	81a3      	strh	r3, [r4, #12]
 801001c:	f04f 30ff 	mov.w	r0, #4294967295
 8010020:	e78e      	b.n	800ff40 <__sflush_r+0x1c>
 8010022:	4407      	add	r7, r0
 8010024:	eba8 0800 	sub.w	r8, r8, r0
 8010028:	e7e9      	b.n	800fffe <__sflush_r+0xda>
 801002a:	bf00      	nop
 801002c:	20400001 	.word	0x20400001

08010030 <_fflush_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	690b      	ldr	r3, [r1, #16]
 8010034:	4605      	mov	r5, r0
 8010036:	460c      	mov	r4, r1
 8010038:	b913      	cbnz	r3, 8010040 <_fflush_r+0x10>
 801003a:	2500      	movs	r5, #0
 801003c:	4628      	mov	r0, r5
 801003e:	bd38      	pop	{r3, r4, r5, pc}
 8010040:	b118      	cbz	r0, 801004a <_fflush_r+0x1a>
 8010042:	6983      	ldr	r3, [r0, #24]
 8010044:	b90b      	cbnz	r3, 801004a <_fflush_r+0x1a>
 8010046:	f000 f887 	bl	8010158 <__sinit>
 801004a:	4b14      	ldr	r3, [pc, #80]	; (801009c <_fflush_r+0x6c>)
 801004c:	429c      	cmp	r4, r3
 801004e:	d11b      	bne.n	8010088 <_fflush_r+0x58>
 8010050:	686c      	ldr	r4, [r5, #4]
 8010052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0ef      	beq.n	801003a <_fflush_r+0xa>
 801005a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801005c:	07d0      	lsls	r0, r2, #31
 801005e:	d404      	bmi.n	801006a <_fflush_r+0x3a>
 8010060:	0599      	lsls	r1, r3, #22
 8010062:	d402      	bmi.n	801006a <_fflush_r+0x3a>
 8010064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010066:	f000 f927 	bl	80102b8 <__retarget_lock_acquire_recursive>
 801006a:	4628      	mov	r0, r5
 801006c:	4621      	mov	r1, r4
 801006e:	f7ff ff59 	bl	800ff24 <__sflush_r>
 8010072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010074:	07da      	lsls	r2, r3, #31
 8010076:	4605      	mov	r5, r0
 8010078:	d4e0      	bmi.n	801003c <_fflush_r+0xc>
 801007a:	89a3      	ldrh	r3, [r4, #12]
 801007c:	059b      	lsls	r3, r3, #22
 801007e:	d4dd      	bmi.n	801003c <_fflush_r+0xc>
 8010080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010082:	f000 f91a 	bl	80102ba <__retarget_lock_release_recursive>
 8010086:	e7d9      	b.n	801003c <_fflush_r+0xc>
 8010088:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <_fflush_r+0x70>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d101      	bne.n	8010092 <_fflush_r+0x62>
 801008e:	68ac      	ldr	r4, [r5, #8]
 8010090:	e7df      	b.n	8010052 <_fflush_r+0x22>
 8010092:	4b04      	ldr	r3, [pc, #16]	; (80100a4 <_fflush_r+0x74>)
 8010094:	429c      	cmp	r4, r3
 8010096:	bf08      	it	eq
 8010098:	68ec      	ldreq	r4, [r5, #12]
 801009a:	e7da      	b.n	8010052 <_fflush_r+0x22>
 801009c:	0801190c 	.word	0x0801190c
 80100a0:	0801192c 	.word	0x0801192c
 80100a4:	080118ec 	.word	0x080118ec

080100a8 <std>:
 80100a8:	2300      	movs	r3, #0
 80100aa:	b510      	push	{r4, lr}
 80100ac:	4604      	mov	r4, r0
 80100ae:	e9c0 3300 	strd	r3, r3, [r0]
 80100b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100b6:	6083      	str	r3, [r0, #8]
 80100b8:	8181      	strh	r1, [r0, #12]
 80100ba:	6643      	str	r3, [r0, #100]	; 0x64
 80100bc:	81c2      	strh	r2, [r0, #14]
 80100be:	6183      	str	r3, [r0, #24]
 80100c0:	4619      	mov	r1, r3
 80100c2:	2208      	movs	r2, #8
 80100c4:	305c      	adds	r0, #92	; 0x5c
 80100c6:	f7fb fba1 	bl	800b80c <memset>
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <std+0x38>)
 80100cc:	6263      	str	r3, [r4, #36]	; 0x24
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <std+0x3c>)
 80100d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80100d2:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <std+0x40>)
 80100d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100d6:	4b05      	ldr	r3, [pc, #20]	; (80100ec <std+0x44>)
 80100d8:	6224      	str	r4, [r4, #32]
 80100da:	6323      	str	r3, [r4, #48]	; 0x30
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	0800c5b5 	.word	0x0800c5b5
 80100e4:	0800c5db 	.word	0x0800c5db
 80100e8:	0800c613 	.word	0x0800c613
 80100ec:	0800c637 	.word	0x0800c637

080100f0 <_cleanup_r>:
 80100f0:	4901      	ldr	r1, [pc, #4]	; (80100f8 <_cleanup_r+0x8>)
 80100f2:	f000 b8c1 	b.w	8010278 <_fwalk_reent>
 80100f6:	bf00      	nop
 80100f8:	08010031 	.word	0x08010031

080100fc <__sfmoreglue>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	2268      	movs	r2, #104	; 0x68
 8010100:	1e4d      	subs	r5, r1, #1
 8010102:	4355      	muls	r5, r2
 8010104:	460e      	mov	r6, r1
 8010106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801010a:	f7ff f8db 	bl	800f2c4 <_malloc_r>
 801010e:	4604      	mov	r4, r0
 8010110:	b140      	cbz	r0, 8010124 <__sfmoreglue+0x28>
 8010112:	2100      	movs	r1, #0
 8010114:	e9c0 1600 	strd	r1, r6, [r0]
 8010118:	300c      	adds	r0, #12
 801011a:	60a0      	str	r0, [r4, #8]
 801011c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010120:	f7fb fb74 	bl	800b80c <memset>
 8010124:	4620      	mov	r0, r4
 8010126:	bd70      	pop	{r4, r5, r6, pc}

08010128 <__sfp_lock_acquire>:
 8010128:	4801      	ldr	r0, [pc, #4]	; (8010130 <__sfp_lock_acquire+0x8>)
 801012a:	f000 b8c5 	b.w	80102b8 <__retarget_lock_acquire_recursive>
 801012e:	bf00      	nop
 8010130:	20005035 	.word	0x20005035

08010134 <__sfp_lock_release>:
 8010134:	4801      	ldr	r0, [pc, #4]	; (801013c <__sfp_lock_release+0x8>)
 8010136:	f000 b8c0 	b.w	80102ba <__retarget_lock_release_recursive>
 801013a:	bf00      	nop
 801013c:	20005035 	.word	0x20005035

08010140 <__sinit_lock_acquire>:
 8010140:	4801      	ldr	r0, [pc, #4]	; (8010148 <__sinit_lock_acquire+0x8>)
 8010142:	f000 b8b9 	b.w	80102b8 <__retarget_lock_acquire_recursive>
 8010146:	bf00      	nop
 8010148:	20005036 	.word	0x20005036

0801014c <__sinit_lock_release>:
 801014c:	4801      	ldr	r0, [pc, #4]	; (8010154 <__sinit_lock_release+0x8>)
 801014e:	f000 b8b4 	b.w	80102ba <__retarget_lock_release_recursive>
 8010152:	bf00      	nop
 8010154:	20005036 	.word	0x20005036

08010158 <__sinit>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4604      	mov	r4, r0
 801015c:	f7ff fff0 	bl	8010140 <__sinit_lock_acquire>
 8010160:	69a3      	ldr	r3, [r4, #24]
 8010162:	b11b      	cbz	r3, 801016c <__sinit+0x14>
 8010164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010168:	f7ff bff0 	b.w	801014c <__sinit_lock_release>
 801016c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010170:	6523      	str	r3, [r4, #80]	; 0x50
 8010172:	4b13      	ldr	r3, [pc, #76]	; (80101c0 <__sinit+0x68>)
 8010174:	4a13      	ldr	r2, [pc, #76]	; (80101c4 <__sinit+0x6c>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	62a2      	str	r2, [r4, #40]	; 0x28
 801017a:	42a3      	cmp	r3, r4
 801017c:	bf04      	itt	eq
 801017e:	2301      	moveq	r3, #1
 8010180:	61a3      	streq	r3, [r4, #24]
 8010182:	4620      	mov	r0, r4
 8010184:	f000 f820 	bl	80101c8 <__sfp>
 8010188:	6060      	str	r0, [r4, #4]
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f81c 	bl	80101c8 <__sfp>
 8010190:	60a0      	str	r0, [r4, #8]
 8010192:	4620      	mov	r0, r4
 8010194:	f000 f818 	bl	80101c8 <__sfp>
 8010198:	2200      	movs	r2, #0
 801019a:	60e0      	str	r0, [r4, #12]
 801019c:	2104      	movs	r1, #4
 801019e:	6860      	ldr	r0, [r4, #4]
 80101a0:	f7ff ff82 	bl	80100a8 <std>
 80101a4:	68a0      	ldr	r0, [r4, #8]
 80101a6:	2201      	movs	r2, #1
 80101a8:	2109      	movs	r1, #9
 80101aa:	f7ff ff7d 	bl	80100a8 <std>
 80101ae:	68e0      	ldr	r0, [r4, #12]
 80101b0:	2202      	movs	r2, #2
 80101b2:	2112      	movs	r1, #18
 80101b4:	f7ff ff78 	bl	80100a8 <std>
 80101b8:	2301      	movs	r3, #1
 80101ba:	61a3      	str	r3, [r4, #24]
 80101bc:	e7d2      	b.n	8010164 <__sinit+0xc>
 80101be:	bf00      	nop
 80101c0:	08011490 	.word	0x08011490
 80101c4:	080100f1 	.word	0x080100f1

080101c8 <__sfp>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	4607      	mov	r7, r0
 80101cc:	f7ff ffac 	bl	8010128 <__sfp_lock_acquire>
 80101d0:	4b1e      	ldr	r3, [pc, #120]	; (801024c <__sfp+0x84>)
 80101d2:	681e      	ldr	r6, [r3, #0]
 80101d4:	69b3      	ldr	r3, [r6, #24]
 80101d6:	b913      	cbnz	r3, 80101de <__sfp+0x16>
 80101d8:	4630      	mov	r0, r6
 80101da:	f7ff ffbd 	bl	8010158 <__sinit>
 80101de:	3648      	adds	r6, #72	; 0x48
 80101e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	d503      	bpl.n	80101f0 <__sfp+0x28>
 80101e8:	6833      	ldr	r3, [r6, #0]
 80101ea:	b30b      	cbz	r3, 8010230 <__sfp+0x68>
 80101ec:	6836      	ldr	r6, [r6, #0]
 80101ee:	e7f7      	b.n	80101e0 <__sfp+0x18>
 80101f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101f4:	b9d5      	cbnz	r5, 801022c <__sfp+0x64>
 80101f6:	4b16      	ldr	r3, [pc, #88]	; (8010250 <__sfp+0x88>)
 80101f8:	60e3      	str	r3, [r4, #12]
 80101fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101fe:	6665      	str	r5, [r4, #100]	; 0x64
 8010200:	f000 f859 	bl	80102b6 <__retarget_lock_init_recursive>
 8010204:	f7ff ff96 	bl	8010134 <__sfp_lock_release>
 8010208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801020c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010210:	6025      	str	r5, [r4, #0]
 8010212:	61a5      	str	r5, [r4, #24]
 8010214:	2208      	movs	r2, #8
 8010216:	4629      	mov	r1, r5
 8010218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801021c:	f7fb faf6 	bl	800b80c <memset>
 8010220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010228:	4620      	mov	r0, r4
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	3468      	adds	r4, #104	; 0x68
 801022e:	e7d9      	b.n	80101e4 <__sfp+0x1c>
 8010230:	2104      	movs	r1, #4
 8010232:	4638      	mov	r0, r7
 8010234:	f7ff ff62 	bl	80100fc <__sfmoreglue>
 8010238:	4604      	mov	r4, r0
 801023a:	6030      	str	r0, [r6, #0]
 801023c:	2800      	cmp	r0, #0
 801023e:	d1d5      	bne.n	80101ec <__sfp+0x24>
 8010240:	f7ff ff78 	bl	8010134 <__sfp_lock_release>
 8010244:	230c      	movs	r3, #12
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	e7ee      	b.n	8010228 <__sfp+0x60>
 801024a:	bf00      	nop
 801024c:	08011490 	.word	0x08011490
 8010250:	ffff0001 	.word	0xffff0001

08010254 <fiprintf>:
 8010254:	b40e      	push	{r1, r2, r3}
 8010256:	b503      	push	{r0, r1, lr}
 8010258:	4601      	mov	r1, r0
 801025a:	ab03      	add	r3, sp, #12
 801025c:	4805      	ldr	r0, [pc, #20]	; (8010274 <fiprintf+0x20>)
 801025e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010262:	6800      	ldr	r0, [r0, #0]
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	f000 f8a7 	bl	80103b8 <_vfiprintf_r>
 801026a:	b002      	add	sp, #8
 801026c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010270:	b003      	add	sp, #12
 8010272:	4770      	bx	lr
 8010274:	200000b8 	.word	0x200000b8

08010278 <_fwalk_reent>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4606      	mov	r6, r0
 801027e:	4688      	mov	r8, r1
 8010280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010284:	2700      	movs	r7, #0
 8010286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801028a:	f1b9 0901 	subs.w	r9, r9, #1
 801028e:	d505      	bpl.n	801029c <_fwalk_reent+0x24>
 8010290:	6824      	ldr	r4, [r4, #0]
 8010292:	2c00      	cmp	r4, #0
 8010294:	d1f7      	bne.n	8010286 <_fwalk_reent+0xe>
 8010296:	4638      	mov	r0, r7
 8010298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029c:	89ab      	ldrh	r3, [r5, #12]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d907      	bls.n	80102b2 <_fwalk_reent+0x3a>
 80102a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102a6:	3301      	adds	r3, #1
 80102a8:	d003      	beq.n	80102b2 <_fwalk_reent+0x3a>
 80102aa:	4629      	mov	r1, r5
 80102ac:	4630      	mov	r0, r6
 80102ae:	47c0      	blx	r8
 80102b0:	4307      	orrs	r7, r0
 80102b2:	3568      	adds	r5, #104	; 0x68
 80102b4:	e7e9      	b.n	801028a <_fwalk_reent+0x12>

080102b6 <__retarget_lock_init_recursive>:
 80102b6:	4770      	bx	lr

080102b8 <__retarget_lock_acquire_recursive>:
 80102b8:	4770      	bx	lr

080102ba <__retarget_lock_release_recursive>:
 80102ba:	4770      	bx	lr

080102bc <memmove>:
 80102bc:	4288      	cmp	r0, r1
 80102be:	b510      	push	{r4, lr}
 80102c0:	eb01 0402 	add.w	r4, r1, r2
 80102c4:	d902      	bls.n	80102cc <memmove+0x10>
 80102c6:	4284      	cmp	r4, r0
 80102c8:	4623      	mov	r3, r4
 80102ca:	d807      	bhi.n	80102dc <memmove+0x20>
 80102cc:	1e43      	subs	r3, r0, #1
 80102ce:	42a1      	cmp	r1, r4
 80102d0:	d008      	beq.n	80102e4 <memmove+0x28>
 80102d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102da:	e7f8      	b.n	80102ce <memmove+0x12>
 80102dc:	4402      	add	r2, r0
 80102de:	4601      	mov	r1, r0
 80102e0:	428a      	cmp	r2, r1
 80102e2:	d100      	bne.n	80102e6 <memmove+0x2a>
 80102e4:	bd10      	pop	{r4, pc}
 80102e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102ee:	e7f7      	b.n	80102e0 <memmove+0x24>

080102f0 <__malloc_lock>:
 80102f0:	4801      	ldr	r0, [pc, #4]	; (80102f8 <__malloc_lock+0x8>)
 80102f2:	f7ff bfe1 	b.w	80102b8 <__retarget_lock_acquire_recursive>
 80102f6:	bf00      	nop
 80102f8:	20005034 	.word	0x20005034

080102fc <__malloc_unlock>:
 80102fc:	4801      	ldr	r0, [pc, #4]	; (8010304 <__malloc_unlock+0x8>)
 80102fe:	f7ff bfdc 	b.w	80102ba <__retarget_lock_release_recursive>
 8010302:	bf00      	nop
 8010304:	20005034 	.word	0x20005034

08010308 <_realloc_r>:
 8010308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801030c:	4680      	mov	r8, r0
 801030e:	4614      	mov	r4, r2
 8010310:	460e      	mov	r6, r1
 8010312:	b921      	cbnz	r1, 801031e <_realloc_r+0x16>
 8010314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010318:	4611      	mov	r1, r2
 801031a:	f7fe bfd3 	b.w	800f2c4 <_malloc_r>
 801031e:	b92a      	cbnz	r2, 801032c <_realloc_r+0x24>
 8010320:	f7fe ff64 	bl	800f1ec <_free_r>
 8010324:	4625      	mov	r5, r4
 8010326:	4628      	mov	r0, r5
 8010328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032c:	f000 faa0 	bl	8010870 <_malloc_usable_size_r>
 8010330:	4284      	cmp	r4, r0
 8010332:	4607      	mov	r7, r0
 8010334:	d802      	bhi.n	801033c <_realloc_r+0x34>
 8010336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801033a:	d812      	bhi.n	8010362 <_realloc_r+0x5a>
 801033c:	4621      	mov	r1, r4
 801033e:	4640      	mov	r0, r8
 8010340:	f7fe ffc0 	bl	800f2c4 <_malloc_r>
 8010344:	4605      	mov	r5, r0
 8010346:	2800      	cmp	r0, #0
 8010348:	d0ed      	beq.n	8010326 <_realloc_r+0x1e>
 801034a:	42bc      	cmp	r4, r7
 801034c:	4622      	mov	r2, r4
 801034e:	4631      	mov	r1, r6
 8010350:	bf28      	it	cs
 8010352:	463a      	movcs	r2, r7
 8010354:	f7fb fa4c 	bl	800b7f0 <memcpy>
 8010358:	4631      	mov	r1, r6
 801035a:	4640      	mov	r0, r8
 801035c:	f7fe ff46 	bl	800f1ec <_free_r>
 8010360:	e7e1      	b.n	8010326 <_realloc_r+0x1e>
 8010362:	4635      	mov	r5, r6
 8010364:	e7df      	b.n	8010326 <_realloc_r+0x1e>

08010366 <__sfputc_r>:
 8010366:	6893      	ldr	r3, [r2, #8]
 8010368:	3b01      	subs	r3, #1
 801036a:	2b00      	cmp	r3, #0
 801036c:	b410      	push	{r4}
 801036e:	6093      	str	r3, [r2, #8]
 8010370:	da08      	bge.n	8010384 <__sfputc_r+0x1e>
 8010372:	6994      	ldr	r4, [r2, #24]
 8010374:	42a3      	cmp	r3, r4
 8010376:	db01      	blt.n	801037c <__sfputc_r+0x16>
 8010378:	290a      	cmp	r1, #10
 801037a:	d103      	bne.n	8010384 <__sfputc_r+0x1e>
 801037c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010380:	f000 b94a 	b.w	8010618 <__swbuf_r>
 8010384:	6813      	ldr	r3, [r2, #0]
 8010386:	1c58      	adds	r0, r3, #1
 8010388:	6010      	str	r0, [r2, #0]
 801038a:	7019      	strb	r1, [r3, #0]
 801038c:	4608      	mov	r0, r1
 801038e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010392:	4770      	bx	lr

08010394 <__sfputs_r>:
 8010394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010396:	4606      	mov	r6, r0
 8010398:	460f      	mov	r7, r1
 801039a:	4614      	mov	r4, r2
 801039c:	18d5      	adds	r5, r2, r3
 801039e:	42ac      	cmp	r4, r5
 80103a0:	d101      	bne.n	80103a6 <__sfputs_r+0x12>
 80103a2:	2000      	movs	r0, #0
 80103a4:	e007      	b.n	80103b6 <__sfputs_r+0x22>
 80103a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103aa:	463a      	mov	r2, r7
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7ff ffda 	bl	8010366 <__sfputc_r>
 80103b2:	1c43      	adds	r3, r0, #1
 80103b4:	d1f3      	bne.n	801039e <__sfputs_r+0xa>
 80103b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103b8 <_vfiprintf_r>:
 80103b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103bc:	460d      	mov	r5, r1
 80103be:	b09d      	sub	sp, #116	; 0x74
 80103c0:	4614      	mov	r4, r2
 80103c2:	4698      	mov	r8, r3
 80103c4:	4606      	mov	r6, r0
 80103c6:	b118      	cbz	r0, 80103d0 <_vfiprintf_r+0x18>
 80103c8:	6983      	ldr	r3, [r0, #24]
 80103ca:	b90b      	cbnz	r3, 80103d0 <_vfiprintf_r+0x18>
 80103cc:	f7ff fec4 	bl	8010158 <__sinit>
 80103d0:	4b89      	ldr	r3, [pc, #548]	; (80105f8 <_vfiprintf_r+0x240>)
 80103d2:	429d      	cmp	r5, r3
 80103d4:	d11b      	bne.n	801040e <_vfiprintf_r+0x56>
 80103d6:	6875      	ldr	r5, [r6, #4]
 80103d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103da:	07d9      	lsls	r1, r3, #31
 80103dc:	d405      	bmi.n	80103ea <_vfiprintf_r+0x32>
 80103de:	89ab      	ldrh	r3, [r5, #12]
 80103e0:	059a      	lsls	r2, r3, #22
 80103e2:	d402      	bmi.n	80103ea <_vfiprintf_r+0x32>
 80103e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103e6:	f7ff ff67 	bl	80102b8 <__retarget_lock_acquire_recursive>
 80103ea:	89ab      	ldrh	r3, [r5, #12]
 80103ec:	071b      	lsls	r3, r3, #28
 80103ee:	d501      	bpl.n	80103f4 <_vfiprintf_r+0x3c>
 80103f0:	692b      	ldr	r3, [r5, #16]
 80103f2:	b9eb      	cbnz	r3, 8010430 <_vfiprintf_r+0x78>
 80103f4:	4629      	mov	r1, r5
 80103f6:	4630      	mov	r0, r6
 80103f8:	f000 f960 	bl	80106bc <__swsetup_r>
 80103fc:	b1c0      	cbz	r0, 8010430 <_vfiprintf_r+0x78>
 80103fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010400:	07dc      	lsls	r4, r3, #31
 8010402:	d50e      	bpl.n	8010422 <_vfiprintf_r+0x6a>
 8010404:	f04f 30ff 	mov.w	r0, #4294967295
 8010408:	b01d      	add	sp, #116	; 0x74
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040e:	4b7b      	ldr	r3, [pc, #492]	; (80105fc <_vfiprintf_r+0x244>)
 8010410:	429d      	cmp	r5, r3
 8010412:	d101      	bne.n	8010418 <_vfiprintf_r+0x60>
 8010414:	68b5      	ldr	r5, [r6, #8]
 8010416:	e7df      	b.n	80103d8 <_vfiprintf_r+0x20>
 8010418:	4b79      	ldr	r3, [pc, #484]	; (8010600 <_vfiprintf_r+0x248>)
 801041a:	429d      	cmp	r5, r3
 801041c:	bf08      	it	eq
 801041e:	68f5      	ldreq	r5, [r6, #12]
 8010420:	e7da      	b.n	80103d8 <_vfiprintf_r+0x20>
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	0598      	lsls	r0, r3, #22
 8010426:	d4ed      	bmi.n	8010404 <_vfiprintf_r+0x4c>
 8010428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801042a:	f7ff ff46 	bl	80102ba <__retarget_lock_release_recursive>
 801042e:	e7e9      	b.n	8010404 <_vfiprintf_r+0x4c>
 8010430:	2300      	movs	r3, #0
 8010432:	9309      	str	r3, [sp, #36]	; 0x24
 8010434:	2320      	movs	r3, #32
 8010436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801043a:	f8cd 800c 	str.w	r8, [sp, #12]
 801043e:	2330      	movs	r3, #48	; 0x30
 8010440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010604 <_vfiprintf_r+0x24c>
 8010444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010448:	f04f 0901 	mov.w	r9, #1
 801044c:	4623      	mov	r3, r4
 801044e:	469a      	mov	sl, r3
 8010450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010454:	b10a      	cbz	r2, 801045a <_vfiprintf_r+0xa2>
 8010456:	2a25      	cmp	r2, #37	; 0x25
 8010458:	d1f9      	bne.n	801044e <_vfiprintf_r+0x96>
 801045a:	ebba 0b04 	subs.w	fp, sl, r4
 801045e:	d00b      	beq.n	8010478 <_vfiprintf_r+0xc0>
 8010460:	465b      	mov	r3, fp
 8010462:	4622      	mov	r2, r4
 8010464:	4629      	mov	r1, r5
 8010466:	4630      	mov	r0, r6
 8010468:	f7ff ff94 	bl	8010394 <__sfputs_r>
 801046c:	3001      	adds	r0, #1
 801046e:	f000 80aa 	beq.w	80105c6 <_vfiprintf_r+0x20e>
 8010472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010474:	445a      	add	r2, fp
 8010476:	9209      	str	r2, [sp, #36]	; 0x24
 8010478:	f89a 3000 	ldrb.w	r3, [sl]
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 80a2 	beq.w	80105c6 <_vfiprintf_r+0x20e>
 8010482:	2300      	movs	r3, #0
 8010484:	f04f 32ff 	mov.w	r2, #4294967295
 8010488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801048c:	f10a 0a01 	add.w	sl, sl, #1
 8010490:	9304      	str	r3, [sp, #16]
 8010492:	9307      	str	r3, [sp, #28]
 8010494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010498:	931a      	str	r3, [sp, #104]	; 0x68
 801049a:	4654      	mov	r4, sl
 801049c:	2205      	movs	r2, #5
 801049e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a2:	4858      	ldr	r0, [pc, #352]	; (8010604 <_vfiprintf_r+0x24c>)
 80104a4:	f7ef feb4 	bl	8000210 <memchr>
 80104a8:	9a04      	ldr	r2, [sp, #16]
 80104aa:	b9d8      	cbnz	r0, 80104e4 <_vfiprintf_r+0x12c>
 80104ac:	06d1      	lsls	r1, r2, #27
 80104ae:	bf44      	itt	mi
 80104b0:	2320      	movmi	r3, #32
 80104b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104b6:	0713      	lsls	r3, r2, #28
 80104b8:	bf44      	itt	mi
 80104ba:	232b      	movmi	r3, #43	; 0x2b
 80104bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104c0:	f89a 3000 	ldrb.w	r3, [sl]
 80104c4:	2b2a      	cmp	r3, #42	; 0x2a
 80104c6:	d015      	beq.n	80104f4 <_vfiprintf_r+0x13c>
 80104c8:	9a07      	ldr	r2, [sp, #28]
 80104ca:	4654      	mov	r4, sl
 80104cc:	2000      	movs	r0, #0
 80104ce:	f04f 0c0a 	mov.w	ip, #10
 80104d2:	4621      	mov	r1, r4
 80104d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104d8:	3b30      	subs	r3, #48	; 0x30
 80104da:	2b09      	cmp	r3, #9
 80104dc:	d94e      	bls.n	801057c <_vfiprintf_r+0x1c4>
 80104de:	b1b0      	cbz	r0, 801050e <_vfiprintf_r+0x156>
 80104e0:	9207      	str	r2, [sp, #28]
 80104e2:	e014      	b.n	801050e <_vfiprintf_r+0x156>
 80104e4:	eba0 0308 	sub.w	r3, r0, r8
 80104e8:	fa09 f303 	lsl.w	r3, r9, r3
 80104ec:	4313      	orrs	r3, r2
 80104ee:	9304      	str	r3, [sp, #16]
 80104f0:	46a2      	mov	sl, r4
 80104f2:	e7d2      	b.n	801049a <_vfiprintf_r+0xe2>
 80104f4:	9b03      	ldr	r3, [sp, #12]
 80104f6:	1d19      	adds	r1, r3, #4
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	9103      	str	r1, [sp, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfbb      	ittet	lt
 8010500:	425b      	neglt	r3, r3
 8010502:	f042 0202 	orrlt.w	r2, r2, #2
 8010506:	9307      	strge	r3, [sp, #28]
 8010508:	9307      	strlt	r3, [sp, #28]
 801050a:	bfb8      	it	lt
 801050c:	9204      	strlt	r2, [sp, #16]
 801050e:	7823      	ldrb	r3, [r4, #0]
 8010510:	2b2e      	cmp	r3, #46	; 0x2e
 8010512:	d10c      	bne.n	801052e <_vfiprintf_r+0x176>
 8010514:	7863      	ldrb	r3, [r4, #1]
 8010516:	2b2a      	cmp	r3, #42	; 0x2a
 8010518:	d135      	bne.n	8010586 <_vfiprintf_r+0x1ce>
 801051a:	9b03      	ldr	r3, [sp, #12]
 801051c:	1d1a      	adds	r2, r3, #4
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	9203      	str	r2, [sp, #12]
 8010522:	2b00      	cmp	r3, #0
 8010524:	bfb8      	it	lt
 8010526:	f04f 33ff 	movlt.w	r3, #4294967295
 801052a:	3402      	adds	r4, #2
 801052c:	9305      	str	r3, [sp, #20]
 801052e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010614 <_vfiprintf_r+0x25c>
 8010532:	7821      	ldrb	r1, [r4, #0]
 8010534:	2203      	movs	r2, #3
 8010536:	4650      	mov	r0, sl
 8010538:	f7ef fe6a 	bl	8000210 <memchr>
 801053c:	b140      	cbz	r0, 8010550 <_vfiprintf_r+0x198>
 801053e:	2340      	movs	r3, #64	; 0x40
 8010540:	eba0 000a 	sub.w	r0, r0, sl
 8010544:	fa03 f000 	lsl.w	r0, r3, r0
 8010548:	9b04      	ldr	r3, [sp, #16]
 801054a:	4303      	orrs	r3, r0
 801054c:	3401      	adds	r4, #1
 801054e:	9304      	str	r3, [sp, #16]
 8010550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010554:	482c      	ldr	r0, [pc, #176]	; (8010608 <_vfiprintf_r+0x250>)
 8010556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801055a:	2206      	movs	r2, #6
 801055c:	f7ef fe58 	bl	8000210 <memchr>
 8010560:	2800      	cmp	r0, #0
 8010562:	d03f      	beq.n	80105e4 <_vfiprintf_r+0x22c>
 8010564:	4b29      	ldr	r3, [pc, #164]	; (801060c <_vfiprintf_r+0x254>)
 8010566:	bb1b      	cbnz	r3, 80105b0 <_vfiprintf_r+0x1f8>
 8010568:	9b03      	ldr	r3, [sp, #12]
 801056a:	3307      	adds	r3, #7
 801056c:	f023 0307 	bic.w	r3, r3, #7
 8010570:	3308      	adds	r3, #8
 8010572:	9303      	str	r3, [sp, #12]
 8010574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010576:	443b      	add	r3, r7
 8010578:	9309      	str	r3, [sp, #36]	; 0x24
 801057a:	e767      	b.n	801044c <_vfiprintf_r+0x94>
 801057c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010580:	460c      	mov	r4, r1
 8010582:	2001      	movs	r0, #1
 8010584:	e7a5      	b.n	80104d2 <_vfiprintf_r+0x11a>
 8010586:	2300      	movs	r3, #0
 8010588:	3401      	adds	r4, #1
 801058a:	9305      	str	r3, [sp, #20]
 801058c:	4619      	mov	r1, r3
 801058e:	f04f 0c0a 	mov.w	ip, #10
 8010592:	4620      	mov	r0, r4
 8010594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010598:	3a30      	subs	r2, #48	; 0x30
 801059a:	2a09      	cmp	r2, #9
 801059c:	d903      	bls.n	80105a6 <_vfiprintf_r+0x1ee>
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d0c5      	beq.n	801052e <_vfiprintf_r+0x176>
 80105a2:	9105      	str	r1, [sp, #20]
 80105a4:	e7c3      	b.n	801052e <_vfiprintf_r+0x176>
 80105a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80105aa:	4604      	mov	r4, r0
 80105ac:	2301      	movs	r3, #1
 80105ae:	e7f0      	b.n	8010592 <_vfiprintf_r+0x1da>
 80105b0:	ab03      	add	r3, sp, #12
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	462a      	mov	r2, r5
 80105b6:	4b16      	ldr	r3, [pc, #88]	; (8010610 <_vfiprintf_r+0x258>)
 80105b8:	a904      	add	r1, sp, #16
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7fb f9ce 	bl	800b95c <_printf_float>
 80105c0:	4607      	mov	r7, r0
 80105c2:	1c78      	adds	r0, r7, #1
 80105c4:	d1d6      	bne.n	8010574 <_vfiprintf_r+0x1bc>
 80105c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105c8:	07d9      	lsls	r1, r3, #31
 80105ca:	d405      	bmi.n	80105d8 <_vfiprintf_r+0x220>
 80105cc:	89ab      	ldrh	r3, [r5, #12]
 80105ce:	059a      	lsls	r2, r3, #22
 80105d0:	d402      	bmi.n	80105d8 <_vfiprintf_r+0x220>
 80105d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105d4:	f7ff fe71 	bl	80102ba <__retarget_lock_release_recursive>
 80105d8:	89ab      	ldrh	r3, [r5, #12]
 80105da:	065b      	lsls	r3, r3, #25
 80105dc:	f53f af12 	bmi.w	8010404 <_vfiprintf_r+0x4c>
 80105e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105e2:	e711      	b.n	8010408 <_vfiprintf_r+0x50>
 80105e4:	ab03      	add	r3, sp, #12
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	462a      	mov	r2, r5
 80105ea:	4b09      	ldr	r3, [pc, #36]	; (8010610 <_vfiprintf_r+0x258>)
 80105ec:	a904      	add	r1, sp, #16
 80105ee:	4630      	mov	r0, r6
 80105f0:	f7fb fc58 	bl	800bea4 <_printf_i>
 80105f4:	e7e4      	b.n	80105c0 <_vfiprintf_r+0x208>
 80105f6:	bf00      	nop
 80105f8:	0801190c 	.word	0x0801190c
 80105fc:	0801192c 	.word	0x0801192c
 8010600:	080118ec 	.word	0x080118ec
 8010604:	08011884 	.word	0x08011884
 8010608:	0801188e 	.word	0x0801188e
 801060c:	0800b95d 	.word	0x0800b95d
 8010610:	08010395 	.word	0x08010395
 8010614:	0801188a 	.word	0x0801188a

08010618 <__swbuf_r>:
 8010618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061a:	460e      	mov	r6, r1
 801061c:	4614      	mov	r4, r2
 801061e:	4605      	mov	r5, r0
 8010620:	b118      	cbz	r0, 801062a <__swbuf_r+0x12>
 8010622:	6983      	ldr	r3, [r0, #24]
 8010624:	b90b      	cbnz	r3, 801062a <__swbuf_r+0x12>
 8010626:	f7ff fd97 	bl	8010158 <__sinit>
 801062a:	4b21      	ldr	r3, [pc, #132]	; (80106b0 <__swbuf_r+0x98>)
 801062c:	429c      	cmp	r4, r3
 801062e:	d12b      	bne.n	8010688 <__swbuf_r+0x70>
 8010630:	686c      	ldr	r4, [r5, #4]
 8010632:	69a3      	ldr	r3, [r4, #24]
 8010634:	60a3      	str	r3, [r4, #8]
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	071a      	lsls	r2, r3, #28
 801063a:	d52f      	bpl.n	801069c <__swbuf_r+0x84>
 801063c:	6923      	ldr	r3, [r4, #16]
 801063e:	b36b      	cbz	r3, 801069c <__swbuf_r+0x84>
 8010640:	6923      	ldr	r3, [r4, #16]
 8010642:	6820      	ldr	r0, [r4, #0]
 8010644:	1ac0      	subs	r0, r0, r3
 8010646:	6963      	ldr	r3, [r4, #20]
 8010648:	b2f6      	uxtb	r6, r6
 801064a:	4283      	cmp	r3, r0
 801064c:	4637      	mov	r7, r6
 801064e:	dc04      	bgt.n	801065a <__swbuf_r+0x42>
 8010650:	4621      	mov	r1, r4
 8010652:	4628      	mov	r0, r5
 8010654:	f7ff fcec 	bl	8010030 <_fflush_r>
 8010658:	bb30      	cbnz	r0, 80106a8 <__swbuf_r+0x90>
 801065a:	68a3      	ldr	r3, [r4, #8]
 801065c:	3b01      	subs	r3, #1
 801065e:	60a3      	str	r3, [r4, #8]
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	1c5a      	adds	r2, r3, #1
 8010664:	6022      	str	r2, [r4, #0]
 8010666:	701e      	strb	r6, [r3, #0]
 8010668:	6963      	ldr	r3, [r4, #20]
 801066a:	3001      	adds	r0, #1
 801066c:	4283      	cmp	r3, r0
 801066e:	d004      	beq.n	801067a <__swbuf_r+0x62>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	07db      	lsls	r3, r3, #31
 8010674:	d506      	bpl.n	8010684 <__swbuf_r+0x6c>
 8010676:	2e0a      	cmp	r6, #10
 8010678:	d104      	bne.n	8010684 <__swbuf_r+0x6c>
 801067a:	4621      	mov	r1, r4
 801067c:	4628      	mov	r0, r5
 801067e:	f7ff fcd7 	bl	8010030 <_fflush_r>
 8010682:	b988      	cbnz	r0, 80106a8 <__swbuf_r+0x90>
 8010684:	4638      	mov	r0, r7
 8010686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010688:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <__swbuf_r+0x9c>)
 801068a:	429c      	cmp	r4, r3
 801068c:	d101      	bne.n	8010692 <__swbuf_r+0x7a>
 801068e:	68ac      	ldr	r4, [r5, #8]
 8010690:	e7cf      	b.n	8010632 <__swbuf_r+0x1a>
 8010692:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <__swbuf_r+0xa0>)
 8010694:	429c      	cmp	r4, r3
 8010696:	bf08      	it	eq
 8010698:	68ec      	ldreq	r4, [r5, #12]
 801069a:	e7ca      	b.n	8010632 <__swbuf_r+0x1a>
 801069c:	4621      	mov	r1, r4
 801069e:	4628      	mov	r0, r5
 80106a0:	f000 f80c 	bl	80106bc <__swsetup_r>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d0cb      	beq.n	8010640 <__swbuf_r+0x28>
 80106a8:	f04f 37ff 	mov.w	r7, #4294967295
 80106ac:	e7ea      	b.n	8010684 <__swbuf_r+0x6c>
 80106ae:	bf00      	nop
 80106b0:	0801190c 	.word	0x0801190c
 80106b4:	0801192c 	.word	0x0801192c
 80106b8:	080118ec 	.word	0x080118ec

080106bc <__swsetup_r>:
 80106bc:	4b32      	ldr	r3, [pc, #200]	; (8010788 <__swsetup_r+0xcc>)
 80106be:	b570      	push	{r4, r5, r6, lr}
 80106c0:	681d      	ldr	r5, [r3, #0]
 80106c2:	4606      	mov	r6, r0
 80106c4:	460c      	mov	r4, r1
 80106c6:	b125      	cbz	r5, 80106d2 <__swsetup_r+0x16>
 80106c8:	69ab      	ldr	r3, [r5, #24]
 80106ca:	b913      	cbnz	r3, 80106d2 <__swsetup_r+0x16>
 80106cc:	4628      	mov	r0, r5
 80106ce:	f7ff fd43 	bl	8010158 <__sinit>
 80106d2:	4b2e      	ldr	r3, [pc, #184]	; (801078c <__swsetup_r+0xd0>)
 80106d4:	429c      	cmp	r4, r3
 80106d6:	d10f      	bne.n	80106f8 <__swsetup_r+0x3c>
 80106d8:	686c      	ldr	r4, [r5, #4]
 80106da:	89a3      	ldrh	r3, [r4, #12]
 80106dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106e0:	0719      	lsls	r1, r3, #28
 80106e2:	d42c      	bmi.n	801073e <__swsetup_r+0x82>
 80106e4:	06dd      	lsls	r5, r3, #27
 80106e6:	d411      	bmi.n	801070c <__swsetup_r+0x50>
 80106e8:	2309      	movs	r3, #9
 80106ea:	6033      	str	r3, [r6, #0]
 80106ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106f0:	81a3      	strh	r3, [r4, #12]
 80106f2:	f04f 30ff 	mov.w	r0, #4294967295
 80106f6:	e03e      	b.n	8010776 <__swsetup_r+0xba>
 80106f8:	4b25      	ldr	r3, [pc, #148]	; (8010790 <__swsetup_r+0xd4>)
 80106fa:	429c      	cmp	r4, r3
 80106fc:	d101      	bne.n	8010702 <__swsetup_r+0x46>
 80106fe:	68ac      	ldr	r4, [r5, #8]
 8010700:	e7eb      	b.n	80106da <__swsetup_r+0x1e>
 8010702:	4b24      	ldr	r3, [pc, #144]	; (8010794 <__swsetup_r+0xd8>)
 8010704:	429c      	cmp	r4, r3
 8010706:	bf08      	it	eq
 8010708:	68ec      	ldreq	r4, [r5, #12]
 801070a:	e7e6      	b.n	80106da <__swsetup_r+0x1e>
 801070c:	0758      	lsls	r0, r3, #29
 801070e:	d512      	bpl.n	8010736 <__swsetup_r+0x7a>
 8010710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010712:	b141      	cbz	r1, 8010726 <__swsetup_r+0x6a>
 8010714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010718:	4299      	cmp	r1, r3
 801071a:	d002      	beq.n	8010722 <__swsetup_r+0x66>
 801071c:	4630      	mov	r0, r6
 801071e:	f7fe fd65 	bl	800f1ec <_free_r>
 8010722:	2300      	movs	r3, #0
 8010724:	6363      	str	r3, [r4, #52]	; 0x34
 8010726:	89a3      	ldrh	r3, [r4, #12]
 8010728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801072c:	81a3      	strh	r3, [r4, #12]
 801072e:	2300      	movs	r3, #0
 8010730:	6063      	str	r3, [r4, #4]
 8010732:	6923      	ldr	r3, [r4, #16]
 8010734:	6023      	str	r3, [r4, #0]
 8010736:	89a3      	ldrh	r3, [r4, #12]
 8010738:	f043 0308 	orr.w	r3, r3, #8
 801073c:	81a3      	strh	r3, [r4, #12]
 801073e:	6923      	ldr	r3, [r4, #16]
 8010740:	b94b      	cbnz	r3, 8010756 <__swsetup_r+0x9a>
 8010742:	89a3      	ldrh	r3, [r4, #12]
 8010744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801074c:	d003      	beq.n	8010756 <__swsetup_r+0x9a>
 801074e:	4621      	mov	r1, r4
 8010750:	4630      	mov	r0, r6
 8010752:	f000 f84d 	bl	80107f0 <__smakebuf_r>
 8010756:	89a0      	ldrh	r0, [r4, #12]
 8010758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801075c:	f010 0301 	ands.w	r3, r0, #1
 8010760:	d00a      	beq.n	8010778 <__swsetup_r+0xbc>
 8010762:	2300      	movs	r3, #0
 8010764:	60a3      	str	r3, [r4, #8]
 8010766:	6963      	ldr	r3, [r4, #20]
 8010768:	425b      	negs	r3, r3
 801076a:	61a3      	str	r3, [r4, #24]
 801076c:	6923      	ldr	r3, [r4, #16]
 801076e:	b943      	cbnz	r3, 8010782 <__swsetup_r+0xc6>
 8010770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010774:	d1ba      	bne.n	80106ec <__swsetup_r+0x30>
 8010776:	bd70      	pop	{r4, r5, r6, pc}
 8010778:	0781      	lsls	r1, r0, #30
 801077a:	bf58      	it	pl
 801077c:	6963      	ldrpl	r3, [r4, #20]
 801077e:	60a3      	str	r3, [r4, #8]
 8010780:	e7f4      	b.n	801076c <__swsetup_r+0xb0>
 8010782:	2000      	movs	r0, #0
 8010784:	e7f7      	b.n	8010776 <__swsetup_r+0xba>
 8010786:	bf00      	nop
 8010788:	200000b8 	.word	0x200000b8
 801078c:	0801190c 	.word	0x0801190c
 8010790:	0801192c 	.word	0x0801192c
 8010794:	080118ec 	.word	0x080118ec

08010798 <abort>:
 8010798:	b508      	push	{r3, lr}
 801079a:	2006      	movs	r0, #6
 801079c:	f000 f898 	bl	80108d0 <raise>
 80107a0:	2001      	movs	r0, #1
 80107a2:	f7f4 f967 	bl	8004a74 <_exit>

080107a6 <__swhatbuf_r>:
 80107a6:	b570      	push	{r4, r5, r6, lr}
 80107a8:	460e      	mov	r6, r1
 80107aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ae:	2900      	cmp	r1, #0
 80107b0:	b096      	sub	sp, #88	; 0x58
 80107b2:	4614      	mov	r4, r2
 80107b4:	461d      	mov	r5, r3
 80107b6:	da08      	bge.n	80107ca <__swhatbuf_r+0x24>
 80107b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	602a      	str	r2, [r5, #0]
 80107c0:	061a      	lsls	r2, r3, #24
 80107c2:	d410      	bmi.n	80107e6 <__swhatbuf_r+0x40>
 80107c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107c8:	e00e      	b.n	80107e8 <__swhatbuf_r+0x42>
 80107ca:	466a      	mov	r2, sp
 80107cc:	f000 f89c 	bl	8010908 <_fstat_r>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	dbf1      	blt.n	80107b8 <__swhatbuf_r+0x12>
 80107d4:	9a01      	ldr	r2, [sp, #4]
 80107d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107de:	425a      	negs	r2, r3
 80107e0:	415a      	adcs	r2, r3
 80107e2:	602a      	str	r2, [r5, #0]
 80107e4:	e7ee      	b.n	80107c4 <__swhatbuf_r+0x1e>
 80107e6:	2340      	movs	r3, #64	; 0x40
 80107e8:	2000      	movs	r0, #0
 80107ea:	6023      	str	r3, [r4, #0]
 80107ec:	b016      	add	sp, #88	; 0x58
 80107ee:	bd70      	pop	{r4, r5, r6, pc}

080107f0 <__smakebuf_r>:
 80107f0:	898b      	ldrh	r3, [r1, #12]
 80107f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107f4:	079d      	lsls	r5, r3, #30
 80107f6:	4606      	mov	r6, r0
 80107f8:	460c      	mov	r4, r1
 80107fa:	d507      	bpl.n	801080c <__smakebuf_r+0x1c>
 80107fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	6123      	str	r3, [r4, #16]
 8010804:	2301      	movs	r3, #1
 8010806:	6163      	str	r3, [r4, #20]
 8010808:	b002      	add	sp, #8
 801080a:	bd70      	pop	{r4, r5, r6, pc}
 801080c:	ab01      	add	r3, sp, #4
 801080e:	466a      	mov	r2, sp
 8010810:	f7ff ffc9 	bl	80107a6 <__swhatbuf_r>
 8010814:	9900      	ldr	r1, [sp, #0]
 8010816:	4605      	mov	r5, r0
 8010818:	4630      	mov	r0, r6
 801081a:	f7fe fd53 	bl	800f2c4 <_malloc_r>
 801081e:	b948      	cbnz	r0, 8010834 <__smakebuf_r+0x44>
 8010820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010824:	059a      	lsls	r2, r3, #22
 8010826:	d4ef      	bmi.n	8010808 <__smakebuf_r+0x18>
 8010828:	f023 0303 	bic.w	r3, r3, #3
 801082c:	f043 0302 	orr.w	r3, r3, #2
 8010830:	81a3      	strh	r3, [r4, #12]
 8010832:	e7e3      	b.n	80107fc <__smakebuf_r+0xc>
 8010834:	4b0d      	ldr	r3, [pc, #52]	; (801086c <__smakebuf_r+0x7c>)
 8010836:	62b3      	str	r3, [r6, #40]	; 0x28
 8010838:	89a3      	ldrh	r3, [r4, #12]
 801083a:	6020      	str	r0, [r4, #0]
 801083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010840:	81a3      	strh	r3, [r4, #12]
 8010842:	9b00      	ldr	r3, [sp, #0]
 8010844:	6163      	str	r3, [r4, #20]
 8010846:	9b01      	ldr	r3, [sp, #4]
 8010848:	6120      	str	r0, [r4, #16]
 801084a:	b15b      	cbz	r3, 8010864 <__smakebuf_r+0x74>
 801084c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010850:	4630      	mov	r0, r6
 8010852:	f000 f86b 	bl	801092c <_isatty_r>
 8010856:	b128      	cbz	r0, 8010864 <__smakebuf_r+0x74>
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	f023 0303 	bic.w	r3, r3, #3
 801085e:	f043 0301 	orr.w	r3, r3, #1
 8010862:	81a3      	strh	r3, [r4, #12]
 8010864:	89a0      	ldrh	r0, [r4, #12]
 8010866:	4305      	orrs	r5, r0
 8010868:	81a5      	strh	r5, [r4, #12]
 801086a:	e7cd      	b.n	8010808 <__smakebuf_r+0x18>
 801086c:	080100f1 	.word	0x080100f1

08010870 <_malloc_usable_size_r>:
 8010870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010874:	1f18      	subs	r0, r3, #4
 8010876:	2b00      	cmp	r3, #0
 8010878:	bfbc      	itt	lt
 801087a:	580b      	ldrlt	r3, [r1, r0]
 801087c:	18c0      	addlt	r0, r0, r3
 801087e:	4770      	bx	lr

08010880 <_raise_r>:
 8010880:	291f      	cmp	r1, #31
 8010882:	b538      	push	{r3, r4, r5, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	460d      	mov	r5, r1
 8010888:	d904      	bls.n	8010894 <_raise_r+0x14>
 801088a:	2316      	movs	r3, #22
 801088c:	6003      	str	r3, [r0, #0]
 801088e:	f04f 30ff 	mov.w	r0, #4294967295
 8010892:	bd38      	pop	{r3, r4, r5, pc}
 8010894:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010896:	b112      	cbz	r2, 801089e <_raise_r+0x1e>
 8010898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801089c:	b94b      	cbnz	r3, 80108b2 <_raise_r+0x32>
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 f830 	bl	8010904 <_getpid_r>
 80108a4:	462a      	mov	r2, r5
 80108a6:	4601      	mov	r1, r0
 80108a8:	4620      	mov	r0, r4
 80108aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ae:	f000 b817 	b.w	80108e0 <_kill_r>
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d00a      	beq.n	80108cc <_raise_r+0x4c>
 80108b6:	1c59      	adds	r1, r3, #1
 80108b8:	d103      	bne.n	80108c2 <_raise_r+0x42>
 80108ba:	2316      	movs	r3, #22
 80108bc:	6003      	str	r3, [r0, #0]
 80108be:	2001      	movs	r0, #1
 80108c0:	e7e7      	b.n	8010892 <_raise_r+0x12>
 80108c2:	2400      	movs	r4, #0
 80108c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108c8:	4628      	mov	r0, r5
 80108ca:	4798      	blx	r3
 80108cc:	2000      	movs	r0, #0
 80108ce:	e7e0      	b.n	8010892 <_raise_r+0x12>

080108d0 <raise>:
 80108d0:	4b02      	ldr	r3, [pc, #8]	; (80108dc <raise+0xc>)
 80108d2:	4601      	mov	r1, r0
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	f7ff bfd3 	b.w	8010880 <_raise_r>
 80108da:	bf00      	nop
 80108dc:	200000b8 	.word	0x200000b8

080108e0 <_kill_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4d07      	ldr	r5, [pc, #28]	; (8010900 <_kill_r+0x20>)
 80108e4:	2300      	movs	r3, #0
 80108e6:	4604      	mov	r4, r0
 80108e8:	4608      	mov	r0, r1
 80108ea:	4611      	mov	r1, r2
 80108ec:	602b      	str	r3, [r5, #0]
 80108ee:	f7f4 f8b1 	bl	8004a54 <_kill>
 80108f2:	1c43      	adds	r3, r0, #1
 80108f4:	d102      	bne.n	80108fc <_kill_r+0x1c>
 80108f6:	682b      	ldr	r3, [r5, #0]
 80108f8:	b103      	cbz	r3, 80108fc <_kill_r+0x1c>
 80108fa:	6023      	str	r3, [r4, #0]
 80108fc:	bd38      	pop	{r3, r4, r5, pc}
 80108fe:	bf00      	nop
 8010900:	20005030 	.word	0x20005030

08010904 <_getpid_r>:
 8010904:	f7f4 b89e 	b.w	8004a44 <_getpid>

08010908 <_fstat_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4d07      	ldr	r5, [pc, #28]	; (8010928 <_fstat_r+0x20>)
 801090c:	2300      	movs	r3, #0
 801090e:	4604      	mov	r4, r0
 8010910:	4608      	mov	r0, r1
 8010912:	4611      	mov	r1, r2
 8010914:	602b      	str	r3, [r5, #0]
 8010916:	f7f4 f8fc 	bl	8004b12 <_fstat>
 801091a:	1c43      	adds	r3, r0, #1
 801091c:	d102      	bne.n	8010924 <_fstat_r+0x1c>
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	b103      	cbz	r3, 8010924 <_fstat_r+0x1c>
 8010922:	6023      	str	r3, [r4, #0]
 8010924:	bd38      	pop	{r3, r4, r5, pc}
 8010926:	bf00      	nop
 8010928:	20005030 	.word	0x20005030

0801092c <_isatty_r>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	4d06      	ldr	r5, [pc, #24]	; (8010948 <_isatty_r+0x1c>)
 8010930:	2300      	movs	r3, #0
 8010932:	4604      	mov	r4, r0
 8010934:	4608      	mov	r0, r1
 8010936:	602b      	str	r3, [r5, #0]
 8010938:	f7f4 f8fb 	bl	8004b32 <_isatty>
 801093c:	1c43      	adds	r3, r0, #1
 801093e:	d102      	bne.n	8010946 <_isatty_r+0x1a>
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	b103      	cbz	r3, 8010946 <_isatty_r+0x1a>
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	bd38      	pop	{r3, r4, r5, pc}
 8010948:	20005030 	.word	0x20005030
 801094c:	00000000 	.word	0x00000000

08010950 <atan>:
 8010950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	ec55 4b10 	vmov	r4, r5, d0
 8010958:	4bc3      	ldr	r3, [pc, #780]	; (8010c68 <atan+0x318>)
 801095a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801095e:	429e      	cmp	r6, r3
 8010960:	46ab      	mov	fp, r5
 8010962:	dd18      	ble.n	8010996 <atan+0x46>
 8010964:	4bc1      	ldr	r3, [pc, #772]	; (8010c6c <atan+0x31c>)
 8010966:	429e      	cmp	r6, r3
 8010968:	dc01      	bgt.n	801096e <atan+0x1e>
 801096a:	d109      	bne.n	8010980 <atan+0x30>
 801096c:	b144      	cbz	r4, 8010980 <atan+0x30>
 801096e:	4622      	mov	r2, r4
 8010970:	462b      	mov	r3, r5
 8010972:	4620      	mov	r0, r4
 8010974:	4629      	mov	r1, r5
 8010976:	f7ef fca1 	bl	80002bc <__adddf3>
 801097a:	4604      	mov	r4, r0
 801097c:	460d      	mov	r5, r1
 801097e:	e006      	b.n	801098e <atan+0x3e>
 8010980:	f1bb 0f00 	cmp.w	fp, #0
 8010984:	f300 8131 	bgt.w	8010bea <atan+0x29a>
 8010988:	a59b      	add	r5, pc, #620	; (adr r5, 8010bf8 <atan+0x2a8>)
 801098a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801098e:	ec45 4b10 	vmov	d0, r4, r5
 8010992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010996:	4bb6      	ldr	r3, [pc, #728]	; (8010c70 <atan+0x320>)
 8010998:	429e      	cmp	r6, r3
 801099a:	dc14      	bgt.n	80109c6 <atan+0x76>
 801099c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80109a0:	429e      	cmp	r6, r3
 80109a2:	dc0d      	bgt.n	80109c0 <atan+0x70>
 80109a4:	a396      	add	r3, pc, #600	; (adr r3, 8010c00 <atan+0x2b0>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	ee10 0a10 	vmov	r0, s0
 80109ae:	4629      	mov	r1, r5
 80109b0:	f7ef fc84 	bl	80002bc <__adddf3>
 80109b4:	4baf      	ldr	r3, [pc, #700]	; (8010c74 <atan+0x324>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	f7f0 f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1e6      	bne.n	801098e <atan+0x3e>
 80109c0:	f04f 3aff 	mov.w	sl, #4294967295
 80109c4:	e02b      	b.n	8010a1e <atan+0xce>
 80109c6:	f000 f963 	bl	8010c90 <fabs>
 80109ca:	4bab      	ldr	r3, [pc, #684]	; (8010c78 <atan+0x328>)
 80109cc:	429e      	cmp	r6, r3
 80109ce:	ec55 4b10 	vmov	r4, r5, d0
 80109d2:	f300 80bf 	bgt.w	8010b54 <atan+0x204>
 80109d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80109da:	429e      	cmp	r6, r3
 80109dc:	f300 80a0 	bgt.w	8010b20 <atan+0x1d0>
 80109e0:	ee10 2a10 	vmov	r2, s0
 80109e4:	ee10 0a10 	vmov	r0, s0
 80109e8:	462b      	mov	r3, r5
 80109ea:	4629      	mov	r1, r5
 80109ec:	f7ef fc66 	bl	80002bc <__adddf3>
 80109f0:	4ba0      	ldr	r3, [pc, #640]	; (8010c74 <atan+0x324>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	f7ef fc60 	bl	80002b8 <__aeabi_dsub>
 80109f8:	2200      	movs	r2, #0
 80109fa:	4606      	mov	r6, r0
 80109fc:	460f      	mov	r7, r1
 80109fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010a02:	4620      	mov	r0, r4
 8010a04:	4629      	mov	r1, r5
 8010a06:	f7ef fc59 	bl	80002bc <__adddf3>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4630      	mov	r0, r6
 8010a10:	4639      	mov	r1, r7
 8010a12:	f7ef ff33 	bl	800087c <__aeabi_ddiv>
 8010a16:	f04f 0a00 	mov.w	sl, #0
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	460d      	mov	r5, r1
 8010a1e:	4622      	mov	r2, r4
 8010a20:	462b      	mov	r3, r5
 8010a22:	4620      	mov	r0, r4
 8010a24:	4629      	mov	r1, r5
 8010a26:	f7ef fdff 	bl	8000628 <__aeabi_dmul>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4680      	mov	r8, r0
 8010a30:	4689      	mov	r9, r1
 8010a32:	f7ef fdf9 	bl	8000628 <__aeabi_dmul>
 8010a36:	a374      	add	r3, pc, #464	; (adr r3, 8010c08 <atan+0x2b8>)
 8010a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	460f      	mov	r7, r1
 8010a40:	f7ef fdf2 	bl	8000628 <__aeabi_dmul>
 8010a44:	a372      	add	r3, pc, #456	; (adr r3, 8010c10 <atan+0x2c0>)
 8010a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4a:	f7ef fc37 	bl	80002bc <__adddf3>
 8010a4e:	4632      	mov	r2, r6
 8010a50:	463b      	mov	r3, r7
 8010a52:	f7ef fde9 	bl	8000628 <__aeabi_dmul>
 8010a56:	a370      	add	r3, pc, #448	; (adr r3, 8010c18 <atan+0x2c8>)
 8010a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5c:	f7ef fc2e 	bl	80002bc <__adddf3>
 8010a60:	4632      	mov	r2, r6
 8010a62:	463b      	mov	r3, r7
 8010a64:	f7ef fde0 	bl	8000628 <__aeabi_dmul>
 8010a68:	a36d      	add	r3, pc, #436	; (adr r3, 8010c20 <atan+0x2d0>)
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	f7ef fc25 	bl	80002bc <__adddf3>
 8010a72:	4632      	mov	r2, r6
 8010a74:	463b      	mov	r3, r7
 8010a76:	f7ef fdd7 	bl	8000628 <__aeabi_dmul>
 8010a7a:	a36b      	add	r3, pc, #428	; (adr r3, 8010c28 <atan+0x2d8>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	f7ef fc1c 	bl	80002bc <__adddf3>
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	f7ef fdce 	bl	8000628 <__aeabi_dmul>
 8010a8c:	a368      	add	r3, pc, #416	; (adr r3, 8010c30 <atan+0x2e0>)
 8010a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a92:	f7ef fc13 	bl	80002bc <__adddf3>
 8010a96:	4642      	mov	r2, r8
 8010a98:	464b      	mov	r3, r9
 8010a9a:	f7ef fdc5 	bl	8000628 <__aeabi_dmul>
 8010a9e:	a366      	add	r3, pc, #408	; (adr r3, 8010c38 <atan+0x2e8>)
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	4689      	mov	r9, r1
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	4639      	mov	r1, r7
 8010aac:	f7ef fdbc 	bl	8000628 <__aeabi_dmul>
 8010ab0:	a363      	add	r3, pc, #396	; (adr r3, 8010c40 <atan+0x2f0>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	f7ef fbff 	bl	80002b8 <__aeabi_dsub>
 8010aba:	4632      	mov	r2, r6
 8010abc:	463b      	mov	r3, r7
 8010abe:	f7ef fdb3 	bl	8000628 <__aeabi_dmul>
 8010ac2:	a361      	add	r3, pc, #388	; (adr r3, 8010c48 <atan+0x2f8>)
 8010ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac8:	f7ef fbf6 	bl	80002b8 <__aeabi_dsub>
 8010acc:	4632      	mov	r2, r6
 8010ace:	463b      	mov	r3, r7
 8010ad0:	f7ef fdaa 	bl	8000628 <__aeabi_dmul>
 8010ad4:	a35e      	add	r3, pc, #376	; (adr r3, 8010c50 <atan+0x300>)
 8010ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ada:	f7ef fbed 	bl	80002b8 <__aeabi_dsub>
 8010ade:	4632      	mov	r2, r6
 8010ae0:	463b      	mov	r3, r7
 8010ae2:	f7ef fda1 	bl	8000628 <__aeabi_dmul>
 8010ae6:	a35c      	add	r3, pc, #368	; (adr r3, 8010c58 <atan+0x308>)
 8010ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aec:	f7ef fbe4 	bl	80002b8 <__aeabi_dsub>
 8010af0:	4632      	mov	r2, r6
 8010af2:	463b      	mov	r3, r7
 8010af4:	f7ef fd98 	bl	8000628 <__aeabi_dmul>
 8010af8:	4602      	mov	r2, r0
 8010afa:	460b      	mov	r3, r1
 8010afc:	4640      	mov	r0, r8
 8010afe:	4649      	mov	r1, r9
 8010b00:	f7ef fbdc 	bl	80002bc <__adddf3>
 8010b04:	4622      	mov	r2, r4
 8010b06:	462b      	mov	r3, r5
 8010b08:	f7ef fd8e 	bl	8000628 <__aeabi_dmul>
 8010b0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	d14b      	bne.n	8010bae <atan+0x25e>
 8010b16:	4620      	mov	r0, r4
 8010b18:	4629      	mov	r1, r5
 8010b1a:	f7ef fbcd 	bl	80002b8 <__aeabi_dsub>
 8010b1e:	e72c      	b.n	801097a <atan+0x2a>
 8010b20:	ee10 0a10 	vmov	r0, s0
 8010b24:	4b53      	ldr	r3, [pc, #332]	; (8010c74 <atan+0x324>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	4629      	mov	r1, r5
 8010b2a:	f7ef fbc5 	bl	80002b8 <__aeabi_dsub>
 8010b2e:	4b51      	ldr	r3, [pc, #324]	; (8010c74 <atan+0x324>)
 8010b30:	4606      	mov	r6, r0
 8010b32:	460f      	mov	r7, r1
 8010b34:	2200      	movs	r2, #0
 8010b36:	4620      	mov	r0, r4
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f7ef fbbf 	bl	80002bc <__adddf3>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	460b      	mov	r3, r1
 8010b42:	4630      	mov	r0, r6
 8010b44:	4639      	mov	r1, r7
 8010b46:	f7ef fe99 	bl	800087c <__aeabi_ddiv>
 8010b4a:	f04f 0a01 	mov.w	sl, #1
 8010b4e:	4604      	mov	r4, r0
 8010b50:	460d      	mov	r5, r1
 8010b52:	e764      	b.n	8010a1e <atan+0xce>
 8010b54:	4b49      	ldr	r3, [pc, #292]	; (8010c7c <atan+0x32c>)
 8010b56:	429e      	cmp	r6, r3
 8010b58:	da1d      	bge.n	8010b96 <atan+0x246>
 8010b5a:	ee10 0a10 	vmov	r0, s0
 8010b5e:	4b48      	ldr	r3, [pc, #288]	; (8010c80 <atan+0x330>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	4629      	mov	r1, r5
 8010b64:	f7ef fba8 	bl	80002b8 <__aeabi_dsub>
 8010b68:	4b45      	ldr	r3, [pc, #276]	; (8010c80 <atan+0x330>)
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	2200      	movs	r2, #0
 8010b70:	4620      	mov	r0, r4
 8010b72:	4629      	mov	r1, r5
 8010b74:	f7ef fd58 	bl	8000628 <__aeabi_dmul>
 8010b78:	4b3e      	ldr	r3, [pc, #248]	; (8010c74 <atan+0x324>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f7ef fb9e 	bl	80002bc <__adddf3>
 8010b80:	4602      	mov	r2, r0
 8010b82:	460b      	mov	r3, r1
 8010b84:	4630      	mov	r0, r6
 8010b86:	4639      	mov	r1, r7
 8010b88:	f7ef fe78 	bl	800087c <__aeabi_ddiv>
 8010b8c:	f04f 0a02 	mov.w	sl, #2
 8010b90:	4604      	mov	r4, r0
 8010b92:	460d      	mov	r5, r1
 8010b94:	e743      	b.n	8010a1e <atan+0xce>
 8010b96:	462b      	mov	r3, r5
 8010b98:	ee10 2a10 	vmov	r2, s0
 8010b9c:	4939      	ldr	r1, [pc, #228]	; (8010c84 <atan+0x334>)
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	f7ef fe6c 	bl	800087c <__aeabi_ddiv>
 8010ba4:	f04f 0a03 	mov.w	sl, #3
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	e737      	b.n	8010a1e <atan+0xce>
 8010bae:	4b36      	ldr	r3, [pc, #216]	; (8010c88 <atan+0x338>)
 8010bb0:	4e36      	ldr	r6, [pc, #216]	; (8010c8c <atan+0x33c>)
 8010bb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010bb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010bba:	e9da 2300 	ldrd	r2, r3, [sl]
 8010bbe:	f7ef fb7b 	bl	80002b8 <__aeabi_dsub>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	462b      	mov	r3, r5
 8010bc6:	f7ef fb77 	bl	80002b8 <__aeabi_dsub>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010bd2:	f7ef fb71 	bl	80002b8 <__aeabi_dsub>
 8010bd6:	f1bb 0f00 	cmp.w	fp, #0
 8010bda:	4604      	mov	r4, r0
 8010bdc:	460d      	mov	r5, r1
 8010bde:	f6bf aed6 	bge.w	801098e <atan+0x3e>
 8010be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010be6:	461d      	mov	r5, r3
 8010be8:	e6d1      	b.n	801098e <atan+0x3e>
 8010bea:	a51d      	add	r5, pc, #116	; (adr r5, 8010c60 <atan+0x310>)
 8010bec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010bf0:	e6cd      	b.n	801098e <atan+0x3e>
 8010bf2:	bf00      	nop
 8010bf4:	f3af 8000 	nop.w
 8010bf8:	54442d18 	.word	0x54442d18
 8010bfc:	bff921fb 	.word	0xbff921fb
 8010c00:	8800759c 	.word	0x8800759c
 8010c04:	7e37e43c 	.word	0x7e37e43c
 8010c08:	e322da11 	.word	0xe322da11
 8010c0c:	3f90ad3a 	.word	0x3f90ad3a
 8010c10:	24760deb 	.word	0x24760deb
 8010c14:	3fa97b4b 	.word	0x3fa97b4b
 8010c18:	a0d03d51 	.word	0xa0d03d51
 8010c1c:	3fb10d66 	.word	0x3fb10d66
 8010c20:	c54c206e 	.word	0xc54c206e
 8010c24:	3fb745cd 	.word	0x3fb745cd
 8010c28:	920083ff 	.word	0x920083ff
 8010c2c:	3fc24924 	.word	0x3fc24924
 8010c30:	5555550d 	.word	0x5555550d
 8010c34:	3fd55555 	.word	0x3fd55555
 8010c38:	2c6a6c2f 	.word	0x2c6a6c2f
 8010c3c:	bfa2b444 	.word	0xbfa2b444
 8010c40:	52defd9a 	.word	0x52defd9a
 8010c44:	3fadde2d 	.word	0x3fadde2d
 8010c48:	af749a6d 	.word	0xaf749a6d
 8010c4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010c50:	fe231671 	.word	0xfe231671
 8010c54:	3fbc71c6 	.word	0x3fbc71c6
 8010c58:	9998ebc4 	.word	0x9998ebc4
 8010c5c:	3fc99999 	.word	0x3fc99999
 8010c60:	54442d18 	.word	0x54442d18
 8010c64:	3ff921fb 	.word	0x3ff921fb
 8010c68:	440fffff 	.word	0x440fffff
 8010c6c:	7ff00000 	.word	0x7ff00000
 8010c70:	3fdbffff 	.word	0x3fdbffff
 8010c74:	3ff00000 	.word	0x3ff00000
 8010c78:	3ff2ffff 	.word	0x3ff2ffff
 8010c7c:	40038000 	.word	0x40038000
 8010c80:	3ff80000 	.word	0x3ff80000
 8010c84:	bff00000 	.word	0xbff00000
 8010c88:	08011970 	.word	0x08011970
 8010c8c:	08011950 	.word	0x08011950

08010c90 <fabs>:
 8010c90:	ec51 0b10 	vmov	r0, r1, d0
 8010c94:	ee10 2a10 	vmov	r2, s0
 8010c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c9c:	ec43 2b10 	vmov	d0, r2, r3
 8010ca0:	4770      	bx	lr

08010ca2 <atan2>:
 8010ca2:	f000 b82d 	b.w	8010d00 <__ieee754_atan2>

08010ca6 <sqrt>:
 8010ca6:	b538      	push	{r3, r4, r5, lr}
 8010ca8:	ed2d 8b02 	vpush	{d8}
 8010cac:	ec55 4b10 	vmov	r4, r5, d0
 8010cb0:	f000 f8f0 	bl	8010e94 <__ieee754_sqrt>
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	462b      	mov	r3, r5
 8010cb8:	4620      	mov	r0, r4
 8010cba:	4629      	mov	r1, r5
 8010cbc:	eeb0 8a40 	vmov.f32	s16, s0
 8010cc0:	eef0 8a60 	vmov.f32	s17, s1
 8010cc4:	f7ef ff4a 	bl	8000b5c <__aeabi_dcmpun>
 8010cc8:	b990      	cbnz	r0, 8010cf0 <sqrt+0x4a>
 8010cca:	2200      	movs	r2, #0
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f7ef ff1b 	bl	8000b0c <__aeabi_dcmplt>
 8010cd6:	b158      	cbz	r0, 8010cf0 <sqrt+0x4a>
 8010cd8:	f7fa fd60 	bl	800b79c <__errno>
 8010cdc:	2321      	movs	r3, #33	; 0x21
 8010cde:	6003      	str	r3, [r0, #0]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	f7ef fdc8 	bl	800087c <__aeabi_ddiv>
 8010cec:	ec41 0b18 	vmov	d8, r0, r1
 8010cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8010cf4:	eef0 0a68 	vmov.f32	s1, s17
 8010cf8:	ecbd 8b02 	vpop	{d8}
 8010cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

08010d00 <__ieee754_atan2>:
 8010d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d04:	ec57 6b11 	vmov	r6, r7, d1
 8010d08:	4273      	negs	r3, r6
 8010d0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010e90 <__ieee754_atan2+0x190>
 8010d0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010d12:	4333      	orrs	r3, r6
 8010d14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010d18:	4573      	cmp	r3, lr
 8010d1a:	ec51 0b10 	vmov	r0, r1, d0
 8010d1e:	ee11 8a10 	vmov	r8, s2
 8010d22:	d80a      	bhi.n	8010d3a <__ieee754_atan2+0x3a>
 8010d24:	4244      	negs	r4, r0
 8010d26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d2a:	4304      	orrs	r4, r0
 8010d2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010d30:	4574      	cmp	r4, lr
 8010d32:	ee10 9a10 	vmov	r9, s0
 8010d36:	468c      	mov	ip, r1
 8010d38:	d907      	bls.n	8010d4a <__ieee754_atan2+0x4a>
 8010d3a:	4632      	mov	r2, r6
 8010d3c:	463b      	mov	r3, r7
 8010d3e:	f7ef fabd 	bl	80002bc <__adddf3>
 8010d42:	ec41 0b10 	vmov	d0, r0, r1
 8010d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010d4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d52:	4334      	orrs	r4, r6
 8010d54:	d103      	bne.n	8010d5e <__ieee754_atan2+0x5e>
 8010d56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d5a:	f7ff bdf9 	b.w	8010950 <atan>
 8010d5e:	17bc      	asrs	r4, r7, #30
 8010d60:	f004 0402 	and.w	r4, r4, #2
 8010d64:	ea53 0909 	orrs.w	r9, r3, r9
 8010d68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010d6c:	d107      	bne.n	8010d7e <__ieee754_atan2+0x7e>
 8010d6e:	2c02      	cmp	r4, #2
 8010d70:	d060      	beq.n	8010e34 <__ieee754_atan2+0x134>
 8010d72:	2c03      	cmp	r4, #3
 8010d74:	d1e5      	bne.n	8010d42 <__ieee754_atan2+0x42>
 8010d76:	a142      	add	r1, pc, #264	; (adr r1, 8010e80 <__ieee754_atan2+0x180>)
 8010d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d7c:	e7e1      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010d7e:	ea52 0808 	orrs.w	r8, r2, r8
 8010d82:	d106      	bne.n	8010d92 <__ieee754_atan2+0x92>
 8010d84:	f1bc 0f00 	cmp.w	ip, #0
 8010d88:	da5f      	bge.n	8010e4a <__ieee754_atan2+0x14a>
 8010d8a:	a13f      	add	r1, pc, #252	; (adr r1, 8010e88 <__ieee754_atan2+0x188>)
 8010d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d90:	e7d7      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010d92:	4572      	cmp	r2, lr
 8010d94:	d10f      	bne.n	8010db6 <__ieee754_atan2+0xb6>
 8010d96:	4293      	cmp	r3, r2
 8010d98:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d9c:	d107      	bne.n	8010dae <__ieee754_atan2+0xae>
 8010d9e:	2c02      	cmp	r4, #2
 8010da0:	d84c      	bhi.n	8010e3c <__ieee754_atan2+0x13c>
 8010da2:	4b35      	ldr	r3, [pc, #212]	; (8010e78 <__ieee754_atan2+0x178>)
 8010da4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010da8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010dac:	e7c9      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010dae:	2c02      	cmp	r4, #2
 8010db0:	d848      	bhi.n	8010e44 <__ieee754_atan2+0x144>
 8010db2:	4b32      	ldr	r3, [pc, #200]	; (8010e7c <__ieee754_atan2+0x17c>)
 8010db4:	e7f6      	b.n	8010da4 <__ieee754_atan2+0xa4>
 8010db6:	4573      	cmp	r3, lr
 8010db8:	d0e4      	beq.n	8010d84 <__ieee754_atan2+0x84>
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010dc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010dc4:	da1e      	bge.n	8010e04 <__ieee754_atan2+0x104>
 8010dc6:	2f00      	cmp	r7, #0
 8010dc8:	da01      	bge.n	8010dce <__ieee754_atan2+0xce>
 8010dca:	323c      	adds	r2, #60	; 0x3c
 8010dcc:	db1e      	blt.n	8010e0c <__ieee754_atan2+0x10c>
 8010dce:	4632      	mov	r2, r6
 8010dd0:	463b      	mov	r3, r7
 8010dd2:	f7ef fd53 	bl	800087c <__aeabi_ddiv>
 8010dd6:	ec41 0b10 	vmov	d0, r0, r1
 8010dda:	f7ff ff59 	bl	8010c90 <fabs>
 8010dde:	f7ff fdb7 	bl	8010950 <atan>
 8010de2:	ec51 0b10 	vmov	r0, r1, d0
 8010de6:	2c01      	cmp	r4, #1
 8010de8:	d013      	beq.n	8010e12 <__ieee754_atan2+0x112>
 8010dea:	2c02      	cmp	r4, #2
 8010dec:	d015      	beq.n	8010e1a <__ieee754_atan2+0x11a>
 8010dee:	2c00      	cmp	r4, #0
 8010df0:	d0a7      	beq.n	8010d42 <__ieee754_atan2+0x42>
 8010df2:	a319      	add	r3, pc, #100	; (adr r3, 8010e58 <__ieee754_atan2+0x158>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fa5e 	bl	80002b8 <__aeabi_dsub>
 8010dfc:	a318      	add	r3, pc, #96	; (adr r3, 8010e60 <__ieee754_atan2+0x160>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	e014      	b.n	8010e2e <__ieee754_atan2+0x12e>
 8010e04:	a118      	add	r1, pc, #96	; (adr r1, 8010e68 <__ieee754_atan2+0x168>)
 8010e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e0a:	e7ec      	b.n	8010de6 <__ieee754_atan2+0xe6>
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	2100      	movs	r1, #0
 8010e10:	e7e9      	b.n	8010de6 <__ieee754_atan2+0xe6>
 8010e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e16:	4619      	mov	r1, r3
 8010e18:	e793      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e1a:	a30f      	add	r3, pc, #60	; (adr r3, 8010e58 <__ieee754_atan2+0x158>)
 8010e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e20:	f7ef fa4a 	bl	80002b8 <__aeabi_dsub>
 8010e24:	4602      	mov	r2, r0
 8010e26:	460b      	mov	r3, r1
 8010e28:	a10d      	add	r1, pc, #52	; (adr r1, 8010e60 <__ieee754_atan2+0x160>)
 8010e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e2e:	f7ef fa43 	bl	80002b8 <__aeabi_dsub>
 8010e32:	e786      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e34:	a10a      	add	r1, pc, #40	; (adr r1, 8010e60 <__ieee754_atan2+0x160>)
 8010e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e3a:	e782      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e3c:	a10c      	add	r1, pc, #48	; (adr r1, 8010e70 <__ieee754_atan2+0x170>)
 8010e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e42:	e77e      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e44:	2000      	movs	r0, #0
 8010e46:	2100      	movs	r1, #0
 8010e48:	e77b      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e4a:	a107      	add	r1, pc, #28	; (adr r1, 8010e68 <__ieee754_atan2+0x168>)
 8010e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e50:	e777      	b.n	8010d42 <__ieee754_atan2+0x42>
 8010e52:	bf00      	nop
 8010e54:	f3af 8000 	nop.w
 8010e58:	33145c07 	.word	0x33145c07
 8010e5c:	3ca1a626 	.word	0x3ca1a626
 8010e60:	54442d18 	.word	0x54442d18
 8010e64:	400921fb 	.word	0x400921fb
 8010e68:	54442d18 	.word	0x54442d18
 8010e6c:	3ff921fb 	.word	0x3ff921fb
 8010e70:	54442d18 	.word	0x54442d18
 8010e74:	3fe921fb 	.word	0x3fe921fb
 8010e78:	08011990 	.word	0x08011990
 8010e7c:	080119a8 	.word	0x080119a8
 8010e80:	54442d18 	.word	0x54442d18
 8010e84:	c00921fb 	.word	0xc00921fb
 8010e88:	54442d18 	.word	0x54442d18
 8010e8c:	bff921fb 	.word	0xbff921fb
 8010e90:	7ff00000 	.word	0x7ff00000

08010e94 <__ieee754_sqrt>:
 8010e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e98:	ec55 4b10 	vmov	r4, r5, d0
 8010e9c:	4e55      	ldr	r6, [pc, #340]	; (8010ff4 <__ieee754_sqrt+0x160>)
 8010e9e:	43ae      	bics	r6, r5
 8010ea0:	ee10 0a10 	vmov	r0, s0
 8010ea4:	ee10 3a10 	vmov	r3, s0
 8010ea8:	462a      	mov	r2, r5
 8010eaa:	4629      	mov	r1, r5
 8010eac:	d110      	bne.n	8010ed0 <__ieee754_sqrt+0x3c>
 8010eae:	ee10 2a10 	vmov	r2, s0
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	f7ef fbb8 	bl	8000628 <__aeabi_dmul>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	f7ef f9fc 	bl	80002bc <__adddf3>
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	460d      	mov	r5, r1
 8010ec8:	ec45 4b10 	vmov	d0, r4, r5
 8010ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	dc10      	bgt.n	8010ef6 <__ieee754_sqrt+0x62>
 8010ed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ed8:	4330      	orrs	r0, r6
 8010eda:	d0f5      	beq.n	8010ec8 <__ieee754_sqrt+0x34>
 8010edc:	b15d      	cbz	r5, 8010ef6 <__ieee754_sqrt+0x62>
 8010ede:	ee10 2a10 	vmov	r2, s0
 8010ee2:	462b      	mov	r3, r5
 8010ee4:	ee10 0a10 	vmov	r0, s0
 8010ee8:	f7ef f9e6 	bl	80002b8 <__aeabi_dsub>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	f7ef fcc4 	bl	800087c <__aeabi_ddiv>
 8010ef4:	e7e6      	b.n	8010ec4 <__ieee754_sqrt+0x30>
 8010ef6:	1512      	asrs	r2, r2, #20
 8010ef8:	d074      	beq.n	8010fe4 <__ieee754_sqrt+0x150>
 8010efa:	07d4      	lsls	r4, r2, #31
 8010efc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010f00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010f08:	bf5e      	ittt	pl
 8010f0a:	0fda      	lsrpl	r2, r3, #31
 8010f0c:	005b      	lslpl	r3, r3, #1
 8010f0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010f12:	2400      	movs	r4, #0
 8010f14:	0fda      	lsrs	r2, r3, #31
 8010f16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010f1a:	107f      	asrs	r7, r7, #1
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	2516      	movs	r5, #22
 8010f20:	4620      	mov	r0, r4
 8010f22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010f26:	1886      	adds	r6, r0, r2
 8010f28:	428e      	cmp	r6, r1
 8010f2a:	bfde      	ittt	le
 8010f2c:	1b89      	suble	r1, r1, r6
 8010f2e:	18b0      	addle	r0, r6, r2
 8010f30:	18a4      	addle	r4, r4, r2
 8010f32:	0049      	lsls	r1, r1, #1
 8010f34:	3d01      	subs	r5, #1
 8010f36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010f3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f42:	d1f0      	bne.n	8010f26 <__ieee754_sqrt+0x92>
 8010f44:	462a      	mov	r2, r5
 8010f46:	f04f 0e20 	mov.w	lr, #32
 8010f4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010f4e:	4281      	cmp	r1, r0
 8010f50:	eb06 0c05 	add.w	ip, r6, r5
 8010f54:	dc02      	bgt.n	8010f5c <__ieee754_sqrt+0xc8>
 8010f56:	d113      	bne.n	8010f80 <__ieee754_sqrt+0xec>
 8010f58:	459c      	cmp	ip, r3
 8010f5a:	d811      	bhi.n	8010f80 <__ieee754_sqrt+0xec>
 8010f5c:	f1bc 0f00 	cmp.w	ip, #0
 8010f60:	eb0c 0506 	add.w	r5, ip, r6
 8010f64:	da43      	bge.n	8010fee <__ieee754_sqrt+0x15a>
 8010f66:	2d00      	cmp	r5, #0
 8010f68:	db41      	blt.n	8010fee <__ieee754_sqrt+0x15a>
 8010f6a:	f100 0801 	add.w	r8, r0, #1
 8010f6e:	1a09      	subs	r1, r1, r0
 8010f70:	459c      	cmp	ip, r3
 8010f72:	bf88      	it	hi
 8010f74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010f78:	eba3 030c 	sub.w	r3, r3, ip
 8010f7c:	4432      	add	r2, r6
 8010f7e:	4640      	mov	r0, r8
 8010f80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010f84:	f1be 0e01 	subs.w	lr, lr, #1
 8010f88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010f8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010f94:	d1db      	bne.n	8010f4e <__ieee754_sqrt+0xba>
 8010f96:	430b      	orrs	r3, r1
 8010f98:	d006      	beq.n	8010fa8 <__ieee754_sqrt+0x114>
 8010f9a:	1c50      	adds	r0, r2, #1
 8010f9c:	bf13      	iteet	ne
 8010f9e:	3201      	addne	r2, #1
 8010fa0:	3401      	addeq	r4, #1
 8010fa2:	4672      	moveq	r2, lr
 8010fa4:	f022 0201 	bicne.w	r2, r2, #1
 8010fa8:	1063      	asrs	r3, r4, #1
 8010faa:	0852      	lsrs	r2, r2, #1
 8010fac:	07e1      	lsls	r1, r4, #31
 8010fae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010fb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010fb6:	bf48      	it	mi
 8010fb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010fbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	e781      	b.n	8010ec8 <__ieee754_sqrt+0x34>
 8010fc4:	0ad9      	lsrs	r1, r3, #11
 8010fc6:	3815      	subs	r0, #21
 8010fc8:	055b      	lsls	r3, r3, #21
 8010fca:	2900      	cmp	r1, #0
 8010fcc:	d0fa      	beq.n	8010fc4 <__ieee754_sqrt+0x130>
 8010fce:	02cd      	lsls	r5, r1, #11
 8010fd0:	d50a      	bpl.n	8010fe8 <__ieee754_sqrt+0x154>
 8010fd2:	f1c2 0420 	rsb	r4, r2, #32
 8010fd6:	fa23 f404 	lsr.w	r4, r3, r4
 8010fda:	1e55      	subs	r5, r2, #1
 8010fdc:	4093      	lsls	r3, r2
 8010fde:	4321      	orrs	r1, r4
 8010fe0:	1b42      	subs	r2, r0, r5
 8010fe2:	e78a      	b.n	8010efa <__ieee754_sqrt+0x66>
 8010fe4:	4610      	mov	r0, r2
 8010fe6:	e7f0      	b.n	8010fca <__ieee754_sqrt+0x136>
 8010fe8:	0049      	lsls	r1, r1, #1
 8010fea:	3201      	adds	r2, #1
 8010fec:	e7ef      	b.n	8010fce <__ieee754_sqrt+0x13a>
 8010fee:	4680      	mov	r8, r0
 8010ff0:	e7bd      	b.n	8010f6e <__ieee754_sqrt+0xda>
 8010ff2:	bf00      	nop
 8010ff4:	7ff00000 	.word	0x7ff00000

08010ff8 <_init>:
 8010ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffa:	bf00      	nop
 8010ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ffe:	bc08      	pop	{r3}
 8011000:	469e      	mov	lr, r3
 8011002:	4770      	bx	lr

08011004 <_fini>:
 8011004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011006:	bf00      	nop
 8011008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801100a:	bc08      	pop	{r3}
 801100c:	469e      	mov	lr, r3
 801100e:	4770      	bx	lr
