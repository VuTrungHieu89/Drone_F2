
Drone_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08012bd0  08012bd0  00022bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013578  08013578  000302a4  2**0
                  CONTENTS
  4 .ARM          00000008  08013578  08013578  00023578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013580  08013580  000302a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013580  08013580  00023580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013584  08013584  00023584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  08013588  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e24  200002a8  0801382c  000302a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200050cc  0801382c  000350cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d72  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004987  00000000  00000000  00052046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  000569d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  00058488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212c0  00000000  00000000  00059d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000280d6  00000000  00000000  0007b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2cc7  00000000  00000000  000a3116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185ddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008950  00000000  00000000  00185e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a8 	.word	0x200002a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012bb8 	.word	0x08012bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ac 	.word	0x200002ac
 80001dc:	08012bb8 	.word	0x08012bb8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ca 	b.w	8001064 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f85c 	bl	8000d94 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b82a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f825 	bl	8000d58 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_f2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	f7ff fc2d 	bl	8000578 <__aeabi_f2d>
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__aeabi_f2ulz+0x38>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc7f 	bl	8000628 <__aeabi_dmul>
 8000d2a:	f7ff ff55 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc00 	bl	8000534 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <__aeabi_f2ulz+0x3c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc76 	bl	8000628 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fab8 	bl	80002b8 <__aeabi_dsub>
 8000d48:	f7ff ff46 	bl	8000bd8 <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc61 	bl	8000628 <__aeabi_dmul>
 8000d66:	f7ff ff37 	bl	8000bd8 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fbe2 	bl	8000534 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc58 	bl	8000628 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff fa9a 	bl	80002b8 <__aeabi_dsub>
 8000d84:	f7ff ff28 	bl	8000bd8 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <BMP180_Init>:
#include "BMP180.h"


BMP180_Calibration_t BMP180_Calibration;

uint8_t BMP180_Init() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800106c:	f003 fc30 	bl	80048d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001070:	f003 fc78 	bl	8004964 <MX_I2C1_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP180_ADDR, 1, HAL_MAX_DELAY))
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2201      	movs	r2, #1
 800107a:	21ee      	movs	r1, #238	; 0xee
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <BMP180_Init+0x30>)
 800107e:	f005 fab9 	bl	80065f4 <HAL_I2C_IsDeviceReady>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BMP180_Init+0x24>
		return 1;
 8001088:	2301      	movs	r3, #1
 800108a:	e002      	b.n	8001092 <BMP180_Init+0x2a>
	BMP180_reset();
 800108c:	f000 f806 	bl	800109c <BMP180_reset>
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200005a4 	.word	0x200005a4

0800109c <BMP180_reset>:

void BMP180_reset(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af04      	add	r7, sp, #16
	uint8_t reset = (uint8_t)0xb6;
 80010a2:	23b6      	movs	r3, #182	; 0xb6
 80010a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT, &reset, 1, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	22e0      	movs	r2, #224	; 0xe0
 80010b8:	21ee      	movs	r1, #238	; 0xee
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <BMP180_reset+0x34>)
 80010bc:	f004 ff7a 	bl	8005fb4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f004 fae7 	bl	8005694 <HAL_Delay>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200005a4 	.word	0x200005a4

080010d4 <BMP180_ReadCalibration>:

void BMP180_ReadCalibration(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af04      	add	r7, sp, #16
	uint8_t buffer[BMP180_PROM_DATA_LEN] = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	821a      	strh	r2, [r3, #16]
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e015      	b.n	8001120 <BMP180_ReadCalibration+0x4c>
		HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_PROM_START_ADDR + i, I2C_MEMADD_SIZE_8BIT, &buffer[i], 1, HAL_MAX_DELAY);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	33aa      	adds	r3, #170	; 0xaa
 80010fa:	b299      	uxth	r1, r3
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	4413      	add	r3, r2
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	2201      	movs	r2, #1
 800110a:	9201      	str	r2, [sp, #4]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	460a      	mov	r2, r1
 8001112:	21ee      	movs	r1, #238	; 0xee
 8001114:	4839      	ldr	r0, [pc, #228]	; (80011fc <BMP180_ReadCalibration+0x128>)
 8001116:	f005 f847 	bl	80061a8 <HAL_I2C_Mem_Read>
	for (int i = 0; i < BMP180_PROM_DATA_LEN; i++){
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b15      	cmp	r3, #21
 8001124:	dde6      	ble.n	80010f4 <BMP180_ReadCalibration+0x20>
	}


	BMP180_Calibration.AC1 = (buffer[0]  << 8) | buffer[1];
 8001126:	793b      	ldrb	r3, [r7, #4]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001136:	801a      	strh	r2, [r3, #0]
	BMP180_Calibration.AC2 = (buffer[2]  << 8) | buffer[3];
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001148:	805a      	strh	r2, [r3, #2]
	BMP180_Calibration.AC3 = (buffer[4]  << 8) | buffer[5];
 800114a:	7a3b      	ldrb	r3, [r7, #8]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	7a7b      	ldrb	r3, [r7, #9]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 800115a:	809a      	strh	r2, [r3, #4]
	BMP180_Calibration.AC4 = (buffer[6]  << 8) | buffer[7];
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 800116e:	80da      	strh	r2, [r3, #6]
	BMP180_Calibration.AC5 = (buffer[8]  << 8) | buffer[9];
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001182:	811a      	strh	r2, [r3, #8]
	BMP180_Calibration.AC6 = (buffer[10] << 8) | buffer[11];
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 8001196:	815a      	strh	r2, [r3, #10]
	BMP180_Calibration.B1  = (buffer[12] << 8) | buffer[13];
 8001198:	7c3b      	ldrb	r3, [r7, #16]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7c7b      	ldrb	r3, [r7, #17]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011a8:	819a      	strh	r2, [r3, #12]
	BMP180_Calibration.B2  = (buffer[14] << 8) | buffer[15];
 80011aa:	7cbb      	ldrb	r3, [r7, #18]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7cfb      	ldrb	r3, [r7, #19]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011ba:	81da      	strh	r2, [r3, #14]
	BMP180_Calibration.MB  = (buffer[16] << 8) | buffer[17];
 80011bc:	7d3b      	ldrb	r3, [r7, #20]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011cc:	821a      	strh	r2, [r3, #16]
	BMP180_Calibration.MC  = (buffer[18] << 8) | buffer[19];
 80011ce:	7dbb      	ldrb	r3, [r7, #22]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011de:	825a      	strh	r2, [r3, #18]
	BMP180_Calibration.MD  = (buffer[20] << 8) | buffer[21];
 80011e0:	7e3b      	ldrb	r3, [r7, #24]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7e7b      	ldrb	r3, [r7, #25]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <BMP180_ReadCalibration+0x12c>)
 80011f0:	829a      	strh	r2, [r3, #20]
}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200005a4 	.word	0x200005a4
 8001200:	200002c4 	.word	0x200002c4

08001204 <BMP180_Read_UT>:

uint32_t BMP180_Read_UT(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
	uint32_t UT = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
	uint8_t T_measure = BMP180_T_MEASURE;
 800120e:	232e      	movs	r3, #46	; 0x2e
 8001210:	70fb      	strb	r3, [r7, #3]
	uint8_t MSB = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	70bb      	strb	r3, [r7, #2]
	uint8_t LSB = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	707b      	strb	r3, [r7, #1]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &T_measure, 1, HAL_MAX_DELAY);
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1cfb      	adds	r3, r7, #3
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	22f4      	movs	r2, #244	; 0xf4
 800122c:	21ee      	movs	r1, #238	; 0xee
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <BMP180_Read_UT+0x80>)
 8001230:	f004 fec0 	bl	8005fb4 <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 8001234:	2006      	movs	r0, #6
 8001236:	f004 fa2d 	bl	8005694 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2301      	movs	r3, #1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	1cbb      	adds	r3, r7, #2
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	22f6      	movs	r2, #246	; 0xf6
 800124c:	21ee      	movs	r1, #238	; 0xee
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <BMP180_Read_UT+0x80>)
 8001250:	f004 ffaa 	bl	80061a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	1c7b      	adds	r3, r7, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	22f7      	movs	r2, #247	; 0xf7
 8001266:	21ee      	movs	r1, #238	; 0xee
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <BMP180_Read_UT+0x80>)
 800126a:	f004 ff9d 	bl	80061a8 <HAL_I2C_Mem_Read>
	UT = (MSB << 8) + LSB;
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	787a      	ldrb	r2, [r7, #1]
 8001274:	4413      	add	r3, r2
 8001276:	607b      	str	r3, [r7, #4]

	return UT;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200005a4 	.word	0x200005a4

08001288 <BMP180_Read_UP>:

uint32_t BMP180_Read_UP(uint8_t oss){
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af04      	add	r7, sp, #16
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint32_t UP;
	uint8_t cmd,delay;
	uint8_t MSB = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]
	uint8_t LSB = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	737b      	strb	r3, [r7, #13]
	uint8_t XLSB = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	733b      	strb	r3, [r7, #12]

	switch(oss) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d81f      	bhi.n	80012e4 <BMP180_Read_UP+0x5c>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <BMP180_Read_UP+0x24>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c7 	.word	0x080012c7
 80012b4:	080012d1 	.word	0x080012d1
 80012b8:	080012db 	.word	0x080012db
	case 0:
		cmd = BMP180_P0_MEASURE;
 80012bc:	2334      	movs	r3, #52	; 0x34
 80012be:	73fb      	strb	r3, [r7, #15]
		delay   = 6;
 80012c0:	2306      	movs	r3, #6
 80012c2:	75fb      	strb	r3, [r7, #23]
		break;
 80012c4:	e00e      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 1:
		cmd = BMP180_P1_MEASURE;
 80012c6:	2374      	movs	r3, #116	; 0x74
 80012c8:	73fb      	strb	r3, [r7, #15]
		delay   = 9;
 80012ca:	2309      	movs	r3, #9
 80012cc:	75fb      	strb	r3, [r7, #23]
		break;
 80012ce:	e009      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 2:
		cmd = BMP180_P2_MEASURE;
 80012d0:	23b4      	movs	r3, #180	; 0xb4
 80012d2:	73fb      	strb	r3, [r7, #15]
		delay   = 15;
 80012d4:	230f      	movs	r3, #15
 80012d6:	75fb      	strb	r3, [r7, #23]
		break;
 80012d8:	e004      	b.n	80012e4 <BMP180_Read_UP+0x5c>
	case 3:
		cmd = BMP180_P3_MEASURE;
 80012da:	23f4      	movs	r3, #244	; 0xf4
 80012dc:	73fb      	strb	r3, [r7, #15]
		delay   = 27;
 80012de:	231b      	movs	r3, #27
 80012e0:	75fb      	strb	r3, [r7, #23]
		break;
 80012e2:	bf00      	nop
	}

	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	22f4      	movs	r2, #244	; 0xf4
 80012f8:	21ee      	movs	r1, #238	; 0xee
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <BMP180_Read_UP+0xf8>)
 80012fc:	f004 fe5a 	bl	8005fb4 <HAL_I2C_Mem_Write>
	HAL_Delay(delay);
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f9c6 	bl	8005694 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_MSB_REG, I2C_MEMADD_SIZE_8BIT, &MSB, 1, HAL_MAX_DELAY);
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 030e 	add.w	r3, r7, #14
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	22f6      	movs	r2, #246	; 0xf6
 800131c:	21ee      	movs	r1, #238	; 0xee
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <BMP180_Read_UP+0xf8>)
 8001320:	f004 ff42 	bl	80061a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_LSB_REG, I2C_MEMADD_SIZE_8BIT, &LSB, 1, HAL_MAX_DELAY);
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030d 	add.w	r3, r7, #13
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f7      	movs	r2, #247	; 0xf7
 8001338:	21ee      	movs	r1, #238	; 0xee
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <BMP180_Read_UP+0xf8>)
 800133c:	f004 ff34 	bl	80061a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_ADC_OUT_XLSB_REG, I2C_MEMADD_SIZE_8BIT, &XLSB, 1, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	22f8      	movs	r2, #248	; 0xf8
 8001354:	21ee      	movs	r1, #238	; 0xee
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <BMP180_Read_UP+0xf8>)
 8001358:	f004 ff26 	bl	80061a8 <HAL_I2C_Mem_Read>
	UP = ((MSB << 16) + (LSB << 8) + XLSB) >> (8 - oss);
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4413      	add	r3, r2
 8001366:	7b3a      	ldrb	r2, [r7, #12]
 8001368:	441a      	add	r2, r3
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f1c3 0308 	rsb	r3, r3, #8
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	613b      	str	r3, [r7, #16]

	return UP;
 8001376:	693b      	ldr	r3, [r7, #16]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200005a4 	.word	0x200005a4

08001384 <BMP180_Calculate_RT>:

uint32_t BMP180_Calculate_RT(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	uint32_t UT = BMP180_Read_UT();
 800138a:	f7ff ff3b 	bl	8001204 <BMP180_Read_UT>
 800138e:	6078      	str	r0, [r7, #4]
	BMP180_Calibration.B5  = (((int32_t)UT - (int32_t)BMP180_Calibration.AC6) * (int32_t)BMP180_Calibration.AC5) >> 15;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 8001394:	8952      	ldrh	r2, [r2, #10]
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 800139a:	8912      	ldrh	r2, [r2, #8]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	13db      	asrs	r3, r3, #15
 80013a2:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013a4:	6193      	str	r3, [r2, #24]
	BMP180_Calibration.B5 += ((int32_t)BMP180_Calibration.MC << 11) / (BMP180_Calibration.B5 + BMP180_Calibration.MD);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013b0:	02d9      	lsls	r1, r3, #11
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013b8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 80013bc:	4403      	add	r3, r0
 80013be:	fb91 f3f3 	sdiv	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013c6:	6193      	str	r3, [r2, #24]

	return (BMP180_Calibration.B5 + 8) >> 4;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <BMP180_Calculate_RT+0x54>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	3308      	adds	r3, #8
 80013ce:	111b      	asrs	r3, r3, #4
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002c4 	.word	0x200002c4

080013dc <BMP180_Calculate_RP>:

uint32_t BMP180_Calculate_RP(uint8_t oss){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint32_t UP = BMP180_Read_UP(oss);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff4d 	bl	8001288 <BMP180_Read_UP>
 80013ee:	6238      	str	r0, [r7, #32]
	int32_t B3,B6,X3,p;
	uint32_t B4,B7;

	B6 = BMP180_Calibration.B5 - 4000;
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <BMP180_Calculate_RP+0x110>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013f8:	61fb      	str	r3, [r7, #28]
	X3 = ((BMP180_Calibration.B2 * ((B6 * B6) >> 12)) >> 11) + ((BMP180_Calibration.AC2 * B6) >> 11);
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <BMP180_Calculate_RP+0x110>)
 80013fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001400:	461a      	mov	r2, r3
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fb03 f303 	mul.w	r3, r3, r3
 8001408:	131b      	asrs	r3, r3, #12
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	12da      	asrs	r2, r3, #11
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <BMP180_Calculate_RP+0x110>)
 8001412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001416:	4619      	mov	r1, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	12db      	asrs	r3, r3, #11
 8001420:	4413      	add	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
	B3 = (((((int32_t)BMP180_Calibration.AC1) * 4 + X3) << oss) + 2) >> 2;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <BMP180_Calculate_RP+0x110>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	009a      	lsls	r2, r3, #2
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	441a      	add	r2, r3
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	3302      	adds	r3, #2
 8001438:	109b      	asrs	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
	X3 = (((BMP180_Calibration.AC3 * B6) >> 13) + ((BMP180_Calibration.B1 * ((B6 * B6) >> 12)) >> 16) + 2) >> 2;
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800143e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001442:	461a      	mov	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	135a      	asrs	r2, r3, #13
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800144e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001452:	4619      	mov	r1, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	fb03 f303 	mul.w	r3, r3, r3
 800145a:	131b      	asrs	r3, r3, #12
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	141b      	asrs	r3, r3, #16
 8001462:	4413      	add	r3, r2
 8001464:	3302      	adds	r3, #2
 8001466:	109b      	asrs	r3, r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
	B4 = (BMP180_Calibration.AC4 * (uint32_t)(X3 + 32768)) >> 15;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <BMP180_Calculate_RP+0x110>)
 800146c:	88db      	ldrh	r3, [r3, #6]
 800146e:	461a      	mov	r2, r3
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	0bdb      	lsrs	r3, r3, #15
 800147c:	613b      	str	r3, [r7, #16]
	B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	f24c 3150 	movw	r1, #50000	; 0xc350
 800148a:	fa41 f202 	asr.w	r2, r1, r2
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	60fb      	str	r3, [r7, #12]
	if (B7 < 0x80000000) p = (B7 << 1) / B4; else p = (B7 / B4) << 1;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db06      	blt.n	80014a8 <BMP180_Calculate_RP+0xcc>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	005a      	lsls	r2, r3, #1
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	e005      	b.n	80014b4 <BMP180_Calculate_RP+0xd8>
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
	p += ((((p >> 8) * (p >> 8) * BMP180_PARAM_MG) >> 16) + ((BMP180_PARAM_MH * p) >> 16) + BMP180_PARAM_MI) >> 4;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	121b      	asrs	r3, r3, #8
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	1212      	asrs	r2, r2, #8
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	f640 32de 	movw	r2, #3038	; 0xbde
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	141a      	asrs	r2, r3, #16
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	4908      	ldr	r1, [pc, #32]	; (80014f0 <BMP180_Calculate_RP+0x114>)
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	141b      	asrs	r3, r3, #16
 80014d4:	4413      	add	r3, r2
 80014d6:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80014da:	111b      	asrs	r3, r3, #4
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4413      	add	r3, r2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

	return p;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002c4 	.word	0x200002c4
 80014f0:	ffffe343 	.word	0xffffe343
 80014f4:	00000000 	.word	0x00000000

080014f8 <BMP180_Calculate_Altitude>:

uint32_t BMP180_Calculate_Altitude(uint8_t oss){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint32_t hPa = BMP180_Calculate_RP(oss) * 0.01;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff69 	bl	80013dc <BMP180_Calculate_RP>
 800150a:	4603      	mov	r3, r0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f811 	bl	8000534 <__aeabi_ui2d>
 8001512:	a319      	add	r3, pc, #100	; (adr r3, 8001578 <BMP180_Calculate_Altitude+0x80>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f886 	bl	8000628 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb58 	bl	8000bd8 <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	60fb      	str	r3, [r7, #12]
	return (((745 * (11390 - (hPa / 10))) / 256 + 46597) * (11390 - (hPa / 10))) / 65536 - 966;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <BMP180_Calculate_Altitude+0x78>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	f46f 723a 	mvn.w	r2, #744	; 0x2e8
 800153a:	fb03 f202 	mul.w	r2, r3, r2
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <BMP180_Calculate_Altitude+0x7c>)
 8001540:	4413      	add	r3, r2
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 8001548:	3305      	adds	r3, #5
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4908      	ldr	r1, [pc, #32]	; (8001570 <BMP180_Calculate_Altitude+0x78>)
 800154e:	fba1 1202 	umull	r1, r2, r1, r2
 8001552:	08d2      	lsrs	r2, r2, #3
 8001554:	f5c2 5231 	rsb	r2, r2, #11328	; 0x2c40
 8001558:	323e      	adds	r2, #62	; 0x3e
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	0c1b      	lsrs	r3, r3, #16
 8001560:	f2a3 33c6 	subw	r3, r3, #966	; 0x3c6
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	cccccccd 	.word	0xcccccccd
 8001574:	00817aae 	.word	0x00817aae
 8001578:	47ae147b 	.word	0x47ae147b
 800157c:	3f847ae1 	.word	0x3f847ae1

08001580 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4053      	eors	r3, r2
 8001596:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	b25a      	sxtb	r2, r3
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4053      	eors	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4053      	eors	r3, r2
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4053      	eors	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4053      	eors	r3, r2
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	801a      	strh	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <crc_init>:
 * @brief Initiliaze the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	801a      	strh	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800160c:	f107 030e 	add.w	r3, r7, #14
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ffe7 	bl	80015e4 <crc_init>
	while (length--) {
 8001616:	e009      	b.n	800162c <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f107 020e 	add.w	r2, r7, #14
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ffaa 	bl	8001580 <crc_accumulate>
	while (length--) {
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	807a      	strh	r2, [r7, #2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <crc_calculate+0x18>
        }
        return crcTmp;
 8001636:	89fb      	ldrh	r3, [r7, #14]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	617b      	str	r3, [r7, #20]
	while (length--) {
 8001652:	e007      	b.n	8001664 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	617a      	str	r2, [r7, #20]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff8e 	bl	8001580 <crc_accumulate>
	while (length--) {
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	80fa      	strh	r2, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <crc_accumulate_buffer+0x14>
        }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <mavlink_sha256_init+0x50>)
 8001690:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <mavlink_sha256_init+0x54>)
 8001696:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <mavlink_sha256_init+0x58>)
 800169c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <mavlink_sha256_init+0x5c>)
 80016a2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <mavlink_sha256_init+0x60>)
 80016a8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <mavlink_sha256_init+0x64>)
 80016ae:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <mavlink_sha256_init+0x68>)
 80016b4:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <mavlink_sha256_init+0x6c>)
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	6a09e667 	.word	0x6a09e667
 80016cc:	bb67ae85 	.word	0xbb67ae85
 80016d0:	3c6ef372 	.word	0x3c6ef372
 80016d4:	a54ff53a 	.word	0xa54ff53a
 80016d8:	510e527f 	.word	0x510e527f
 80016dc:	9b05688c 	.word	0x9b05688c
 80016e0:	1f83d9ab 	.word	0x1f83d9ab
 80016e4:	5be0cd19 	.word	0x5be0cd19

080016e8 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b0cf      	sub	sp, #316	; 0x13c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016fc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001700:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8001702:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001706:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8001712:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001716:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8001722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001726:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8001732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001736:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8001742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001746:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8001752:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001756:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8001762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001766:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8001772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001776:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001788:	e016      	b.n	80017b8 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800178a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001794:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80017ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	dde4      	ble.n	800178a <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 80017c0:	2310      	movs	r3, #16
 80017c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017c6:	e069      	b.n	800189c <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80017c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017cc:	1e9a      	subs	r2, r3, #2
 80017ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	ea4f 4273 	mov.w	r2, r3, ror #17
 80017de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017e2:	1e99      	subs	r1, r3, #2
 80017e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017f0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80017f4:	405a      	eors	r2, r3
 80017f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017fa:	1e99      	subs	r1, r3, #2
 80017fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001808:	0a9b      	lsrs	r3, r3, #10
 800180a:	405a      	eors	r2, r3
 800180c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001810:	1fd9      	subs	r1, r3, #7
 8001812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800181a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800181e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001824:	f1a3 010f 	sub.w	r1, r3, #15
 8001828:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800182c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001834:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800183c:	f1a3 000f 	sub.w	r0, r3, #15
 8001840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001848:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800184c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001850:	4059      	eors	r1, r3
 8001852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001856:	f1a3 000f 	sub.w	r0, r3, #15
 800185a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800185e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001862:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800186a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800186c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001870:	f1a3 0110 	sub.w	r1, r3, #16
 8001874:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800187c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001880:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800188a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8001892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800189c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a0:	2b3f      	cmp	r3, #63	; 0x3f
 80018a2:	dd91      	ble.n	80017c8 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018aa:	e078      	b.n	800199e <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80018ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80018b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80018bc:	405a      	eors	r2, r3
 80018be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80018c6:	405a      	eors	r2, r3
 80018c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018cc:	441a      	add	r2, r3
 80018ce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80018d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018d6:	4019      	ands	r1, r3
 80018d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018dc:	43d8      	mvns	r0, r3
 80018de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018e2:	4003      	ands	r3, r0
 80018e4:	404b      	eors	r3, r1
 80018e6:	441a      	add	r2, r3
 80018e8:	496e      	ldr	r1, [pc, #440]	; (8001aa4 <mavlink_sha256_calc+0x3bc>)
 80018ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f2:	441a      	add	r2, r3
 80018f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018fc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001904:	4413      	add	r3, r2
 8001906:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800190a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800190e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001916:	ea4f 3373 	mov.w	r3, r3, ror #13
 800191a:	405a      	eors	r2, r3
 800191c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001920:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001924:	405a      	eors	r2, r3
 8001926:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800192a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800192e:	4059      	eors	r1, r3
 8001930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001934:	4019      	ands	r1, r3
 8001936:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800193a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800193e:	4003      	ands	r3, r0
 8001940:	404b      	eors	r3, r1
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8001948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800194c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001958:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800195c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001960:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001964:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 800196e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8001976:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800197a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 800197e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001982:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8001986:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800198a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800198e:	4413      	add	r3, r2
 8001990:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8001994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001998:	3301      	adds	r3, #1
 800199a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800199e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a2:	2b3f      	cmp	r3, #63	; 0x3f
 80019a4:	dd82      	ble.n	80018ac <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 80019a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019b6:	441a      	add	r2, r3
 80019b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 80019c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019d4:	441a      	add	r2, r3
 80019d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80019e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019f2:	441a      	add	r2, r3
 80019f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8001a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a10:	441a      	add	r2, r3
 8001a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8001a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a2e:	441a      	add	r2, r3
 8001a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001a3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8001a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a6a:	441a      	add	r2, r3
 8001a6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a88:	441a      	add	r2, r3
 8001a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a96:	bf00      	nop
 8001a98:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	08012d70 	.word	0x08012d70

08001aa8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09c      	sub	sp, #112	; 0x70
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	441a      	add	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d904      	bls.n	8001ae0 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae8:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001aea:	e054      	b.n	8001b96 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001af2:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d201      	bcs.n	8001b00 <mavlink_sha256_update+0x58>
            l = len;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b08:	4413      	add	r3, r2
 8001b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00b fc4e 	bl	800d3b0 <memcpy>
	offset += l;
 8001b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b18:	4413      	add	r3, r2
 8001b1a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b20:	4413      	add	r3, r2
 8001b22:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d131      	bne.n	8001b96 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3328      	adds	r3, #40	; 0x28
 8001b36:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b3c:	e020      	b.n	8001b80 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b44:	4413      	add	r3, r2
 8001b46:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001b48:	f107 0210 	add.w	r2, r7, #16
 8001b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	78da      	ldrb	r2, [r3, #3]
 8001b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5a:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5e:	3301      	adds	r3, #1
 8001b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b62:	7892      	ldrb	r2, [r2, #2]
 8001b64:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b68:	3302      	adds	r3, #2
 8001b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6c:	7852      	ldrb	r2, [r2, #1]
 8001b6e:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b72:	3303      	adds	r3, #3
 8001b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	dddb      	ble.n	8001b3e <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fdab 	bl	80016e8 <mavlink_sha256_calc>
	    offset = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1a7      	bne.n	8001aec <mavlink_sha256_update+0x44>
	}
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3770      	adds	r7, #112	; 0x70
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b098      	sub	sp, #96	; 0x60
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3308      	adds	r3, #8
 8001bce:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2247      	movs	r2, #71	; 0x47
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00b fbf4 	bl	800d3cc <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bea:	3307      	adds	r3, #7
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0a1a      	lsrs	r2, r3, #8
 8001bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfe:	3306      	adds	r3, #6
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	3360      	adds	r3, #96	; 0x60
 8001c04:	443b      	add	r3, r7
 8001c06:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0c1a      	lsrs	r2, r3, #16
 8001c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c12:	3305      	adds	r3, #5
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	3360      	adds	r3, #96	; 0x60
 8001c18:	443b      	add	r3, r7
 8001c1a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e1a      	lsrs	r2, r3, #24
 8001c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c26:	3304      	adds	r3, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	3360      	adds	r3, #96	; 0x60
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c38:	3303      	adds	r3, #3
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	443b      	add	r3, r7
 8001c40:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0a1a      	lsrs	r2, r3, #8
 8001c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	3360      	adds	r3, #96	; 0x60
 8001c52:	443b      	add	r3, r7
 8001c54:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c1a      	lsrs	r2, r3, #16
 8001c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	3360      	adds	r3, #96	; 0x60
 8001c66:	443b      	add	r3, r7
 8001c68:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0e1b      	lsrs	r3, r3, #24
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c7a:	4413      	add	r3, r2
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff0b 	bl	8001aa8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	78da      	ldrb	r2, [r3, #3]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ca0:	7892      	ldrb	r2, [r2, #2]
 8001ca2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001caa:	7852      	ldrb	r2, [r2, #1]
 8001cac:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cbe:	79d2      	ldrb	r2, [r2, #7]
 8001cc0:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3305      	adds	r3, #5
 8001cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cc8:	7992      	ldrb	r2, [r2, #6]
 8001cca:	701a      	strb	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3760      	adds	r7, #96	; 0x60
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <mavlink_get_channel_status+0x24>)
 8001cea:	4413      	add	r3, r2
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	200003d8 	.word	0x200003d8

08001cfc <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b0a0      	sub	sp, #128	; 0x80
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <mavlink_sign_packet+0x20>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <mavlink_sign_packet+0x24>
	    return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e04f      	b.n	8001dc0 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	785a      	ldrb	r2, [r3, #1]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	f107 0110 	add.w	r1, r7, #16
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00b fb37 	bl	800d3b0 <memcpy>
	signing->timestamp++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d48:	1c54      	adds	r4, r2, #1
 8001d4a:	f143 0500 	adc.w	r5, r3, #0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fc8d 	bl	8001678 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f103 0110 	add.w	r1, r3, #16
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	2220      	movs	r2, #32
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fe9c 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe95 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001d7e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe8c 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2202      	movs	r2, #2
 8001d96:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe84 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	2207      	movs	r2, #7
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe7d 	bl	8001aa8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1dda      	adds	r2, r3, #7
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fef4 	bl	8001ba6 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001dbe:	230d      	movs	r3, #13
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3780      	adds	r7, #128	; 0x80
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdb0      	pop	{r4, r5, r7, pc}

08001dc8 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001dd4:	e002      	b.n	8001ddc <_mav_trim_payload+0x14>
		length--;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d906      	bls.n	8001df0 <_mav_trim_payload+0x28>
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f2      	beq.n	8001dd6 <_mav_trim_payload+0xe>
	}
	return length;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e00:	b08f      	sub	sp, #60	; 0x3c
 8001e02:	af04      	add	r7, sp, #16
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	72fb      	strb	r3, [r7, #11]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b1b      	ldrb	r3, [r3, #12]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e28:	f083 0301 	eor.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <mavlink_finalize_message_buffer+0x4e>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <mavlink_finalize_message_buffer+0x50>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001e5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <mavlink_finalize_message_buffer+0x6c>
 8001e66:	230d      	movs	r3, #13
 8001e68:	e000      	b.n	8001e6c <mavlink_finalize_message_buffer+0x6e>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001e70:	230a      	movs	r3, #10
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	22fe      	movs	r2, #254	; 0xfe
 8001e82:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001e84:	2306      	movs	r3, #6
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e8a:	e002      	b.n	8001e92 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	22fd      	movs	r2, #253	; 0xfd
 8001e90:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <mavlink_finalize_message_buffer+0xb2>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff8f 	bl	8001dc8 <_mav_trim_payload>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	e001      	b.n	8001eb4 <mavlink_finalize_message_buffer+0xb6>
 8001eb0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	7afa      	ldrb	r2, [r7, #11]
 8001ebc:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7aba      	ldrb	r2, [r7, #10]
 8001ec2:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001eca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	799a      	ldrb	r2, [r3, #6]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	799b      	ldrb	r3, [r3, #6]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	789b      	ldrb	r3, [r3, #2]
 8001efe:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	78db      	ldrb	r3, [r3, #3]
 8001f04:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d013      	beq.n	8001f36 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	799b      	ldrb	r3, [r3, #6]
 8001f12:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	79db      	ldrb	r3, [r3, #7]
 8001f18:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	7a1b      	ldrb	r3, [r3, #8]
 8001f1e:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	7a5a      	ldrb	r2, [r3, #9]
 8001f24:	7a99      	ldrb	r1, [r3, #10]
 8001f26:	0209      	lsls	r1, r1, #8
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	7adb      	ldrb	r3, [r3, #11]
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	777b      	strb	r3, [r7, #29]
 8001f34:	e030      	b.n	8001f98 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	791b      	ldrb	r3, [r3, #4]
 8001f3a:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	799b      	ldrb	r3, [r3, #6]
 8001f46:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	79db      	ldrb	r3, [r3, #7]
 8001f4c:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	7a1b      	ldrb	r3, [r3, #8]
 8001f52:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	7a5a      	ldrb	r2, [r3, #9]
 8001f58:	7a99      	ldrb	r1, [r3, #10]
 8001f5a:	0209      	lsls	r1, r1, #8
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	7adb      	ldrb	r3, [r3, #11]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	7a5a      	ldrb	r2, [r3, #9]
 8001f6c:	7a99      	ldrb	r1, [r3, #10]
 8001f6e:	0209      	lsls	r1, r1, #8
 8001f70:	430a      	orrs	r2, r1
 8001f72:	7adb      	ldrb	r3, [r3, #11]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	4313      	orrs	r3, r2
 8001f78:	121b      	asrs	r3, r3, #8
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	7a5a      	ldrb	r2, [r3, #9]
 8001f84:	7a99      	ldrb	r1, [r3, #10]
 8001f86:	0209      	lsls	r1, r1, #8
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	7adb      	ldrb	r3, [r3, #11]
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	141b      	asrs	r3, r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb28 	bl	8001600 <crc_calculate>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f103 010c 	add.w	r1, r3, #12
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	78db      	ldrb	r3, [r3, #3]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f107 0316 	add.w	r3, r7, #22
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fb3b 	bl	8001640 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001fca:	f107 0216 	add.w	r2, r7, #22
 8001fce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fad3 	bl	8001580 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001fda:	8af9      	ldrh	r1, [r7, #22]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	78d2      	ldrb	r2, [r2, #3]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001fea:	8afb      	ldrh	r3, [r7, #22]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f103 020c 	add.w	r2, r3, #12
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	801a      	strh	r2, [r3, #0]

	if (signing) {
 8002008:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01a      	beq.n	8002046 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	310c      	adds	r1, #12
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800202a:	4401      	add	r1, r0
 800202c:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8002030:	f107 0018 	add.w	r0, r7, #24
 8002034:	9102      	str	r1, [sp, #8]
 8002036:	9201      	str	r2, [sp, #4]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4633      	mov	r3, r6
 800203c:	4602      	mov	r2, r0
 800203e:	4629      	mov	r1, r5
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff fe5b 	bl	8001cfc <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	b29a      	uxth	r2, r3
 800204c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002050:	b29b      	uxth	r3, r3
 8002052:	4413      	add	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800205a:	b29b      	uxth	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	3302      	adds	r3, #2
 8002062:	b29b      	uxth	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	372c      	adds	r7, #44	; 0x2c
 8002068:	46bd      	mov	sp, r7
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800206c <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af04      	add	r7, sp, #16
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4603      	mov	r3, r0
 800207c:	70fb      	strb	r3, [r7, #3]
 800207e:	460b      	mov	r3, r1
 8002080:	70bb      	strb	r3, [r7, #2]
 8002082:	4613      	mov	r3, r2
 8002084:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8002086:	787b      	ldrb	r3, [r7, #1]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe23 	bl	8001cd4 <mavlink_get_channel_status>
 800208e:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	78f9      	ldrb	r1, [r7, #3]
 8002094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	7f3b      	ldrb	r3, [r7, #28]
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	7e3b      	ldrb	r3, [r7, #24]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff feaa 	bl	8001dfe <mavlink_finalize_message_buffer>
 80020aa:	4603      	mov	r3, r0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af04      	add	r7, sp, #16
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	70fb      	strb	r3, [r7, #3]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70bb      	strb	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	78f9      	ldrb	r1, [r7, #3]
 80020d2:	7d3b      	ldrb	r3, [r7, #20]
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	7c3b      	ldrb	r3, [r7, #16]
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	787b      	ldrb	r3, [r7, #1]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffc3 	bl	800206c <mavlink_finalize_message_chan>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	78db      	ldrb	r3, [r3, #3]
 80020fe:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	2bfe      	cmp	r3, #254	; 0xfe
 8002106:	d13a      	bne.n	800217e <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800210c:	2305      	movs	r3, #5
 800210e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	789a      	ldrb	r2, [r3, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3302      	adds	r3, #2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	7992      	ldrb	r2, [r2, #6]
 8002128:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3303      	adds	r3, #3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	79d2      	ldrb	r2, [r2, #7]
 8002132:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	7a12      	ldrb	r2, [r2, #8]
 800213c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7a5a      	ldrb	r2, [r3, #9]
 8002142:	7a99      	ldrb	r1, [r3, #10]
 8002144:	0209      	lsls	r1, r1, #8
 8002146:	430a      	orrs	r2, r1
 8002148:	7adb      	ldrb	r3, [r3, #11]
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	4313      	orrs	r3, r2
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3305      	adds	r3, #5
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1d98      	adds	r0, r3, #6
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f103 010c 	add.w	r1, r3, #12
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	78db      	ldrb	r3, [r3, #3]
 8002166:	461a      	mov	r2, r3
 8002168:	f00b f922 	bl	800d3b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	78d2      	ldrb	r2, [r2, #3]
 8002172:	4413      	add	r3, r2
 8002174:	3301      	adds	r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e06c      	b.n	8002258 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe1e 	bl	8001dc8 <_mav_trim_payload>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8002190:	2309      	movs	r3, #9
 8002192:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	789a      	ldrb	r2, [r3, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3301      	adds	r3, #1
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3302      	adds	r3, #2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	7912      	ldrb	r2, [r2, #4]
 80021ac:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3303      	adds	r3, #3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	7952      	ldrb	r2, [r2, #5]
 80021b6:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	7992      	ldrb	r2, [r2, #6]
 80021c0:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3305      	adds	r3, #5
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	79d2      	ldrb	r2, [r2, #7]
 80021ca:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3306      	adds	r3, #6
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	7a12      	ldrb	r2, [r2, #8]
 80021d4:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7a5a      	ldrb	r2, [r3, #9]
 80021da:	7a99      	ldrb	r1, [r3, #10]
 80021dc:	0209      	lsls	r1, r1, #8
 80021de:	430a      	orrs	r2, r1
 80021e0:	7adb      	ldrb	r3, [r3, #11]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	4313      	orrs	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3307      	adds	r3, #7
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	7a5a      	ldrb	r2, [r3, #9]
 80021f4:	7a99      	ldrb	r1, [r3, #10]
 80021f6:	0209      	lsls	r1, r1, #8
 80021f8:	430a      	orrs	r2, r1
 80021fa:	7adb      	ldrb	r3, [r3, #11]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	4313      	orrs	r3, r2
 8002200:	121a      	asrs	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3308      	adds	r3, #8
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7a5a      	ldrb	r2, [r3, #9]
 800220e:	7a99      	ldrb	r1, [r3, #10]
 8002210:	0209      	lsls	r1, r1, #8
 8002212:	430a      	orrs	r2, r1
 8002214:	7adb      	ldrb	r3, [r3, #11]
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	4313      	orrs	r3, r2
 800221a:	141a      	asrs	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3309      	adds	r3, #9
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f103 000a 	add.w	r0, r3, #10
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	330c      	adds	r3, #12
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	4619      	mov	r1, r3
 8002232:	f00b f8bd 	bl	800d3b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002236:	7dba      	ldrb	r2, [r7, #22]
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4413      	add	r3, r2
 800223c:	3301      	adds	r3, #1
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <mavlink_msg_to_send_buffer+0x164>
 8002250:	230d      	movs	r3, #13
 8002252:	e000      	b.n	8002256 <mavlink_msg_to_send_buffer+0x166>
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29a      	uxth	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3301      	adds	r3, #1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1c98      	adds	r0, r3, #2
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8002286:	7dfa      	ldrb	r2, [r7, #23]
 8002288:	4619      	mov	r1, r3
 800228a:	f00b f891 	bl	800d3b0 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800228e:	7dbb      	ldrb	r3, [r7, #22]
 8002290:	b29a      	uxth	r2, r3
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b29a      	uxth	r2, r3
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3303      	adds	r3, #3
 80022a4:	b29b      	uxth	r3, r3
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <mavlink_msg_gps_raw_int_pack>:
 * @param yaw [cdeg] Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, int32_t alt_ellipsoid, uint32_t h_acc, uint32_t v_acc, uint32_t vel_acc, uint32_t hdg_acc, uint16_t yaw)
{
 80022ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b0:	b093      	sub	sp, #76	; 0x4c
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	4603      	mov	r3, r0
 80022b6:	603a      	str	r2, [r7, #0]
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	460b      	mov	r3, r1
 80022bc:	71bb      	strb	r3, [r7, #6]
    _mav_put_uint16_t(buf, 50, yaw);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#else
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
 80022be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c4:	613b      	str	r3, [r7, #16]
    packet.lat = lat;
 80022c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022c8:	617b      	str	r3, [r7, #20]
    packet.lon = lon;
 80022ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022cc:	61bb      	str	r3, [r7, #24]
    packet.alt = alt;
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	61fb      	str	r3, [r7, #28]
    packet.eph = eph;
 80022d2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80022d6:	843b      	strh	r3, [r7, #32]
    packet.epv = epv;
 80022d8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80022dc:	847b      	strh	r3, [r7, #34]	; 0x22
    packet.vel = vel;
 80022de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80022e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    packet.cog = cog;
 80022e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80022e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    packet.fix_type = fix_type;
 80022ea:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80022ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    packet.satellites_visible = satellites_visible;
 80022f2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80022f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    packet.alt_ellipsoid = alt_ellipsoid;
 80022fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022fe:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a
    packet.h_acc = h_acc;
 8002302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002306:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
    packet.v_acc = v_acc;
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230e:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
    packet.vel_acc = vel_acc;
 8002312:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002316:	f8c7 3036 	str.w	r3, [r7, #54]	; 0x36
    packet.hdg_acc = hdg_acc;
 800231a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231e:	f8c7 303a 	str.w	r3, [r7, #58]	; 0x3a
    packet.yaw = yaw;
 8002322:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002326:	87fb      	strh	r3, [r7, #62]	; 0x3e

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	f107 040c 	add.w	r4, r7, #12
 8002330:	469c      	mov	ip, r3
 8002332:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002336:	4665      	mov	r5, ip
 8002338:	4626      	mov	r6, r4
 800233a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800233c:	6028      	str	r0, [r5, #0]
 800233e:	6069      	str	r1, [r5, #4]
 8002340:	60aa      	str	r2, [r5, #8]
 8002342:	60eb      	str	r3, [r5, #12]
 8002344:	3410      	adds	r4, #16
 8002346:	f10c 0c10 	add.w	ip, ip, #16
 800234a:	4574      	cmp	r4, lr
 800234c:	d1f3      	bne.n	8002336 <mavlink_msg_gps_raw_int_pack+0x88>
 800234e:	4663      	mov	r3, ip
 8002350:	4622      	mov	r2, r4
 8002352:	6810      	ldr	r0, [r2, #0]
 8002354:	6018      	str	r0, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	f042 0218 	orr.w	r2, r2, #24
 800235e:	725a      	strb	r2, [r3, #9]
 8002360:	2200      	movs	r2, #0
 8002362:	729a      	strb	r2, [r3, #10]
 8002364:	2200      	movs	r2, #0
 8002366:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_GPS_RAW_INT_MIN_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
 8002368:	79ba      	ldrb	r2, [r7, #6]
 800236a:	79f9      	ldrb	r1, [r7, #7]
 800236c:	2318      	movs	r3, #24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2334      	movs	r3, #52	; 0x34
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	231e      	movs	r3, #30
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f7ff fe9c 	bl	80020b4 <mavlink_finalize_message>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3744      	adds	r7, #68	; 0x44
 8002382:	46bd      	mov	sp, r7
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002386 <mavlink_msg_gps_raw_int_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param gps_raw_int C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 8002386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002388:	b0a3      	sub	sp, #140	; 0x8c
 800238a:	af12      	add	r7, sp, #72	; 0x48
 800238c:	63ba      	str	r2, [r7, #56]	; 0x38
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	4603      	mov	r3, r0
 8002392:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002396:	460b      	mov	r3, r1
 8002398:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible, gps_raw_int->alt_ellipsoid, gps_raw_int->h_acc, gps_raw_int->v_acc, gps_raw_int->vel_acc, gps_raw_int->hdg_acc, gps_raw_int->yaw);
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	7f1b      	ldrb	r3, [r3, #28]
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	68dc      	ldr	r4, [r3, #12]
 80023b2:	62bc      	str	r4, [r7, #40]	; 0x28
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	691d      	ldr	r5, [r3, #16]
 80023b8:	627d      	str	r5, [r7, #36]	; 0x24
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	8a9b      	ldrh	r3, [r3, #20]
 80023be:	b29c      	uxth	r4, r3
 80023c0:	623c      	str	r4, [r7, #32]
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	8adb      	ldrh	r3, [r3, #22]
 80023c6:	b29d      	uxth	r5, r3
 80023c8:	61fd      	str	r5, [r7, #28]
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	8b1b      	ldrh	r3, [r3, #24]
 80023ce:	fa1f fc83 	uxth.w	ip, r3
 80023d2:	4664      	mov	r4, ip
 80023d4:	61bc      	str	r4, [r7, #24]
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	8b5b      	ldrh	r3, [r3, #26]
 80023da:	fa1f fc83 	uxth.w	ip, r3
 80023de:	4665      	mov	r5, ip
 80023e0:	617d      	str	r5, [r7, #20]
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	f893 c01d 	ldrb.w	ip, [r3, #29]
 80023e8:	4662      	mov	r2, ip
 80023ea:	613a      	str	r2, [r7, #16]
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	f8d3 c01e 	ldr.w	ip, [r3, #30]
 80023f2:	4664      	mov	r4, ip
 80023f4:	60fc      	str	r4, [r7, #12]
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	f8d3 c022 	ldr.w	ip, [r3, #34]	; 0x22
 80023fc:	4665      	mov	r5, ip
 80023fe:	60bd      	str	r5, [r7, #8]
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	f8d3 c026 	ldr.w	ip, [r3, #38]	; 0x26
 8002406:	4664      	mov	r4, ip
 8002408:	607c      	str	r4, [r7, #4]
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	f8d3 602a 	ldr.w	r6, [r3, #42]	; 0x2a
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800241a:	b29b      	uxth	r3, r3
 800241c:	f897 503e 	ldrb.w	r5, [r7, #62]	; 0x3e
 8002420:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8002424:	9310      	str	r3, [sp, #64]	; 0x40
 8002426:	920f      	str	r2, [sp, #60]	; 0x3c
 8002428:	960e      	str	r6, [sp, #56]	; 0x38
 800242a:	687e      	ldr	r6, [r7, #4]
 800242c:	960d      	str	r6, [sp, #52]	; 0x34
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	930c      	str	r3, [sp, #48]	; 0x30
 8002432:	68fe      	ldr	r6, [r7, #12]
 8002434:	960b      	str	r6, [sp, #44]	; 0x2c
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	920a      	str	r2, [sp, #40]	; 0x28
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	9309      	str	r3, [sp, #36]	; 0x24
 800243e:	69be      	ldr	r6, [r7, #24]
 8002440:	9608      	str	r6, [sp, #32]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	9207      	str	r2, [sp, #28]
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	9306      	str	r3, [sp, #24]
 800244a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800244c:	9605      	str	r6, [sp, #20]
 800244e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8002450:	9604      	str	r6, [sp, #16]
 8002452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002454:	9203      	str	r2, [sp, #12]
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	e9cd 0100 	strd	r0, r1, [sp]
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	4629      	mov	r1, r5
 8002462:	4620      	mov	r0, r4
 8002464:	f7ff ff23 	bl	80022ae <mavlink_msg_gps_raw_int_pack>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3744      	adds	r7, #68	; 0x44
 800246e:	46bd      	mov	sp, r7
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002472 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b088      	sub	sp, #32
 8002476:	af02      	add	r7, sp, #8
 8002478:	603a      	str	r2, [r7, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	460b      	mov	r3, r1
 8002482:	71bb      	strb	r3, [r7, #6]
 8002484:	4613      	mov	r3, r2
 8002486:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800248c:	797b      	ldrb	r3, [r7, #5]
 800248e:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800249a:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800249c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024a0:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 80024a2:	2303      	movs	r3, #3
 80024a4:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	f107 010c 	add.w	r1, r7, #12
 80024ae:	2209      	movs	r2, #9
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00a ff7d 	bl	800d3b0 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	725a      	strb	r2, [r3, #9]
 80024bc:	2200      	movs	r2, #0
 80024be:	729a      	strb	r2, [r3, #10]
 80024c0:	2200      	movs	r2, #0
 80024c2:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80024c4:	79ba      	ldrb	r2, [r7, #6]
 80024c6:	79f9      	ldrb	r1, [r7, #7]
 80024c8:	2332      	movs	r3, #50	; 0x32
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2309      	movs	r3, #9
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2309      	movs	r3, #9
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	f7ff fdee 	bl	80020b4 <mavlink_finalize_message>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80024e8:	2201      	movs	r2, #1
 80024ea:	4903      	ldr	r1, [pc, #12]	; (80024f8 <GPS_Init+0x14>)
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <GPS_Init+0x18>)
 80024ee:	f006 fde8 	bl	80090c2 <HAL_UART_Receive_IT>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200002e0 	.word	0x200002e0
 80024fc:	200006e0 	.word	0x200006e0

08002500 <Mavlink_TX_Heartbeat>:

void Mavlink_TX_Heartbeat() {
 8002500:	b580      	push	{r7, lr}
 8002502:	b0d4      	sub	sp, #336	; 0x150
 8002504:	af04      	add	r7, sp, #16
	mavlink_message_t MSG;
	uint16_t len = mavlink_msg_heartbeat_pack(
 8002506:	f107 0218 	add.w	r2, r7, #24
 800250a:	2303      	movs	r3, #3
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	2300      	movs	r3, #0
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	2351      	movs	r3, #81	; 0x51
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2303      	movs	r3, #3
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2302      	movs	r3, #2
 800251c:	2101      	movs	r1, #1
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff ffa7 	bl	8002472 <mavlink_msg_heartbeat_pack>
 8002524:	4603      	mov	r3, r0
 8002526:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
		0x01, 0x01, &MSG, 0x02, 0x03,  0x51,  0x00,  0x03);
	uint8_t  MAVLink_Buf[6 + 9 + 2];
	len = mavlink_msg_to_send_buffer(MAVLink_Buf, &MSG);
 800252a:	f107 0218 	add.w	r2, r7, #24
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fddc 	bl	80020f0 <mavlink_msg_to_send_buffer>
 8002538:	4603      	mov	r3, r0
 800253a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	HAL_UART_Transmit(&huart2, MAVLink_Buf, len, 100);
 800253e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8002542:	1d39      	adds	r1, r7, #4
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	4804      	ldr	r0, [pc, #16]	; (8002558 <Mavlink_TX_Heartbeat+0x58>)
 8002548:	f006 fd29 	bl	8008f9e <HAL_UART_Transmit>
}
 800254c:	bf00      	nop
 800254e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000724 	.word	0x20000724

0800255c <GPS_UART_CallBack>:
	for (int i = 0; i < sizeof(rx_buffer); i++){
		tx_buffer[i] = rx_buffer[i];
	}
	HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 100);
}*/
void GPS_UART_CallBack(){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	if (rx_data != '\n\n' && rx_index < sizeof(rx_buffer)) {
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <GPS_UART_CallBack+0x26>
		rx_buffer[rx_index++] = rx_data;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	b2d1      	uxtb	r1, r2
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 8002574:	7011      	strb	r1, [r2, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <GPS_UART_CallBack+0x60>)
 800257a:	7819      	ldrb	r1, [r3, #0]
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <GPS_UART_CallBack+0x64>)
 800257e:	5499      	strb	r1, [r3, r2]
 8002580:	e013      	b.n	80025aa <GPS_UART_CallBack+0x4e>
	} else {
		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <GPS_UART_CallBack+0x64>)
 8002584:	f000 f822 	bl	80025cc <GPS_validate>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <GPS_UART_CallBack+0x38>
			GPS_parse((char*) rx_buffer);
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <GPS_UART_CallBack+0x64>)
 8002590:	f000 f87e 	bl	8002690 <GPS_parse>
		flag_gps = 1;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <GPS_UART_CallBack+0x68>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		rx_index = 0;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <GPS_UART_CallBack+0x5c>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	2100      	movs	r1, #0
 80025a4:	4806      	ldr	r0, [pc, #24]	; (80025c0 <GPS_UART_CallBack+0x64>)
 80025a6:	f00a ff11 	bl	800d3cc <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80025aa:	2201      	movs	r2, #1
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <GPS_UART_CallBack+0x60>)
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <GPS_UART_CallBack+0x6c>)
 80025b0:	f006 fd87 	bl	80090c2 <HAL_UART_Receive_IT>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000364 	.word	0x20000364
 80025bc:	200002e0 	.word	0x200002e0
 80025c0:	200002e4 	.word	0x200002e4
 80025c4:	20000505 	.word	0x20000505
 80025c8:	200006e0 	.word	0x200006e0

080025cc <GPS_validate>:


int GPS_validate(char *nmeastr){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b24      	cmp	r3, #36	; 0x24
 80025e6:	d103      	bne.n	80025f0 <GPS_validate+0x24>
        i++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80025ee:	e00c      	b.n	800260a <GPS_validate+0x3e>
        return 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e047      	b.n	8002684 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4053      	eors	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        i++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <GPS_validate+0x5c>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b2a      	cmp	r3, #42	; 0x2a
 8002620:	d002      	beq.n	8002628 <GPS_validate+0x5c>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b4a      	cmp	r3, #74	; 0x4a
 8002626:	dde5      	ble.n	80025f4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b4a      	cmp	r3, #74	; 0x4a
 800262c:	dd01      	ble.n	8002632 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800262e:	2300      	movs	r3, #0
 8002630:	e028      	b.n	8002684 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b2a      	cmp	r3, #42	; 0x2a
 800263c:	d119      	bne.n	8002672 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3302      	adds	r3, #2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	490a      	ldr	r1, [pc, #40]	; (800268c <GPS_validate+0xc0>)
 8002662:	4618      	mov	r0, r3
 8002664:	f00b fd3a 	bl	800e0dc <siprintf>
    return((checkcalcstr[0] == check[0])
 8002668:	7a3a      	ldrb	r2, [r7, #8]
 800266a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800266c:	429a      	cmp	r2, r3
 800266e:	d108      	bne.n	8002682 <GPS_validate+0xb6>
 8002670:	e001      	b.n	8002676 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8002672:	2300      	movs	r3, #0
 8002674:	e006      	b.n	8002684 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002676:	7a7a      	ldrb	r2, [r7, #9]
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	429a      	cmp	r2, r3
 800267c:	d101      	bne.n	8002682 <GPS_validate+0xb6>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <GPS_validate+0xb8>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	08012bd0 	.word	0x08012bd0

08002690 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8002690:	b580      	push	{r7, lr}
 8002692:	b09e      	sub	sp, #120	; 0x78
 8002694:	af10      	add	r7, sp, #64	; 0x40
 8002696:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8002698:	2206      	movs	r2, #6
 800269a:	4976      	ldr	r1, [pc, #472]	; (8002874 <GPS_parse+0x1e4>)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f00b fdae 	bl	800e1fe <strncmp>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <GPS_parse+0x8e>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units, &GPS.ellipsoid) >= 1){
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <GPS_parse+0x1e8>)
 80026aa:	9308      	str	r3, [sp, #32]
 80026ac:	4b73      	ldr	r3, [pc, #460]	; (800287c <GPS_parse+0x1ec>)
 80026ae:	9307      	str	r3, [sp, #28]
 80026b0:	4b73      	ldr	r3, [pc, #460]	; (8002880 <GPS_parse+0x1f0>)
 80026b2:	9306      	str	r3, [sp, #24]
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <GPS_parse+0x1f4>)
 80026b6:	9305      	str	r3, [sp, #20]
 80026b8:	4b73      	ldr	r3, [pc, #460]	; (8002888 <GPS_parse+0x1f8>)
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	4b73      	ldr	r3, [pc, #460]	; (800288c <GPS_parse+0x1fc>)
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <GPS_parse+0x200>)
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <GPS_parse+0x204>)
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <GPS_parse+0x208>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4b73      	ldr	r3, [pc, #460]	; (800289c <GPS_parse+0x20c>)
 80026ce:	4a74      	ldr	r2, [pc, #464]	; (80028a0 <GPS_parse+0x210>)
 80026d0:	4974      	ldr	r1, [pc, #464]	; (80028a4 <GPS_parse+0x214>)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f00b fd22 	bl	800e11c <siscanf>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f340 80c6 	ble.w	800286c <GPS_parse+0x1dc>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <GPS_parse+0x218>)
 80026e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <GPS_parse+0x218>)
 80026e8:	7e1b      	ldrb	r3, [r3, #24]
 80026ea:	4618      	mov	r0, r3
 80026ec:	eeb0 0a67 	vmov.f32	s0, s15
 80026f0:	f000 f912 	bl	8002918 <GPS_nmea_to_dec>
 80026f4:	eef0 7a40 	vmov.f32	s15, s0
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <GPS_parse+0x218>)
 80026fa:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80026fe:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <GPS_parse+0x218>)
 8002700:	edd3 7a03 	vldr	s15, [r3, #12]
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <GPS_parse+0x218>)
 8002706:	7e5b      	ldrb	r3, [r3, #25]
 8002708:	4618      	mov	r0, r3
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	f000 f903 	bl	8002918 <GPS_nmea_to_dec>
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <GPS_parse+0x218>)
 8002718:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800271c:	e0a6      	b.n	800286c <GPS_parse+0x1dc>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 800271e:	2206      	movs	r2, #6
 8002720:	4962      	ldr	r1, [pc, #392]	; (80028ac <GPS_parse+0x21c>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f00b fd6b 	bl	800e1fe <strncmp>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <GPS_parse+0xc8>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <GPS_parse+0x220>)
 8002730:	9305      	str	r3, [sp, #20]
 8002732:	4b60      	ldr	r3, [pc, #384]	; (80028b4 <GPS_parse+0x224>)
 8002734:	9304      	str	r3, [sp, #16]
 8002736:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <GPS_parse+0x228>)
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <GPS_parse+0x200>)
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <GPS_parse+0x204>)
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	4b55      	ldr	r3, [pc, #340]	; (8002898 <GPS_parse+0x208>)
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <GPS_parse+0x20c>)
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <GPS_parse+0x210>)
 800274a:	495c      	ldr	r1, [pc, #368]	; (80028bc <GPS_parse+0x22c>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f00b fce5 	bl	800e11c <siscanf>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	e089      	b.n	800286c <GPS_parse+0x1dc>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8002758:	2206      	movs	r2, #6
 800275a:	4959      	ldr	r1, [pc, #356]	; (80028c0 <GPS_parse+0x230>)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f00b fd4e 	bl	800e1fe <strncmp>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d110      	bne.n	800278a <GPS_parse+0xfa>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <GPS_parse+0x234>)
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <GPS_parse+0x210>)
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <GPS_parse+0x200>)
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <GPS_parse+0x204>)
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <GPS_parse+0x208>)
 800277a:	4a48      	ldr	r2, [pc, #288]	; (800289c <GPS_parse+0x20c>)
 800277c:	4952      	ldr	r1, [pc, #328]	; (80028c8 <GPS_parse+0x238>)
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f00b fccc 	bl	800e11c <siscanf>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	e070      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800278a:	2206      	movs	r2, #6
 800278c:	494f      	ldr	r1, [pc, #316]	; (80028cc <GPS_parse+0x23c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f00b fd35 	bl	800e1fe <strncmp>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <GPS_parse+0x134>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <GPS_parse+0x240>)
 800279c:	9305      	str	r3, [sp, #20]
 800279e:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <GPS_parse+0x244>)
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <GPS_parse+0x248>)
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <GPS_parse+0x228>)
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <GPS_parse+0x24c>)
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <GPS_parse+0x250>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <GPS_parse+0x254>)
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <GPS_parse+0x258>)
 80027b6:	494d      	ldr	r1, [pc, #308]	; (80028ec <GPS_parse+0x25c>)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f00b fcaf 	bl	800e11c <siscanf>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	e053      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "GPGSA", 6)){
 80027c4:	494a      	ldr	r1, [pc, #296]	; (80028f0 <GPS_parse+0x260>)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd fd0a 	bl	80001e0 <strcmp>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d13d      	bne.n	800284e <GPS_parse+0x1be>
    	int a[12];
        if(sscanf(GPSstrParse, "$GPGSA,%c,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f", &GPS.mode, &GPS.fix_type,&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7],&a[8],&a[9],&a[10],&a[11], &GPS.PDOP, &GPS.HDOP, &GPS.VDOP) >= 1)
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <GPS_parse+0x264>)
 80027d4:	930e      	str	r3, [sp, #56]	; 0x38
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <GPS_parse+0x268>)
 80027d8:	930d      	str	r3, [sp, #52]	; 0x34
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <GPS_parse+0x26c>)
 80027dc:	930c      	str	r3, [sp, #48]	; 0x30
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	332c      	adds	r3, #44	; 0x2c
 80027e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	3328      	adds	r3, #40	; 0x28
 80027ec:	930a      	str	r3, [sp, #40]	; 0x28
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	9309      	str	r3, [sp, #36]	; 0x24
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	3320      	adds	r3, #32
 80027fc:	9308      	str	r3, [sp, #32]
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	331c      	adds	r3, #28
 8002804:	9307      	str	r3, [sp, #28]
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	3318      	adds	r3, #24
 800280c:	9306      	str	r3, [sp, #24]
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	3314      	adds	r3, #20
 8002814:	9305      	str	r3, [sp, #20]
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	3310      	adds	r3, #16
 800281c:	9304      	str	r3, [sp, #16]
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	330c      	adds	r3, #12
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	3308      	adds	r3, #8
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	3304      	adds	r3, #4
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <GPS_parse+0x270>)
 800283e:	4a31      	ldr	r2, [pc, #196]	; (8002904 <GPS_parse+0x274>)
 8002840:	4931      	ldr	r1, [pc, #196]	; (8002908 <GPS_parse+0x278>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f00b fc6a 	bl	800e11c <siscanf>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	e00e      	b.n	800286c <GPS_parse+0x1dc>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPRMA", 6)){
 800284e:	2206      	movs	r2, #6
 8002850:	492e      	ldr	r1, [pc, #184]	; (800290c <GPS_parse+0x27c>)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f00b fcd3 	bl	800e1fe <strncmp>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <GPS_parse+0x1dc>
        if(sscanf(GPSstrParse, "$GPRMA,%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%*[^,], %f", &GPS.cog) >= 1)
 800285e:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <GPS_parse+0x280>)
 8002860:	492c      	ldr	r1, [pc, #176]	; (8002914 <GPS_parse+0x284>)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f00b fc5a 	bl	800e11c <siscanf>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
            return;
    }

}
 800286c:	3738      	adds	r7, #56	; 0x38
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	08012bd8 	.word	0x08012bd8
 8002878:	200003d4 	.word	0x200003d4
 800287c:	20000394 	.word	0x20000394
 8002880:	20000390 	.word	0x20000390
 8002884:	2000038c 	.word	0x2000038c
 8002888:	20000388 	.word	0x20000388
 800288c:	20000384 	.word	0x20000384
 8002890:	20000381 	.word	0x20000381
 8002894:	20000374 	.word	0x20000374
 8002898:	20000380 	.word	0x20000380
 800289c:	20000378 	.word	0x20000378
 80028a0:	2000037c 	.word	0x2000037c
 80028a4:	08012be0 	.word	0x08012be0
 80028a8:	20000368 	.word	0x20000368
 80028ac:	08012c08 	.word	0x08012c08
 80028b0:	200003a0 	.word	0x200003a0
 80028b4:	2000039c 	.word	0x2000039c
 80028b8:	20000398 	.word	0x20000398
 80028bc:	08012c10 	.word	0x08012c10
 80028c0:	08012c30 	.word	0x08012c30
 80028c4:	200003a4 	.word	0x200003a4
 80028c8:	08012c38 	.word	0x08012c38
 80028cc:	08012c54 	.word	0x08012c54
 80028d0:	200003bc 	.word	0x200003bc
 80028d4:	200003b8 	.word	0x200003b8
 80028d8:	200003b5 	.word	0x200003b5
 80028dc:	200003b4 	.word	0x200003b4
 80028e0:	200003b0 	.word	0x200003b0
 80028e4:	200003ac 	.word	0x200003ac
 80028e8:	200003a8 	.word	0x200003a8
 80028ec:	08012c5c 	.word	0x08012c5c
 80028f0:	08012c7c 	.word	0x08012c7c
 80028f4:	200003c4 	.word	0x200003c4
 80028f8:	200003c8 	.word	0x200003c8
 80028fc:	200003c0 	.word	0x200003c0
 8002900:	200003cc 	.word	0x200003cc
 8002904:	200003bd 	.word	0x200003bd
 8002908:	08012c84 	.word	0x08012c84
 800290c:	08012cc0 	.word	0x08012cc0
 8002910:	200003d0 	.word	0x200003d0
 8002914:	08012cc8 	.word	0x08012cc8

08002918 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002922:	4603      	mov	r3, r0
 8002924:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002926:	ed97 7a01 	vldr	s14, [r7, #4]
 800292a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80029ac <GPS_nmea_to_dec+0x94>
 800292e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002936:	ee17 3a90 	vmov	r3, s15
 800293a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2264      	movs	r2, #100	; 0x64
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8002958:	ed97 7a03 	vldr	s14, [r7, #12]
 800295c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80029b0 <GPS_nmea_to_dec+0x98>
 8002960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002964:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	2b53      	cmp	r3, #83	; 0x53
 8002982:	d002      	beq.n	800298a <GPS_nmea_to_dec+0x72>
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b57      	cmp	r3, #87	; 0x57
 8002988:	d105      	bne.n	8002996 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800298a:	edd7 7a05 	vldr	s15, [r7, #20]
 800298e:	eef1 7a67 	vneg.f32	s15, s15
 8002992:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	ee07 3a90 	vmov	s15, r3
}
 800299c:	eeb0 0a67 	vmov.f32	s0, s15
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	42c80000 	.word	0x42c80000
 80029b0:	42700000 	.word	0x42700000
 80029b4:	00000000 	.word	0x00000000

080029b8 <Transmit_mavlink_data_GPS>:

void Transmit_mavlink_data_GPS(mavlink_gps_raw_int_t data){
 80029b8:	b084      	sub	sp, #16
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b0e2      	sub	sp, #392	; 0x188
 80029be:	af00      	add	r7, sp, #0
 80029c0:	f507 7cc8 	add.w	ip, r7, #400	; 0x190
 80029c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	mavlink_message_t msg;
	uint8_t _buffer[100] = {0};
 80029c8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80029cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2260      	movs	r2, #96	; 0x60
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f00a fcf6 	bl	800d3cc <memset>
	data.time_usec = GPS.utc_time;
 80029e0:	4b5f      	ldr	r3, [pc, #380]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f997 	bl	8000d18 <__aeabi_f2ulz>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80029f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	data.alt = GPS.altitude_ft;
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 80029fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	data.alt_ellipsoid = GPS.ellipsoid;
 8002a0a:	4b55      	ldr	r3, [pc, #340]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	f8c7 31ae 	str.w	r3, [r7, #430]	; 0x1ae
	data.lat = GPS.dec_latitude;
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	data.lon = GPS.dec_longitude;
 8002a24:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2e:	ee17 3a90 	vmov	r3, s15
 8002a32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	data.eph = GPS.HDOP * 100;
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a38:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002a3c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002b64 <Transmit_mavlink_data_GPS+0x1ac>
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
	data.epv = GPS.VDOP * 100;
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a54:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a58:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002b64 <Transmit_mavlink_data_GPS+0x1ac>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a64:	ee17 3a90 	vmov	r3, s15
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
	data.fix_type = GPS.fix_type;
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
	data.vel = GPS.speed_km * 0.277778;
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd7b 	bl	8000578 <__aeabi_f2d>
 8002a82:	a335      	add	r3, pc, #212	; (adr r3, 8002b58 <Transmit_mavlink_data_GPS+0x1a0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdce 	bl	8000628 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f8a0 	bl	8000bd8 <__aeabi_d2uiz>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
	data.cog = GPS.cog;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002aa2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 3a90 	vmov	r3, s15
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
	data.satellites_visible = GPS.satelites;
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <Transmit_mavlink_data_GPS+0x1a8>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
	data.alt_ellipsoid = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	data.h_acc = 1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
	data.v_acc = 1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
	data.vel_acc = 1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	data.hdg_acc = 1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8a7 31c0 	strh.w	r3, [r7, #448]	; 0x1c0
	data.yaw = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
	mavlink_msg_gps_raw_int_encode(0x01, 0x01, &msg, &data);
 8002b10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b14:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff fc33 	bl	8002386 <mavlink_msg_gps_raw_int_encode>
	uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 8002b20:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002b24:	463b      	mov	r3, r7
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fae1 	bl	80020f0 <mavlink_msg_to_send_buffer>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	HAL_UART_Transmit(&huart2, _buffer, len, 1000);
 8002b34:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4639      	mov	r1, r7
 8002b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <Transmit_mavlink_data_GPS+0x1b0>)
 8002b42:	f006 fa2c 	bl	8008f9e <HAL_UART_Transmit>
}
 8002b46:	bf00      	nop
 8002b48:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b52:	b004      	add	sp, #16
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	60631727 	.word	0x60631727
 8002b5c:	3fd1c71d 	.word	0x3fd1c71d
 8002b60:	20000368 	.word	0x20000368
 8002b64:	42c80000 	.word	0x42c80000
 8002b68:	20000724 	.word	0x20000724

08002b6c <crc_accumulate>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4053      	eors	r3, r2
 8002b82:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	b25a      	sxtb	r2, r3
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4053      	eors	r3, r2
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4053      	eors	r3, r2
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4053      	eors	r3, r2
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	4053      	eors	r3, r2
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	801a      	strh	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <crc_init>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bde:	801a      	strh	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <crc_calculate>:
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8002bf8:	f107 030e 	add.w	r3, r7, #14
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ffe7 	bl	8002bd0 <crc_init>
	while (length--) {
 8002c02:	e009      	b.n	8002c18 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f107 020e 	add.w	r2, r7, #14
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffaa 	bl	8002b6c <crc_accumulate>
	while (length--) {
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	807a      	strh	r2, [r7, #2]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <crc_calculate+0x18>
        return crcTmp;
 8002c22:	89fb      	ldrh	r3, [r7, #14]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <crc_accumulate_buffer>:
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002c3e:	e007      	b.n	8002c50 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	617a      	str	r2, [r7, #20]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff8e 	bl	8002b6c <crc_accumulate>
	while (length--) {
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	80fa      	strh	r2, [r7, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f2      	bne.n	8002c40 <crc_accumulate_buffer+0x14>
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <mavlink_sha256_init>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <mavlink_sha256_init+0x50>)
 8002c7c:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <mavlink_sha256_init+0x54>)
 8002c82:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <mavlink_sha256_init+0x58>)
 8002c88:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <mavlink_sha256_init+0x5c>)
 8002c8e:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <mavlink_sha256_init+0x60>)
 8002c94:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <mavlink_sha256_init+0x64>)
 8002c9a:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <mavlink_sha256_init+0x68>)
 8002ca0:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <mavlink_sha256_init+0x6c>)
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	6a09e667 	.word	0x6a09e667
 8002cb8:	bb67ae85 	.word	0xbb67ae85
 8002cbc:	3c6ef372 	.word	0x3c6ef372
 8002cc0:	a54ff53a 	.word	0xa54ff53a
 8002cc4:	510e527f 	.word	0x510e527f
 8002cc8:	9b05688c 	.word	0x9b05688c
 8002ccc:	1f83d9ab 	.word	0x1f83d9ab
 8002cd0:	5be0cd19 	.word	0x5be0cd19

08002cd4 <mavlink_sha256_calc>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b0cf      	sub	sp, #316	; 0x13c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ce8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cec:	6019      	str	r1, [r3, #0]
    AA = m->counter[0];
 8002cee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002cf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8002cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8002d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8002d1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8002d2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8002d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8002d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8002d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for (i = 0; i < 16; ++i)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d74:	e016      	b.n	8002da4 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002d80:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	dde4      	ble.n	8002d76 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8002dac:	2310      	movs	r3, #16
 8002dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002db2:	e069      	b.n	8002e88 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db8:	1e9a      	subs	r2, r3, #2
 8002dba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dce:	1e99      	subs	r1, r3, #2
 8002dd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ddc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002de0:	405a      	eors	r2, r3
 8002de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de6:	1e99      	subs	r1, r3, #2
 8002de8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002df0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002df4:	0a9b      	lsrs	r3, r3, #10
 8002df6:	405a      	eors	r2, r3
 8002df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfc:	1fd9      	subs	r1, r3, #7
 8002dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e0a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e10:	f1a3 010f 	sub.w	r1, r3, #15
 8002e14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e20:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e28:	f1a3 000f 	sub.w	r0, r3, #15
 8002e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e38:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002e3c:	4059      	eors	r1, r3
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e42:	f1a3 000f 	sub.w	r0, r3, #15
 8002e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002e56:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5c:	f1a3 0110 	sub.w	r1, r3, #16
 8002e60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e6c:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8c:	2b3f      	cmp	r3, #63	; 0x3f
 8002e8e:	dd91      	ble.n	8002db4 <mavlink_sha256_calc+0xe0>
    for (i = 0; i < 64; i++) {
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e96:	e078      	b.n	8002f8a <mavlink_sha256_calc+0x2b6>
	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002e98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e9c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002ea0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ea4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002ea8:	405a      	eors	r2, r3
 8002eaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002eae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002eb2:	405a      	eors	r2, r3
 8002eb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002eb8:	441a      	add	r2, r3
 8002eba:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ec2:	4019      	ands	r1, r3
 8002ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ec8:	43d8      	mvns	r0, r3
 8002eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ece:	4003      	ands	r3, r0
 8002ed0:	404b      	eors	r3, r1
 8002ed2:	441a      	add	r2, r3
 8002ed4:	496e      	ldr	r1, [pc, #440]	; (8003090 <mavlink_sha256_calc+0x3bc>)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ede:	441a      	add	r2, r3
 8002ee0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ee8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002eec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002ef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002efa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002f06:	405a      	eors	r2, r3
 8002f08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002f10:	405a      	eors	r2, r3
 8002f12:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f1a:	4059      	eors	r1, r3
 8002f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f20:	4019      	ands	r1, r3
 8002f22:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f2a:	4003      	ands	r3, r0
 8002f2c:	404b      	eors	r3, r1
 8002f2e:	4413      	add	r3, r2
 8002f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HH = GG;
 8002f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8002f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8002f44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8002f4c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002f50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f54:	4413      	add	r3, r2
 8002f56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8002f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8002f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8002f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8002f72:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f84:	3301      	adds	r3, #1
 8002f86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8e:	2b3f      	cmp	r3, #63	; 0x3f
 8002f90:	dd82      	ble.n	8002e98 <mavlink_sha256_calc+0x1c4>
    m->counter[0] += AA;
 8002f92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fa2:	441a      	add	r2, r3
 8002fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002fb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fc0:	441a      	add	r2, r3
 8002fc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002fce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002fde:	441a      	add	r2, r3
 8002fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002fe4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002fec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ff0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ffc:	441a      	add	r2, r3
 8002ffe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003002:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800300a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800300e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800301a:	441a      	add	r2, r3
 800301c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003020:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8003028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800302c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003038:	441a      	add	r2, r3
 800303a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800303e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8003046:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800304a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003056:	441a      	add	r2, r3
 8003058:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800305c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8003064:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003068:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003074:	441a      	add	r2, r3
 8003076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800307a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003082:	bf00      	nop
 8003084:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	08012e70 	.word	0x08012e70

08003094 <mavlink_sha256_update>:
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b09c      	sub	sp, #112	; 0x70
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    m->sz[0] += len * 8;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d904      	bls.n	80030cc <mavlink_sha256_update+0x38>
	++m->sz[1];
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80030d6:	e054      	b.n	8003182 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d201      	bcs.n	80030ec <mavlink_sha256_update+0x58>
            l = len;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	667b      	str	r3, [r7, #100]	; 0x64
	memcpy(m->u.save_bytes + offset, p, l);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80030f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f4:	4413      	add	r3, r2
 80030f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00a f958 	bl	800d3b0 <memcpy>
	offset += l;
 8003100:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003104:	4413      	add	r3, r2
 8003106:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8003108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800310a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310c:	4413      	add	r3, r2
 800310e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8003118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d131      	bne.n	8003182 <mavlink_sha256_update+0xee>
	    const uint32_t *u = m->u.save_u32;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3328      	adds	r3, #40	; 0x28
 8003122:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8003124:	2300      	movs	r3, #0
 8003126:	663b      	str	r3, [r7, #96]	; 0x60
 8003128:	e020      	b.n	800316c <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800312a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003130:	4413      	add	r3, r2
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8003134:	f107 0210 	add.w	r2, r7, #16
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	78da      	ldrb	r2, [r3, #3]
 8003144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003146:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8003148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314a:	3301      	adds	r3, #1
 800314c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800314e:	7892      	ldrb	r2, [r2, #2]
 8003150:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8003152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003154:	3302      	adds	r3, #2
 8003156:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003158:	7852      	ldrb	r2, [r2, #1]
 800315a:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800315c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315e:	3303      	adds	r3, #3
 8003160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	3301      	adds	r3, #1
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
 800316c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316e:	2b0f      	cmp	r3, #15
 8003170:	dddb      	ble.n	800312a <mavlink_sha256_update+0x96>
	    mavlink_sha256_calc(m, current);
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff fdab 	bl	8002cd4 <mavlink_sha256_calc>
	    offset = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1a7      	bne.n	80030d8 <mavlink_sha256_update+0x44>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3770      	adds	r7, #112	; 0x70
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <mavlink_sha256_final_48>:
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b098      	sub	sp, #96	; 0x60
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
    unsigned offset = (m->sz[0] / 8) % 64;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80031a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031aa:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 80031ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b2:	3301      	adds	r3, #1
 80031b4:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3308      	adds	r3, #8
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
    *zeros = 0x80;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	3301      	adds	r3, #1
 80031c6:	2247      	movs	r2, #71	; 0x47
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f00a f8fe 	bl	800d3cc <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d6:	3307      	adds	r3, #7
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	3360      	adds	r3, #96	; 0x60
 80031dc:	443b      	add	r3, r7
 80031de:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0a1a      	lsrs	r2, r3, #8
 80031e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ea:	3306      	adds	r3, #6
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	443b      	add	r3, r7
 80031f2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0c1a      	lsrs	r2, r3, #16
 80031fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031fe:	3305      	adds	r3, #5
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	443b      	add	r3, r7
 8003206:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e1a      	lsrs	r2, r3, #24
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	3304      	adds	r3, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	443b      	add	r3, r7
 800321a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	3303      	adds	r3, #3
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	443b      	add	r3, r7
 800322c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0a1a      	lsrs	r2, r3, #8
 8003236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003238:	3302      	adds	r3, #2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	443b      	add	r3, r7
 8003240:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0c1a      	lsrs	r2, r3, #16
 800324a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324c:	3301      	adds	r3, #1
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	3360      	adds	r3, #96	; 0x60
 8003252:	443b      	add	r3, r7
 8003254:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	f107 020c 	add.w	r2, r7, #12
 8003264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003266:	4413      	add	r3, r2
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
    mavlink_sha256_update(m, zeros, dstart + 8);
 800326c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326e:	f103 0208 	add.w	r2, r3, #8
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff0b 	bl	8003094 <mavlink_sha256_update>
    result[0] = p[3];
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	78da      	ldrb	r2, [r3, #3]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800328c:	7892      	ldrb	r2, [r2, #2]
 800328e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3302      	adds	r3, #2
 8003294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003296:	7852      	ldrb	r2, [r2, #1]
 8003298:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3303      	adds	r3, #3
 800329e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3304      	adds	r3, #4
 80032a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032aa:	79d2      	ldrb	r2, [r2, #7]
 80032ac:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3305      	adds	r3, #5
 80032b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032b4:	7992      	ldrb	r2, [r2, #6]
 80032b6:	701a      	strb	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	3760      	adds	r7, #96	; 0x60
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <mavlink_get_channel_status>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <mavlink_get_channel_status+0x24>)
 80032d6:	4413      	add	r3, r2
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	2000043c 	.word	0x2000043c

080032e8 <mavlink_sign_packet>:
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b0a0      	sub	sp, #128	; 0x80
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	70fb      	strb	r3, [r7, #3]
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <mavlink_sign_packet+0x20>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <mavlink_sign_packet+0x24>
	    return 0;
 8003308:	2300      	movs	r3, #0
 800330a:	e04f      	b.n	80033ac <mavlink_sign_packet+0xc4>
	signature[0] = signing->link_id;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	785a      	ldrb	r2, [r3, #1]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3301      	adds	r3, #1
 8003322:	f107 0110 	add.w	r1, r7, #16
 8003326:	2206      	movs	r2, #6
 8003328:	4618      	mov	r0, r3
 800332a:	f00a f841 	bl	800d3b0 <memcpy>
	signing->timestamp++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003334:	1c54      	adds	r4, r2, #1
 8003336:	f143 0500 	adc.w	r5, r3, #0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	mavlink_sha256_init(&ctx);
 8003340:	f107 0318 	add.w	r3, r7, #24
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fc8d 	bl	8002c64 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f103 0110 	add.w	r1, r3, #16
 8003350:	f107 0318 	add.w	r3, r7, #24
 8003354:	2220      	movs	r2, #32
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe9c 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fe95 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800336a:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fe8c 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	2202      	movs	r2, #2
 8003382:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe84 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 800338c:	f107 0318 	add.w	r3, r7, #24
 8003390:	2207      	movs	r2, #7
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fe7d 	bl	8003094 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1dda      	adds	r2, r3, #7
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fef4 	bl	8003192 <mavlink_sha256_final_48>
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80033aa:	230d      	movs	r3, #13
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3780      	adds	r7, #128	; 0x80
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}

080033b4 <_mav_trim_payload>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80033c0:	e002      	b.n	80033c8 <_mav_trim_payload+0x14>
		length--;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d906      	bls.n	80033dc <_mav_trim_payload+0x28>
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f2      	beq.n	80033c2 <_mav_trim_payload+0xe>
	return length;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <mavlink_finalize_message_buffer>:
{
 80033ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ec:	b08f      	sub	sp, #60	; 0x3c
 80033ee:	af04      	add	r7, sp, #16
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	72fb      	strb	r3, [r7, #11]
 80033f8:	4613      	mov	r3, r2
 80033fa:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7b1b      	ldrb	r3, [r3, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8003410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <mavlink_finalize_message_buffer+0x4e>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <mavlink_finalize_message_buffer+0x50>
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800343e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 800344a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <mavlink_finalize_message_buffer+0x6c>
 8003452:	230d      	movs	r3, #13
 8003454:	e000      	b.n	8003458 <mavlink_finalize_message_buffer+0x6e>
 8003456:	2300      	movs	r3, #0
 8003458:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800345c:	230a      	movs	r3, #10
 800345e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (mavlink1) {
 8003462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22fe      	movs	r2, #254	; 0xfe
 800346e:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003470:	2306      	movs	r3, #6
 8003472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003476:	e002      	b.n	800347e <mavlink_finalize_message_buffer+0x94>
		msg->magic = MAVLINK_STX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22fd      	movs	r2, #253	; 0xfd
 800347c:	709a      	strb	r2, [r3, #2]
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800347e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <mavlink_finalize_message_buffer+0xb2>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	330c      	adds	r3, #12
 800348a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff8f 	bl	80033b4 <_mav_trim_payload>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	e001      	b.n	80034a0 <mavlink_finalize_message_buffer+0xb6>
 800349c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	7afa      	ldrb	r2, [r7, #11]
 80034a8:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	7aba      	ldrb	r2, [r7, #10]
 80034ae:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80034b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	711a      	strb	r2, [r3, #4]
	msg->compat_flags = 0;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	799a      	ldrb	r2, [r3, #6]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	799b      	ldrb	r3, [r3, #6]
 80034de:	3301      	adds	r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	719a      	strb	r2, [r3, #6]
	buf[0] = msg->magic;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80034f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	799b      	ldrb	r3, [r3, #6]
 80034fe:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	79db      	ldrb	r3, [r3, #7]
 8003504:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	7a1b      	ldrb	r3, [r3, #8]
 800350a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7a5a      	ldrb	r2, [r3, #9]
 8003510:	7a99      	ldrb	r1, [r3, #10]
 8003512:	0209      	lsls	r1, r1, #8
 8003514:	430a      	orrs	r2, r1
 8003516:	7adb      	ldrb	r3, [r3, #11]
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	4313      	orrs	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	777b      	strb	r3, [r7, #29]
 8003520:	e030      	b.n	8003584 <mavlink_finalize_message_buffer+0x19a>
		buf[2] = msg->incompat_flags;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	795b      	ldrb	r3, [r3, #5]
 800352c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	799b      	ldrb	r3, [r3, #6]
 8003532:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	79db      	ldrb	r3, [r3, #7]
 8003538:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	7a5a      	ldrb	r2, [r3, #9]
 8003544:	7a99      	ldrb	r1, [r3, #10]
 8003546:	0209      	lsls	r1, r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	7adb      	ldrb	r3, [r3, #11]
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	4313      	orrs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	7a5a      	ldrb	r2, [r3, #9]
 8003558:	7a99      	ldrb	r1, [r3, #10]
 800355a:	0209      	lsls	r1, r1, #8
 800355c:	430a      	orrs	r2, r1
 800355e:	7adb      	ldrb	r3, [r3, #11]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	4313      	orrs	r3, r2
 8003564:	121b      	asrs	r3, r3, #8
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	7a5a      	ldrb	r2, [r3, #9]
 8003570:	7a99      	ldrb	r1, [r3, #10]
 8003572:	0209      	lsls	r1, r1, #8
 8003574:	430a      	orrs	r2, r1
 8003576:	7adb      	ldrb	r3, [r3, #11]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	4313      	orrs	r3, r2
 800357c:	141b      	asrs	r3, r3, #16
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	3301      	adds	r3, #1
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb28 	bl	8002bec <crc_calculate>
 800359c:	4603      	mov	r3, r0
 800359e:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f103 010c 	add.w	r1, r3, #12
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	78db      	ldrb	r3, [r3, #3]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	f107 0316 	add.w	r3, r7, #22
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fb3b 	bl	8002c2c <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80035b6:	f107 0216 	add.w	r2, r7, #22
 80035ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fad3 	bl	8002b6c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80035c6:	8af9      	ldrh	r1, [r7, #22]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	330c      	adds	r3, #12
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	78d2      	ldrb	r2, [r2, #3]
 80035d0:	4413      	add	r3, r2
 80035d2:	b2ca      	uxtb	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b299      	uxth	r1, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f103 020c 	add.w	r2, r3, #12
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	b2ca      	uxtb	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
	msg->checksum = checksum;
 80035ee:	8afa      	ldrh	r2, [r7, #22]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	801a      	strh	r2, [r3, #0]
	if (signing) {
 80035f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01a      	beq.n	8003632 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	310c      	adds	r1, #12
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8003616:	4401      	add	r1, r0
 8003618:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800361c:	f107 0018 	add.w	r0, r7, #24
 8003620:	9102      	str	r1, [sp, #8]
 8003622:	9201      	str	r2, [sp, #4]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4633      	mov	r3, r6
 8003628:	4602      	mov	r2, r0
 800362a:	4629      	mov	r1, r5
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff fe5b 	bl	80032e8 <mavlink_sign_packet>
	return msg->len + header_len + 2 + signature_len;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	78db      	ldrb	r3, [r3, #3]
 8003636:	b29a      	uxth	r2, r3
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	b29b      	uxth	r3, r3
 800363e:	4413      	add	r3, r2
 8003640:	b29a      	uxth	r2, r3
 8003642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003646:	b29b      	uxth	r3, r3
 8003648:	4413      	add	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	3302      	adds	r3, #2
 800364e:	b29b      	uxth	r3, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	372c      	adds	r7, #44	; 0x2c
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003658 <mavlink_finalize_message_chan>:
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	70fb      	strb	r3, [r7, #3]
 800366a:	460b      	mov	r3, r1
 800366c:	70bb      	strb	r3, [r7, #2]
 800366e:	4613      	mov	r3, r2
 8003670:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe23 	bl	80032c0 <mavlink_get_channel_status>
 800367a:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800367c:	78ba      	ldrb	r2, [r7, #2]
 800367e:	78f9      	ldrb	r1, [r7, #3]
 8003680:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	7f3b      	ldrb	r3, [r7, #28]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	7e3b      	ldrb	r3, [r7, #24]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff feaa 	bl	80033ea <mavlink_finalize_message_buffer>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <mavlink_finalize_message>:
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	70fb      	strb	r3, [r7, #3]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70bb      	strb	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80036ba:	78ba      	ldrb	r2, [r7, #2]
 80036bc:	78f9      	ldrb	r1, [r7, #3]
 80036be:	7d3b      	ldrb	r3, [r7, #20]
 80036c0:	9302      	str	r3, [sp, #8]
 80036c2:	7c3b      	ldrb	r3, [r7, #16]
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	787b      	ldrb	r3, [r7, #1]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffc3 	bl	8003658 <mavlink_finalize_message_chan>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <mavlink_msg_to_send_buffer>:
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
        uint8_t length = msg->len;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	73fb      	strb	r3, [r7, #15]
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	2bfe      	cmp	r3, #254	; 0xfe
 80036f2:	d13a      	bne.n	800376a <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80036f8:	2305      	movs	r3, #5
 80036fa:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3301      	adds	r3, #1
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3302      	adds	r3, #2
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	7992      	ldrb	r2, [r2, #6]
 8003714:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3303      	adds	r3, #3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	79d2      	ldrb	r2, [r2, #7]
 800371e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	7a12      	ldrb	r2, [r2, #8]
 8003728:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7a5a      	ldrb	r2, [r3, #9]
 800372e:	7a99      	ldrb	r1, [r3, #10]
 8003730:	0209      	lsls	r1, r1, #8
 8003732:	430a      	orrs	r2, r1
 8003734:	7adb      	ldrb	r3, [r3, #11]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4313      	orrs	r3, r2
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3305      	adds	r3, #5
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1d98      	adds	r0, r3, #6
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f103 010c 	add.w	r1, r3, #12
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	461a      	mov	r2, r3
 8003754:	f009 fe2c 	bl	800d3b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003758:	7dbb      	ldrb	r3, [r7, #22]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	78d2      	ldrb	r2, [r2, #3]
 800375e:	4413      	add	r3, r2
 8003760:	3301      	adds	r3, #1
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e06c      	b.n	8003844 <mavlink_msg_to_send_buffer+0x168>
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fe1e 	bl	80033b4 <_mav_trim_payload>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800377c:	2309      	movs	r3, #9
 800377e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	789a      	ldrb	r2, [r3, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3302      	adds	r3, #2
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	7912      	ldrb	r2, [r2, #4]
 8003798:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3303      	adds	r3, #3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	7952      	ldrb	r2, [r2, #5]
 80037a2:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	7992      	ldrb	r2, [r2, #6]
 80037ac:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3305      	adds	r3, #5
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	79d2      	ldrb	r2, [r2, #7]
 80037b6:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3306      	adds	r3, #6
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	7a12      	ldrb	r2, [r2, #8]
 80037c0:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	7a5a      	ldrb	r2, [r3, #9]
 80037c6:	7a99      	ldrb	r1, [r3, #10]
 80037c8:	0209      	lsls	r1, r1, #8
 80037ca:	430a      	orrs	r2, r1
 80037cc:	7adb      	ldrb	r3, [r3, #11]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	4313      	orrs	r3, r2
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3307      	adds	r3, #7
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	7a5a      	ldrb	r2, [r3, #9]
 80037e0:	7a99      	ldrb	r1, [r3, #10]
 80037e2:	0209      	lsls	r1, r1, #8
 80037e4:	430a      	orrs	r2, r1
 80037e6:	7adb      	ldrb	r3, [r3, #11]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	4313      	orrs	r3, r2
 80037ec:	121a      	asrs	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3308      	adds	r3, #8
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7a5a      	ldrb	r2, [r3, #9]
 80037fa:	7a99      	ldrb	r1, [r3, #10]
 80037fc:	0209      	lsls	r1, r1, #8
 80037fe:	430a      	orrs	r2, r1
 8003800:	7adb      	ldrb	r3, [r3, #11]
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	4313      	orrs	r3, r2
 8003806:	141a      	asrs	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3309      	adds	r3, #9
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 000a 	add.w	r0, r3, #10
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	4619      	mov	r1, r3
 800381e:	f009 fdc7 	bl	800d3b0 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003822:	7dba      	ldrb	r2, [r7, #22]
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4413      	add	r3, r2
 8003828:	3301      	adds	r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <mavlink_msg_to_send_buffer+0x164>
 800383c:	230d      	movs	r3, #13
 800383e:	e000      	b.n	8003842 <mavlink_msg_to_send_buffer+0x166>
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29a      	uxth	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3301      	adds	r3, #1
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1c98      	adds	r0, r3, #2
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8003872:	7dfa      	ldrb	r2, [r7, #23]
 8003874:	4619      	mov	r1, r3
 8003876:	f009 fd9b 	bl	800d3b0 <memcpy>
	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800387a:	7dbb      	ldrb	r3, [r7, #22]
 800387c:	b29a      	uxth	r2, r3
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	b29b      	uxth	r3, r3
 8003882:	4413      	add	r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4413      	add	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	3303      	adds	r3, #3
 8003890:	b29b      	uxth	r3, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <mavlink_msg_raw_imu_pack>:
 * @param temperature [cdegC] Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag, uint8_t id, int16_t temperature)
{
 800389a:	b5b0      	push	{r4, r5, r7, lr}
 800389c:	b08c      	sub	sp, #48	; 0x30
 800389e:	af02      	add	r7, sp, #8
 80038a0:	4603      	mov	r3, r0
 80038a2:	603a      	str	r2, [r7, #0]
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	460b      	mov	r3, r1
 80038a8:	71bb      	strb	r3, [r7, #6]
    _mav_put_int16_t(buf, 27, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RAW_IMU_LEN);
#else
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
 80038aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    packet.xacc = xacc;
 80038b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80038b6:	823b      	strh	r3, [r7, #16]
    packet.yacc = yacc;
 80038b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038bc:	827b      	strh	r3, [r7, #18]
    packet.zacc = zacc;
 80038be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038c2:	82bb      	strh	r3, [r7, #20]
    packet.xgyro = xgyro;
 80038c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038c8:	82fb      	strh	r3, [r7, #22]
    packet.ygyro = ygyro;
 80038ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ce:	833b      	strh	r3, [r7, #24]
    packet.zgyro = zgyro;
 80038d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038d4:	837b      	strh	r3, [r7, #26]
    packet.xmag = xmag;
 80038d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038da:	83bb      	strh	r3, [r7, #28]
    packet.ymag = ymag;
 80038dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038e0:	83fb      	strh	r3, [r7, #30]
    packet.zmag = zmag;
 80038e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80038e6:	843b      	strh	r3, [r7, #32]
    packet.id = id;
 80038e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    packet.temperature = temperature;
 80038f0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80038f4:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	461d      	mov	r5, r3
 80038fe:	f107 0408 	add.w	r4, r7, #8
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	6028      	str	r0, [r5, #0]
 8003906:	6069      	str	r1, [r5, #4]
 8003908:	60aa      	str	r2, [r5, #8]
 800390a:	60eb      	str	r3, [r5, #12]
 800390c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800390e:	6128      	str	r0, [r5, #16]
 8003910:	6169      	str	r1, [r5, #20]
 8003912:	61aa      	str	r2, [r5, #24]
 8003914:	7823      	ldrb	r3, [r4, #0]
 8003916:	772b      	strb	r3, [r5, #28]
#endif

    msg->msgid = MAVLINK_MSG_ID_RAW_IMU;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	f042 021b 	orr.w	r2, r2, #27
 8003920:	725a      	strb	r2, [r3, #9]
 8003922:	2200      	movs	r2, #0
 8003924:	729a      	strb	r2, [r3, #10]
 8003926:	2200      	movs	r2, #0
 8003928:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RAW_IMU_MIN_LEN, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
 800392a:	79ba      	ldrb	r2, [r7, #6]
 800392c:	79f9      	ldrb	r1, [r7, #7]
 800392e:	2390      	movs	r3, #144	; 0x90
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	231d      	movs	r3, #29
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	231a      	movs	r3, #26
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f7ff feb1 	bl	80036a0 <mavlink_finalize_message>
 800393e:	4603      	mov	r3, r0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bdb0      	pop	{r4, r5, r7, pc}

08003948 <mavlink_msg_raw_imu_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param raw_imu C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b099      	sub	sp, #100	; 0x64
 800394c:	af0e      	add	r7, sp, #56	; 0x38
 800394e:	623a      	str	r2, [r7, #32]
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003958:	460b      	mov	r3, r1
 800395a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag, raw_imu->id, raw_imu->temperature);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800396a:	b21a      	sxth	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003972:	b21d      	sxth	r5, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800397a:	b21e      	sxth	r6, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003982:	b21b      	sxth	r3, r3
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800398c:	b21c      	sxth	r4, r3
 800398e:	617c      	str	r4, [r7, #20]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003996:	b21c      	sxth	r4, r3
 8003998:	613c      	str	r4, [r7, #16]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80039a0:	fa0f fc83 	sxth.w	ip, r3
 80039a4:	4664      	mov	r4, ip
 80039a6:	60fc      	str	r4, [r7, #12]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80039ae:	fa0f fc83 	sxth.w	ip, r3
 80039b2:	4664      	mov	r4, ip
 80039b4:	60bc      	str	r4, [r7, #8]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80039bc:	fa0f fc83 	sxth.w	ip, r3
 80039c0:	4664      	mov	r4, ip
 80039c2:	607c      	str	r4, [r7, #4]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80039ca:	4664      	mov	r4, ip
 80039cc:	603c      	str	r4, [r7, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f9b3 301b 	ldrsh.w	r3, [r3, #27]
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 80039da:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80039de:	930c      	str	r3, [sp, #48]	; 0x30
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	930a      	str	r3, [sp, #40]	; 0x28
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	9308      	str	r3, [sp, #32]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	9307      	str	r3, [sp, #28]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9306      	str	r3, [sp, #24]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	9305      	str	r3, [sp, #20]
 80039fc:	9604      	str	r6, [sp, #16]
 80039fe:	9503      	str	r5, [sp, #12]
 8003a00:	9202      	str	r2, [sp, #8]
 8003a02:	e9cd 0100 	strd	r0, r1, [sp]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	4661      	mov	r1, ip
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff ff45 	bl	800389a <mavlink_msg_raw_imu_pack>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	372c      	adds	r7, #44	; 0x2c
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b088      	sub	sp, #32
 8003a1e:	af04      	add	r7, sp, #16
 8003a20:	6078      	str	r0, [r7, #4]
	MX_GPIO_Init();
 8003a22:	f000 ff55 	bl	80048d0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8003a26:	f000 ffcb 	bl	80049c0 <MX_I2C2_Init>
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003a2a:	2364      	movs	r3, #100	; 0x64
 8003a2c:	9302      	str	r3, [sp, #8]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	f107 030f 	add.w	r3, r7, #15
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2275      	movs	r2, #117	; 0x75
 8003a3c:	21d0      	movs	r1, #208	; 0xd0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f002 fbb2 	bl	80061a8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b68      	cmp	r3, #104	; 0x68
 8003a48:	d15b      	bne.n	8003b02 <MPU6050_Init+0xe8>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003a4e:	2364      	movs	r3, #100	; 0x64
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	2301      	movs	r3, #1
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	f107 030e 	add.w	r3, r7, #14
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	226b      	movs	r2, #107	; 0x6b
 8003a60:	21d0      	movs	r1, #208	; 0xd0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f002 faa6 	bl	8005fb4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003a6c:	2364      	movs	r3, #100	; 0x64
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	2301      	movs	r3, #1
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	f107 030e 	add.w	r3, r7, #14
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	2219      	movs	r2, #25
 8003a7e:	21d0      	movs	r1, #208	; 0xd0
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f002 fa97 	bl	8005fb4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003a8a:	2364      	movs	r3, #100	; 0x64
 8003a8c:	9302      	str	r3, [sp, #8]
 8003a8e:	2301      	movs	r3, #1
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	f107 030e 	add.w	r3, r7, #14
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	221c      	movs	r2, #28
 8003a9c:	21d0      	movs	r1, #208	; 0xd0
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f002 fa88 	bl	8005fb4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2301      	movs	r3, #1
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	f107 030e 	add.w	r3, r7, #14
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	221b      	movs	r2, #27
 8003aba:	21d0      	movs	r1, #208	; 0xd0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f002 fa79 	bl	8005fb4 <HAL_I2C_Mem_Write>

        // Set INT Level
        Data = 0x90;
 8003ac2:	2390      	movs	r3, #144	; 0x90
 8003ac4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &Data, 1, i2c_timeout);
 8003ac6:	2364      	movs	r3, #100	; 0x64
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	2301      	movs	r3, #1
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	f107 030e 	add.w	r3, r7, #14
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2237      	movs	r2, #55	; 0x37
 8003ad8:	21d0      	movs	r1, #208	; 0xd0
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f002 fa6a 	bl	8005fb4 <HAL_I2C_Mem_Write>
        // Set interrupt
        Data = 0x01;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, i2c_timeout);
 8003ae4:	2364      	movs	r3, #100	; 0x64
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	f107 030e 	add.w	r3, r7, #14
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	2238      	movs	r2, #56	; 0x38
 8003af6:	21d0      	movs	r1, #208	; 0xd0
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f002 fa5b 	bl	8005fb4 <HAL_I2C_Mem_Write>
        return 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <MPU6050_Init+0xea>
    }
    return 1;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	0000      	movs	r0, r0
	...

08003b10 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b094      	sub	sp, #80	; 0x50
 8003b16:	af04      	add	r7, sp, #16
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003b1c:	2364      	movs	r3, #100	; 0x64
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	230e      	movs	r3, #14
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	223b      	movs	r2, #59	; 0x3b
 8003b2e:	21d0      	movs	r1, #208	; 0xd0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f002 fb39 	bl	80061a8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003b36:	7a3b      	ldrb	r3, [r7, #8]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	7a7b      	ldrb	r3, [r7, #9]
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b21a      	sxth	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003b5a:	7b3b      	ldrb	r3, [r7, #12]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	7b7b      	ldrb	r3, [r7, #13]
 8003b62:	b21b      	sxth	r3, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b21a      	sxth	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003b7a:	7c3b      	ldrb	r3, [r7, #16]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	7c7b      	ldrb	r3, [r7, #17]
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b21a      	sxth	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003b8c:	7cbb      	ldrb	r3, [r7, #18]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	b21a      	sxth	r2, r3
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b21a      	sxth	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003b9e:	7d3b      	ldrb	r3, [r7, #20]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	7d7b      	ldrb	r3, [r7, #21]
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fccc 	bl	8000554 <__aeabi_i2d>
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4bbd      	ldr	r3, [pc, #756]	; (8003eb8 <MPU6050_Read_All+0x3a8>)
 8003bc2:	f7fc fe5b 	bl	800087c <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	6839      	ldr	r1, [r7, #0]
 8003bcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fcbc 	bl	8000554 <__aeabi_i2d>
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	4bb5      	ldr	r3, [pc, #724]	; (8003eb8 <MPU6050_Read_All+0x3a8>)
 8003be2:	f7fc fe4b 	bl	800087c <__aeabi_ddiv>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fcac 	bl	8000554 <__aeabi_i2d>
 8003bfc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003ea0 <MPU6050_Read_All+0x390>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fe3b 	bl	800087c <__aeabi_ddiv>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003c10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8003ebc <MPU6050_Read_All+0x3ac>
 8003c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c24:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003ec0 <MPU6050_Read_All+0x3b0>
 8003c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc8b 	bl	8000554 <__aeabi_i2d>
 8003c3e:	a39a      	add	r3, pc, #616	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fe1a 	bl	800087c <__aeabi_ddiv>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc7b 	bl	8000554 <__aeabi_i2d>
 8003c5e:	a392      	add	r3, pc, #584	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fe0a 	bl	800087c <__aeabi_ddiv>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc6b 	bl	8000554 <__aeabi_i2d>
 8003c7e:	a38a      	add	r3, pc, #552	; (adr r3, 8003ea8 <MPU6050_Read_All+0x398>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fdfa 	bl	800087c <__aeabi_ddiv>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003c92:	f001 fcf3 	bl	800567c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <MPU6050_Read_All+0x3b4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc48 	bl	8000534 <__aeabi_ui2d>
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <MPU6050_Read_All+0x3b8>)
 8003caa:	f7fc fde7 	bl	800087c <__aeabi_ddiv>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003cb6:	f001 fce1 	bl	800567c <HAL_GetTick>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a81      	ldr	r2, [pc, #516]	; (8003ec4 <MPU6050_Read_All+0x3b4>)
 8003cbe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fc34 	bl	8000554 <__aeabi_i2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	ec43 2b10 	vmov	d0, r2, r3
 8003cf4:	f00e fdb7 	bl	8012866 <sqrt>
 8003cf8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d08:	f7fc fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11f      	bne.n	8003d52 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fc1b 	bl	8000554 <__aeabi_i2d>
 8003d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d22:	f7fc fdab 	bl	800087c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	ec43 2b17 	vmov	d7, r2, r3
 8003d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d32:	eef0 0a67 	vmov.f32	s1, s15
 8003d36:	f00e fbeb 	bl	8012510 <atan>
 8003d3a:	ec51 0b10 	vmov	r0, r1, d0
 8003d3e:	a35c      	add	r3, pc, #368	; (adr r3, 8003eb0 <MPU6050_Read_All+0x3a0>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fc70 	bl	8000628 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003d50:	e005      	b.n	8003d5e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d64:	425b      	negs	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fbf4 	bl	8000554 <__aeabi_i2d>
 8003d6c:	4682      	mov	sl, r0
 8003d6e:	468b      	mov	fp, r1
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbec 	bl	8000554 <__aeabi_i2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	ec43 2b11 	vmov	d1, r2, r3
 8003d84:	ec4b ab10 	vmov	d0, sl, fp
 8003d88:	f00e fd6b 	bl	8012862 <atan2>
 8003d8c:	ec51 0b10 	vmov	r0, r1, d0
 8003d90:	a347      	add	r3, pc, #284	; (adr r3, 8003eb0 <MPU6050_Read_All+0x3a0>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc47 	bl	8000628 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <MPU6050_Read_All+0x3bc>)
 8003da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dac:	f7fc feae 	bl	8000b0c <__aeabi_dcmplt>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <MPU6050_Read_All+0x2bc>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003dc2:	f7fc fec1 	bl	8000b48 <__aeabi_dcmpgt>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d114      	bne.n	8003df6 <MPU6050_Read_All+0x2e6>
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003dd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dd6:	f7fc feb7 	bl	8000b48 <__aeabi_dcmpgt>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <MPU6050_Read_All+0x2fc>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <MPU6050_Read_All+0x3bc>)
 8003dec:	f7fc fe8e 	bl	8000b0c <__aeabi_dcmplt>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8003df6:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <MPU6050_Read_All+0x3c4>)
 8003df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003e0a:	e014      	b.n	8003e36 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003e12:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003e16:	eeb0 1a47 	vmov.f32	s2, s14
 8003e1a:	eef0 1a67 	vmov.f32	s3, s15
 8003e1e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003e22:	482c      	ldr	r0, [pc, #176]	; (8003ed4 <MPU6050_Read_All+0x3c4>)
 8003e24:	f000 f85a 	bl	8003edc <Kalman_getAngle>
 8003e28:	eeb0 7a40 	vmov.f32	s14, s0
 8003e2c:	eef0 7a60 	vmov.f32	s15, s1
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003e3c:	4690      	mov	r8, r2
 8003e3e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <MPU6050_Read_All+0x3c0>)
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003e6e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003e72:	eeb0 1a47 	vmov.f32	s2, s14
 8003e76:	eef0 1a67 	vmov.f32	s3, s15
 8003e7a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003e7e:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <MPU6050_Read_All+0x3c8>)
 8003e80:	f000 f82c 	bl	8003edc <Kalman_getAngle>
 8003e84:	eeb0 7a40 	vmov.f32	s14, s0
 8003e88:	eef0 7a60 	vmov.f32	s15, s1
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8003e92:	bf00      	nop
 8003e94:	3740      	adds	r7, #64	; 0x40
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	40cc2900 	.word	0x40cc2900
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	40606000 	.word	0x40606000
 8003eb0:	1a63c1f8 	.word	0x1a63c1f8
 8003eb4:	404ca5dc 	.word	0x404ca5dc
 8003eb8:	40d00000 	.word	0x40d00000
 8003ebc:	43aa0000 	.word	0x43aa0000
 8003ec0:	42121eb8 	.word	0x42121eb8
 8003ec4:	20000438 	.word	0x20000438
 8003ec8:	408f4000 	.word	0x408f4000
 8003ecc:	c0568000 	.word	0xc0568000
 8003ed0:	40568000 	.word	0x40568000
 8003ed4:	20000048 	.word	0x20000048
 8003ed8:	20000000 	.word	0x20000000

08003edc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b096      	sub	sp, #88	; 0x58
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	61f8      	str	r0, [r7, #28]
 8003ee4:	ed87 0b04 	vstr	d0, [r7, #16]
 8003ee8:	ed87 1b02 	vstr	d1, [r7, #8]
 8003eec:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003efa:	f7fc f9dd 	bl	80002b8 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f14:	f7fc fb88 	bl	8000628 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc f9cc 	bl	80002bc <__adddf3>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f3e:	f7fc fb73 	bl	8000628 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003f50:	f7fc f9b2 	bl	80002b8 <__aeabi_dsub>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f62:	f7fc f9a9 	bl	80002b8 <__aeabi_dsub>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc f9a2 	bl	80002bc <__adddf3>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f84:	f7fc fb50 	bl	8000628 <__aeabi_dmul>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f7fc f994 	bl	80002bc <__adddf3>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fae:	f7fc fb3b 	bl	8000628 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc f97d 	bl	80002b8 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	f7fc fb26 	bl	8000628 <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7fc f968 	bl	80002b8 <__aeabi_dsub>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	69f9      	ldr	r1, [r7, #28]
 8003fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004002:	f7fc fb11 	bl	8000628 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f955 	bl	80002bc <__adddf3>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	69f9      	ldr	r1, [r7, #28]
 8004018:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004028:	f7fc f948 	bl	80002bc <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800403a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403e:	f7fc fc1d 	bl	800087c <__aeabi_ddiv>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004054:	f7fc fc12 	bl	800087c <__aeabi_ddiv>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004066:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800406a:	f7fc f925 	bl	80002b8 <__aeabi_dsub>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800407c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004084:	f7fc fad0 	bl	8000628 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc f914 	bl	80002bc <__adddf3>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80040a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ac:	f7fc fabc 	bl	8000628 <__aeabi_dmul>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f900 	bl	80002bc <__adddf3>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80040cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80040e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040e8:	f7fc fa9e 	bl	8000628 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc f8e0 	bl	80002b8 <__aeabi_dsub>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004108:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800410c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004110:	f7fc fa8a 	bl	8000628 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4620      	mov	r0, r4
 800411a:	4629      	mov	r1, r5
 800411c:	f7fc f8cc 	bl	80002b8 <__aeabi_dsub>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8004130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004138:	f7fc fa76 	bl	8000628 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4620      	mov	r0, r4
 8004142:	4629      	mov	r1, r5
 8004144:	f7fc f8b8 	bl	80002b8 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	69f9      	ldr	r1, [r7, #28]
 800414e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8004158:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800415c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004160:	f7fc fa62 	bl	8000628 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f8a4 	bl	80002b8 <__aeabi_dsub>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	69f9      	ldr	r1, [r7, #28]
 8004176:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004180:	ec43 2b17 	vmov	d7, r2, r3
};
 8004184:	eeb0 0a47 	vmov.f32	s0, s14
 8004188:	eef0 0a67 	vmov.f32	s1, s15
 800418c:	3758      	adds	r7, #88	; 0x58
 800418e:	46bd      	mov	sp, r7
 8004190:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004194 <Transmit_raw_data_IMU>:

uint8_t Data_Ready(){
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void Transmit_raw_data_IMU(MPU6050_t* Datastruct, mavlink_raw_imu_t raw_imu){
 8004194:	b084      	sub	sp, #16
 8004196:	b590      	push	{r4, r7, lr}
 8004198:	b0e5      	sub	sp, #404	; 0x194
 800419a:	af00      	add	r7, sp, #0
 800419c:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80041a0:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80041a4:	6020      	str	r0, [r4, #0]
 80041a6:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 80041aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mavlink_message_t msg;
	uint8_t _buffer[100];
	raw_imu.id = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
	raw_imu.xacc = Datastruct->Accel_X_RAW;
 80041b4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c2:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
	raw_imu.yacc = Datastruct->Accel_Y_RAW;
 80041c6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041d4:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
	raw_imu.zacc = Datastruct->Accel_Z_RAW;
 80041d8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041e6:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	raw_imu.xgyro = Datastruct->Gyro_X_RAW;
 80041ea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80041ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80041f8:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
	raw_imu.ygyro = Datastruct->Gyro_Y_RAW;
 80041fc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004200:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800420a:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
	raw_imu.zgyro = Datastruct->Gyro_Z_RAW;
 800420e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004212:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800421c:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
	raw_imu.xmag = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
	raw_imu.ymag = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
	raw_imu.zmag = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	raw_imu.temperature = Datastruct->Temperature;
 8004232:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004236:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 3a90 	vmov	r3, s15
 8004248:	b21b      	sxth	r3, r3
 800424a:	f8a7 31bf 	strh.w	r3, [r7, #447]	; 0x1bf
	raw_imu.time_usec = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	mavlink_msg_raw_imu_encode(0x01, 0x01, &msg, &raw_imu);
 800425a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800425e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004262:	2101      	movs	r1, #1
 8004264:	2001      	movs	r0, #1
 8004266:	f7ff fb6f 	bl	8003948 <mavlink_msg_raw_imu_encode>
	uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 800426a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800426e:	f107 0308 	add.w	r3, r7, #8
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fa31 	bl	80036dc <mavlink_msg_to_send_buffer>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	HAL_UART_Transmit(&huart2, _buffer, len, 100);
 8004280:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8004284:	b29a      	uxth	r2, r3
 8004286:	f107 0108 	add.w	r1, r7, #8
 800428a:	2364      	movs	r3, #100	; 0x64
 800428c:	4805      	ldr	r0, [pc, #20]	; (80042a4 <Transmit_raw_data_IMU+0x110>)
 800428e:	f004 fe86 	bl	8008f9e <HAL_UART_Transmit>
}
 8004292:	bf00      	nop
 8004294:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800429e:	b004      	add	sp, #16
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000724 	.word	0x20000724

080042a8 <HAL_TIM_IC_CaptureCallback>:
extern uint16_t esc_2;
extern uint16_t esc_3;
extern uint16_t esc_4;
extern uint16_t throttle;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7f1b      	ldrb	r3, [r3, #28]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d154      	bne.n	8004362 <HAL_TIM_IC_CaptureCallback+0xba>
		chanel_seclect_counter++;
 80042b8:	4b2c      	ldr	r3, [pc, #176]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042c2:	701a      	strb	r2, [r3, #0]
		if(chanel_seclect_counter > 10)chanel_seclect_counter = 0;
 80042c4:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b0a      	cmp	r3, #10
 80042ca:	d902      	bls.n	80042d2 <HAL_TIM_IC_CaptureCallback+0x2a>
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
		measured_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80042d2:	2104      	movs	r1, #4
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f004 f8ab 	bl	8008430 <HAL_TIM_ReadCapturedValue>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a24      	ldr	r2, [pc, #144]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80042de:	6013      	str	r3, [r2, #0]
		if (measured_time > 3000)chanel_seclect_counter = 0;
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d902      	bls.n	80042f2 <HAL_TIM_IC_CaptureCallback+0x4a>
 80042ec:	4b1f      	ldr	r3, [pc, #124]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
		if(chanel_seclect_counter == 1)Chanel_1 = measured_time + 424;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_TIM_IC_CaptureCallback+0x5e>
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8004304:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 2)Chanel_2 = measured_time + 424;
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d105      	bne.n	800431a <HAL_TIM_IC_CaptureCallback+0x72>
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8004318:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 3)Chanel_3 = measured_time + 424;
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d105      	bne.n	800432e <HAL_TIM_IC_CaptureCallback+0x86>
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800432a:	4a14      	ldr	r2, [pc, #80]	; (800437c <HAL_TIM_IC_CaptureCallback+0xd4>)
 800432c:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 4)Chanel_4 = measured_time + 424;
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b04      	cmp	r3, #4
 8004334:	d105      	bne.n	8004342 <HAL_TIM_IC_CaptureCallback+0x9a>
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8004340:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 5)Chanel_5 = measured_time;
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b05      	cmp	r3, #5
 8004348:	d103      	bne.n	8004352 <HAL_TIM_IC_CaptureCallback+0xaa>
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8004350:	6013      	str	r3, [r2, #0]
		if(chanel_seclect_counter == 6)Chanel_6 = measured_time;
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d103      	bne.n	8004362 <HAL_TIM_IC_CaptureCallback+0xba>
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8004360:	6013      	str	r3, [r2, #0]
	}
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000588 	.word	0x20000588
 8004370:	20000584 	.word	0x20000584
 8004374:	20000090 	.word	0x20000090
 8004378:	20000094 	.word	0x20000094
 800437c:	20000098 	.word	0x20000098
 8004380:	2000009c 	.word	0x2000009c
 8004384:	200000a0 	.word	0x200000a0
 8004388:	200000a4 	.word	0x200000a4

0800438c <PWM_Init>:

void PWM_Init(){
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 8004390:	f000 fed6 	bl	8005140 <MX_TIM4_Init>
	MX_TIM2_Init();
 8004394:	f000 fe38 	bl	8005008 <MX_TIM2_Init>
	PWM_config.OCMode = TIM_OCMODE_PWM1;
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <PWM_Init+0x70>)
 800439a:	2260      	movs	r2, #96	; 0x60
 800439c:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_ConfigChannel(&htim4, &PWM_config, TIM_CHANNEL_1);
 800439e:	2200      	movs	r2, #0
 80043a0:	4916      	ldr	r1, [pc, #88]	; (80043fc <PWM_Init+0x70>)
 80043a2:	4817      	ldr	r0, [pc, #92]	; (8004400 <PWM_Init+0x74>)
 80043a4:	f003 fe78 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim4, &PWM_config, TIM_CHANNEL_2);
 80043a8:	2204      	movs	r2, #4
 80043aa:	4914      	ldr	r1, [pc, #80]	; (80043fc <PWM_Init+0x70>)
 80043ac:	4814      	ldr	r0, [pc, #80]	; (8004400 <PWM_Init+0x74>)
 80043ae:	f003 fe73 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim4, &PWM_config, TIM_CHANNEL_3);
 80043b2:	2208      	movs	r2, #8
 80043b4:	4911      	ldr	r1, [pc, #68]	; (80043fc <PWM_Init+0x70>)
 80043b6:	4812      	ldr	r0, [pc, #72]	; (8004400 <PWM_Init+0x74>)
 80043b8:	f003 fe6e 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim4, &PWM_config, TIM_CHANNEL_4);
 80043bc:	220c      	movs	r2, #12
 80043be:	490f      	ldr	r1, [pc, #60]	; (80043fc <PWM_Init+0x70>)
 80043c0:	480f      	ldr	r0, [pc, #60]	; (8004400 <PWM_Init+0x74>)
 80043c2:	f003 fe69 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80043c6:	2100      	movs	r1, #0
 80043c8:	480d      	ldr	r0, [pc, #52]	; (8004400 <PWM_Init+0x74>)
 80043ca:	f003 fa9d 	bl	8007908 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80043ce:	2104      	movs	r1, #4
 80043d0:	480b      	ldr	r0, [pc, #44]	; (8004400 <PWM_Init+0x74>)
 80043d2:	f003 fa99 	bl	8007908 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80043d6:	2108      	movs	r1, #8
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <PWM_Init+0x74>)
 80043da:	f003 fa95 	bl	8007908 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80043de:	210c      	movs	r1, #12
 80043e0:	4807      	ldr	r0, [pc, #28]	; (8004400 <PWM_Init+0x74>)
 80043e2:	f003 fa91 	bl	8007908 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80043e6:	2100      	movs	r1, #0
 80043e8:	4806      	ldr	r0, [pc, #24]	; (8004404 <PWM_Init+0x78>)
 80043ea:	f003 fb97 	bl	8007b1c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80043ee:	2104      	movs	r1, #4
 80043f0:	4804      	ldr	r0, [pc, #16]	; (8004404 <PWM_Init+0x78>)
 80043f2:	f003 fb93 	bl	8007b1c <HAL_TIM_IC_Start_IT>
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000055c 	.word	0x2000055c
 8004400:	20000698 	.word	0x20000698
 8004404:	20000650 	.word	0x20000650

08004408 <map>:
  .name = "UART2_Transmit_Lock"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max){
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	1a8a      	subs	r2, r1, r2
 8004422:	3201      	adds	r2, #1
 8004424:	fb03 f202 	mul.w	r2, r3, r2
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1acb      	subs	r3, r1, r3
 800442e:	3301      	adds	r3, #1
 8004430:	fb92 f2f3 	sdiv	r2, r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4413      	add	r3, r2
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UART2_Transmit_Lock */
  UART2_Transmit_LockHandle = osMutexNew(&UART2_Transmit_Lock_attributes);
 8004448:	4817      	ldr	r0, [pc, #92]	; (80044a8 <MX_FREERTOS_Init+0x64>)
 800444a:	f005 fefe 	bl	800a24a <osMutexNew>
 800444e:	4603      	mov	r3, r0
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <MX_FREERTOS_Init+0x68>)
 8004452:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <MX_FREERTOS_Init+0x6c>)
 8004456:	2100      	movs	r1, #0
 8004458:	4816      	ldr	r0, [pc, #88]	; (80044b4 <MX_FREERTOS_Init+0x70>)
 800445a:	f005 fe49 	bl	800a0f0 <osThreadNew>
 800445e:	4603      	mov	r3, r0
 8004460:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <MX_FREERTOS_Init+0x74>)
 8004462:	6013      	str	r3, [r2, #0]

  /* creation of _BMP180 */
  _BMP180Handle = osThreadNew(BMP180_Func, NULL, &_BMP180_attributes);
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <MX_FREERTOS_Init+0x78>)
 8004466:	2100      	movs	r1, #0
 8004468:	4815      	ldr	r0, [pc, #84]	; (80044c0 <MX_FREERTOS_Init+0x7c>)
 800446a:	f005 fe41 	bl	800a0f0 <osThreadNew>
 800446e:	4603      	mov	r3, r0
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <MX_FREERTOS_Init+0x80>)
 8004472:	6013      	str	r3, [r2, #0]

  /* creation of _IMU */
  _IMUHandle = osThreadNew(IMU_Func, NULL, &_IMU_attributes);
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <MX_FREERTOS_Init+0x84>)
 8004476:	2100      	movs	r1, #0
 8004478:	4814      	ldr	r0, [pc, #80]	; (80044cc <MX_FREERTOS_Init+0x88>)
 800447a:	f005 fe39 	bl	800a0f0 <osThreadNew>
 800447e:	4603      	mov	r3, r0
 8004480:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <MX_FREERTOS_Init+0x8c>)
 8004482:	6013      	str	r3, [r2, #0]

  /* creation of _GPS */
  _GPSHandle = osThreadNew(GPS_Func, NULL, &_GPS_attributes);
 8004484:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <MX_FREERTOS_Init+0x90>)
 8004486:	2100      	movs	r1, #0
 8004488:	4813      	ldr	r0, [pc, #76]	; (80044d8 <MX_FREERTOS_Init+0x94>)
 800448a:	f005 fe31 	bl	800a0f0 <osThreadNew>
 800448e:	4603      	mov	r3, r0
 8004490:	4a12      	ldr	r2, [pc, #72]	; (80044dc <MX_FREERTOS_Init+0x98>)
 8004492:	6013      	str	r3, [r2, #0]

  /* creation of _main */
  _mainHandle = osThreadNew(main_Func, NULL, &_main_attributes);
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <MX_FREERTOS_Init+0x9c>)
 8004496:	2100      	movs	r1, #0
 8004498:	4812      	ldr	r0, [pc, #72]	; (80044e4 <MX_FREERTOS_Init+0xa0>)
 800449a:	f005 fe29 	bl	800a0f0 <osThreadNew>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <MX_FREERTOS_Init+0xa4>)
 80044a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08013024 	.word	0x08013024
 80044ac:	200005a0 	.word	0x200005a0
 80044b0:	08012f70 	.word	0x08012f70
 80044b4:	080044ed 	.word	0x080044ed
 80044b8:	2000058c 	.word	0x2000058c
 80044bc:	08012f94 	.word	0x08012f94
 80044c0:	08004525 	.word	0x08004525
 80044c4:	20000590 	.word	0x20000590
 80044c8:	08012fb8 	.word	0x08012fb8
 80044cc:	08004581 	.word	0x08004581
 80044d0:	20000594 	.word	0x20000594
 80044d4:	08012fdc 	.word	0x08012fdc
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	20000598 	.word	0x20000598
 80044e0:	08013000 	.word	0x08013000
 80044e4:	0800465d 	.word	0x0800465d
 80044e8:	2000059c 	.word	0x2000059c

080044ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(UART2_Transmit_LockHandle, 100) == osOK){
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <StartDefaultTask+0x34>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2164      	movs	r1, #100	; 0x64
 80044fa:	4618      	mov	r0, r3
 80044fc:	f005 ff2b 	bl	800a356 <osMutexAcquire>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <StartDefaultTask+0x1e>
	  		  Mavlink_TX_Heartbeat();
 8004506:	f7fd fffb 	bl	8002500 <Mavlink_TX_Heartbeat>
	  	  }
	  	 osMutexRelease(UART2_Transmit_LockHandle);
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <StartDefaultTask+0x34>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f005 ff6c 	bl	800a3ec <osMutexRelease>
	  	 osDelay(10000);
 8004514:	f242 7010 	movw	r0, #10000	; 0x2710
 8004518:	f005 fe7c 	bl	800a214 <osDelay>
	  if(osMutexAcquire(UART2_Transmit_LockHandle, 100) == osOK){
 800451c:	e7ea      	b.n	80044f4 <StartDefaultTask+0x8>
 800451e:	bf00      	nop
 8004520:	200005a0 	.word	0x200005a0

08004524 <BMP180_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP180_Func */
void BMP180_Func(void *argument)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP180_Func */
	status = BMP180_Init();
 800452c:	f7fc fd9c 	bl	8001068 <BMP180_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <BMP180_Func+0x4c>)
 8004536:	701a      	strb	r2, [r3, #0]
	uint8_t oss = 2;
 8004538:	2302      	movs	r3, #2
 800453a:	73fb      	strb	r3, [r7, #15]
	BMP180_ReadCalibration();
 800453c:	f7fc fdca 	bl	80010d4 <BMP180_ReadCalibration>
  /* Infinite loop */
  for(;;)
  {
	  temp = BMP180_Calculate_RT();
 8004540:	f7fc ff20 	bl	8001384 <BMP180_Calculate_RT>
 8004544:	4603      	mov	r3, r0
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <BMP180_Func+0x50>)
 8004548:	6013      	str	r3, [r2, #0]
	  preasure = BMP180_Calculate_RP(oss);
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fc ff45 	bl	80013dc <BMP180_Calculate_RP>
 8004552:	4603      	mov	r3, r0
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <BMP180_Func+0x54>)
 8004556:	6013      	str	r3, [r2, #0]
	  altitude = BMP180_Calculate_Altitude(oss);
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc ffcc 	bl	80014f8 <BMP180_Calculate_Altitude>
 8004560:	4603      	mov	r3, r0
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <BMP180_Func+0x58>)
 8004564:	6013      	str	r3, [r2, #0]
	  osDelay(500);
 8004566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800456a:	f005 fe53 	bl	800a214 <osDelay>
	  temp = BMP180_Calculate_RT();
 800456e:	e7e7      	b.n	8004540 <BMP180_Func+0x1c>
 8004570:	20000504 	.word	0x20000504
 8004574:	200004f8 	.word	0x200004f8
 8004578:	200004fc 	.word	0x200004fc
 800457c:	20000500 	.word	0x20000500

08004580 <IMU_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IMU_Func */
void IMU_Func(void *argument)
{
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af06      	add	r7, sp, #24
 8004586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU_Func */
	MPU6050_Init(&hi2c2);
 8004588:	4813      	ldr	r0, [pc, #76]	; (80045d8 <IMU_Func+0x58>)
 800458a:	f7ff fa46 	bl	8003a1a <MPU6050_Init>
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Read_All(&hi2c2, &data);
 800458e:	4913      	ldr	r1, [pc, #76]	; (80045dc <IMU_Func+0x5c>)
 8004590:	4811      	ldr	r0, [pc, #68]	; (80045d8 <IMU_Func+0x58>)
 8004592:	f7ff fabd 	bl	8003b10 <MPU6050_Read_All>
	  if(osMutexAcquire(UART2_Transmit_LockHandle, 1000) == osOK){
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <IMU_Func+0x60>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800459e:	4618      	mov	r0, r3
 80045a0:	f005 fed9 	bl	800a356 <osMutexAcquire>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10c      	bne.n	80045c4 <IMU_Func+0x44>
		  Transmit_raw_data_IMU(&data, raw_imu);
 80045aa:	4e0e      	ldr	r6, [pc, #56]	; (80045e4 <IMU_Func+0x64>)
 80045ac:	466d      	mov	r5, sp
 80045ae:	f106 040c 	add.w	r4, r6, #12
 80045b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	702b      	strb	r3, [r5, #0]
 80045ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80045be:	4807      	ldr	r0, [pc, #28]	; (80045dc <IMU_Func+0x5c>)
 80045c0:	f7ff fde8 	bl	8004194 <Transmit_raw_data_IMU>
	  }
	osMutexRelease(UART2_Transmit_LockHandle);
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <IMU_Func+0x60>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 ff0f 	bl	800a3ec <osMutexRelease>

    osDelay(600);
 80045ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80045d2:	f005 fe1f 	bl	800a214 <osDelay>
	  MPU6050_Read_All(&hi2c2, &data);
 80045d6:	e7da      	b.n	800458e <IMU_Func+0xe>
 80045d8:	200005f8 	.word	0x200005f8
 80045dc:	200004a0 	.word	0x200004a0
 80045e0:	200005a0 	.word	0x200005a0
 80045e4:	2000053c 	.word	0x2000053c

080045e8 <GPS_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Func */
void GPS_Func(void *argument)
{
 80045e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ea:	b08d      	sub	sp, #52	; 0x34
 80045ec:	af0a      	add	r7, sp, #40	; 0x28
 80045ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Func */
	  MX_USART2_UART_Init();
 80045f0:	f000 ff06 	bl	8005400 <MX_USART2_UART_Init>
	  MX_USART1_UART_Init();
 80045f4:	f000 feda 	bl	80053ac <MX_USART1_UART_Init>
	  //MX_USB_DEVICE_Init();
	  GPS_Init();
 80045f8:	f7fd ff74 	bl	80024e4 <GPS_Init>

  /* Infinite loop */
  for(;;)
  {
	  if(flag_gps == 1){
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <GPS_Func+0x68>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d11f      	bne.n	8004644 <GPS_Func+0x5c>
		  if(osMutexAcquire(UART2_Transmit_LockHandle, 1000) == osOK){
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <GPS_Func+0x6c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800460c:	4618      	mov	r0, r3
 800460e:	f005 fea2 	bl	800a356 <osMutexAcquire>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <GPS_Func+0x4c>
			  Transmit_mavlink_data_GPS(data_GPS);
 8004618:	4e0f      	ldr	r6, [pc, #60]	; (8004658 <GPS_Func+0x70>)
 800461a:	466d      	mov	r5, sp
 800461c:	f106 0410 	add.w	r4, r6, #16
 8004620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004630:	f7fe f9c2 	bl	80029b8 <Transmit_mavlink_data_GPS>
		  }
		osMutexRelease(UART2_Transmit_LockHandle);
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <GPS_Func+0x6c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f005 fed7 	bl	800a3ec <osMutexRelease>
		flag_gps = 0;
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <GPS_Func+0x68>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(500);
 8004644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004648:	f005 fde4 	bl	800a214 <osDelay>
	  if(flag_gps == 1){
 800464c:	e7d6      	b.n	80045fc <GPS_Func+0x14>
 800464e:	bf00      	nop
 8004650:	20000505 	.word	0x20000505
 8004654:	200005a0 	.word	0x200005a0
 8004658:	20000508 	.word	0x20000508

0800465c <main_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_Func */
void main_Func(void *argument)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	ed2d 8b04 	vpush	{d8-d9}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN main_Func */
	PWM_Init();
 8004668:	f7ff fe90 	bl	800438c <PWM_Init>
	uint16_t pid_output_pitch = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	81fb      	strh	r3, [r7, #14]
	uint16_t pid_output_roll = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	81bb      	strh	r3, [r7, #12]
	uint16_t pid_output_yaw = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	817b      	strh	r3, [r7, #10]
#if calibrate
	htim4.Instance->CCR1 = 400;
 8004678:	4b87      	ldr	r3, [pc, #540]	; (8004898 <main_Func+0x23c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 400;
 8004682:	4b85      	ldr	r3, [pc, #532]	; (8004898 <main_Func+0x23c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(2000);
 800468c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004690:	f005 fdc0 	bl	800a214 <osDelay>
	htim4.Instance->CCR1 = 200;
 8004694:	4b80      	ldr	r3, [pc, #512]	; (8004898 <main_Func+0x23c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	22c8      	movs	r2, #200	; 0xc8
 800469a:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 200;
 800469c:	4b7e      	ldr	r3, [pc, #504]	; (8004898 <main_Func+0x23c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	22c8      	movs	r2, #200	; 0xc8
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(1000);
 80046a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046a8:	f005 fdb4 	bl	800a214 <osDelay>
	htim4.Instance->CCR1 = 0;
 80046ac:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <main_Func+0x23c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2200      	movs	r2, #0
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 0;
 80046b4:	4b78      	ldr	r3, [pc, #480]	; (8004898 <main_Func+0x23c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2200      	movs	r2, #0
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
#endif
  /* Infinite loop */
  for(;;)
  {
	pid_output_pitch = calculate_pid(pid_p_gain_pitch, pid_i_gain_pitch, pid_d_gain_pitch, data.KalmanAngleY);
 80046bc:	4b77      	ldr	r3, [pc, #476]	; (800489c <main_Func+0x240>)
 80046be:	ed93 8a00 	vldr	s16, [r3]
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <main_Func+0x244>)
 80046c4:	edd3 8a00 	vldr	s17, [r3]
 80046c8:	4b76      	ldr	r3, [pc, #472]	; (80048a4 <main_Func+0x248>)
 80046ca:	ed93 9a00 	vldr	s18, [r3]
 80046ce:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <main_Func+0x24c>)
 80046d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc fa9e 	bl	8000c18 <__aeabi_d2f>
 80046dc:	4603      	mov	r3, r0
 80046de:	ee01 3a90 	vmov	s3, r3
 80046e2:	eeb0 1a49 	vmov.f32	s2, s18
 80046e6:	eef0 0a68 	vmov.f32	s1, s17
 80046ea:	eeb0 0a48 	vmov.f32	s0, s16
 80046ee:	f000 faae 	bl	8004c4e <calculate_pid>
 80046f2:	eef0 7a40 	vmov.f32	s15, s0
 80046f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fa:	ee17 3a90 	vmov	r3, s15
 80046fe:	81fb      	strh	r3, [r7, #14]
	pid_output_roll  = calculate_pid(pid_p_gain_roll, pid_i_gain_roll, pid_d_gain_roll, data.KalmanAngleX);
 8004700:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <main_Func+0x250>)
 8004702:	ed93 8a00 	vldr	s16, [r3]
 8004706:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <main_Func+0x254>)
 8004708:	edd3 8a00 	vldr	s17, [r3]
 800470c:	4b69      	ldr	r3, [pc, #420]	; (80048b4 <main_Func+0x258>)
 800470e:	ed93 9a00 	vldr	s18, [r3]
 8004712:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <main_Func+0x24c>)
 8004714:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7fc fa7c 	bl	8000c18 <__aeabi_d2f>
 8004720:	4603      	mov	r3, r0
 8004722:	ee01 3a90 	vmov	s3, r3
 8004726:	eeb0 1a49 	vmov.f32	s2, s18
 800472a:	eef0 0a68 	vmov.f32	s1, s17
 800472e:	eeb0 0a48 	vmov.f32	s0, s16
 8004732:	f000 fa8c 	bl	8004c4e <calculate_pid>
 8004736:	eef0 7a40 	vmov.f32	s15, s0
 800473a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473e:	ee17 3a90 	vmov	r3, s15
 8004742:	81bb      	strh	r3, [r7, #12]
	//pid_output_yaw   = calculate_pid(pid_p_gain, pid_i_gain, pid_d_gain, gyro_input)
	throttle = Chanel_3;
 8004744:	4b5c      	ldr	r3, [pc, #368]	; (80048b8 <main_Func+0x25c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b29a      	uxth	r2, r3
 800474a:	4b5c      	ldr	r3, [pc, #368]	; (80048bc <main_Func+0x260>)
 800474c:	801a      	strh	r2, [r3, #0]
	if(throttle < 1090) throttle = 1000;
 800474e:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <main_Func+0x260>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	f240 4241 	movw	r2, #1089	; 0x441
 8004756:	4293      	cmp	r3, r2
 8004758:	d803      	bhi.n	8004762 <main_Func+0x106>
 800475a:	4b58      	ldr	r3, [pc, #352]	; (80048bc <main_Func+0x260>)
 800475c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004760:	801a      	strh	r2, [r3, #0]
	if(throttle > 1977) throttle = 2000;
 8004762:	4b56      	ldr	r3, [pc, #344]	; (80048bc <main_Func+0x260>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	f240 72b9 	movw	r2, #1977	; 0x7b9
 800476a:	4293      	cmp	r3, r2
 800476c:	d903      	bls.n	8004776 <main_Func+0x11a>
 800476e:	4b53      	ldr	r3, [pc, #332]	; (80048bc <main_Func+0x260>)
 8004770:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004774:	801a      	strh	r2, [r3, #0]

	esc_1 = throttle - pid_output_pitch + pid_output_roll - pid_output_yaw;        //Calculate the pulse for esc 1 (front-right - CCW).
 8004776:	4b51      	ldr	r3, [pc, #324]	; (80048bc <main_Func+0x260>)
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	b29a      	uxth	r2, r3
 8004780:	89bb      	ldrh	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	b29a      	uxth	r2, r3
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29a      	uxth	r2, r3
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <main_Func+0x264>)
 800478e:	801a      	strh	r2, [r3, #0]
	esc_2 = throttle + pid_output_pitch + pid_output_roll + pid_output_yaw;        //Calculate the pulse for esc 2 (rear-right - CW).
 8004790:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <main_Func+0x260>)
 8004792:	881a      	ldrh	r2, [r3, #0]
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	4413      	add	r3, r2
 8004798:	b29a      	uxth	r2, r3
 800479a:	89bb      	ldrh	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	b29a      	uxth	r2, r3
 80047a0:	897b      	ldrh	r3, [r7, #10]
 80047a2:	4413      	add	r3, r2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <main_Func+0x268>)
 80047a8:	801a      	strh	r2, [r3, #0]
	esc_3 = throttle + pid_output_pitch - pid_output_roll - pid_output_yaw;        //Calculate the pulse for esc 3 (rear-left - CCW).
 80047aa:	4b44      	ldr	r3, [pc, #272]	; (80048bc <main_Func+0x260>)
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	4413      	add	r3, r2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	89bb      	ldrh	r3, [r7, #12]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <main_Func+0x26c>)
 80047c2:	801a      	strh	r2, [r3, #0]
	esc_4 = throttle - pid_output_pitch - pid_output_roll + pid_output_yaw;        //Calculate the pulse for esc 4 (front-left - CW).
 80047c4:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <main_Func+0x260>)
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	89bb      	ldrh	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	897b      	ldrh	r3, [r7, #10]
 80047d6:	4413      	add	r3, r2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <main_Func+0x270>)
 80047dc:	801a      	strh	r2, [r3, #0]


	esc_1 = map(esc_1, 1000, 2000, 200, 400);
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <main_Func+0x264>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	23c8      	movs	r3, #200	; 0xc8
 80047ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047f4:	f7ff fe08 	bl	8004408 <map>
 80047f8:	4603      	mov	r3, r0
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <main_Func+0x264>)
 80047fe:	801a      	strh	r2, [r3, #0]
	esc_2 = map(esc_2, 1000, 2000, 200, 400);
 8004800:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <main_Func+0x268>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	23c8      	movs	r3, #200	; 0xc8
 800480e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004812:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004816:	f7ff fdf7 	bl	8004408 <map>
 800481a:	4603      	mov	r3, r0
 800481c:	b29a      	uxth	r2, r3
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <main_Func+0x268>)
 8004820:	801a      	strh	r2, [r3, #0]
	esc_3 = map(esc_3, 1000, 2000, 200, 400);
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <main_Func+0x26c>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	23c8      	movs	r3, #200	; 0xc8
 8004830:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004838:	f7ff fde6 	bl	8004408 <map>
 800483c:	4603      	mov	r3, r0
 800483e:	b29a      	uxth	r2, r3
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <main_Func+0x26c>)
 8004842:	801a      	strh	r2, [r3, #0]
	esc_4 = map(esc_4, 1000, 2000, 200, 400);
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <main_Func+0x270>)
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	23c8      	movs	r3, #200	; 0xc8
 8004852:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800485a:	f7ff fdd5 	bl	8004408 <map>
 800485e:	4603      	mov	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <main_Func+0x270>)
 8004864:	801a      	strh	r2, [r3, #0]
	htim4.Instance->CCR1 = esc_1;
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <main_Func+0x264>)
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <main_Func+0x23c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = esc_2;
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <main_Func+0x268>)
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <main_Func+0x23c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = esc_3;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <main_Func+0x26c>)
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <main_Func+0x23c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = esc_4;
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <main_Func+0x270>)
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <main_Func+0x23c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(150);
 800488e:	2096      	movs	r0, #150	; 0x96
 8004890:	f005 fcc0 	bl	800a214 <osDelay>
	pid_output_pitch = calculate_pid(pid_p_gain_pitch, pid_i_gain_pitch, pid_d_gain_pitch, data.KalmanAngleY);
 8004894:	e712      	b.n	80046bc <main_Func+0x60>
 8004896:	bf00      	nop
 8004898:	20000698 	.word	0x20000698
 800489c:	200000b4 	.word	0x200000b4
 80048a0:	200000b8 	.word	0x200000b8
 80048a4:	200000bc 	.word	0x200000bc
 80048a8:	200004a0 	.word	0x200004a0
 80048ac:	200000a8 	.word	0x200000a8
 80048b0:	200000ac 	.word	0x200000ac
 80048b4:	200000b0 	.word	0x200000b0
 80048b8:	20000098 	.word	0x20000098
 80048bc:	20000578 	.word	0x20000578
 80048c0:	2000057a 	.word	0x2000057a
 80048c4:	2000057c 	.word	0x2000057c
 80048c8:	2000057e 	.word	0x2000057e
 80048cc:	20000580 	.word	0x20000580

080048d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <MX_GPIO_Init+0x8c>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	4a1b      	ldr	r2, [pc, #108]	; (800495c <MX_GPIO_Init+0x8c>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6313      	str	r3, [r2, #48]	; 0x30
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <MX_GPIO_Init+0x8c>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <MX_GPIO_Init+0x8c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <MX_GPIO_Init+0x8c>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <MX_GPIO_Init+0x8c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_GPIO_Init+0x8c>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a0d      	ldr	r2, [pc, #52]	; (800495c <MX_GPIO_Init+0x8c>)
 8004928:	f043 0308 	orr.w	r3, r3, #8
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <MX_GPIO_Init+0x8c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800493a:	2310      	movs	r3, #16
 800493c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004942:	2302      	movs	r3, #2
 8004944:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	4619      	mov	r1, r3
 800494c:	4804      	ldr	r0, [pc, #16]	; (8004960 <MX_GPIO_Init+0x90>)
 800494e:	f001 f869 	bl	8005a24 <HAL_GPIO_Init>

}
 8004952:	bf00      	nop
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40020400 	.word	0x40020400

08004964 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <MX_I2C1_Init+0x50>)
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <MX_I2C1_Init+0x54>)
 800496c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <MX_I2C1_Init+0x50>)
 8004970:	4a12      	ldr	r2, [pc, #72]	; (80049bc <MX_I2C1_Init+0x58>)
 8004972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <MX_I2C1_Init+0x50>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <MX_I2C1_Init+0x50>)
 800497c:	2200      	movs	r2, #0
 800497e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <MX_I2C1_Init+0x50>)
 8004982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <MX_I2C1_Init+0x50>)
 800498a:	2200      	movs	r2, #0
 800498c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <MX_I2C1_Init+0x50>)
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <MX_I2C1_Init+0x50>)
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <MX_I2C1_Init+0x50>)
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049a0:	4804      	ldr	r0, [pc, #16]	; (80049b4 <MX_I2C1_Init+0x50>)
 80049a2:	f001 f9c3 	bl	8005d2c <HAL_I2C_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80049ac:	f000 f94a 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200005a4 	.word	0x200005a4
 80049b8:	40005400 	.word	0x40005400
 80049bc:	000186a0 	.word	0x000186a0

080049c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80049c4:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <MX_I2C2_Init+0x54>)
 80049c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <MX_I2C2_Init+0x58>)
 80049ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049d8:	2200      	movs	r2, #0
 80049da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049fc:	4804      	ldr	r0, [pc, #16]	; (8004a10 <MX_I2C2_Init+0x50>)
 80049fe:	f001 f995 	bl	8005d2c <HAL_I2C_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004a08:	f000 f91c 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004a0c:	bf00      	nop
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	200005f8 	.word	0x200005f8
 8004a14:	40005800 	.word	0x40005800
 8004a18:	000186a0 	.word	0x000186a0

08004a1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08c      	sub	sp, #48	; 0x30
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 031c 	add.w	r3, r7, #28
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <HAL_I2C_MspInit+0x108>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d12c      	bne.n	8004a98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a38      	ldr	r2, [pc, #224]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a5a:	23c0      	movs	r3, #192	; 0xc0
 8004a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a5e:	2312      	movs	r3, #18
 8004a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6e:	f107 031c 	add.w	r3, r7, #28
 8004a72:	4619      	mov	r1, r3
 8004a74:	482d      	ldr	r0, [pc, #180]	; (8004b2c <HAL_I2C_MspInit+0x110>)
 8004a76:	f000 ffd5 	bl	8005a24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8a:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004a96:	e041      	b.n	8004b1c <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <HAL_I2C_MspInit+0x114>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d13c      	bne.n	8004b1c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ac4:	2312      	movs	r3, #18
 8004ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004acc:	2303      	movs	r3, #3
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad4:	f107 031c 	add.w	r3, r7, #28
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4814      	ldr	r0, [pc, #80]	; (8004b2c <HAL_I2C_MspInit+0x110>)
 8004adc:	f000 ffa2 	bl	8005a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aec:	2303      	movs	r3, #3
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004af0:	2309      	movs	r3, #9
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af4:	f107 031c 	add.w	r3, r7, #28
 8004af8:	4619      	mov	r1, r3
 8004afa:	480c      	ldr	r0, [pc, #48]	; (8004b2c <HAL_I2C_MspInit+0x110>)
 8004afc:	f000 ff92 	bl	8005a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	4a07      	ldr	r2, [pc, #28]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004b0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_I2C_MspInit+0x10c>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	3730      	adds	r7, #48	; 0x30
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40005400 	.word	0x40005400
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40005800 	.word	0x40005800

08004b34 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_UART_RxCpltCallback+0x1c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_RxCpltCallback+0x14>
 8004b44:	f7fd fd0a 	bl	800255c <GPS_UART_CallBack>
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200006e0 	.word	0x200006e0

08004b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8004b58:	f000 fd2a 	bl	80055b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b5c:	f000 f80a 	bl	8004b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b60:	f7ff feb6 	bl	80048d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004b64:	f005 fa7a 	bl	800a05c <osKernelInitialize>
  MX_FREERTOS_Init();
 8004b68:	f7ff fc6c 	bl	8004444 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004b6c:	f005 fa9a 	bl	800a0a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b70:	e7fe      	b.n	8004b70 <main+0x1c>
	...

08004b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b094      	sub	sp, #80	; 0x50
 8004b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7a:	f107 0320 	add.w	r3, r7, #32
 8004b7e:	2230      	movs	r2, #48	; 0x30
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f008 fc22 	bl	800d3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <SystemClock_Config+0xc8>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <SystemClock_Config+0xc8>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <SystemClock_Config+0xc8>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <SystemClock_Config+0xcc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <SystemClock_Config+0xcc>)
 8004bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <SystemClock_Config+0xcc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bd8:	2310      	movs	r3, #16
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004be0:	2300      	movs	r3, #0
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004be4:	2310      	movs	r3, #16
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8004be8:	2390      	movs	r3, #144	; 0x90
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bec:	2302      	movs	r3, #2
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf4:	f107 0320 	add.w	r3, r7, #32
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 f985 	bl	8006f08 <HAL_RCC_OscConfig>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004c04:	f000 f81e 	bl	8004c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c08:	230f      	movs	r3, #15
 8004c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f002 fbe7 	bl	80073f8 <HAL_RCC_ClockConfig>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004c30:	f000 f808 	bl	8004c44 <Error_Handler>
  }
}
 8004c34:	bf00      	nop
 8004c36:	3750      	adds	r7, #80	; 0x50
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40007000 	.word	0x40007000

08004c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c48:	b672      	cpsid	i
}
 8004c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c4c:	e7fe      	b.n	8004c4c <Error_Handler+0x8>

08004c4e <calculate_pid>:

#include "pid.h"



float calculate_pid(float pid_p_gain,float pid_i_gain,float pid_d_gain, float gyro_input){
 8004c4e:	b480      	push	{r7}
 8004c50:	b08b      	sub	sp, #44	; 0x2c
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c58:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c5c:	ed87 1a01 	vstr	s2, [r7, #4]
 8004c60:	edc7 1a00 	vstr	s3, [r7]
	float pid_setpoint = 0;
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
	float pid_i_mem = 0;
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
	int pid_max = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
	float pid_last_d_error = 0;
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
	float pid_output;

	float pid_error_temp = gyro_input - pid_setpoint;
 8004c7a:	ed97 7a00 	vldr	s14, [r7]
 8004c7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c86:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_i_mem += pid_i_gain*pid_error_temp;
 8004c8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(pid_i_mem>pid_max){
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb8:	dd07      	ble.n	8004cca <calculate_pid+0x7c>
		pid_i_mem = pid_max;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8004cc8:	e014      	b.n	8004cf4 <calculate_pid+0xa6>
	}
	else if(pid_i_mem < -1*pid_max){
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	425b      	negs	r3, r3
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d507      	bpl.n	8004cf4 <calculate_pid+0xa6>
		pid_i_mem = -1*pid_max;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	425b      	negs	r3, r3
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	pid_output = pid_p_gain*pid_error_temp + pid_i_mem + pid_d_gain*(pid_error_temp-pid_last_d_error);
 8004cf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d08:	edd7 6a04 	vldr	s13, [r7, #16]
 8004d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	edc7 7a08 	vstr	s15, [r7, #32]
	if(pid_output > pid_max){
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	dd07      	ble.n	8004d4c <calculate_pid+0xfe>
		pid_output = pid_max;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d46:	edc7 7a08 	vstr	s15, [r7, #32]
 8004d4a:	e014      	b.n	8004d76 <calculate_pid+0x128>
	}
	else if(pid_output < -1 * pid_max){
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	425b      	negs	r3, r3
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d58:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	d507      	bpl.n	8004d76 <calculate_pid+0x128>
		pid_output = -1 * pid_max;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	425b      	negs	r3, r3
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d72:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	pid_last_d_error = pid_error_temp;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	617b      	str	r3, [r7, #20]

	return pid_output;
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	ee07 3a90 	vmov	s15, r3
}
 8004d80:	eeb0 0a67 	vmov.f32	s0, s15
 8004d84:	372c      	adds	r7, #44	; 0x2c
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_MspInit+0x54>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <HAL_MspInit+0x54>)
 8004da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_MspInit+0x54>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_MspInit+0x54>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_MspInit+0x54>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_MspInit+0x54>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	210f      	movs	r1, #15
 8004dd2:	f06f 0001 	mvn.w	r0, #1
 8004dd6:	f000 fd5c 	bl	8005892 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dec:	e7fe      	b.n	8004dec <NMI_Handler+0x4>

08004dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df2:	e7fe      	b.n	8004df2 <HardFault_Handler+0x4>

08004df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004df8:	e7fe      	b.n	8004df8 <MemManage_Handler+0x4>

08004dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dfe:	e7fe      	b.n	8004dfe <BusFault_Handler+0x4>

08004e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e04:	e7fe      	b.n	8004e04 <UsageFault_Handler+0x4>

08004e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e18:	f000 fc1c 	bl	8005654 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004e1c:	f007 f93a 	bl	800c094 <xTaskGetSchedulerState>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d001      	beq.n	8004e2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004e26:	f008 f81f 	bl	800ce68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <TIM2_IRQHandler+0x10>)
 8004e36:	f002 ff8b 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000650 	.word	0x20000650

08004e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <USART1_IRQHandler+0x10>)
 8004e4a:	f004 f96b 	bl	8009124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200006e0 	.word	0x200006e0

08004e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return 1;
 8004e5c:	2301      	movs	r3, #1
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <_kill>:

int _kill(int pid, int sig)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e72:	f008 fa73 	bl	800d35c <__errno>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2216      	movs	r2, #22
 8004e7a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <_exit>:

void _exit (int status)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ffe7 	bl	8004e68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e9a:	e7fe      	b.n	8004e9a <_exit+0x12>

08004e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e00a      	b.n	8004ec4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004eae:	f3af 8000 	nop.w
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	60ba      	str	r2, [r7, #8]
 8004eba:	b2ca      	uxtb	r2, r1
 8004ebc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	dbf0      	blt.n	8004eae <_read+0x12>
  }

  return len;
 8004ecc:	687b      	ldr	r3, [r7, #4]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e009      	b.n	8004efc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	60ba      	str	r2, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dbf1      	blt.n	8004ee8 <_write+0x12>
  }
  return len;
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_close>:

int _close(int file)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f36:	605a      	str	r2, [r3, #4]
  return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_isatty>:

int _isatty(int file)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f80:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <_sbrk+0x5c>)
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <_sbrk+0x60>)
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f8c:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <_sbrk+0x64>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <_sbrk+0x64>)
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <_sbrk+0x68>)
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <_sbrk+0x64>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d207      	bcs.n	8004fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fa8:	f008 f9d8 	bl	800d35c <__errno>
 8004fac:	4603      	mov	r3, r0
 8004fae:	220c      	movs	r2, #12
 8004fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb6:	e009      	b.n	8004fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <_sbrk+0x64>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <_sbrk+0x64>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	4a05      	ldr	r2, [pc, #20]	; (8004fdc <_sbrk+0x64>)
 8004fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20020000 	.word	0x20020000
 8004fd8:	00000400 	.word	0x00000400
 8004fdc:	2000064c 	.word	0x2000064c
 8004fe0:	200050d0 	.word	0x200050d0

08004fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <SystemInit+0x20>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <SystemInit+0x20>)
 8004ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b090      	sub	sp, #64	; 0x40
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800500e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800501c:	f107 031c 	add.w	r3, r7, #28
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005042:	4b3e      	ldr	r3, [pc, #248]	; (800513c <MX_TIM2_Init+0x134>)
 8005044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65;
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <MX_TIM2_Init+0x134>)
 800504c:	2241      	movs	r2, #65	; 0x41
 800504e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005050:	4b3a      	ldr	r3, [pc, #232]	; (800513c <MX_TIM2_Init+0x134>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <MX_TIM2_Init+0x134>)
 8005058:	f06f 0201 	mvn.w	r2, #1
 800505c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <MX_TIM2_Init+0x134>)
 8005060:	2200      	movs	r2, #0
 8005062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005064:	4b35      	ldr	r3, [pc, #212]	; (800513c <MX_TIM2_Init+0x134>)
 8005066:	2200      	movs	r2, #0
 8005068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800506a:	4834      	ldr	r0, [pc, #208]	; (800513c <MX_TIM2_Init+0x134>)
 800506c:	f002 fba4 	bl	80077b8 <HAL_TIM_Base_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005076:	f7ff fde5 	bl	8004c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800507a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005084:	4619      	mov	r1, r3
 8005086:	482d      	ldr	r0, [pc, #180]	; (800513c <MX_TIM2_Init+0x134>)
 8005088:	f003 f8c8 	bl	800821c <HAL_TIM_ConfigClockSource>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005092:	f7ff fdd7 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005096:	4829      	ldr	r0, [pc, #164]	; (800513c <MX_TIM2_Init+0x134>)
 8005098:	f002 fce6 	bl	8007a68 <HAL_TIM_IC_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80050a2:	f7ff fdcf 	bl	8004c44 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80050a6:	2304      	movs	r3, #4
 80050a8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80050aa:	2350      	movs	r3, #80	; 0x50
 80050ac:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80050ba:	f107 031c 	add.w	r3, r7, #28
 80050be:	4619      	mov	r1, r3
 80050c0:	481e      	ldr	r0, [pc, #120]	; (800513c <MX_TIM2_Init+0x134>)
 80050c2:	f003 f972 	bl	80083aa <HAL_TIM_SlaveConfigSynchro>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80050cc:	f7ff fdba 	bl	8004c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	2200      	movs	r2, #0
 80050e6:	4619      	mov	r1, r3
 80050e8:	4814      	ldr	r0, [pc, #80]	; (800513c <MX_TIM2_Init+0x134>)
 80050ea:	f002 ff39 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80050f4:	f7ff fda6 	bl	8004c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80050f8:	2302      	movs	r3, #2
 80050fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80050fc:	2302      	movs	r3, #2
 80050fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	2204      	movs	r2, #4
 8005106:	4619      	mov	r1, r3
 8005108:	480c      	ldr	r0, [pc, #48]	; (800513c <MX_TIM2_Init+0x134>)
 800510a:	f002 ff29 	bl	8007f60 <HAL_TIM_IC_ConfigChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8005114:	f7ff fd96 	bl	8004c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005118:	2300      	movs	r3, #0
 800511a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <MX_TIM2_Init+0x134>)
 8005126:	f003 fe6b 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8005130:	f7ff fd88 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005134:	bf00      	nop
 8005136:	3740      	adds	r7, #64	; 0x40
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000650 	.word	0x20000650

08005140 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005154:	f107 0320 	add.w	r3, r7, #32
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
 800516c:	615a      	str	r2, [r3, #20]
 800516e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <MX_TIM4_Init+0x128>)
 8005172:	4a3e      	ldr	r2, [pc, #248]	; (800526c <MX_TIM4_Init+0x12c>)
 8005174:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 360-1;
 8005176:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <MX_TIM4_Init+0x128>)
 8005178:	f240 1267 	movw	r2, #359	; 0x167
 800517c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800517e:	4b3a      	ldr	r3, [pc, #232]	; (8005268 <MX_TIM4_Init+0x128>)
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000-1;
 8005184:	4b38      	ldr	r3, [pc, #224]	; (8005268 <MX_TIM4_Init+0x128>)
 8005186:	f640 729f 	movw	r2, #3999	; 0xf9f
 800518a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800518c:	4b36      	ldr	r3, [pc, #216]	; (8005268 <MX_TIM4_Init+0x128>)
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005192:	4b35      	ldr	r3, [pc, #212]	; (8005268 <MX_TIM4_Init+0x128>)
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005198:	4833      	ldr	r0, [pc, #204]	; (8005268 <MX_TIM4_Init+0x128>)
 800519a:	f002 fb0d 	bl	80077b8 <HAL_TIM_Base_Init>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80051a4:	f7ff fd4e 	bl	8004c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80051ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051b2:	4619      	mov	r1, r3
 80051b4:	482c      	ldr	r0, [pc, #176]	; (8005268 <MX_TIM4_Init+0x128>)
 80051b6:	f003 f831 	bl	800821c <HAL_TIM_ConfigClockSource>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80051c0:	f7ff fd40 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80051c4:	4828      	ldr	r0, [pc, #160]	; (8005268 <MX_TIM4_Init+0x128>)
 80051c6:	f002 fb46 	bl	8007856 <HAL_TIM_PWM_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80051d0:	f7ff fd38 	bl	8004c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d4:	2300      	movs	r3, #0
 80051d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051dc:	f107 0320 	add.w	r3, r7, #32
 80051e0:	4619      	mov	r1, r3
 80051e2:	4821      	ldr	r0, [pc, #132]	; (8005268 <MX_TIM4_Init+0x128>)
 80051e4:	f003 fe0c 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80051ee:	f7ff fd29 	bl	8004c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051f2:	2360      	movs	r3, #96	; 0x60
 80051f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	2200      	movs	r2, #0
 8005206:	4619      	mov	r1, r3
 8005208:	4817      	ldr	r0, [pc, #92]	; (8005268 <MX_TIM4_Init+0x128>)
 800520a:	f002 ff45 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005214:	f7ff fd16 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	2204      	movs	r2, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4812      	ldr	r0, [pc, #72]	; (8005268 <MX_TIM4_Init+0x128>)
 8005220:	f002 ff3a 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800522a:	f7ff fd0b 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	2208      	movs	r2, #8
 8005232:	4619      	mov	r1, r3
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <MX_TIM4_Init+0x128>)
 8005236:	f002 ff2f 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8005240:	f7ff fd00 	bl	8004c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	220c      	movs	r2, #12
 8005248:	4619      	mov	r1, r3
 800524a:	4807      	ldr	r0, [pc, #28]	; (8005268 <MX_TIM4_Init+0x128>)
 800524c:	f002 ff24 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8005256:	f7ff fcf5 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800525a:	4803      	ldr	r0, [pc, #12]	; (8005268 <MX_TIM4_Init+0x128>)
 800525c:	f000 f86c 	bl	8005338 <HAL_TIM_MspPostInit>

}
 8005260:	bf00      	nop
 8005262:	3738      	adds	r7, #56	; 0x38
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000698 	.word	0x20000698
 800526c:	40000800 	.word	0x40000800

08005270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d134      	bne.n	80052fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a24      	ldr	r2, [pc, #144]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052ca:	2301      	movs	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2302      	movs	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052da:	2301      	movs	r3, #1
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4619      	mov	r1, r3
 80052e4:	4812      	ldr	r0, [pc, #72]	; (8005330 <HAL_TIM_Base_MspInit+0xc0>)
 80052e6:	f000 fb9d 	bl	8005a24 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2105      	movs	r1, #5
 80052ee:	201c      	movs	r0, #28
 80052f0:	f000 facf 	bl	8005892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052f4:	201c      	movs	r0, #28
 80052f6:	f000 fae8 	bl	80058ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80052fa:	e012      	b.n	8005322 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <HAL_TIM_Base_MspInit+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10d      	bne.n	8005322 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	4b08      	ldr	r3, [pc, #32]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_TIM_Base_MspInit+0xbc>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
}
 8005322:	bf00      	nop
 8005324:	3728      	adds	r7, #40	; 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	40020000 	.word	0x40020000
 8005334:	40000800 	.word	0x40000800

08005338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005340:	f107 030c 	add.w	r3, r7, #12
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <HAL_TIM_MspPostInit+0x68>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d11e      	bne.n	8005398 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_TIM_MspPostInit+0x6c>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <HAL_TIM_MspPostInit+0x6c>)
 8005364:	f043 0308 	orr.w	r3, r3, #8
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <HAL_TIM_MspPostInit+0x6c>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005376:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800537a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537c:	2302      	movs	r3, #2
 800537e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005388:	2302      	movs	r3, #2
 800538a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800538c:	f107 030c 	add.w	r3, r7, #12
 8005390:	4619      	mov	r1, r3
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <HAL_TIM_MspPostInit+0x70>)
 8005394:	f000 fb46 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005398:	bf00      	nop
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40020c00 	.word	0x40020c00

080053ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053b2:	4a12      	ldr	r2, [pc, #72]	; (80053fc <MX_USART1_UART_Init+0x50>)
 80053b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80053bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053d2:	220c      	movs	r2, #12
 80053d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053e2:	4805      	ldr	r0, [pc, #20]	; (80053f8 <MX_USART1_UART_Init+0x4c>)
 80053e4:	f003 fd8e 	bl	8008f04 <HAL_UART_Init>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80053ee:	f7ff fc29 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200006e0 	.word	0x200006e0
 80053fc:	40011000 	.word	0x40011000

08005400 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <MX_USART2_UART_Init+0x4c>)
 8005406:	4a12      	ldr	r2, [pc, #72]	; (8005450 <MX_USART2_UART_Init+0x50>)
 8005408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <MX_USART2_UART_Init+0x4c>)
 800540c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <MX_USART2_UART_Init+0x4c>)
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <MX_USART2_UART_Init+0x4c>)
 800541a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800541e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <MX_USART2_UART_Init+0x4c>)
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <MX_USART2_UART_Init+0x4c>)
 8005428:	220c      	movs	r2, #12
 800542a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <MX_USART2_UART_Init+0x4c>)
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <MX_USART2_UART_Init+0x4c>)
 8005434:	2200      	movs	r2, #0
 8005436:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005438:	4804      	ldr	r0, [pc, #16]	; (800544c <MX_USART2_UART_Init+0x4c>)
 800543a:	f003 fd63 	bl	8008f04 <HAL_UART_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8005444:	f7ff fbfe 	bl	8004c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000724 	.word	0x20000724
 8005450:	40004400 	.word	0x40004400

08005454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	f107 031c 	add.w	r3, r7, #28
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a36      	ldr	r2, [pc, #216]	; (800554c <HAL_UART_MspInit+0xf8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d135      	bne.n	80054e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	4b35      	ldr	r3, [pc, #212]	; (8005550 <HAL_UART_MspInit+0xfc>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_UART_MspInit+0xfc>)
 8005480:	f043 0310 	orr.w	r3, r3, #16
 8005484:	6453      	str	r3, [r2, #68]	; 0x44
 8005486:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_UART_MspInit+0xfc>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_UART_MspInit+0xfc>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <HAL_UART_MspInit+0xfc>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
 80054a2:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_UART_MspInit+0xfc>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80054b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054bc:	2303      	movs	r3, #3
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054c0:	2307      	movs	r3, #7
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c4:	f107 031c 	add.w	r3, r7, #28
 80054c8:	4619      	mov	r1, r3
 80054ca:	4822      	ldr	r0, [pc, #136]	; (8005554 <HAL_UART_MspInit+0x100>)
 80054cc:	f000 faaa 	bl	8005a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80054d0:	2200      	movs	r2, #0
 80054d2:	2105      	movs	r1, #5
 80054d4:	2025      	movs	r0, #37	; 0x25
 80054d6:	f000 f9dc 	bl	8005892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054da:	2025      	movs	r0, #37	; 0x25
 80054dc:	f000 f9f5 	bl	80058ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054e0:	e030      	b.n	8005544 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_UART_MspInit+0x104>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d12b      	bne.n	8005544 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_UART_MspInit+0xfc>)
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	4a16      	ldr	r2, [pc, #88]	; (8005550 <HAL_UART_MspInit+0xfc>)
 80054f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fa:	6413      	str	r3, [r2, #64]	; 0x40
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_UART_MspInit+0xfc>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_UART_MspInit+0xfc>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <HAL_UART_MspInit+0xfc>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <HAL_UART_MspInit+0xfc>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005524:	230c      	movs	r3, #12
 8005526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005528:	2302      	movs	r3, #2
 800552a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	2303      	movs	r3, #3
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005534:	2307      	movs	r3, #7
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	4619      	mov	r1, r3
 800553e:	4805      	ldr	r0, [pc, #20]	; (8005554 <HAL_UART_MspInit+0x100>)
 8005540:	f000 fa70 	bl	8005a24 <HAL_GPIO_Init>
}
 8005544:	bf00      	nop
 8005546:	3730      	adds	r7, #48	; 0x30
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40011000 	.word	0x40011000
 8005550:	40023800 	.word	0x40023800
 8005554:	40020000 	.word	0x40020000
 8005558:	40004400 	.word	0x40004400

0800555c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800555c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005560:	480d      	ldr	r0, [pc, #52]	; (8005598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005562:	490e      	ldr	r1, [pc, #56]	; (800559c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005564:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005568:	e002      	b.n	8005570 <LoopCopyDataInit>

0800556a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800556a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800556c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800556e:	3304      	adds	r3, #4

08005570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005574:	d3f9      	bcc.n	800556a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005576:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005578:	4c0b      	ldr	r4, [pc, #44]	; (80055a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800557a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800557c:	e001      	b.n	8005582 <LoopFillZerobss>

0800557e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800557e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005580:	3204      	adds	r2, #4

08005582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005584:	d3fb      	bcc.n	800557e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005586:	f7ff fd2d 	bl	8004fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800558a:	f007 feed 	bl	800d368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800558e:	f7ff fae1 	bl	8004b54 <main>
  bx  lr    
 8005592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800559c:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80055a0:	08013588 	.word	0x08013588
  ldr r2, =_sbss
 80055a4:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80055a8:	200050cc 	.word	0x200050cc

080055ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055ac:	e7fe      	b.n	80055ac <ADC_IRQHandler>
	...

080055b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_Init+0x40>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <HAL_Init+0x40>)
 80055ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_Init+0x40>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <HAL_Init+0x40>)
 80055c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_Init+0x40>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a07      	ldr	r2, [pc, #28]	; (80055f0 <HAL_Init+0x40>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055d8:	2003      	movs	r0, #3
 80055da:	f000 f94f 	bl	800587c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055de:	200f      	movs	r0, #15
 80055e0:	f000 f808 	bl	80055f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055e4:	f7ff fbd4 	bl	8004d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40023c00 	.word	0x40023c00

080055f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <HAL_InitTick+0x54>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <HAL_InitTick+0x58>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800560a:	fbb3 f3f1 	udiv	r3, r3, r1
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f967 	bl	80058e6 <HAL_SYSTICK_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e00e      	b.n	8005640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d80a      	bhi.n	800563e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005628:	2200      	movs	r2, #0
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	f000 f92f 	bl	8005892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005634:	4a06      	ldr	r2, [pc, #24]	; (8005650 <HAL_InitTick+0x5c>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200000c0 	.word	0x200000c0
 800564c:	200000c8 	.word	0x200000c8
 8005650:	200000c4 	.word	0x200000c4

08005654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_IncTick+0x20>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_IncTick+0x24>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4413      	add	r3, r2
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_IncTick+0x24>)
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200000c8 	.word	0x200000c8
 8005678:	20000768 	.word	0x20000768

0800567c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return uwTick;
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <HAL_GetTick+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000768 	.word	0x20000768

08005694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800569c:	f7ff ffee 	bl	800567c <HAL_GetTick>
 80056a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d005      	beq.n	80056ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <HAL_Delay+0x44>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ba:	bf00      	nop
 80056bc:	f7ff ffde 	bl	800567c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d8f7      	bhi.n	80056bc <HAL_Delay+0x28>
  {
  }
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200000c8 	.word	0x200000c8

080056dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <__NVIC_SetPriorityGrouping+0x44>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f8:	4013      	ands	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <__NVIC_SetPriorityGrouping+0x44>)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	60d3      	str	r3, [r2, #12]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <__NVIC_GetPriorityGrouping+0x18>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 0307 	and.w	r3, r3, #7
}
 8005732:	4618      	mov	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db0b      	blt.n	800576a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	f003 021f 	and.w	r2, r3, #31
 8005758:	4907      	ldr	r1, [pc, #28]	; (8005778 <__NVIC_EnableIRQ+0x38>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2001      	movs	r0, #1
 8005762:	fa00 f202 	lsl.w	r2, r0, r2
 8005766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	e000e100 	.word	0xe000e100

0800577c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	6039      	str	r1, [r7, #0]
 8005786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db0a      	blt.n	80057a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	490c      	ldr	r1, [pc, #48]	; (80057c8 <__NVIC_SetPriority+0x4c>)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	440b      	add	r3, r1
 80057a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057a4:	e00a      	b.n	80057bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <__NVIC_SetPriority+0x50>)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3b04      	subs	r3, #4
 80057b4:	0112      	lsls	r2, r2, #4
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	440b      	add	r3, r1
 80057ba:	761a      	strb	r2, [r3, #24]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	e000e100 	.word	0xe000e100
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	; 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f1c3 0307 	rsb	r3, r3, #7
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	bf28      	it	cs
 80057ee:	2304      	movcs	r3, #4
 80057f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d902      	bls.n	8005800 <NVIC_EncodePriority+0x30>
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3b03      	subs	r3, #3
 80057fe:	e000      	b.n	8005802 <NVIC_EncodePriority+0x32>
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43da      	mvns	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	401a      	ands	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005818:	f04f 31ff 	mov.w	r1, #4294967295
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	43d9      	mvns	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005828:	4313      	orrs	r3, r2
         );
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005848:	d301      	bcc.n	800584e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800584a:	2301      	movs	r3, #1
 800584c:	e00f      	b.n	800586e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800584e:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <SysTick_Config+0x40>)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3b01      	subs	r3, #1
 8005854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005856:	210f      	movs	r1, #15
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	f7ff ff8e 	bl	800577c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <SysTick_Config+0x40>)
 8005862:	2200      	movs	r2, #0
 8005864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <SysTick_Config+0x40>)
 8005868:	2207      	movs	r2, #7
 800586a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	e000e010 	.word	0xe000e010

0800587c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff29 	bl	80056dc <__NVIC_SetPriorityGrouping>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	4603      	mov	r3, r0
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058a4:	f7ff ff3e 	bl	8005724 <__NVIC_GetPriorityGrouping>
 80058a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7ff ff8e 	bl	80057d0 <NVIC_EncodePriority>
 80058b4:	4602      	mov	r2, r0
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ff5d 	bl	800577c <__NVIC_SetPriority>
}
 80058c2:	bf00      	nop
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	4603      	mov	r3, r0
 80058d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff31 	bl	8005740 <__NVIC_EnableIRQ>
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ffa2 	bl	8005838 <SysTick_Config>
 80058f4:	4603      	mov	r3, r0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800590c:	f7ff feb6 	bl	800567c <HAL_GetTick>
 8005910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d008      	beq.n	8005930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e052      	b.n	80059d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0216 	bic.w	r2, r2, #22
 800593e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800594e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <HAL_DMA_Abort+0x62>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0208 	bic.w	r2, r2, #8
 800596e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005980:	e013      	b.n	80059aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005982:	f7ff fe7b 	bl	800567c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b05      	cmp	r3, #5
 800598e:	d90c      	bls.n	80059aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e015      	b.n	80059d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e4      	bne.n	8005982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	223f      	movs	r2, #63	; 0x3f
 80059be:	409a      	lsls	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e00c      	b.n	8005a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2205      	movs	r2, #5
 8005a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e159      	b.n	8005cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a40:	2201      	movs	r2, #1
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	f040 8148 	bne.w	8005cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d005      	beq.n	8005a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d130      	bne.n	8005ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	2203      	movs	r2, #3
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aac:	2201      	movs	r2, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 0201 	and.w	r2, r3, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d017      	beq.n	8005b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2203      	movs	r2, #3
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d123      	bne.n	8005b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	08da      	lsrs	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3208      	adds	r2, #8
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	220f      	movs	r2, #15
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	08da      	lsrs	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3208      	adds	r2, #8
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	2203      	movs	r2, #3
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0203 	and.w	r2, r3, #3
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80a2 	beq.w	8005cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4b57      	ldr	r3, [pc, #348]	; (8005d0c <HAL_GPIO_Init+0x2e8>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	4a56      	ldr	r2, [pc, #344]	; (8005d0c <HAL_GPIO_Init+0x2e8>)
 8005bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bba:	4b54      	ldr	r3, [pc, #336]	; (8005d0c <HAL_GPIO_Init+0x2e8>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bc6:	4a52      	ldr	r2, [pc, #328]	; (8005d10 <HAL_GPIO_Init+0x2ec>)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	089b      	lsrs	r3, r3, #2
 8005bcc:	3302      	adds	r3, #2
 8005bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	220f      	movs	r2, #15
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a49      	ldr	r2, [pc, #292]	; (8005d14 <HAL_GPIO_Init+0x2f0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d019      	beq.n	8005c26 <HAL_GPIO_Init+0x202>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a48      	ldr	r2, [pc, #288]	; (8005d18 <HAL_GPIO_Init+0x2f4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_GPIO_Init+0x1fe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a47      	ldr	r2, [pc, #284]	; (8005d1c <HAL_GPIO_Init+0x2f8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00d      	beq.n	8005c1e <HAL_GPIO_Init+0x1fa>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a46      	ldr	r2, [pc, #280]	; (8005d20 <HAL_GPIO_Init+0x2fc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <HAL_GPIO_Init+0x1f6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a45      	ldr	r2, [pc, #276]	; (8005d24 <HAL_GPIO_Init+0x300>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_GPIO_Init+0x1f2>
 8005c12:	2304      	movs	r3, #4
 8005c14:	e008      	b.n	8005c28 <HAL_GPIO_Init+0x204>
 8005c16:	2307      	movs	r3, #7
 8005c18:	e006      	b.n	8005c28 <HAL_GPIO_Init+0x204>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e004      	b.n	8005c28 <HAL_GPIO_Init+0x204>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e002      	b.n	8005c28 <HAL_GPIO_Init+0x204>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <HAL_GPIO_Init+0x204>
 8005c26:	2300      	movs	r3, #0
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	f002 0203 	and.w	r2, r2, #3
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	4093      	lsls	r3, r2
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c38:	4935      	ldr	r1, [pc, #212]	; (8005d10 <HAL_GPIO_Init+0x2ec>)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c46:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c94:	4a24      	ldr	r2, [pc, #144]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	f67f aea2 	bls.w	8005a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	3724      	adds	r7, #36	; 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020c00 	.word	0x40020c00
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40013c00 	.word	0x40013c00

08005d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e12b      	b.n	8005f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fe fe62 	bl	8004a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d90:	f001 fcea 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 8005d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4a81      	ldr	r2, [pc, #516]	; (8005fa0 <HAL_I2C_Init+0x274>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d807      	bhi.n	8005db0 <HAL_I2C_Init+0x84>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a80      	ldr	r2, [pc, #512]	; (8005fa4 <HAL_I2C_Init+0x278>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bf94      	ite	ls
 8005da8:	2301      	movls	r3, #1
 8005daa:	2300      	movhi	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e006      	b.n	8005dbe <HAL_I2C_Init+0x92>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a7d      	ldr	r2, [pc, #500]	; (8005fa8 <HAL_I2C_Init+0x27c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bf94      	ite	ls
 8005db8:	2301      	movls	r3, #1
 8005dba:	2300      	movhi	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0e7      	b.n	8005f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a78      	ldr	r2, [pc, #480]	; (8005fac <HAL_I2C_Init+0x280>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	0c9b      	lsrs	r3, r3, #18
 8005dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a6a      	ldr	r2, [pc, #424]	; (8005fa0 <HAL_I2C_Init+0x274>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d802      	bhi.n	8005e00 <HAL_I2C_Init+0xd4>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	e009      	b.n	8005e14 <HAL_I2C_Init+0xe8>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a69      	ldr	r2, [pc, #420]	; (8005fb0 <HAL_I2C_Init+0x284>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	3301      	adds	r3, #1
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	495c      	ldr	r1, [pc, #368]	; (8005fa0 <HAL_I2C_Init+0x274>)
 8005e30:	428b      	cmp	r3, r1
 8005e32:	d819      	bhi.n	8005e68 <HAL_I2C_Init+0x13c>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1e59      	subs	r1, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e48:	400b      	ands	r3, r1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_I2C_Init+0x138>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1e59      	subs	r1, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	e051      	b.n	8005f08 <HAL_I2C_Init+0x1dc>
 8005e64:	2304      	movs	r3, #4
 8005e66:	e04f      	b.n	8005f08 <HAL_I2C_Init+0x1dc>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d111      	bne.n	8005e94 <HAL_I2C_Init+0x168>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1e58      	subs	r0, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6859      	ldr	r1, [r3, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	440b      	add	r3, r1
 8005e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e82:	3301      	adds	r3, #1
 8005e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e012      	b.n	8005eba <HAL_I2C_Init+0x18e>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1e58      	subs	r0, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	0099      	lsls	r1, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eaa:	3301      	adds	r3, #1
 8005eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_I2C_Init+0x196>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e022      	b.n	8005f08 <HAL_I2C_Init+0x1dc>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_I2C_Init+0x1bc>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1e58      	subs	r0, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	440b      	add	r3, r1
 8005ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005edc:	3301      	adds	r3, #1
 8005ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	e00f      	b.n	8005f08 <HAL_I2C_Init+0x1dc>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1e58      	subs	r0, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	0099      	lsls	r1, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005efe:	3301      	adds	r3, #1
 8005f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	6809      	ldr	r1, [r1, #0]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6911      	ldr	r1, [r2, #16]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68d2      	ldr	r2, [r2, #12]
 8005f42:	4311      	orrs	r1, r2
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	000186a0 	.word	0x000186a0
 8005fa4:	001e847f 	.word	0x001e847f
 8005fa8:	003d08ff 	.word	0x003d08ff
 8005fac:	431bde83 	.word	0x431bde83
 8005fb0:	10624dd3 	.word	0x10624dd3

08005fb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fce:	f7ff fb55 	bl	800567c <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	f040 80d9 	bne.w	8006194 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2319      	movs	r3, #25
 8005fe8:	2201      	movs	r2, #1
 8005fea:	496d      	ldr	r1, [pc, #436]	; (80061a0 <HAL_I2C_Mem_Write+0x1ec>)
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fdad 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e0cc      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_I2C_Mem_Write+0x56>
 8006006:	2302      	movs	r3, #2
 8006008:	e0c5      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d007      	beq.n	8006030 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2221      	movs	r2, #33	; 0x21
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a4d      	ldr	r2, [pc, #308]	; (80061a4 <HAL_I2C_Mem_Write+0x1f0>)
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006072:	88f8      	ldrh	r0, [r7, #6]
 8006074:	893a      	ldrh	r2, [r7, #8]
 8006076:	8979      	ldrh	r1, [r7, #10]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4603      	mov	r3, r0
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fbe4 	bl	8006850 <I2C_RequestMemoryWrite>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d052      	beq.n	8006134 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e081      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fe2e 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00d      	beq.n	80060be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d107      	bne.n	80060ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e06b      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d11b      	bne.n	8006134 <HAL_I2C_Mem_Write+0x180>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006100:	2b00      	cmp	r3, #0
 8006102:	d017      	beq.n	8006134 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1aa      	bne.n	8006092 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fe1a 	bl	8006d7a <I2C_WaitOnBTFFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00d      	beq.n	8006168 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	2b04      	cmp	r3, #4
 8006152:	d107      	bne.n	8006164 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e016      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	00100002 	.word	0x00100002
 80061a4:	ffff0000 	.word	0xffff0000

080061a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08c      	sub	sp, #48	; 0x30
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	817b      	strh	r3, [r7, #10]
 80061ba:	460b      	mov	r3, r1
 80061bc:	813b      	strh	r3, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061c2:	f7ff fa5b 	bl	800567c <HAL_GetTick>
 80061c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	f040 8208 	bne.w	80065e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2319      	movs	r3, #25
 80061dc:	2201      	movs	r2, #1
 80061de:	497b      	ldr	r1, [pc, #492]	; (80063cc <HAL_I2C_Mem_Read+0x224>)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fcb3 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
 80061ee:	e1fb      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_I2C_Mem_Read+0x56>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e1f4      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d007      	beq.n	8006224 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2222      	movs	r2, #34	; 0x22
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a5b      	ldr	r2, [pc, #364]	; (80063d0 <HAL_I2C_Mem_Read+0x228>)
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006266:	88f8      	ldrh	r0, [r7, #6]
 8006268:	893a      	ldrh	r2, [r7, #8]
 800626a:	8979      	ldrh	r1, [r7, #10]
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4603      	mov	r3, r0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fb80 	bl	800697c <I2C_RequestMemoryRead>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1b0      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d113      	bne.n	80062b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628e:	2300      	movs	r3, #0
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e184      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d11b      	bne.n	80062f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	e164      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d11b      	bne.n	8006336 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	e144      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800634c:	e138      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b03      	cmp	r3, #3
 8006354:	f200 80f1 	bhi.w	800653a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635c:	2b01      	cmp	r3, #1
 800635e:	d123      	bne.n	80063a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fd49 	bl	8006dfc <I2C_WaitOnRXNEFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e139      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063a6:	e10b      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d14e      	bne.n	800644e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	2200      	movs	r2, #0
 80063b8:	4906      	ldr	r1, [pc, #24]	; (80063d4 <HAL_I2C_Mem_Read+0x22c>)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fbc6 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e10e      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
 80063ca:	bf00      	nop
 80063cc:	00100002 	.word	0x00100002
 80063d0:	ffff0000 	.word	0xffff0000
 80063d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800644c:	e0b8      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2200      	movs	r2, #0
 8006456:	4966      	ldr	r1, [pc, #408]	; (80065f0 <HAL_I2C_Mem_Read+0x448>)
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fb77 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e0bf      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2200      	movs	r2, #0
 80064b2:	494f      	ldr	r1, [pc, #316]	; (80065f0 <HAL_I2C_Mem_Read+0x448>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fb49 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e091      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006538:	e042      	b.n	80065c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fc5c 	bl	8006dfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e04c      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b04      	cmp	r3, #4
 800658c:	d118      	bne.n	80065c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f47f aec2 	bne.w	800634e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3728      	adds	r7, #40	; 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	00010004 	.word	0x00010004

080065f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	460b      	mov	r3, r1
 8006602:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006604:	f7ff f83a 	bl	800567c <HAL_GetTick>
 8006608:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b20      	cmp	r3, #32
 8006618:	f040 8111 	bne.w	800683e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2319      	movs	r3, #25
 8006622:	2201      	movs	r2, #1
 8006624:	4988      	ldr	r1, [pc, #544]	; (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fa90 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
 8006634:	e104      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_I2C_IsDeviceReady+0x50>
 8006640:	2302      	movs	r3, #2
 8006642:	e0fd      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d007      	beq.n	800666a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2224      	movs	r2, #36	; 0x24
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a70      	ldr	r2, [pc, #448]	; (800684c <HAL_I2C_IsDeviceReady+0x258>)
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fa4e 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d103      	bne.n	80066ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0b6      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80066e2:	f7fe ffcb 	bl	800567c <HAL_GetTick>
 80066e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006716:	e025      	b.n	8006764 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006718:	f7fe ffb0 	bl	800567c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <HAL_I2C_IsDeviceReady+0x13a>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22a0      	movs	r2, #160	; 0xa0
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b02      	cmp	r3, #2
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2ba0      	cmp	r3, #160	; 0xa0
 800676e:	d005      	beq.n	800677c <HAL_I2C_IsDeviceReady+0x188>
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_I2C_IsDeviceReady+0x188>
 8006776:	7dbb      	ldrb	r3, [r7, #22]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0cd      	beq.n	8006718 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d129      	bne.n	80067e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2319      	movs	r3, #25
 80067be:	2201      	movs	r2, #1
 80067c0:	4921      	ldr	r1, [pc, #132]	; (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f9c2 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e036      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e02c      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	2319      	movs	r3, #25
 8006806:	2201      	movs	r2, #1
 8006808:	490f      	ldr	r1, [pc, #60]	; (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f99e 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e012      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3301      	adds	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	f4ff af32 	bcc.w	800668e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	00100002 	.word	0x00100002
 800684c:	ffff0000 	.word	0xffff0000

08006850 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	4608      	mov	r0, r1
 800685a:	4611      	mov	r1, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4603      	mov	r3, r0
 8006860:	817b      	strh	r3, [r7, #10]
 8006862:	460b      	mov	r3, r1
 8006864:	813b      	strh	r3, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2200      	movs	r2, #0
 8006882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f960 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d103      	bne.n	80068aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e05f      	b.n	800696e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068ae:	897b      	ldrh	r3, [r7, #10]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	461a      	mov	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	492d      	ldr	r1, [pc, #180]	; (8006978 <I2C_RequestMemoryWrite+0x128>)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f998 	bl	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e04c      	b.n	800696e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	6a39      	ldr	r1, [r7, #32]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fa02 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d107      	bne.n	8006912 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e02b      	b.n	800696e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d105      	bne.n	8006928 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800691c:	893b      	ldrh	r3, [r7, #8]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	611a      	str	r2, [r3, #16]
 8006926:	e021      	b.n	800696c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006928:	893b      	ldrh	r3, [r7, #8]
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	b29b      	uxth	r3, r3
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	6a39      	ldr	r1, [r7, #32]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f9dc 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00d      	beq.n	8006962 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b04      	cmp	r3, #4
 800694c:	d107      	bne.n	800695e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e005      	b.n	800696e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006962:	893b      	ldrh	r3, [r7, #8]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	00010002 	.word	0x00010002

0800697c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	4608      	mov	r0, r1
 8006986:	4611      	mov	r1, r2
 8006988:	461a      	mov	r2, r3
 800698a:	4603      	mov	r3, r0
 800698c:	817b      	strh	r3, [r7, #10]
 800698e:	460b      	mov	r3, r1
 8006990:	813b      	strh	r3, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2200      	movs	r2, #0
 80069be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8c2 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069dc:	d103      	bne.n	80069e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e0aa      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ea:	897b      	ldrh	r3, [r7, #10]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	6a3a      	ldr	r2, [r7, #32]
 80069fe:	4952      	ldr	r1, [pc, #328]	; (8006b48 <I2C_RequestMemoryRead+0x1cc>)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f8fa 	bl	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e097      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a28:	6a39      	ldr	r1, [r7, #32]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f964 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d107      	bne.n	8006a4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e076      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d105      	bne.n	8006a64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a58:	893b      	ldrh	r3, [r7, #8]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	611a      	str	r2, [r3, #16]
 8006a62:	e021      	b.n	8006aa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a74:	6a39      	ldr	r1, [r7, #32]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f93e 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d107      	bne.n	8006a9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e050      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	6a39      	ldr	r1, [r7, #32]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f923 	bl	8006cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00d      	beq.n	8006ad4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d107      	bne.n	8006ad0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ace:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e035      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f82b 	bl	8006b4c <I2C_WaitOnFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0a:	d103      	bne.n	8006b14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e013      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b18:	897b      	ldrh	r3, [r7, #10]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	6a3a      	ldr	r2, [r7, #32]
 8006b2c:	4906      	ldr	r1, [pc, #24]	; (8006b48 <I2C_RequestMemoryRead+0x1cc>)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f863 	bl	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	00010002 	.word	0x00010002

08006b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b5c:	e025      	b.n	8006baa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d021      	beq.n	8006baa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fe fd89 	bl	800567c <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d116      	bne.n	8006baa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e023      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d10d      	bne.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	43da      	mvns	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	e00c      	b.n	8006bea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d0b6      	beq.n	8006b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c08:	e051      	b.n	8006cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d123      	bne.n	8006c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e046      	b.n	8006cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d021      	beq.n	8006cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fe fd07 	bl	800567c <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d116      	bne.n	8006cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f043 0220 	orr.w	r2, r3, #32
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e020      	b.n	8006cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	0c1b      	lsrs	r3, r3, #16
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10c      	bne.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	43da      	mvns	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bf14      	ite	ne
 8006cca:	2301      	movne	r3, #1
 8006ccc:	2300      	moveq	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	e00b      	b.n	8006cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	43da      	mvns	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d18d      	bne.n	8006c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d04:	e02d      	b.n	8006d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f8ce 	bl	8006ea8 <I2C_IsAcknowledgeFailed>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e02d      	b.n	8006d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d021      	beq.n	8006d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7fe fcad 	bl	800567c <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d116      	bne.n	8006d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f043 0220 	orr.w	r2, r3, #32
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e007      	b.n	8006d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d1ca      	bne.n	8006d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d86:	e02d      	b.n	8006de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f88d 	bl	8006ea8 <I2C_IsAcknowledgeFailed>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e02d      	b.n	8006df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d021      	beq.n	8006de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da0:	f7fe fc6c 	bl	800567c <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e007      	b.n	8006df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d1ca      	bne.n	8006d88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e08:	e042      	b.n	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d119      	bne.n	8006e4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0210 	mvn.w	r2, #16
 8006e20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e029      	b.n	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4c:	f7fe fc16 	bl	800567c <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d116      	bne.n	8006e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	f043 0220 	orr.w	r2, r3, #32
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e007      	b.n	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d1b5      	bne.n	8006e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebe:	d11b      	bne.n	8006ef8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ec8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e267      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d075      	beq.n	8007012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f26:	4b88      	ldr	r3, [pc, #544]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 030c 	and.w	r3, r3, #12
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d00c      	beq.n	8006f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f32:	4b85      	ldr	r3, [pc, #532]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d112      	bne.n	8006f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f3e:	4b82      	ldr	r3, [pc, #520]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4a:	d10b      	bne.n	8006f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f4c:	4b7e      	ldr	r3, [pc, #504]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d05b      	beq.n	8007010 <HAL_RCC_OscConfig+0x108>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d157      	bne.n	8007010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e242      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d106      	bne.n	8006f7c <HAL_RCC_OscConfig+0x74>
 8006f6e:	4b76      	ldr	r3, [pc, #472]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a75      	ldr	r2, [pc, #468]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e01d      	b.n	8006fb8 <HAL_RCC_OscConfig+0xb0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x98>
 8006f86:	4b70      	ldr	r3, [pc, #448]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6f      	ldr	r2, [pc, #444]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4b6d      	ldr	r3, [pc, #436]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a6c      	ldr	r2, [pc, #432]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e00b      	b.n	8006fb8 <HAL_RCC_OscConfig+0xb0>
 8006fa0:	4b69      	ldr	r3, [pc, #420]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	4b66      	ldr	r3, [pc, #408]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a65      	ldr	r2, [pc, #404]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d013      	beq.n	8006fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc0:	f7fe fb5c 	bl	800567c <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc8:	f7fe fb58 	bl	800567c <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b64      	cmp	r3, #100	; 0x64
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e207      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fda:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_RCC_OscConfig+0xc0>
 8006fe6:	e014      	b.n	8007012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7fe fb48 	bl	800567c <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff0:	f7fe fb44 	bl	800567c <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b64      	cmp	r3, #100	; 0x64
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e1f3      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007002:	4b51      	ldr	r3, [pc, #324]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0xe8>
 800700e:	e000      	b.n	8007012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d063      	beq.n	80070e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800701e:	4b4a      	ldr	r3, [pc, #296]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800702a:	4b47      	ldr	r3, [pc, #284]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007032:	2b08      	cmp	r3, #8
 8007034:	d11c      	bne.n	8007070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007036:	4b44      	ldr	r3, [pc, #272]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d116      	bne.n	8007070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007042:	4b41      	ldr	r3, [pc, #260]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_RCC_OscConfig+0x152>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d001      	beq.n	800705a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e1c7      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705a:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4937      	ldr	r1, [pc, #220]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800706e:	e03a      	b.n	80070e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d020      	beq.n	80070ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007078:	4b34      	ldr	r3, [pc, #208]	; (800714c <HAL_RCC_OscConfig+0x244>)
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707e:	f7fe fafd 	bl	800567c <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007086:	f7fe faf9 	bl	800567c <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e1a8      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007098:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070a4:	4b28      	ldr	r3, [pc, #160]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4925      	ldr	r1, [pc, #148]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	600b      	str	r3, [r1, #0]
 80070b8:	e015      	b.n	80070e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <HAL_RCC_OscConfig+0x244>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fe fadc 	bl	800567c <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070c8:	f7fe fad8 	bl	800567c <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e187      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070da:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d036      	beq.n	8007160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d016      	beq.n	8007128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <HAL_RCC_OscConfig+0x248>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fe fabc 	bl	800567c <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007108:	f7fe fab8 	bl	800567c <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e167      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_OscConfig+0x240>)
 800711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x200>
 8007126:	e01b      	b.n	8007160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_RCC_OscConfig+0x248>)
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fe faa5 	bl	800567c <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007134:	e00e      	b.n	8007154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007136:	f7fe faa1 	bl	800567c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d907      	bls.n	8007154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e150      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
 8007148:	40023800 	.word	0x40023800
 800714c:	42470000 	.word	0x42470000
 8007150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007154:	4b88      	ldr	r3, [pc, #544]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1ea      	bne.n	8007136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8097 	beq.w	800729c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007172:	4b81      	ldr	r3, [pc, #516]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10f      	bne.n	800719e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	4b7d      	ldr	r3, [pc, #500]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	4a7c      	ldr	r2, [pc, #496]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718c:	6413      	str	r3, [r2, #64]	; 0x40
 800718e:	4b7a      	ldr	r3, [pc, #488]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719a:	2301      	movs	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800719e:	4b77      	ldr	r3, [pc, #476]	; (800737c <HAL_RCC_OscConfig+0x474>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d118      	bne.n	80071dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071aa:	4b74      	ldr	r3, [pc, #464]	; (800737c <HAL_RCC_OscConfig+0x474>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a73      	ldr	r2, [pc, #460]	; (800737c <HAL_RCC_OscConfig+0x474>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071b6:	f7fe fa61 	bl	800567c <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071be:	f7fe fa5d 	bl	800567c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e10c      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d0:	4b6a      	ldr	r3, [pc, #424]	; (800737c <HAL_RCC_OscConfig+0x474>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d106      	bne.n	80071f2 <HAL_RCC_OscConfig+0x2ea>
 80071e4:	4b64      	ldr	r3, [pc, #400]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	4a63      	ldr	r2, [pc, #396]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	6713      	str	r3, [r2, #112]	; 0x70
 80071f0:	e01c      	b.n	800722c <HAL_RCC_OscConfig+0x324>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d10c      	bne.n	8007214 <HAL_RCC_OscConfig+0x30c>
 80071fa:	4b5f      	ldr	r3, [pc, #380]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	4a5e      	ldr	r2, [pc, #376]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007200:	f043 0304 	orr.w	r3, r3, #4
 8007204:	6713      	str	r3, [r2, #112]	; 0x70
 8007206:	4b5c      	ldr	r3, [pc, #368]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	4a5b      	ldr	r2, [pc, #364]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6713      	str	r3, [r2, #112]	; 0x70
 8007212:	e00b      	b.n	800722c <HAL_RCC_OscConfig+0x324>
 8007214:	4b58      	ldr	r3, [pc, #352]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	4a57      	ldr	r2, [pc, #348]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	6713      	str	r3, [r2, #112]	; 0x70
 8007220:	4b55      	ldr	r3, [pc, #340]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	4a54      	ldr	r2, [pc, #336]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007226:	f023 0304 	bic.w	r3, r3, #4
 800722a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d015      	beq.n	8007260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007234:	f7fe fa22 	bl	800567c <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723a:	e00a      	b.n	8007252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800723c:	f7fe fa1e 	bl	800567c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f241 3288 	movw	r2, #5000	; 0x1388
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e0cb      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007252:	4b49      	ldr	r3, [pc, #292]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ee      	beq.n	800723c <HAL_RCC_OscConfig+0x334>
 800725e:	e014      	b.n	800728a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007260:	f7fe fa0c 	bl	800567c <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007266:	e00a      	b.n	800727e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007268:	f7fe fa08 	bl	800567c <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f241 3288 	movw	r2, #5000	; 0x1388
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e0b5      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800727e:	4b3e      	ldr	r3, [pc, #248]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1ee      	bne.n	8007268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d105      	bne.n	800729c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007290:	4b39      	ldr	r3, [pc, #228]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	4a38      	ldr	r2, [pc, #224]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800729a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80a1 	beq.w	80073e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072a6:	4b34      	ldr	r3, [pc, #208]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d05c      	beq.n	800736c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d141      	bne.n	800733e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <HAL_RCC_OscConfig+0x478>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c0:	f7fe f9dc 	bl	800567c <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c8:	f7fe f9d8 	bl	800567c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e087      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072da:	4b27      	ldr	r3, [pc, #156]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	019b      	lsls	r3, r3, #6
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	3b01      	subs	r3, #1
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	061b      	lsls	r3, r3, #24
 800730a:	491b      	ldr	r1, [pc, #108]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 800730c:	4313      	orrs	r3, r2
 800730e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <HAL_RCC_OscConfig+0x478>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007316:	f7fe f9b1 	bl	800567c <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800731e:	f7fe f9ad 	bl	800567c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e05c      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007330:	4b11      	ldr	r3, [pc, #68]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x416>
 800733c:	e054      	b.n	80073e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <HAL_RCC_OscConfig+0x478>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fe f99a 	bl	800567c <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800734c:	f7fe f996 	bl	800567c <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e045      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_RCC_OscConfig+0x470>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0x444>
 800736a:	e03d      	b.n	80073e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d107      	bne.n	8007384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e038      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
 8007378:	40023800 	.word	0x40023800
 800737c:	40007000 	.word	0x40007000
 8007380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007384:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <HAL_RCC_OscConfig+0x4ec>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d028      	beq.n	80073e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d121      	bne.n	80073e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d11a      	bne.n	80073e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073b4:	4013      	ands	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073bc:	4293      	cmp	r3, r2
 80073be:	d111      	bne.n	80073e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	3b01      	subs	r3, #1
 80073ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d107      	bne.n	80073e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d001      	beq.n	80073e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800

080073f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0cc      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800740c:	4b68      	ldr	r3, [pc, #416]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d90c      	bls.n	8007434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741a:	4b65      	ldr	r3, [pc, #404]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007422:	4b63      	ldr	r3, [pc, #396]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0b8      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d020      	beq.n	8007482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800744c:	4b59      	ldr	r3, [pc, #356]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4a58      	ldr	r2, [pc, #352]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007464:	4b53      	ldr	r3, [pc, #332]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4a52      	ldr	r2, [pc, #328]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800746e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007470:	4b50      	ldr	r3, [pc, #320]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	494d      	ldr	r1, [pc, #308]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800747e:	4313      	orrs	r3, r2
 8007480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d044      	beq.n	8007518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d107      	bne.n	80074a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007496:	4b47      	ldr	r3, [pc, #284]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d119      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e07f      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d003      	beq.n	80074b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d107      	bne.n	80074c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b6:	4b3f      	ldr	r3, [pc, #252]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e06f      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c6:	4b3b      	ldr	r3, [pc, #236]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e067      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074d6:	4b37      	ldr	r3, [pc, #220]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f023 0203 	bic.w	r2, r3, #3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	4934      	ldr	r1, [pc, #208]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074e8:	f7fe f8c8 	bl	800567c <HAL_GetTick>
 80074ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ee:	e00a      	b.n	8007506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f0:	f7fe f8c4 	bl	800567c <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fe:	4293      	cmp	r3, r2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e04f      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 020c 	and.w	r2, r3, #12
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	429a      	cmp	r2, r3
 8007516:	d1eb      	bne.n	80074f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d20c      	bcs.n	8007540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007526:	4b22      	ldr	r3, [pc, #136]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d001      	beq.n	8007540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e032      	b.n	80075a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800754c:	4b19      	ldr	r3, [pc, #100]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4916      	ldr	r1, [pc, #88]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800756a:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	490e      	ldr	r1, [pc, #56]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	4313      	orrs	r3, r2
 800757c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800757e:	f000 f821 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8007582:	4602      	mov	r2, r0
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	490a      	ldr	r1, [pc, #40]	; (80075b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007590:	5ccb      	ldrb	r3, [r1, r3]
 8007592:	fa22 f303 	lsr.w	r3, r2, r3
 8007596:	4a09      	ldr	r2, [pc, #36]	; (80075bc <HAL_RCC_ClockConfig+0x1c4>)
 8007598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800759a:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <HAL_RCC_ClockConfig+0x1c8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe f828 	bl	80055f4 <HAL_InitTick>

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	40023c00 	.word	0x40023c00
 80075b4:	40023800 	.word	0x40023800
 80075b8:	08013034 	.word	0x08013034
 80075bc:	200000c0 	.word	0x200000c0
 80075c0:	200000c4 	.word	0x200000c4

080075c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c8:	b090      	sub	sp, #64	; 0x40
 80075ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
 80075d0:	2300      	movs	r3, #0
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d4:	2300      	movs	r3, #0
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075dc:	4b59      	ldr	r3, [pc, #356]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 030c 	and.w	r3, r3, #12
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d00d      	beq.n	8007604 <HAL_RCC_GetSysClockFreq+0x40>
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	f200 80a1 	bhi.w	8007730 <HAL_RCC_GetSysClockFreq+0x16c>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_RCC_GetSysClockFreq+0x34>
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d003      	beq.n	80075fe <HAL_RCC_GetSysClockFreq+0x3a>
 80075f6:	e09b      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075f8:	4b53      	ldr	r3, [pc, #332]	; (8007748 <HAL_RCC_GetSysClockFreq+0x184>)
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80075fc:	e09b      	b.n	8007736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075fe:	4b53      	ldr	r3, [pc, #332]	; (800774c <HAL_RCC_GetSysClockFreq+0x188>)
 8007600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007602:	e098      	b.n	8007736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007604:	4b4f      	ldr	r3, [pc, #316]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800760e:	4b4d      	ldr	r3, [pc, #308]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d028      	beq.n	800766c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800761a:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	099b      	lsrs	r3, r3, #6
 8007620:	2200      	movs	r2, #0
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	627a      	str	r2, [r7, #36]	; 0x24
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800762c:	2100      	movs	r1, #0
 800762e:	4b47      	ldr	r3, [pc, #284]	; (800774c <HAL_RCC_GetSysClockFreq+0x188>)
 8007630:	fb03 f201 	mul.w	r2, r3, r1
 8007634:	2300      	movs	r3, #0
 8007636:	fb00 f303 	mul.w	r3, r0, r3
 800763a:	4413      	add	r3, r2
 800763c:	4a43      	ldr	r2, [pc, #268]	; (800774c <HAL_RCC_GetSysClockFreq+0x188>)
 800763e:	fba0 1202 	umull	r1, r2, r0, r2
 8007642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007644:	460a      	mov	r2, r1
 8007646:	62ba      	str	r2, [r7, #40]	; 0x28
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	4413      	add	r3, r2
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	2200      	movs	r2, #0
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	61fa      	str	r2, [r7, #28]
 8007656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800765a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800765e:	f7f9 fb2b 	bl	8000cb8 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4613      	mov	r3, r2
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800766a:	e053      	b.n	8007714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	099b      	lsrs	r3, r3, #6
 8007672:	2200      	movs	r2, #0
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	617a      	str	r2, [r7, #20]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800767e:	f04f 0b00 	mov.w	fp, #0
 8007682:	4652      	mov	r2, sl
 8007684:	465b      	mov	r3, fp
 8007686:	f04f 0000 	mov.w	r0, #0
 800768a:	f04f 0100 	mov.w	r1, #0
 800768e:	0159      	lsls	r1, r3, #5
 8007690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007694:	0150      	lsls	r0, r2, #5
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	ebb2 080a 	subs.w	r8, r2, sl
 800769e:	eb63 090b 	sbc.w	r9, r3, fp
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80076b6:	ebb2 0408 	subs.w	r4, r2, r8
 80076ba:	eb63 0509 	sbc.w	r5, r3, r9
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	00eb      	lsls	r3, r5, #3
 80076c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076cc:	00e2      	lsls	r2, r4, #3
 80076ce:	4614      	mov	r4, r2
 80076d0:	461d      	mov	r5, r3
 80076d2:	eb14 030a 	adds.w	r3, r4, sl
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	eb45 030b 	adc.w	r3, r5, fp
 80076dc:	607b      	str	r3, [r7, #4]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076ea:	4629      	mov	r1, r5
 80076ec:	028b      	lsls	r3, r1, #10
 80076ee:	4621      	mov	r1, r4
 80076f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076f4:	4621      	mov	r1, r4
 80076f6:	028a      	lsls	r2, r1, #10
 80076f8:	4610      	mov	r0, r2
 80076fa:	4619      	mov	r1, r3
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	2200      	movs	r2, #0
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	60fa      	str	r2, [r7, #12]
 8007704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007708:	f7f9 fad6 	bl	8000cb8 <__aeabi_uldivmod>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4613      	mov	r3, r2
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCC_GetSysClockFreq+0x180>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	3301      	adds	r3, #1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800772e:	e002      	b.n	8007736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCC_GetSysClockFreq+0x184>)
 8007732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007738:	4618      	mov	r0, r3
 800773a:	3740      	adds	r7, #64	; 0x40
 800773c:	46bd      	mov	sp, r7
 800773e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800
 8007748:	00f42400 	.word	0x00f42400
 800774c:	017d7840 	.word	0x017d7840

08007750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <HAL_RCC_GetHCLKFreq+0x14>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	200000c0 	.word	0x200000c0

08007768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800776c:	f7ff fff0 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	0a9b      	lsrs	r3, r3, #10
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4903      	ldr	r1, [pc, #12]	; (800778c <HAL_RCC_GetPCLK1Freq+0x24>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40023800 	.word	0x40023800
 800778c:	08013044 	.word	0x08013044

08007790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007794:	f7ff ffdc 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007798:	4602      	mov	r2, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0b5b      	lsrs	r3, r3, #13
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4903      	ldr	r1, [pc, #12]	; (80077b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a6:	5ccb      	ldrb	r3, [r1, r3]
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40023800 	.word	0x40023800
 80077b4:	08013044 	.word	0x08013044

080077b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e041      	b.n	800784e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fd fd46 	bl	8005270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fe86 	bl	8008508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e041      	b.n	80078ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f839 	bl	80078f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2202      	movs	r2, #2
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f000 fe37 	bl	8008508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_TIM_PWM_Start+0x24>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	bf14      	ite	ne
 8007924:	2301      	movne	r3, #1
 8007926:	2300      	moveq	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e022      	b.n	8007972 <HAL_TIM_PWM_Start+0x6a>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d109      	bne.n	8007946 <HAL_TIM_PWM_Start+0x3e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	bf14      	ite	ne
 800793e:	2301      	movne	r3, #1
 8007940:	2300      	moveq	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	e015      	b.n	8007972 <HAL_TIM_PWM_Start+0x6a>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b08      	cmp	r3, #8
 800794a:	d109      	bne.n	8007960 <HAL_TIM_PWM_Start+0x58>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	bf14      	ite	ne
 8007958:	2301      	movne	r3, #1
 800795a:	2300      	moveq	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e008      	b.n	8007972 <HAL_TIM_PWM_Start+0x6a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e068      	b.n	8007a4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start+0x82>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007988:	e013      	b.n	80079b2 <HAL_TIM_PWM_Start+0xaa>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d104      	bne.n	800799a <HAL_TIM_PWM_Start+0x92>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007998:	e00b      	b.n	80079b2 <HAL_TIM_PWM_Start+0xaa>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d104      	bne.n	80079aa <HAL_TIM_PWM_Start+0xa2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a8:	e003      	b.n	80079b2 <HAL_TIM_PWM_Start+0xaa>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2201      	movs	r2, #1
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 f9fa 	bl	8008db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <HAL_TIM_PWM_Start+0x14c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d107      	bne.n	80079da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <HAL_TIM_PWM_Start+0x14c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d018      	beq.n	8007a16 <HAL_TIM_PWM_Start+0x10e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ec:	d013      	beq.n	8007a16 <HAL_TIM_PWM_Start+0x10e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <HAL_TIM_PWM_Start+0x150>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00e      	beq.n	8007a16 <HAL_TIM_PWM_Start+0x10e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <HAL_TIM_PWM_Start+0x154>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d009      	beq.n	8007a16 <HAL_TIM_PWM_Start+0x10e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <HAL_TIM_PWM_Start+0x158>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <HAL_TIM_PWM_Start+0x10e>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a14      	ldr	r2, [pc, #80]	; (8007a64 <HAL_TIM_PWM_Start+0x15c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d111      	bne.n	8007a3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0307 	and.w	r3, r3, #7
 8007a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b06      	cmp	r3, #6
 8007a26:	d010      	beq.n	8007a4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a38:	e007      	b.n	8007a4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40010000 	.word	0x40010000
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40014000 	.word	0x40014000

08007a68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e041      	b.n	8007afe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f839 	bl	8007b06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f000 fd2e 	bl	8008508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_IC_Start_IT+0x1e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	e013      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x46>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_IC_Start_IT+0x2e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	e00b      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x46>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_IC_Start_IT+0x3e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	e003      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x46>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <HAL_TIM_IC_Start_IT+0x58>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e013      	b.n	8007b9c <HAL_TIM_IC_Start_IT+0x80>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d104      	bne.n	8007b84 <HAL_TIM_IC_Start_IT+0x68>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	e00b      	b.n	8007b9c <HAL_TIM_IC_Start_IT+0x80>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b08      	cmp	r3, #8
 8007b88:	d104      	bne.n	8007b94 <HAL_TIM_IC_Start_IT+0x78>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	e003      	b.n	8007b9c <HAL_TIM_IC_Start_IT+0x80>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d102      	bne.n	8007baa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ba4:	7b7b      	ldrb	r3, [r7, #13]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d001      	beq.n	8007bae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e0c2      	b.n	8007d34 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_IC_Start_IT+0xa2>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbc:	e013      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0xca>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_IC_Start_IT+0xb2>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bcc:	e00b      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0xca>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_IC_Start_IT+0xc2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bdc:	e003      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0xca>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_IC_Start_IT+0xda>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	e013      	b.n	8007c1e <HAL_TIM_IC_Start_IT+0x102>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_IC_Start_IT+0xea>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c04:	e00b      	b.n	8007c1e <HAL_TIM_IC_Start_IT+0x102>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_IC_Start_IT+0xfa>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c14:	e003      	b.n	8007c1e <HAL_TIM_IC_Start_IT+0x102>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b0c      	cmp	r3, #12
 8007c22:	d841      	bhi.n	8007ca8 <HAL_TIM_IC_Start_IT+0x18c>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <HAL_TIM_IC_Start_IT+0x110>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c61 	.word	0x08007c61
 8007c30:	08007ca9 	.word	0x08007ca9
 8007c34:	08007ca9 	.word	0x08007ca9
 8007c38:	08007ca9 	.word	0x08007ca9
 8007c3c:	08007c73 	.word	0x08007c73
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007ca9 	.word	0x08007ca9
 8007c4c:	08007c85 	.word	0x08007c85
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007ca9 	.word	0x08007ca9
 8007c5c:	08007c97 	.word	0x08007c97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0202 	orr.w	r2, r2, #2
 8007c6e:	60da      	str	r2, [r3, #12]
      break;
 8007c70:	e01d      	b.n	8007cae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0204 	orr.w	r2, r2, #4
 8007c80:	60da      	str	r2, [r3, #12]
      break;
 8007c82:	e014      	b.n	8007cae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	60da      	str	r2, [r3, #12]
      break;
 8007c94:	e00b      	b.n	8007cae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0210 	orr.w	r2, r2, #16
 8007ca4:	60da      	str	r2, [r3, #12]
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d13e      	bne.n	8007d32 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 f879 	bl	8008db4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	; (8007d3c <HAL_TIM_IC_Start_IT+0x220>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <HAL_TIM_IC_Start_IT+0x1e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d013      	beq.n	8007cfe <HAL_TIM_IC_Start_IT+0x1e2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_TIM_IC_Start_IT+0x224>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIM_IC_Start_IT+0x1e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a17      	ldr	r2, [pc, #92]	; (8007d44 <HAL_TIM_IC_Start_IT+0x228>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIM_IC_Start_IT+0x1e2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <HAL_TIM_IC_Start_IT+0x22c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_TIM_IC_Start_IT+0x1e2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <HAL_TIM_IC_Start_IT+0x230>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d111      	bne.n	8007d22 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b06      	cmp	r3, #6
 8007d0e:	d010      	beq.n	8007d32 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d20:	e007      	b.n	8007d32 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0201 	orr.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000

08007d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0202 	mvn.w	r2, #2
 8007d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fc fa88 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb96 	bl	80084cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb9d 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d122      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d11b      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0204 	mvn.w	r2, #4
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fc fa5e 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb6c 	bl	80084cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fb73 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0208 	mvn.w	r2, #8
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fc fa34 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb42 	bl	80084cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fb49 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0210 	mvn.w	r2, #16
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fc fa0a 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fb18 	bl	80084cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fb1f 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0201 	mvn.w	r2, #1
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 faf2 	bl	80084b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fff8 	bl	8008ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0a:	2b40      	cmp	r3, #64	; 0x40
 8007f0c:	d10e      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d107      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fae4 	bl	80084f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d10e      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d107      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0220 	mvn.w	r2, #32
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 ffc2 	bl	8008edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e088      	b.n	8008090 <HAL_TIM_IC_ConfigChannel+0x130>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f000 fd52 	bl	8008a44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 020c 	bic.w	r2, r2, #12
 8007fae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6999      	ldr	r1, [r3, #24]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	619a      	str	r2, [r3, #24]
 8007fc2:	e060      	b.n	8008086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d11c      	bne.n	8008004 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6819      	ldr	r1, [r3, #0]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f000 fdca 	bl	8008b72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007fec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6999      	ldr	r1, [r3, #24]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	021a      	lsls	r2, r3, #8
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	619a      	str	r2, [r3, #24]
 8008002:	e040      	b.n	8008086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b08      	cmp	r3, #8
 8008008:	d11b      	bne.n	8008042 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f000 fe17 	bl	8008c4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 020c 	bic.w	r2, r2, #12
 800802c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69d9      	ldr	r1, [r3, #28]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	61da      	str	r2, [r3, #28]
 8008040:	e021      	b.n	8008086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d11c      	bne.n	8008082 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f000 fe34 	bl	8008cc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800806a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69d9      	ldr	r1, [r3, #28]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	021a      	lsls	r2, r3, #8
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	61da      	str	r2, [r3, #28]
 8008080:	e001      	b.n	8008086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e0ae      	b.n	8008214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b0c      	cmp	r3, #12
 80080c2:	f200 809f 	bhi.w	8008204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	08008101 	.word	0x08008101
 80080d0:	08008205 	.word	0x08008205
 80080d4:	08008205 	.word	0x08008205
 80080d8:	08008205 	.word	0x08008205
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008205 	.word	0x08008205
 80080e4:	08008205 	.word	0x08008205
 80080e8:	08008205 	.word	0x08008205
 80080ec:	08008183 	.word	0x08008183
 80080f0:	08008205 	.word	0x08008205
 80080f4:	08008205 	.word	0x08008205
 80080f8:	08008205 	.word	0x08008205
 80080fc:	080081c3 	.word	0x080081c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fa7e 	bl	8008608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0208 	orr.w	r2, r2, #8
 800811a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0204 	bic.w	r2, r2, #4
 800812a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6999      	ldr	r1, [r3, #24]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	619a      	str	r2, [r3, #24]
      break;
 800813e:	e064      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fac4 	bl	80086d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800815a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6999      	ldr	r1, [r3, #24]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	021a      	lsls	r2, r3, #8
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	619a      	str	r2, [r3, #24]
      break;
 8008180:	e043      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fb0f 	bl	80087ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0208 	orr.w	r2, r2, #8
 800819c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0204 	bic.w	r2, r2, #4
 80081ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69d9      	ldr	r1, [r3, #28]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	61da      	str	r2, [r3, #28]
      break;
 80081c0:	e023      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fb59 	bl	8008880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69d9      	ldr	r1, [r3, #28]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	021a      	lsls	r2, r3, #8
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	61da      	str	r2, [r3, #28]
      break;
 8008202:	e002      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
      break;
 8008208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIM_ConfigClockSource+0x1c>
 8008234:	2302      	movs	r3, #2
 8008236:	e0b4      	b.n	80083a2 <HAL_TIM_ConfigClockSource+0x186>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800825e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008270:	d03e      	beq.n	80082f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008276:	f200 8087 	bhi.w	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	f000 8086 	beq.w	800838e <HAL_TIM_ConfigClockSource+0x172>
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008286:	d87f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b70      	cmp	r3, #112	; 0x70
 800828a:	d01a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0xa6>
 800828c:	2b70      	cmp	r3, #112	; 0x70
 800828e:	d87b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b60      	cmp	r3, #96	; 0x60
 8008292:	d050      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x11a>
 8008294:	2b60      	cmp	r3, #96	; 0x60
 8008296:	d877      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b50      	cmp	r3, #80	; 0x50
 800829a:	d03c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0xfa>
 800829c:	2b50      	cmp	r3, #80	; 0x50
 800829e:	d873      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d058      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x13a>
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d86f      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082a8:	2b30      	cmp	r3, #48	; 0x30
 80082aa:	d064      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d86b      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d060      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d867      	bhi.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05c      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d05a      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x15a>
 80082c0:	e062      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6899      	ldr	r1, [r3, #8]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f000 fd4f 	bl	8008d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	609a      	str	r2, [r3, #8]
      break;
 80082ee:	e04f      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	6899      	ldr	r1, [r3, #8]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f000 fd38 	bl	8008d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008312:	609a      	str	r2, [r3, #8]
      break;
 8008314:	e03c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6859      	ldr	r1, [r3, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	461a      	mov	r2, r3
 8008324:	f000 fbf6 	bl	8008b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2150      	movs	r1, #80	; 0x50
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fd05 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 8008334:	e02c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6859      	ldr	r1, [r3, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	461a      	mov	r2, r3
 8008344:	f000 fc52 	bl	8008bec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2160      	movs	r1, #96	; 0x60
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fcf5 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 8008354:	e01c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6859      	ldr	r1, [r3, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	461a      	mov	r2, r3
 8008364:	f000 fbd6 	bl	8008b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fce5 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 8008374:	e00c      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f000 fcdc 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 8008386:	e003      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e000      	b.n	8008390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800838e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80083be:	2302      	movs	r3, #2
 80083c0:	e031      	b.n	8008426 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 faa3 	bl	8008920 <TIM_SlaveTimer_SetConfig>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d009      	beq.n	80083f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e018      	b.n	8008426 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008402:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008412:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b0c      	cmp	r3, #12
 8008442:	d831      	bhi.n	80084a8 <HAL_TIM_ReadCapturedValue+0x78>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	08008481 	.word	0x08008481
 8008450:	080084a9 	.word	0x080084a9
 8008454:	080084a9 	.word	0x080084a9
 8008458:	080084a9 	.word	0x080084a9
 800845c:	0800848b 	.word	0x0800848b
 8008460:	080084a9 	.word	0x080084a9
 8008464:	080084a9 	.word	0x080084a9
 8008468:	080084a9 	.word	0x080084a9
 800846c:	08008495 	.word	0x08008495
 8008470:	080084a9 	.word	0x080084a9
 8008474:	080084a9 	.word	0x080084a9
 8008478:	080084a9 	.word	0x080084a9
 800847c:	0800849f 	.word	0x0800849f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	60fb      	str	r3, [r7, #12]

      break;
 8008488:	e00f      	b.n	80084aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	60fb      	str	r3, [r7, #12]

      break;
 8008492:	e00a      	b.n	80084aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	60fb      	str	r3, [r7, #12]

      break;
 800849c:	e005      	b.n	80084aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	60fb      	str	r3, [r7, #12]

      break;
 80084a6:	e000      	b.n	80084aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80084a8:	bf00      	nop
  }

  return tmpreg;
 80084aa:	68fb      	ldr	r3, [r7, #12]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a34      	ldr	r2, [pc, #208]	; (80085ec <TIM_Base_SetConfig+0xe4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00f      	beq.n	8008540 <TIM_Base_SetConfig+0x38>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008526:	d00b      	beq.n	8008540 <TIM_Base_SetConfig+0x38>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a31      	ldr	r2, [pc, #196]	; (80085f0 <TIM_Base_SetConfig+0xe8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <TIM_Base_SetConfig+0x38>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a30      	ldr	r2, [pc, #192]	; (80085f4 <TIM_Base_SetConfig+0xec>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_Base_SetConfig+0x38>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2f      	ldr	r2, [pc, #188]	; (80085f8 <TIM_Base_SetConfig+0xf0>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d108      	bne.n	8008552 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a25      	ldr	r2, [pc, #148]	; (80085ec <TIM_Base_SetConfig+0xe4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <TIM_Base_SetConfig+0xe8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <TIM_Base_SetConfig+0xec>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <TIM_Base_SetConfig+0xf0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1f      	ldr	r2, [pc, #124]	; (80085fc <TIM_Base_SetConfig+0xf4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <TIM_Base_SetConfig+0xf8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0x8a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <TIM_Base_SetConfig+0xfc>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a08      	ldr	r2, [pc, #32]	; (80085ec <TIM_Base_SetConfig+0xe4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d103      	bne.n	80085d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	615a      	str	r2, [r3, #20]
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	40010000 	.word	0x40010000
 80085f0:	40000400 	.word	0x40000400
 80085f4:	40000800 	.word	0x40000800
 80085f8:	40000c00 	.word	0x40000c00
 80085fc:	40014000 	.word	0x40014000
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800

08008608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0201 	bic.w	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 0302 	bic.w	r3, r3, #2
 8008650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1c      	ldr	r2, [pc, #112]	; (80086d0 <TIM_OC1_SetConfig+0xc8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10c      	bne.n	800867e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0308 	bic.w	r3, r3, #8
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 0304 	bic.w	r3, r3, #4
 800867c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <TIM_OC1_SetConfig+0xc8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d111      	bne.n	80086aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	621a      	str	r2, [r3, #32]
}
 80086c4:	bf00      	nop
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	40010000 	.word	0x40010000

080086d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f023 0210 	bic.w	r2, r3, #16
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800870a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0320 	bic.w	r3, r3, #32
 800871e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <TIM_OC2_SetConfig+0xd4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d10d      	bne.n	8008750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800874e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <TIM_OC2_SetConfig+0xd4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d113      	bne.n	8008780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800875e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000

080087ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1d      	ldr	r2, [pc, #116]	; (800887c <TIM_OC3_SetConfig+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d10d      	bne.n	8008826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a14      	ldr	r2, [pc, #80]	; (800887c <TIM_OC3_SetConfig+0xd0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d113      	bne.n	8008856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800883c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	621a      	str	r2, [r3, #32]
}
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40010000 	.word	0x40010000

08008880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a10      	ldr	r2, [pc, #64]	; (800891c <TIM_OC4_SetConfig+0x9c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d109      	bne.n	80088f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	019b      	lsls	r3, r3, #6
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000

08008920 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4313      	orrs	r3, r2
 8008958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b70      	cmp	r3, #112	; 0x70
 8008968:	d01a      	beq.n	80089a0 <TIM_SlaveTimer_SetConfig+0x80>
 800896a:	2b70      	cmp	r3, #112	; 0x70
 800896c:	d860      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 800896e:	2b60      	cmp	r3, #96	; 0x60
 8008970:	d054      	beq.n	8008a1c <TIM_SlaveTimer_SetConfig+0xfc>
 8008972:	2b60      	cmp	r3, #96	; 0x60
 8008974:	d85c      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 8008976:	2b50      	cmp	r3, #80	; 0x50
 8008978:	d046      	beq.n	8008a08 <TIM_SlaveTimer_SetConfig+0xe8>
 800897a:	2b50      	cmp	r3, #80	; 0x50
 800897c:	d858      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d019      	beq.n	80089b6 <TIM_SlaveTimer_SetConfig+0x96>
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d854      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 8008986:	2b30      	cmp	r3, #48	; 0x30
 8008988:	d055      	beq.n	8008a36 <TIM_SlaveTimer_SetConfig+0x116>
 800898a:	2b30      	cmp	r3, #48	; 0x30
 800898c:	d850      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 800898e:	2b20      	cmp	r3, #32
 8008990:	d051      	beq.n	8008a36 <TIM_SlaveTimer_SetConfig+0x116>
 8008992:	2b20      	cmp	r3, #32
 8008994:	d84c      	bhi.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d04d      	beq.n	8008a36 <TIM_SlaveTimer_SetConfig+0x116>
 800899a:	2b10      	cmp	r3, #16
 800899c:	d04b      	beq.n	8008a36 <TIM_SlaveTimer_SetConfig+0x116>
 800899e:	e047      	b.n	8008a30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	68d9      	ldr	r1, [r3, #12]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f000 f9e0 	bl	8008d74 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80089b4:	e040      	b.n	8008a38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d101      	bne.n	80089c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e03b      	b.n	8008a3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6a1a      	ldr	r2, [r3, #32]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0201 	bic.w	r2, r2, #1
 80089d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	621a      	str	r2, [r3, #32]
      break;
 8008a06:	e017      	b.n	8008a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6899      	ldr	r1, [r3, #8]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	461a      	mov	r2, r3
 8008a16:	f000 f87d 	bl	8008b14 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008a1a:	e00d      	b.n	8008a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	6899      	ldr	r1, [r3, #8]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f000 f8df 	bl	8008bec <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008a2e:	e003      	b.n	8008a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
      break;
 8008a34:	e000      	b.n	8008a38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008a36:	bf00      	nop
  }

  return status;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	f023 0201 	bic.w	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4a24      	ldr	r2, [pc, #144]	; (8008b00 <TIM_TI1_SetConfig+0xbc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <TIM_TI1_SetConfig+0x56>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a78:	d00f      	beq.n	8008a9a <TIM_TI1_SetConfig+0x56>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a21      	ldr	r2, [pc, #132]	; (8008b04 <TIM_TI1_SetConfig+0xc0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00b      	beq.n	8008a9a <TIM_TI1_SetConfig+0x56>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a20      	ldr	r2, [pc, #128]	; (8008b08 <TIM_TI1_SetConfig+0xc4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d007      	beq.n	8008a9a <TIM_TI1_SetConfig+0x56>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <TIM_TI1_SetConfig+0xc8>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_TI1_SetConfig+0x56>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <TIM_TI1_SetConfig+0xcc>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <TIM_TI1_SetConfig+0x5a>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <TIM_TI1_SetConfig+0x5c>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e003      	b.n	8008abe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f043 0301 	orr.w	r3, r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f023 030a 	bic.w	r3, r3, #10
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f003 030a 	and.w	r3, r3, #10
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40010000 	.word	0x40010000
 8008b04:	40000400 	.word	0x40000400
 8008b08:	40000800 	.word	0x40000800
 8008b0c:	40000c00 	.word	0x40000c00
 8008b10:	40014000 	.word	0x40014000

08008b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f023 030a 	bic.w	r3, r3, #10
 8008b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b087      	sub	sp, #28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	f023 0210 	bic.w	r2, r3, #16
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	031b      	lsls	r3, r3, #12
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	f023 0210 	bic.w	r2, r3, #16
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	031b      	lsls	r3, r3, #12
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	621a      	str	r2, [r3, #32]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f023 0303 	bic.w	r3, r3, #3
 8008c78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	621a      	str	r2, [r3, #32]
}
 8008cb8:	bf00      	nop
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	031b      	lsls	r3, r3, #12
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008d16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	031b      	lsls	r3, r3, #12
 8008d1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f043 0307 	orr.w	r3, r3, #7
 8008d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	609a      	str	r2, [r3, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	021a      	lsls	r2, r3, #8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	609a      	str	r2, [r3, #8]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a1a      	ldr	r2, [r3, #32]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	401a      	ands	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1a      	ldr	r2, [r3, #32]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dec:	431a      	orrs	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e050      	b.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d018      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e64:	d013      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a18      	ldr	r2, [pc, #96]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00e      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d10c      	bne.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40000400 	.word	0x40000400
 8008ed0:	40000800 	.word	0x40000800
 8008ed4:	40000c00 	.word	0x40000c00
 8008ed8:	40014000 	.word	0x40014000

08008edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e03f      	b.n	8008f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fc fa92 	bl	8005454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2224      	movs	r2, #36	; 0x24
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fddf 	bl	8009b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b08a      	sub	sp, #40	; 0x28
 8008fa2:	af02      	add	r7, sp, #8
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	603b      	str	r3, [r7, #0]
 8008faa:	4613      	mov	r3, r2
 8008fac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d17c      	bne.n	80090b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <HAL_UART_Transmit+0x2c>
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e075      	b.n	80090ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_UART_Transmit+0x3e>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e06e      	b.n	80090ba <HAL_UART_Transmit+0x11c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2221      	movs	r2, #33	; 0x21
 8008fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ff2:	f7fc fb43 	bl	800567c <HAL_GetTick>
 8008ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	88fa      	ldrh	r2, [r7, #6]
 8009002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900c:	d108      	bne.n	8009020 <HAL_UART_Transmit+0x82>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d104      	bne.n	8009020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e003      	b.n	8009028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009030:	e02a      	b.n	8009088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2200      	movs	r2, #0
 800903a:	2180      	movs	r1, #128	; 0x80
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fb1f 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e036      	b.n	80090ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	3302      	adds	r3, #2
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	e007      	b.n	800907a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	781a      	ldrb	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1cf      	bne.n	8009032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2200      	movs	r2, #0
 800909a:	2140      	movs	r1, #64	; 0x40
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 faef 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e006      	b.n	80090ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e000      	b.n	80090ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
  }
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3720      	adds	r7, #32
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	4613      	mov	r3, r2
 80090ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d11d      	bne.n	8009118 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_UART_Receive_IT+0x26>
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e016      	b.n	800911a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UART_Receive_IT+0x38>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e00f      	b.n	800911a <HAL_UART_Receive_IT+0x58>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	461a      	mov	r2, r3
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fb24 	bl	800975c <UART_Start_Receive_IT>
 8009114:	4603      	mov	r3, r0
 8009116:	e000      	b.n	800911a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009118:	2302      	movs	r3, #2
  }
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b0ba      	sub	sp, #232	; 0xe8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800914a:	2300      	movs	r3, #0
 800914c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10f      	bne.n	800918a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <HAL_UART_IRQHandler+0x66>
 8009176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc07 	bl	8009996 <UART_Receive_IT>
      return;
 8009188:	e256      	b.n	8009638 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800918a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80de 	beq.w	8009350 <HAL_UART_IRQHandler+0x22c>
 8009194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 80d1 	beq.w	8009350 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00b      	beq.n	80091d2 <HAL_UART_IRQHandler+0xae>
 80091ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	f043 0201 	orr.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00b      	beq.n	80091f6 <HAL_UART_IRQHandler+0xd2>
 80091de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	f043 0202 	orr.w	r2, r3, #2
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <HAL_UART_IRQHandler+0xf6>
 8009202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	f043 0204 	orr.w	r2, r3, #4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800921a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d011      	beq.n	800924a <HAL_UART_IRQHandler+0x126>
 8009226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f043 0208 	orr.w	r2, r3, #8
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 81ed 	beq.w	800962e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <HAL_UART_IRQHandler+0x14e>
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fb92 	bl	8009996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <HAL_UART_IRQHandler+0x17a>
 8009296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d04f      	beq.n	800933e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa9a 	bl	80097d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d141      	bne.n	8009336 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3314      	adds	r3, #20
 80092b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3314      	adds	r3, #20
 80092da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1d9      	bne.n	80092b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	2b00      	cmp	r3, #0
 8009304:	d013      	beq.n	800932e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	4a7d      	ldr	r2, [pc, #500]	; (8009500 <HAL_UART_IRQHandler+0x3dc>)
 800930c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	4618      	mov	r0, r3
 8009314:	f7fc fb63 	bl	80059de <HAL_DMA_Abort_IT>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	e00e      	b.n	800934c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f990 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009334:	e00a      	b.n	800934c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f98c 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933c:	e006      	b.n	800934c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f988 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800934a:	e170      	b.n	800962e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	bf00      	nop
    return;
 800934e:	e16e      	b.n	800962e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009354:	2b01      	cmp	r3, #1
 8009356:	f040 814a 	bne.w	80095ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 8143 	beq.w	80095ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 813c 	beq.w	80095ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	60bb      	str	r3, [r7, #8]
 800938a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009396:	2b40      	cmp	r3, #64	; 0x40
 8009398:	f040 80b4 	bne.w	8009504 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 8140 	beq.w	8009632 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093ba:	429a      	cmp	r2, r3
 80093bc:	f080 8139 	bcs.w	8009632 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d2:	f000 8088 	beq.w	80094e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	330c      	adds	r3, #12
 80093dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800940e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800941a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1d9      	bne.n	80093d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3314      	adds	r3, #20
 8009428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800944a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800944e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e1      	bne.n	8009422 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3314      	adds	r3, #20
 8009464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800946e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3314      	adds	r3, #20
 800947e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e3      	bne.n	800945e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	330c      	adds	r3, #12
 80094aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b6:	f023 0310 	bic.w	r3, r3, #16
 80094ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80094ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e3      	bne.n	80094a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fc fa0c 	bl	80058fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f8b6 	bl	8009668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094fc:	e099      	b.n	8009632 <HAL_UART_IRQHandler+0x50e>
 80094fe:	bf00      	nop
 8009500:	0800989f 	.word	0x0800989f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800950c:	b29b      	uxth	r3, r3
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 808b 	beq.w	8009636 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8086 	beq.w	8009636 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	330c      	adds	r3, #12
 8009530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800953a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800954e:	647a      	str	r2, [r7, #68]	; 0x44
 8009550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800955c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e3      	bne.n	800952a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3314      	adds	r3, #20
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	623b      	str	r3, [r7, #32]
   return(result);
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3314      	adds	r3, #20
 8009582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009586:	633a      	str	r2, [r7, #48]	; 0x30
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800958c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e3      	bne.n	8009562 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2220      	movs	r2, #32
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	330c      	adds	r3, #12
 80095ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0310 	bic.w	r3, r3, #16
 80095be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80095cc:	61fa      	str	r2, [r7, #28]
 80095ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d0:	69b9      	ldr	r1, [r7, #24]
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	e841 2300 	strex	r3, r2, [r1]
 80095d8:	617b      	str	r3, [r7, #20]
   return(result);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e3      	bne.n	80095a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f83e 	bl	8009668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095ec:	e023      	b.n	8009636 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <HAL_UART_IRQHandler+0x4ea>
 80095fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f95d 	bl	80098c6 <UART_Transmit_IT>
    return;
 800960c:	e014      	b.n	8009638 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00e      	beq.n	8009638 <HAL_UART_IRQHandler+0x514>
 800961a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800961e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d008      	beq.n	8009638 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f99d 	bl	8009966 <UART_EndTransmit_IT>
    return;
 800962c:	e004      	b.n	8009638 <HAL_UART_IRQHandler+0x514>
    return;
 800962e:	bf00      	nop
 8009630:	e002      	b.n	8009638 <HAL_UART_IRQHandler+0x514>
      return;
 8009632:	bf00      	nop
 8009634:	e000      	b.n	8009638 <HAL_UART_IRQHandler+0x514>
      return;
 8009636:	bf00      	nop
  }
}
 8009638:	37e8      	adds	r7, #232	; 0xe8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop

08009640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b090      	sub	sp, #64	; 0x40
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	4613      	mov	r3, r2
 800968e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009690:	e050      	b.n	8009734 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d04c      	beq.n	8009734 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800969a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096a0:	f7fb ffec 	bl	800567c <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d241      	bcs.n	8009734 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	330c      	adds	r3, #12
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096d0:	637a      	str	r2, [r7, #52]	; 0x34
 80096d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e5      	bne.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3314      	adds	r3, #20
 80096ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	613b      	str	r3, [r7, #16]
   return(result);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f023 0301 	bic.w	r3, r3, #1
 80096fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3314      	adds	r3, #20
 8009702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009704:	623a      	str	r2, [r7, #32]
 8009706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	69f9      	ldr	r1, [r7, #28]
 800970a:	6a3a      	ldr	r2, [r7, #32]
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	61bb      	str	r3, [r7, #24]
   return(result);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e5      	bne.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2220      	movs	r2, #32
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e00f      	b.n	8009754 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	4013      	ands	r3, r2
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	429a      	cmp	r2, r3
 8009742:	bf0c      	ite	eq
 8009744:	2301      	moveq	r3, #1
 8009746:	2300      	movne	r3, #0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	429a      	cmp	r2, r3
 8009750:	d09f      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3740      	adds	r7, #64	; 0x40
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	4613      	mov	r3, r2
 8009768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2222      	movs	r2, #34	; 0x22
 8009786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695a      	ldr	r2, [r3, #20]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0201 	orr.w	r2, r2, #1
 80097b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0220 	orr.w	r2, r2, #32
 80097c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097d8:	b480      	push	{r7}
 80097da:	b095      	sub	sp, #84	; 0x54
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	330c      	adds	r3, #12
 80097e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	330c      	adds	r3, #12
 80097fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009800:	643a      	str	r2, [r7, #64]	; 0x40
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e5      	bne.n	80097e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3314      	adds	r3, #20
 800981a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	61fb      	str	r3, [r7, #28]
   return(result);
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f023 0301 	bic.w	r3, r3, #1
 800982a:	64bb      	str	r3, [r7, #72]	; 0x48
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3314      	adds	r3, #20
 8009832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800983a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983c:	e841 2300 	strex	r3, r2, [r1]
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e5      	bne.n	8009814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	2b01      	cmp	r3, #1
 800984e:	d119      	bne.n	8009884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	330c      	adds	r3, #12
 8009856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f023 0310 	bic.w	r3, r3, #16
 8009866:	647b      	str	r3, [r7, #68]	; 0x44
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009870:	61ba      	str	r2, [r7, #24]
 8009872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	613b      	str	r3, [r7, #16]
   return(result);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e5      	bne.n	8009850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009892:	bf00      	nop
 8009894:	3754      	adds	r7, #84	; 0x54
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fecb 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b21      	cmp	r3, #33	; 0x21
 80098d8:	d13e      	bne.n	8009958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d114      	bne.n	800990e <UART_Transmit_IT+0x48>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d110      	bne.n	800990e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	1c9a      	adds	r2, r3, #2
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	621a      	str	r2, [r3, #32]
 800990c:	e008      	b.n	8009920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	1c59      	adds	r1, r3, #1
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6211      	str	r1, [r2, #32]
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	b29b      	uxth	r3, r3
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	4619      	mov	r1, r3
 800992e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10f      	bne.n	8009954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	e000      	b.n	800995a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009958:	2302      	movs	r3, #2
  }
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fe5a 	bl	8009640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b08c      	sub	sp, #48	; 0x30
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b22      	cmp	r3, #34	; 0x22
 80099a8:	f040 80ab 	bne.w	8009b02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b4:	d117      	bne.n	80099e6 <UART_Receive_IT+0x50>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d113      	bne.n	80099e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	1c9a      	adds	r2, r3, #2
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	629a      	str	r2, [r3, #40]	; 0x28
 80099e4:	e026      	b.n	8009a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f8:	d007      	beq.n	8009a0a <UART_Receive_IT+0x74>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <UART_Receive_IT+0x82>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	701a      	strb	r2, [r3, #0]
 8009a16:	e008      	b.n	8009a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4619      	mov	r1, r3
 8009a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d15a      	bne.n	8009afe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0220 	bic.w	r2, r2, #32
 8009a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695a      	ldr	r2, [r3, #20]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0201 	bic.w	r2, r2, #1
 8009a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d135      	bne.n	8009af4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	330c      	adds	r3, #12
 8009a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f023 0310 	bic.w	r3, r3, #16
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	330c      	adds	r3, #12
 8009aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aae:	623a      	str	r2, [r7, #32]
 8009ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	69f9      	ldr	r1, [r7, #28]
 8009ab4:	6a3a      	ldr	r2, [r7, #32]
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e5      	bne.n	8009a8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0310 	and.w	r3, r3, #16
 8009acc:	2b10      	cmp	r3, #16
 8009ace:	d10a      	bne.n	8009ae6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff fdbb 	bl	8009668 <HAL_UARTEx_RxEventCallback>
 8009af2:	e002      	b.n	8009afa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fb f81d 	bl	8004b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	e002      	b.n	8009b04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e000      	b.n	8009b04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009b02:	2302      	movs	r3, #2
  }
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3730      	adds	r7, #48	; 0x30
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b10:	b0c0      	sub	sp, #256	; 0x100
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b28:	68d9      	ldr	r1, [r3, #12]
 8009b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	ea40 0301 	orr.w	r3, r0, r1
 8009b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	431a      	orrs	r2, r3
 8009b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b64:	f021 010c 	bic.w	r1, r1, #12
 8009b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b72:	430b      	orrs	r3, r1
 8009b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b86:	6999      	ldr	r1, [r3, #24]
 8009b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	ea40 0301 	orr.w	r3, r0, r1
 8009b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b8f      	ldr	r3, [pc, #572]	; (8009dd8 <UART_SetConfig+0x2cc>)
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d005      	beq.n	8009bac <UART_SetConfig+0xa0>
 8009ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b8d      	ldr	r3, [pc, #564]	; (8009ddc <UART_SetConfig+0x2d0>)
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d104      	bne.n	8009bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bac:	f7fd fdf0 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 8009bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009bb4:	e003      	b.n	8009bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bb6:	f7fd fdd7 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 8009bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc8:	f040 810c 	bne.w	8009de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009bde:	4622      	mov	r2, r4
 8009be0:	462b      	mov	r3, r5
 8009be2:	1891      	adds	r1, r2, r2
 8009be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009be6:	415b      	adcs	r3, r3
 8009be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bee:	4621      	mov	r1, r4
 8009bf0:	eb12 0801 	adds.w	r8, r2, r1
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	eb43 0901 	adc.w	r9, r3, r1
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	f04f 0300 	mov.w	r3, #0
 8009c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c0e:	4690      	mov	r8, r2
 8009c10:	4699      	mov	r9, r3
 8009c12:	4623      	mov	r3, r4
 8009c14:	eb18 0303 	adds.w	r3, r8, r3
 8009c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	eb49 0303 	adc.w	r3, r9, r3
 8009c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	18db      	adds	r3, r3, r3
 8009c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c40:	4613      	mov	r3, r2
 8009c42:	eb42 0303 	adc.w	r3, r2, r3
 8009c46:	657b      	str	r3, [r7, #84]	; 0x54
 8009c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c50:	f7f7 f832 	bl	8000cb8 <__aeabi_uldivmod>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4b61      	ldr	r3, [pc, #388]	; (8009de0 <UART_SetConfig+0x2d4>)
 8009c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c5e:	095b      	lsrs	r3, r3, #5
 8009c60:	011c      	lsls	r4, r3, #4
 8009c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	1891      	adds	r1, r2, r2
 8009c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c7c:	415b      	adcs	r3, r3
 8009c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c84:	4641      	mov	r1, r8
 8009c86:	eb12 0a01 	adds.w	sl, r2, r1
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8009c90:	f04f 0200 	mov.w	r2, #0
 8009c94:	f04f 0300 	mov.w	r3, #0
 8009c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ca4:	4692      	mov	sl, r2
 8009ca6:	469b      	mov	fp, r3
 8009ca8:	4643      	mov	r3, r8
 8009caa:	eb1a 0303 	adds.w	r3, sl, r3
 8009cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8009cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	18db      	adds	r3, r3, r3
 8009cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	eb42 0303 	adc.w	r3, r2, r3
 8009cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8009cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009ce6:	f7f6 ffe7 	bl	8000cb8 <__aeabi_uldivmod>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4b3b      	ldr	r3, [pc, #236]	; (8009de0 <UART_SetConfig+0x2d4>)
 8009cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	2264      	movs	r2, #100	; 0x64
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	1acb      	subs	r3, r1, r3
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d06:	4b36      	ldr	r3, [pc, #216]	; (8009de0 <UART_SetConfig+0x2d4>)
 8009d08:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0c:	095b      	lsrs	r3, r3, #5
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d14:	441c      	add	r4, r3
 8009d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009d28:	4642      	mov	r2, r8
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	1891      	adds	r1, r2, r2
 8009d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d30:	415b      	adcs	r3, r3
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d38:	4641      	mov	r1, r8
 8009d3a:	1851      	adds	r1, r2, r1
 8009d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d3e:	4649      	mov	r1, r9
 8009d40:	414b      	adcs	r3, r1
 8009d42:	637b      	str	r3, [r7, #52]	; 0x34
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d50:	4659      	mov	r1, fp
 8009d52:	00cb      	lsls	r3, r1, #3
 8009d54:	4651      	mov	r1, sl
 8009d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	00ca      	lsls	r2, r1, #3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	4642      	mov	r2, r8
 8009d66:	189b      	adds	r3, r3, r2
 8009d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	460a      	mov	r2, r1
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	18db      	adds	r3, r3, r3
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d92:	4613      	mov	r3, r2
 8009d94:	eb42 0303 	adc.w	r3, r2, r3
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009da2:	f7f6 ff89 	bl	8000cb8 <__aeabi_uldivmod>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <UART_SetConfig+0x2d4>)
 8009dac:	fba3 1302 	umull	r1, r3, r3, r2
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	2164      	movs	r1, #100	; 0x64
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	3332      	adds	r3, #50	; 0x32
 8009dbe:	4a08      	ldr	r2, [pc, #32]	; (8009de0 <UART_SetConfig+0x2d4>)
 8009dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	f003 0207 	and.w	r2, r3, #7
 8009dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4422      	add	r2, r4
 8009dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009dd4:	e105      	b.n	8009fe2 <UART_SetConfig+0x4d6>
 8009dd6:	bf00      	nop
 8009dd8:	40011000 	.word	0x40011000
 8009ddc:	40011400 	.word	0x40011400
 8009de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009df6:	4642      	mov	r2, r8
 8009df8:	464b      	mov	r3, r9
 8009dfa:	1891      	adds	r1, r2, r2
 8009dfc:	6239      	str	r1, [r7, #32]
 8009dfe:	415b      	adcs	r3, r3
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
 8009e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e06:	4641      	mov	r1, r8
 8009e08:	1854      	adds	r4, r2, r1
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	eb43 0501 	adc.w	r5, r3, r1
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	00eb      	lsls	r3, r5, #3
 8009e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e1e:	00e2      	lsls	r2, r4, #3
 8009e20:	4614      	mov	r4, r2
 8009e22:	461d      	mov	r5, r3
 8009e24:	4643      	mov	r3, r8
 8009e26:	18e3      	adds	r3, r4, r3
 8009e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	eb45 0303 	adc.w	r3, r5, r3
 8009e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e46:	f04f 0200 	mov.w	r2, #0
 8009e4a:	f04f 0300 	mov.w	r3, #0
 8009e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e52:	4629      	mov	r1, r5
 8009e54:	008b      	lsls	r3, r1, #2
 8009e56:	4621      	mov	r1, r4
 8009e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	008a      	lsls	r2, r1, #2
 8009e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009e64:	f7f6 ff28 	bl	8000cb8 <__aeabi_uldivmod>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4b60      	ldr	r3, [pc, #384]	; (8009ff0 <UART_SetConfig+0x4e4>)
 8009e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	011c      	lsls	r4, r3, #4
 8009e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	1891      	adds	r1, r2, r2
 8009e8e:	61b9      	str	r1, [r7, #24]
 8009e90:	415b      	adcs	r3, r3
 8009e92:	61fb      	str	r3, [r7, #28]
 8009e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e98:	4641      	mov	r1, r8
 8009e9a:	1851      	adds	r1, r2, r1
 8009e9c:	6139      	str	r1, [r7, #16]
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	414b      	adcs	r3, r1
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	00cb      	lsls	r3, r1, #3
 8009eb4:	4651      	mov	r1, sl
 8009eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eba:	4651      	mov	r1, sl
 8009ebc:	00ca      	lsls	r2, r1, #3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	189b      	adds	r3, r3, r2
 8009ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ecc:	464b      	mov	r3, r9
 8009ece:	460a      	mov	r2, r1
 8009ed0:	eb42 0303 	adc.w	r3, r2, r3
 8009ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	f04f 0300 	mov.w	r3, #0
 8009eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	008b      	lsls	r3, r1, #2
 8009ef4:	4641      	mov	r1, r8
 8009ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009efa:	4641      	mov	r1, r8
 8009efc:	008a      	lsls	r2, r1, #2
 8009efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f02:	f7f6 fed9 	bl	8000cb8 <__aeabi_uldivmod>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4b39      	ldr	r3, [pc, #228]	; (8009ff0 <UART_SetConfig+0x4e4>)
 8009f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f10:	095b      	lsrs	r3, r3, #5
 8009f12:	2164      	movs	r1, #100	; 0x64
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	3332      	adds	r3, #50	; 0x32
 8009f1e:	4a34      	ldr	r2, [pc, #208]	; (8009ff0 <UART_SetConfig+0x4e4>)
 8009f20:	fba2 2303 	umull	r2, r3, r2, r3
 8009f24:	095b      	lsrs	r3, r3, #5
 8009f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f2a:	441c      	add	r4, r3
 8009f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f30:	2200      	movs	r2, #0
 8009f32:	673b      	str	r3, [r7, #112]	; 0x70
 8009f34:	677a      	str	r2, [r7, #116]	; 0x74
 8009f36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	1891      	adds	r1, r2, r2
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	415b      	adcs	r3, r3
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	1851      	adds	r1, r2, r1
 8009f4e:	6039      	str	r1, [r7, #0]
 8009f50:	4649      	mov	r1, r9
 8009f52:	414b      	adcs	r3, r1
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f62:	4659      	mov	r1, fp
 8009f64:	00cb      	lsls	r3, r1, #3
 8009f66:	4651      	mov	r1, sl
 8009f68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f6c:	4651      	mov	r1, sl
 8009f6e:	00ca      	lsls	r2, r1, #3
 8009f70:	4610      	mov	r0, r2
 8009f72:	4619      	mov	r1, r3
 8009f74:	4603      	mov	r3, r0
 8009f76:	4642      	mov	r2, r8
 8009f78:	189b      	adds	r3, r3, r2
 8009f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	460a      	mov	r2, r1
 8009f80:	eb42 0303 	adc.w	r3, r2, r3
 8009f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8009f90:	667a      	str	r2, [r7, #100]	; 0x64
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	f04f 0300 	mov.w	r3, #0
 8009f9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	008b      	lsls	r3, r1, #2
 8009fa2:	4641      	mov	r1, r8
 8009fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fa8:	4641      	mov	r1, r8
 8009faa:	008a      	lsls	r2, r1, #2
 8009fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009fb0:	f7f6 fe82 	bl	8000cb8 <__aeabi_uldivmod>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <UART_SetConfig+0x4e4>)
 8009fba:	fba3 1302 	umull	r1, r3, r3, r2
 8009fbe:	095b      	lsrs	r3, r3, #5
 8009fc0:	2164      	movs	r1, #100	; 0x64
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	3332      	adds	r3, #50	; 0x32
 8009fcc:	4a08      	ldr	r2, [pc, #32]	; (8009ff0 <UART_SetConfig+0x4e4>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	f003 020f 	and.w	r2, r3, #15
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4422      	add	r2, r4
 8009fe0:	609a      	str	r2, [r3, #8]
}
 8009fe2:	bf00      	nop
 8009fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fee:	bf00      	nop
 8009ff0:	51eb851f 	.word	0x51eb851f

08009ff4 <__NVIC_SetPriority>:
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a004:	2b00      	cmp	r3, #0
 800a006:	db0a      	blt.n	800a01e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	490c      	ldr	r1, [pc, #48]	; (800a040 <__NVIC_SetPriority+0x4c>)
 800a00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a012:	0112      	lsls	r2, r2, #4
 800a014:	b2d2      	uxtb	r2, r2
 800a016:	440b      	add	r3, r1
 800a018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a01c:	e00a      	b.n	800a034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4908      	ldr	r1, [pc, #32]	; (800a044 <__NVIC_SetPriority+0x50>)
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	f003 030f 	and.w	r3, r3, #15
 800a02a:	3b04      	subs	r3, #4
 800a02c:	0112      	lsls	r2, r2, #4
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	440b      	add	r3, r1
 800a032:	761a      	strb	r2, [r3, #24]
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	e000e100 	.word	0xe000e100
 800a044:	e000ed00 	.word	0xe000ed00

0800a048 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a04c:	2100      	movs	r1, #0
 800a04e:	f06f 0004 	mvn.w	r0, #4
 800a052:	f7ff ffcf 	bl	8009ff4 <__NVIC_SetPriority>
#endif
}
 800a056:	bf00      	nop
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a062:	f3ef 8305 	mrs	r3, IPSR
 800a066:	603b      	str	r3, [r7, #0]
  return(result);
 800a068:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a06e:	f06f 0305 	mvn.w	r3, #5
 800a072:	607b      	str	r3, [r7, #4]
 800a074:	e00c      	b.n	800a090 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a076:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <osKernelInitialize+0x44>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a07e:	4b08      	ldr	r3, [pc, #32]	; (800a0a0 <osKernelInitialize+0x44>)
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a084:	2300      	movs	r3, #0
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	e002      	b.n	800a090 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295
 800a08e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a090:	687b      	ldr	r3, [r7, #4]
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	2000076c 	.word	0x2000076c

0800a0a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0aa:	f3ef 8305 	mrs	r3, IPSR
 800a0ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a0b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0b6:	f06f 0305 	mvn.w	r3, #5
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	e010      	b.n	800a0e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <osKernelStart+0x48>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d109      	bne.n	800a0da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0c6:	f7ff ffbf 	bl	800a048 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0ca:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <osKernelStart+0x48>)
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0d0:	f001 fb88 	bl	800b7e4 <vTaskStartScheduler>
      stat = osOK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e002      	b.n	800a0e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0e0:	687b      	ldr	r3, [r7, #4]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000076c 	.word	0x2000076c

0800a0f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08e      	sub	sp, #56	; 0x38
 800a0f4:	af04      	add	r7, sp, #16
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a100:	f3ef 8305 	mrs	r3, IPSR
 800a104:	617b      	str	r3, [r7, #20]
  return(result);
 800a106:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d17e      	bne.n	800a20a <osThreadNew+0x11a>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d07b      	beq.n	800a20a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a112:	2380      	movs	r3, #128	; 0x80
 800a114:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a116:	2318      	movs	r3, #24
 800a118:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a11e:	f04f 33ff 	mov.w	r3, #4294967295
 800a122:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d045      	beq.n	800a1b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <osThreadNew+0x48>
        name = attr->name;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <osThreadNew+0x6e>
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2b38      	cmp	r3, #56	; 0x38
 800a150:	d805      	bhi.n	800a15e <osThreadNew+0x6e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <osThreadNew+0x72>
        return (NULL);
 800a15e:	2300      	movs	r3, #0
 800a160:	e054      	b.n	800a20c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	089b      	lsrs	r3, r3, #2
 800a170:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00e      	beq.n	800a198 <osThreadNew+0xa8>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b5b      	cmp	r3, #91	; 0x5b
 800a180:	d90a      	bls.n	800a198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a186:	2b00      	cmp	r3, #0
 800a188:	d006      	beq.n	800a198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <osThreadNew+0xa8>
        mem = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	e010      	b.n	800a1ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10c      	bne.n	800a1ba <osThreadNew+0xca>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d108      	bne.n	800a1ba <osThreadNew+0xca>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <osThreadNew+0xca>
          mem = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61bb      	str	r3, [r7, #24]
 800a1b4:	e001      	b.n	800a1ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d110      	bne.n	800a1e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1c8:	9202      	str	r2, [sp, #8]
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	6a3a      	ldr	r2, [r7, #32]
 800a1d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f001 f92e 	bl	800b438 <xTaskCreateStatic>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	e013      	b.n	800a20a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d110      	bne.n	800a20a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f107 0310 	add.w	r3, r7, #16
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 f979 	bl	800b4f2 <xTaskCreate>
 800a200:	4603      	mov	r3, r0
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <osThreadNew+0x11a>
            hTask = NULL;
 800a206:	2300      	movs	r3, #0
 800a208:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a20a:	693b      	ldr	r3, [r7, #16]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3728      	adds	r7, #40	; 0x28
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a21c:	f3ef 8305 	mrs	r3, IPSR
 800a220:	60bb      	str	r3, [r7, #8]
  return(result);
 800a222:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <osDelay+0x1c>
    stat = osErrorISR;
 800a228:	f06f 0305 	mvn.w	r3, #5
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e007      	b.n	800a240 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a230:	2300      	movs	r3, #0
 800a232:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 fa9e 	bl	800b77c <vTaskDelay>
    }
  }

  return (stat);
 800a240:	68fb      	ldr	r3, [r7, #12]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b088      	sub	sp, #32
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a256:	f3ef 8305 	mrs	r3, IPSR
 800a25a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a25c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d174      	bne.n	800a34c <osMutexNew+0x102>
    if (attr != NULL) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	e001      	b.n	800a274 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <osMutexNew+0x3a>
      rmtx = 1U;
 800a27e:	2301      	movs	r3, #1
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e001      	b.n	800a288 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d15c      	bne.n	800a34c <osMutexNew+0x102>
      mem = -1;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d015      	beq.n	800a2ca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d006      	beq.n	800a2b4 <osMutexNew+0x6a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	2b4f      	cmp	r3, #79	; 0x4f
 800a2ac:	d902      	bls.n	800a2b4 <osMutexNew+0x6a>
          mem = 1;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	613b      	str	r3, [r7, #16]
 800a2b2:	e00c      	b.n	800a2ce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d108      	bne.n	800a2ce <osMutexNew+0x84>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <osMutexNew+0x84>
            mem = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
 800a2c8:	e001      	b.n	800a2ce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d112      	bne.n	800a2fa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d007      	beq.n	800a2ea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	2004      	movs	r0, #4
 800a2e2:	f000 fb18 	bl	800a916 <xQueueCreateMutexStatic>
 800a2e6:	61f8      	str	r0, [r7, #28]
 800a2e8:	e016      	b.n	800a318 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	f000 fb10 	bl	800a916 <xQueueCreateMutexStatic>
 800a2f6:	61f8      	str	r0, [r7, #28]
 800a2f8:	e00e      	b.n	800a318 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a306:	2004      	movs	r0, #4
 800a308:	f000 faed 	bl	800a8e6 <xQueueCreateMutex>
 800a30c:	61f8      	str	r0, [r7, #28]
 800a30e:	e003      	b.n	800a318 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a310:	2001      	movs	r0, #1
 800a312:	f000 fae8 	bl	800a8e6 <xQueueCreateMutex>
 800a316:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <osMutexNew+0xee>
        if (attr != NULL) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <osMutexNew+0xe2>
          name = attr->name;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e001      	b.n	800a330 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a330:	68f9      	ldr	r1, [r7, #12]
 800a332:	69f8      	ldr	r0, [r7, #28]
 800a334:	f001 f822 	bl	800b37c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d006      	beq.n	800a34c <osMutexNew+0x102>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a34c:	69fb      	ldr	r3, [r7, #28]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a374:	f3ef 8305 	mrs	r3, IPSR
 800a378:	60bb      	str	r3, [r7, #8]
  return(result);
 800a37a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a380:	f06f 0305 	mvn.w	r3, #5
 800a384:	617b      	str	r3, [r7, #20]
 800a386:	e02c      	b.n	800a3e2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a38e:	f06f 0303 	mvn.w	r3, #3
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e025      	b.n	800a3e2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d011      	beq.n	800a3c0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f000 fb08 	bl	800a9b4 <xQueueTakeMutexRecursive>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d01b      	beq.n	800a3e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a3b0:	f06f 0301 	mvn.w	r3, #1
 800a3b4:	617b      	str	r3, [r7, #20]
 800a3b6:	e014      	b.n	800a3e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a3b8:	f06f 0302 	mvn.w	r3, #2
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	e010      	b.n	800a3e2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6938      	ldr	r0, [r7, #16]
 800a3c4:	f000 fda6 	bl	800af14 <xQueueSemaphoreTake>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d009      	beq.n	800a3e2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a3d4:	f06f 0301 	mvn.w	r3, #1
 800a3d8:	617b      	str	r3, [r7, #20]
 800a3da:	e002      	b.n	800a3e2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a3dc:	f06f 0302 	mvn.w	r3, #2
 800a3e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a3e2:	697b      	ldr	r3, [r7, #20]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f023 0301 	bic.w	r3, r3, #1
 800a3fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a408:	f3ef 8305 	mrs	r3, IPSR
 800a40c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a40e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <osMutexRelease+0x30>
    stat = osErrorISR;
 800a414:	f06f 0305 	mvn.w	r3, #5
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e01f      	b.n	800a45c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d103      	bne.n	800a42a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a422:	f06f 0303 	mvn.w	r3, #3
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e018      	b.n	800a45c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a430:	6938      	ldr	r0, [r7, #16]
 800a432:	f000 fa8b 	bl	800a94c <xQueueGiveMutexRecursive>
 800a436:	4603      	mov	r3, r0
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d00f      	beq.n	800a45c <osMutexRelease+0x70>
        stat = osErrorResource;
 800a43c:	f06f 0302 	mvn.w	r3, #2
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	e00b      	b.n	800a45c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a444:	2300      	movs	r3, #0
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	6938      	ldr	r0, [r7, #16]
 800a44c:	f000 fae8 	bl	800aa20 <xQueueGenericSend>
 800a450:	4603      	mov	r3, r0
 800a452:	2b01      	cmp	r3, #1
 800a454:	d002      	beq.n	800a45c <osMutexRelease+0x70>
        stat = osErrorResource;
 800a456:	f06f 0302 	mvn.w	r3, #2
 800a45a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a45c:	697b      	ldr	r3, [r7, #20]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a07      	ldr	r2, [pc, #28]	; (800a494 <vApplicationGetIdleTaskMemory+0x2c>)
 800a478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	4a06      	ldr	r2, [pc, #24]	; (800a498 <vApplicationGetIdleTaskMemory+0x30>)
 800a47e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2280      	movs	r2, #128	; 0x80
 800a484:	601a      	str	r2, [r3, #0]
}
 800a486:	bf00      	nop
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000770 	.word	0x20000770
 800a498:	200007cc 	.word	0x200007cc

0800a49c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4a07      	ldr	r2, [pc, #28]	; (800a4c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	4a06      	ldr	r2, [pc, #24]	; (800a4cc <vApplicationGetTimerTaskMemory+0x30>)
 800a4b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4ba:	601a      	str	r2, [r3, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	200009cc 	.word	0x200009cc
 800a4cc:	20000a28 	.word	0x20000a28

0800a4d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 0208 	add.w	r2, r3, #8
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f103 0208 	add.w	r2, r3, #8
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f103 0208 	add.w	r2, r3, #8
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d103      	bne.n	800a592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e00c      	b.n	800a5ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3308      	adds	r3, #8
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e002      	b.n	800a5a0 <vListInsert+0x2e>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d2f6      	bcs.n	800a59a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]
}
 800a5d8:	bf00      	nop
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6892      	ldr	r2, [r2, #8]
 800a5fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6852      	ldr	r2, [r2, #4]
 800a604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d103      	bne.n	800a618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	1e5a      	subs	r2, r3, #1
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a662:	f002 fb6f 	bl	800cd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	441a      	add	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	3b01      	subs	r3, #1
 800a694:	68f9      	ldr	r1, [r7, #12]
 800a696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	441a      	add	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	22ff      	movs	r2, #255	; 0xff
 800a6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	22ff      	movs	r2, #255	; 0xff
 800a6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d114      	bne.n	800a6e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01a      	beq.n	800a6f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3310      	adds	r3, #16
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f001 fb17 	bl	800bcf8 <xTaskRemoveFromEventList>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d012      	beq.n	800a6f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	; (800a704 <xQueueGenericReset+0xcc>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	e009      	b.n	800a6f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3310      	adds	r3, #16
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff fef2 	bl	800a4d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3324      	adds	r3, #36	; 0x24
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff feed 	bl	800a4d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6f6:	f002 fb55 	bl	800cda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6fa:	2301      	movs	r3, #1
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	e000ed04 	.word	0xe000ed04

0800a708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08e      	sub	sp, #56	; 0x38
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <xQueueGenericCreateStatic+0x52>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <xQueueGenericCreateStatic+0x56>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <xQueueGenericCreateStatic+0x58>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	623b      	str	r3, [r7, #32]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <xQueueGenericCreateStatic+0x7e>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <xQueueGenericCreateStatic+0x82>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueGenericCreateStatic+0x84>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	61fb      	str	r3, [r7, #28]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7a6:	2350      	movs	r3, #80	; 0x50
 800a7a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b50      	cmp	r3, #80	; 0x50
 800a7ae:	d00a      	beq.n	800a7c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	61bb      	str	r3, [r7, #24]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00d      	beq.n	800a7ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 f83f 	bl	800a86c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3730      	adds	r7, #48	; 0x30
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	613b      	str	r3, [r7, #16]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	fb02 f303 	mul.w	r3, r2, r3
 800a82a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	3350      	adds	r3, #80	; 0x50
 800a830:	4618      	mov	r0, r3
 800a832:	f002 fba9 	bl	800cf88 <pvPortMalloc>
 800a836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d011      	beq.n	800a862 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	3350      	adds	r3, #80	; 0x50
 800a846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a850:	79fa      	ldrb	r2, [r7, #7]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4613      	mov	r3, r2
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 f805 	bl	800a86c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a862:	69bb      	ldr	r3, [r7, #24]
	}
 800a864:	4618      	mov	r0, r3
 800a866:	3720      	adds	r7, #32
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	e002      	b.n	800a88e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a89a:	2101      	movs	r1, #1
 800a89c:	69b8      	ldr	r0, [r7, #24]
 800a89e:	f7ff fecb 	bl	800a638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	78fa      	ldrb	r2, [r7, #3]
 800a8a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00e      	beq.n	800a8de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f8a1 	bl	800aa20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	6939      	ldr	r1, [r7, #16]
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f7ff ff7a 	bl	800a7f8 <xQueueGenericCreate>
 800a904:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7ff ffd3 	bl	800a8b2 <prvInitialiseMutex>

		return xNewQueue;
 800a90c:	68fb      	ldr	r3, [r7, #12]
	}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a916:	b580      	push	{r7, lr}
 800a918:	b088      	sub	sp, #32
 800a91a:	af02      	add	r7, sp, #8
 800a91c:	4603      	mov	r3, r0
 800a91e:	6039      	str	r1, [r7, #0]
 800a920:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a922:	2301      	movs	r3, #1
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2200      	movs	r2, #0
 800a932:	6939      	ldr	r1, [r7, #16]
 800a934:	6978      	ldr	r0, [r7, #20]
 800a936:	f7ff fee7 	bl	800a708 <xQueueGenericCreateStatic>
 800a93a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ffb8 	bl	800a8b2 <prvInitialiseMutex>

		return xNewQueue;
 800a942:	68fb      	ldr	r3, [r7, #12]
	}
 800a944:	4618      	mov	r0, r3
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a94c:	b590      	push	{r4, r7, lr}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10a      	bne.n	800a974 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	60fb      	str	r3, [r7, #12]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	689c      	ldr	r4, [r3, #8]
 800a978:	f001 fb7c 	bl	800c074 <xTaskGetCurrentTaskHandle>
 800a97c:	4603      	mov	r3, r0
 800a97e:	429c      	cmp	r4, r3
 800a980:	d111      	bne.n	800a9a6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a994:	2300      	movs	r3, #0
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f000 f840 	bl	800aa20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	617b      	str	r3, [r7, #20]
 800a9a4:	e001      	b.n	800a9aa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a9aa:	697b      	ldr	r3, [r7, #20]
	}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}

0800a9b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	60fb      	str	r3, [r7, #12]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	689c      	ldr	r4, [r3, #8]
 800a9e2:	f001 fb47 	bl	800c074 <xTaskGetCurrentTaskHandle>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	d107      	bne.n	800a9fc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	617b      	str	r3, [r7, #20]
 800a9fa:	e00c      	b.n	800aa16 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6938      	ldr	r0, [r7, #16]
 800aa00:	f000 fa88 	bl	800af14 <xQueueSemaphoreTake>
 800aa04:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d004      	beq.n	800aa16 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800aa16:	697b      	ldr	r3, [r7, #20]
	}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd90      	pop	{r4, r7, pc}

0800aa20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08e      	sub	sp, #56	; 0x38
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <xQueueGenericSend+0x32>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d103      	bne.n	800aa60 <xQueueGenericSend+0x40>
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <xQueueGenericSend+0x44>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e000      	b.n	800aa66 <xQueueGenericSend+0x46>
 800aa64:	2300      	movs	r3, #0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10a      	bne.n	800aa80 <xQueueGenericSend+0x60>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d103      	bne.n	800aa8e <xQueueGenericSend+0x6e>
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <xQueueGenericSend+0x72>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <xQueueGenericSend+0x74>
 800aa92:	2300      	movs	r3, #0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <xQueueGenericSend+0x8e>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	623b      	str	r3, [r7, #32]
}
 800aaaa:	bf00      	nop
 800aaac:	e7fe      	b.n	800aaac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaae:	f001 faf1 	bl	800c094 <xTaskGetSchedulerState>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <xQueueGenericSend+0x9e>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <xQueueGenericSend+0xa2>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueGenericSend+0xa4>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xQueueGenericSend+0xbe>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61fb      	str	r3, [r7, #28]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aade:	f002 f931 	bl	800cd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d302      	bcc.n	800aaf4 <xQueueGenericSend+0xd4>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d129      	bne.n	800ab48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aafa:	f000 fb2f 	bl	800b15c <prvCopyDataToQueue>
 800aafe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d010      	beq.n	800ab2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	3324      	adds	r3, #36	; 0x24
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 f8f3 	bl	800bcf8 <xTaskRemoveFromEventList>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d013      	beq.n	800ab40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab18:	4b3f      	ldr	r3, [pc, #252]	; (800ac18 <xQueueGenericSend+0x1f8>)
 800ab1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	e00a      	b.n	800ab40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab30:	4b39      	ldr	r3, [pc, #228]	; (800ac18 <xQueueGenericSend+0x1f8>)
 800ab32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab40:	f002 f930 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e063      	b.n	800ac10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d103      	bne.n	800ab56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab4e:	f002 f929 	bl	800cda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e05c      	b.n	800ac10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab5c:	f107 0314 	add.w	r3, r7, #20
 800ab60:	4618      	mov	r0, r3
 800ab62:	f001 f92d 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab66:	2301      	movs	r3, #1
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab6a:	f002 f91b 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6e:	f000 fe9f 	bl	800b8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab72:	f002 f8e7 	bl	800cd44 <vPortEnterCritical>
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7c:	b25b      	sxtb	r3, r3
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d103      	bne.n	800ab8c <xQueueGenericSend+0x16c>
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab92:	b25b      	sxtb	r3, r3
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d103      	bne.n	800aba2 <xQueueGenericSend+0x182>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba2:	f002 f8ff 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba6:	1d3a      	adds	r2, r7, #4
 800aba8:	f107 0314 	add.w	r3, r7, #20
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 f91c 	bl	800bdec <xTaskCheckForTimeOut>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d124      	bne.n	800ac04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abbc:	f000 fbc6 	bl	800b34c <prvIsQueueFull>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d018      	beq.n	800abf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	3310      	adds	r3, #16
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f001 f842 	bl	800bc58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abd6:	f000 fb51 	bl	800b27c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abda:	f000 fe77 	bl	800b8cc <xTaskResumeAll>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f47f af7c 	bne.w	800aade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <xQueueGenericSend+0x1f8>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	e772      	b.n	800aade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfa:	f000 fb3f 	bl	800b27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abfe:	f000 fe65 	bl	800b8cc <xTaskResumeAll>
 800ac02:	e76c      	b.n	800aade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac06:	f000 fb39 	bl	800b27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac0a:	f000 fe5f 	bl	800b8cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3738      	adds	r7, #56	; 0x38
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b090      	sub	sp, #64	; 0x40
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <xQueueGenericSendFromISR+0x3c>
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <xQueueGenericSendFromISR+0x40>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <xQueueGenericSendFromISR+0x42>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d103      	bne.n	800ac86 <xQueueGenericSendFromISR+0x6a>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <xQueueGenericSendFromISR+0x6e>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <xQueueGenericSendFromISR+0x70>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aca6:	f002 f92f 	bl	800cf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acaa:	f3ef 8211 	mrs	r2, BASEPRI
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	61fa      	str	r2, [r7, #28]
 800acc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d302      	bcc.n	800acd8 <xQueueGenericSendFromISR+0xbc>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d12f      	bne.n	800ad38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acee:	f000 fa35 	bl	800b15c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfa:	d112      	bne.n	800ad22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d016      	beq.n	800ad32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	3324      	adds	r3, #36	; 0x24
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 fff5 	bl	800bcf8 <xTaskRemoveFromEventList>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00e      	beq.n	800ad32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00b      	beq.n	800ad32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	e007      	b.n	800ad32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad26:	3301      	adds	r3, #1
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	b25a      	sxtb	r2, r3
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad32:	2301      	movs	r3, #1
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad36:	e001      	b.n	800ad3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3740      	adds	r7, #64	; 0x40
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08c      	sub	sp, #48	; 0x30
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <xQueueReceive+0x30>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	623b      	str	r3, [r7, #32]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d103      	bne.n	800ad92 <xQueueReceive+0x3e>
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <xQueueReceive+0x42>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <xQueueReceive+0x44>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xQueueReceive+0x5e>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	61fb      	str	r3, [r7, #28]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adb2:	f001 f96f 	bl	800c094 <xTaskGetSchedulerState>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <xQueueReceive+0x6e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <xQueueReceive+0x72>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueReceive+0x74>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueReceive+0x8e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	61bb      	str	r3, [r7, #24]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ade2:	f001 ffaf 	bl	800cd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d01f      	beq.n	800ae32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf6:	f000 fa1b 	bl	800b230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	1e5a      	subs	r2, r3, #1
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	3310      	adds	r3, #16
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 ff72 	bl	800bcf8 <xTaskRemoveFromEventList>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d007      	beq.n	800ae2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae1a:	4b3d      	ldr	r3, [pc, #244]	; (800af10 <xQueueReceive+0x1bc>)
 800ae1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae2a:	f001 ffbb 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e069      	b.n	800af06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae38:	f001 ffb4 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e062      	b.n	800af06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d106      	bne.n	800ae54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae46:	f107 0310 	add.w	r3, r7, #16
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 ffb8 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae50:	2301      	movs	r3, #1
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae54:	f001 ffa6 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae58:	f000 fd2a 	bl	800b8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae5c:	f001 ff72 	bl	800cd44 <vPortEnterCritical>
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6c:	d103      	bne.n	800ae76 <xQueueReceive+0x122>
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae82:	d103      	bne.n	800ae8c <xQueueReceive+0x138>
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae8c:	f001 ff8a 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae90:	1d3a      	adds	r2, r7, #4
 800ae92:	f107 0310 	add.w	r3, r7, #16
 800ae96:	4611      	mov	r1, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 ffa7 	bl	800bdec <xTaskCheckForTimeOut>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d123      	bne.n	800aeec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea6:	f000 fa3b 	bl	800b320 <prvIsQueueEmpty>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d017      	beq.n	800aee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 fecd 	bl	800bc58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec0:	f000 f9dc 	bl	800b27c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aec4:	f000 fd02 	bl	800b8cc <xTaskResumeAll>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d189      	bne.n	800ade2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aece:	4b10      	ldr	r3, [pc, #64]	; (800af10 <xQueueReceive+0x1bc>)
 800aed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	e780      	b.n	800ade2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee2:	f000 f9cb 	bl	800b27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aee6:	f000 fcf1 	bl	800b8cc <xTaskResumeAll>
 800aeea:	e77a      	b.n	800ade2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeee:	f000 f9c5 	bl	800b27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aef2:	f000 fceb 	bl	800b8cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef8:	f000 fa12 	bl	800b320 <prvIsQueueEmpty>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f43f af6f 	beq.w	800ade2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af06:	4618      	mov	r0, r3
 800af08:	3730      	adds	r7, #48	; 0x30
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08e      	sub	sp, #56	; 0x38
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800af26:	2300      	movs	r3, #0
 800af28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	623b      	str	r3, [r7, #32]
}
 800af42:	bf00      	nop
 800af44:	e7fe      	b.n	800af44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	61fb      	str	r3, [r7, #28]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af64:	f001 f896 	bl	800c094 <xTaskGetSchedulerState>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <xQueueSemaphoreTake+0x60>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <xQueueSemaphoreTake+0x64>
 800af74:	2301      	movs	r3, #1
 800af76:	e000      	b.n	800af7a <xQueueSemaphoreTake+0x66>
 800af78:	2300      	movs	r3, #0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	61bb      	str	r3, [r7, #24]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af94:	f001 fed6 	bl	800cd44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d024      	beq.n	800afee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	1e5a      	subs	r2, r3, #1
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800afb4:	f001 f9e4 	bl	800c380 <pvTaskIncrementMutexHeldCount>
 800afb8:	4602      	mov	r2, r0
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00f      	beq.n	800afe6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	3310      	adds	r3, #16
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fe94 	bl	800bcf8 <xTaskRemoveFromEventList>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d007      	beq.n	800afe6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afd6:	4b54      	ldr	r3, [pc, #336]	; (800b128 <xQueueSemaphoreTake+0x214>)
 800afd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800afe6:	f001 fedd 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800afea:	2301      	movs	r3, #1
 800afec:	e097      	b.n	800b11e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d111      	bne.n	800b018 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	617b      	str	r3, [r7, #20]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b010:	f001 fec8 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b014:	2300      	movs	r3, #0
 800b016:	e082      	b.n	800b11e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fecc 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b028:	2301      	movs	r3, #1
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b02c:	f001 feba 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b030:	f000 fc3e 	bl	800b8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b034:	f001 fe86 	bl	800cd44 <vPortEnterCritical>
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b03e:	b25b      	sxtb	r3, r3
 800b040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b044:	d103      	bne.n	800b04e <xQueueSemaphoreTake+0x13a>
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b054:	b25b      	sxtb	r3, r3
 800b056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05a:	d103      	bne.n	800b064 <xQueueSemaphoreTake+0x150>
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b064:	f001 fe9e 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b068:	463a      	mov	r2, r7
 800b06a:	f107 030c 	add.w	r3, r7, #12
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f000 febb 	bl	800bdec <xTaskCheckForTimeOut>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d132      	bne.n	800b0e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b07c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b07e:	f000 f94f 	bl	800b320 <prvIsQueueEmpty>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d026      	beq.n	800b0d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b090:	f001 fe58 	bl	800cd44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	4618      	mov	r0, r3
 800b09a:	f001 f819 	bl	800c0d0 <xTaskPriorityInherit>
 800b09e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b0a0:	f001 fe80 	bl	800cda4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	3324      	adds	r3, #36	; 0x24
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fdd3 	bl	800bc58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0b4:	f000 f8e2 	bl	800b27c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0b8:	f000 fc08 	bl	800b8cc <xTaskResumeAll>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f47f af68 	bne.w	800af94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b0c4:	4b18      	ldr	r3, [pc, #96]	; (800b128 <xQueueSemaphoreTake+0x214>)
 800b0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	e75e      	b.n	800af94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b0d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0d8:	f000 f8d0 	bl	800b27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0dc:	f000 fbf6 	bl	800b8cc <xTaskResumeAll>
 800b0e0:	e758      	b.n	800af94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0e4:	f000 f8ca 	bl	800b27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0e8:	f000 fbf0 	bl	800b8cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ee:	f000 f917 	bl	800b320 <prvIsQueueEmpty>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f43f af4d 	beq.w	800af94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00d      	beq.n	800b11c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b100:	f001 fe20 	bl	800cd44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b106:	f000 f811 	bl	800b12c <prvGetDisinheritPriorityAfterTimeout>
 800b10a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b112:	4618      	mov	r0, r3
 800b114:	f001 f8b2 	bl	800c27c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b118:	f001 fe44 	bl	800cda4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b11c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3738      	adds	r7, #56	; 0x38
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d006      	beq.n	800b14a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e001      	b.n	800b14e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b14e:	68fb      	ldr	r3, [r7, #12]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b168:	2300      	movs	r3, #0
 800b16a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10d      	bne.n	800b196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d14d      	bne.n	800b21e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f001 f80a 	bl	800c1a0 <xTaskPriorityDisinherit>
 800b18c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	609a      	str	r2, [r3, #8]
 800b194:	e043      	b.n	800b21e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d119      	bne.n	800b1d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6858      	ldr	r0, [r3, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	f002 f902 	bl	800d3b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b4:	441a      	add	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d32b      	bcc.n	800b21e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	605a      	str	r2, [r3, #4]
 800b1ce:	e026      	b.n	800b21e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	68d8      	ldr	r0, [r3, #12]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	f002 f8e8 	bl	800d3b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	68da      	ldr	r2, [r3, #12]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e8:	425b      	negs	r3, r3
 800b1ea:	441a      	add	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	68da      	ldr	r2, [r3, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d207      	bcs.n	800b20c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b204:	425b      	negs	r3, r3
 800b206:	441a      	add	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d105      	bne.n	800b21e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b226:	697b      	ldr	r3, [r7, #20]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d018      	beq.n	800b274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68da      	ldr	r2, [r3, #12]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	441a      	add	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68da      	ldr	r2, [r3, #12]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d303      	bcc.n	800b264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68d9      	ldr	r1, [r3, #12]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26c:	461a      	mov	r2, r3
 800b26e:	6838      	ldr	r0, [r7, #0]
 800b270:	f002 f89e 	bl	800d3b0 <memcpy>
	}
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b284:	f001 fd5e 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b290:	e011      	b.n	800b2b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	2b00      	cmp	r3, #0
 800b298:	d012      	beq.n	800b2c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3324      	adds	r3, #36	; 0x24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fd2a 	bl	800bcf8 <xTaskRemoveFromEventList>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2aa:	f000 fe01 	bl	800beb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dce9      	bgt.n	800b292 <prvUnlockQueue+0x16>
 800b2be:	e000      	b.n	800b2c2 <prvUnlockQueue+0x46>
					break;
 800b2c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	22ff      	movs	r2, #255	; 0xff
 800b2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2ca:	f001 fd6b 	bl	800cda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2ce:	f001 fd39 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2da:	e011      	b.n	800b300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d012      	beq.n	800b30a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3310      	adds	r3, #16
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fd05 	bl	800bcf8 <xTaskRemoveFromEventList>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2f4:	f000 fddc 	bl	800beb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dce9      	bgt.n	800b2dc <prvUnlockQueue+0x60>
 800b308:	e000      	b.n	800b30c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b30a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	22ff      	movs	r2, #255	; 0xff
 800b310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b314:	f001 fd46 	bl	800cda4 <vPortExitCritical>
}
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b328:	f001 fd0c 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b330:	2b00      	cmp	r3, #0
 800b332:	d102      	bne.n	800b33a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	e001      	b.n	800b33e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b33e:	f001 fd31 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b342:	68fb      	ldr	r3, [r7, #12]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b354:	f001 fcf6 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b360:	429a      	cmp	r2, r3
 800b362:	d102      	bne.n	800b36a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
 800b368:	e001      	b.n	800b36e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b36e:	f001 fd19 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b372:	68fb      	ldr	r3, [r7, #12]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	e014      	b.n	800b3b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b38c:	4a0f      	ldr	r2, [pc, #60]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b398:	490c      	ldr	r1, [pc, #48]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3a2:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3ae:	e006      	b.n	800b3be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b07      	cmp	r3, #7
 800b3ba:	d9e7      	bls.n	800b38c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	20000e28 	.word	0x20000e28

0800b3d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3e0:	f001 fcb0 	bl	800cd44 <vPortEnterCritical>
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3ea:	b25b      	sxtb	r3, r3
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f0:	d103      	bne.n	800b3fa <vQueueWaitForMessageRestricted+0x2a>
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b400:	b25b      	sxtb	r3, r3
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b406:	d103      	bne.n	800b410 <vQueueWaitForMessageRestricted+0x40>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b410:	f001 fcc8 	bl	800cda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	3324      	adds	r3, #36	; 0x24
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fc3b 	bl	800bca0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b42a:	6978      	ldr	r0, [r7, #20]
 800b42c:	f7ff ff26 	bl	800b27c <prvUnlockQueue>
	}
 800b430:	bf00      	nop
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08e      	sub	sp, #56	; 0x38
 800b43c:	af04      	add	r7, sp, #16
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	623b      	str	r3, [r7, #32]
}
 800b45e:	bf00      	nop
 800b460:	e7fe      	b.n	800b460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xTaskCreateStatic+0x46>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	61fb      	str	r3, [r7, #28]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b47e:	235c      	movs	r3, #92	; 0x5c
 800b480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b5c      	cmp	r3, #92	; 0x5c
 800b486:	d00a      	beq.n	800b49e <xTaskCreateStatic+0x66>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	61bb      	str	r3, [r7, #24]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b49e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d01e      	beq.n	800b4e4 <xTaskCreateStatic+0xac>
 800b4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01b      	beq.n	800b4e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	9302      	str	r3, [sp, #8]
 800b4c6:	f107 0314 	add.w	r3, r7, #20
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	68b9      	ldr	r1, [r7, #8]
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f000 f850 	bl	800b57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4de:	f000 f8dd 	bl	800b69c <prvAddNewTaskToReadyList>
 800b4e2:	e001      	b.n	800b4e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4e8:	697b      	ldr	r3, [r7, #20]
	}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3728      	adds	r7, #40	; 0x28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b08c      	sub	sp, #48	; 0x30
 800b4f6:	af04      	add	r7, sp, #16
 800b4f8:	60f8      	str	r0, [r7, #12]
 800b4fa:	60b9      	str	r1, [r7, #8]
 800b4fc:	603b      	str	r3, [r7, #0]
 800b4fe:	4613      	mov	r3, r2
 800b500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b502:	88fb      	ldrh	r3, [r7, #6]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4618      	mov	r0, r3
 800b508:	f001 fd3e 	bl	800cf88 <pvPortMalloc>
 800b50c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00e      	beq.n	800b532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b514:	205c      	movs	r0, #92	; 0x5c
 800b516:	f001 fd37 	bl	800cf88 <pvPortMalloc>
 800b51a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	631a      	str	r2, [r3, #48]	; 0x30
 800b528:	e005      	b.n	800b536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f001 fdf8 	bl	800d120 <vPortFree>
 800b530:	e001      	b.n	800b536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d017      	beq.n	800b56c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b544:	88fa      	ldrh	r2, [r7, #6]
 800b546:	2300      	movs	r3, #0
 800b548:	9303      	str	r3, [sp, #12]
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	9302      	str	r3, [sp, #8]
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f80e 	bl	800b57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b560:	69f8      	ldr	r0, [r7, #28]
 800b562:	f000 f89b 	bl	800b69c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b566:	2301      	movs	r3, #1
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	e002      	b.n	800b572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b572:	69bb      	ldr	r3, [r7, #24]
	}
 800b574:	4618      	mov	r0, r3
 800b576:	3720      	adds	r7, #32
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b088      	sub	sp, #32
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	461a      	mov	r2, r3
 800b594:	21a5      	movs	r1, #165	; 0xa5
 800b596:	f001 ff19 	bl	800d3cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d01f      	beq.n	800b61a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61fb      	str	r3, [r7, #28]
 800b5de:	e012      	b.n	800b606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	7819      	ldrb	r1, [r3, #0]
 800b5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	3334      	adds	r3, #52	; 0x34
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	3301      	adds	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	2b0f      	cmp	r3, #15
 800b60a:	d9e9      	bls.n	800b5e0 <prvInitialiseNewTask+0x64>
 800b60c:	e000      	b.n	800b610 <prvInitialiseNewTask+0x94>
			{
				break;
 800b60e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b618:	e003      	b.n	800b622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	2b37      	cmp	r3, #55	; 0x37
 800b626:	d901      	bls.n	800b62c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b628:	2337      	movs	r3, #55	; 0x37
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	2200      	movs	r2, #0
 800b63c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	3304      	adds	r3, #4
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe ff64 	bl	800a510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	3318      	adds	r3, #24
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fe ff5f 	bl	800a510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	2200      	movs	r2, #0
 800b66c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	68f9      	ldr	r1, [r7, #12]
 800b67a:	69b8      	ldr	r0, [r7, #24]
 800b67c:	f001 fa36 	bl	800caec <pxPortInitialiseStack>
 800b680:	4602      	mov	r2, r0
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b692:	bf00      	nop
 800b694:	3720      	adds	r7, #32
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6a4:	f001 fb4e 	bl	800cd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6a8:	4b2d      	ldr	r3, [pc, #180]	; (800b760 <prvAddNewTaskToReadyList+0xc4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	4a2c      	ldr	r2, [pc, #176]	; (800b760 <prvAddNewTaskToReadyList+0xc4>)
 800b6b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6b2:	4b2c      	ldr	r3, [pc, #176]	; (800b764 <prvAddNewTaskToReadyList+0xc8>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d109      	bne.n	800b6ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6ba:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <prvAddNewTaskToReadyList+0xc8>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6c0:	4b27      	ldr	r3, [pc, #156]	; (800b760 <prvAddNewTaskToReadyList+0xc4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d110      	bne.n	800b6ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6c8:	f000 fc16 	bl	800bef8 <prvInitialiseTaskLists>
 800b6cc:	e00d      	b.n	800b6ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6ce:	4b26      	ldr	r3, [pc, #152]	; (800b768 <prvAddNewTaskToReadyList+0xcc>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6d6:	4b23      	ldr	r3, [pc, #140]	; (800b764 <prvAddNewTaskToReadyList+0xc8>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d802      	bhi.n	800b6ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6e4:	4a1f      	ldr	r2, [pc, #124]	; (800b764 <prvAddNewTaskToReadyList+0xc8>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6ea:	4b20      	ldr	r3, [pc, #128]	; (800b76c <prvAddNewTaskToReadyList+0xd0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	4a1e      	ldr	r2, [pc, #120]	; (800b76c <prvAddNewTaskToReadyList+0xd0>)
 800b6f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6f4:	4b1d      	ldr	r3, [pc, #116]	; (800b76c <prvAddNewTaskToReadyList+0xd0>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <prvAddNewTaskToReadyList+0xd4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d903      	bls.n	800b710 <prvAddNewTaskToReadyList+0x74>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	4a18      	ldr	r2, [pc, #96]	; (800b770 <prvAddNewTaskToReadyList+0xd4>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4a15      	ldr	r2, [pc, #84]	; (800b774 <prvAddNewTaskToReadyList+0xd8>)
 800b71e:	441a      	add	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fe feff 	bl	800a52a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b72c:	f001 fb3a 	bl	800cda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b730:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvAddNewTaskToReadyList+0xcc>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b738:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <prvAddNewTaskToReadyList+0xc8>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	429a      	cmp	r2, r3
 800b744:	d207      	bcs.n	800b756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b746:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <prvAddNewTaskToReadyList+0xdc>)
 800b748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	2000133c 	.word	0x2000133c
 800b764:	20000e68 	.word	0x20000e68
 800b768:	20001348 	.word	0x20001348
 800b76c:	20001358 	.word	0x20001358
 800b770:	20001344 	.word	0x20001344
 800b774:	20000e6c 	.word	0x20000e6c
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d017      	beq.n	800b7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <vTaskDelay+0x60>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <vTaskDelay+0x30>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60bb      	str	r3, [r7, #8]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7ac:	f000 f880 	bl	800b8b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fdf8 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7b8:	f000 f888 	bl	800b8cc <xTaskResumeAll>
 800b7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d107      	bne.n	800b7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <vTaskDelay+0x64>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20001364 	.word	0x20001364
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b08a      	sub	sp, #40	; 0x28
 800b7e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7f2:	463a      	mov	r2, r7
 800b7f4:	1d39      	adds	r1, r7, #4
 800b7f6:	f107 0308 	add.w	r3, r7, #8
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fe34 	bl	800a468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	9202      	str	r2, [sp, #8]
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	2300      	movs	r3, #0
 800b810:	460a      	mov	r2, r1
 800b812:	4921      	ldr	r1, [pc, #132]	; (800b898 <vTaskStartScheduler+0xb4>)
 800b814:	4821      	ldr	r0, [pc, #132]	; (800b89c <vTaskStartScheduler+0xb8>)
 800b816:	f7ff fe0f 	bl	800b438 <xTaskCreateStatic>
 800b81a:	4603      	mov	r3, r0
 800b81c:	4a20      	ldr	r2, [pc, #128]	; (800b8a0 <vTaskStartScheduler+0xbc>)
 800b81e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b820:	4b1f      	ldr	r3, [pc, #124]	; (800b8a0 <vTaskStartScheduler+0xbc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e001      	b.n	800b832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d102      	bne.n	800b83e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b838:	f000 fe0a 	bl	800c450 <xTimerCreateTimerTask>
 800b83c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d116      	bne.n	800b872 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	613b      	str	r3, [r7, #16]
}
 800b856:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b858:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <vTaskStartScheduler+0xc0>)
 800b85a:	f04f 32ff 	mov.w	r2, #4294967295
 800b85e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b860:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <vTaskStartScheduler+0xc4>)
 800b862:	2201      	movs	r2, #1
 800b864:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b866:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <vTaskStartScheduler+0xc8>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b86c:	f001 f9c8 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b870:	e00e      	b.n	800b890 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b878:	d10a      	bne.n	800b890 <vTaskStartScheduler+0xac>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	60fb      	str	r3, [r7, #12]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <vTaskStartScheduler+0xaa>
}
 800b890:	bf00      	nop
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	08012d4c 	.word	0x08012d4c
 800b89c:	0800bec9 	.word	0x0800bec9
 800b8a0:	20001360 	.word	0x20001360
 800b8a4:	2000135c 	.word	0x2000135c
 800b8a8:	20001348 	.word	0x20001348
 800b8ac:	20001340 	.word	0x20001340

0800b8b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <vTaskSuspendAll+0x18>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	4a03      	ldr	r2, [pc, #12]	; (800b8c8 <vTaskSuspendAll+0x18>)
 800b8bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8be:	bf00      	nop
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	20001364 	.word	0x20001364

0800b8cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8da:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <xTaskResumeAll+0x118>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	603b      	str	r3, [r7, #0]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8f8:	f001 fa24 	bl	800cd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8fc:	4b39      	ldr	r3, [pc, #228]	; (800b9e4 <xTaskResumeAll+0x118>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3b01      	subs	r3, #1
 800b902:	4a38      	ldr	r2, [pc, #224]	; (800b9e4 <xTaskResumeAll+0x118>)
 800b904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b906:	4b37      	ldr	r3, [pc, #220]	; (800b9e4 <xTaskResumeAll+0x118>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d162      	bne.n	800b9d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b90e:	4b36      	ldr	r3, [pc, #216]	; (800b9e8 <xTaskResumeAll+0x11c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d05e      	beq.n	800b9d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b916:	e02f      	b.n	800b978 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b918:	4b34      	ldr	r3, [pc, #208]	; (800b9ec <xTaskResumeAll+0x120>)
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3318      	adds	r3, #24
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fe5d 	bl	800a5e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3304      	adds	r3, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe fe58 	bl	800a5e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	4b2d      	ldr	r3, [pc, #180]	; (800b9f0 <xTaskResumeAll+0x124>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d903      	bls.n	800b948 <xTaskResumeAll+0x7c>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	4a2a      	ldr	r2, [pc, #168]	; (800b9f0 <xTaskResumeAll+0x124>)
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4a27      	ldr	r2, [pc, #156]	; (800b9f4 <xTaskResumeAll+0x128>)
 800b956:	441a      	add	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4610      	mov	r0, r2
 800b960:	f7fe fde3 	bl	800a52a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b968:	4b23      	ldr	r3, [pc, #140]	; (800b9f8 <xTaskResumeAll+0x12c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	429a      	cmp	r2, r3
 800b970:	d302      	bcc.n	800b978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b972:	4b22      	ldr	r3, [pc, #136]	; (800b9fc <xTaskResumeAll+0x130>)
 800b974:	2201      	movs	r2, #1
 800b976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b978:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <xTaskResumeAll+0x120>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1cb      	bne.n	800b918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b986:	f000 fb55 	bl	800c034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <xTaskResumeAll+0x134>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d010      	beq.n	800b9b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b996:	f000 f847 	bl	800ba28 <xTaskIncrementTick>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9a0:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <xTaskResumeAll+0x130>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1f1      	bne.n	800b996 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b9b2:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <xTaskResumeAll+0x134>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9b8:	4b10      	ldr	r3, [pc, #64]	; (800b9fc <xTaskResumeAll+0x130>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d009      	beq.n	800b9d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <xTaskResumeAll+0x138>)
 800b9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9d4:	f001 f9e6 	bl	800cda4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20001364 	.word	0x20001364
 800b9e8:	2000133c 	.word	0x2000133c
 800b9ec:	200012fc 	.word	0x200012fc
 800b9f0:	20001344 	.word	0x20001344
 800b9f4:	20000e6c 	.word	0x20000e6c
 800b9f8:	20000e68 	.word	0x20000e68
 800b9fc:	20001350 	.word	0x20001350
 800ba00:	2000134c 	.word	0x2000134c
 800ba04:	e000ed04 	.word	0xe000ed04

0800ba08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <xTaskGetTickCount+0x1c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba14:	687b      	ldr	r3, [r7, #4]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20001340 	.word	0x20001340

0800ba28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba32:	4b4f      	ldr	r3, [pc, #316]	; (800bb70 <xTaskIncrementTick+0x148>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f040 808f 	bne.w	800bb5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba3c:	4b4d      	ldr	r3, [pc, #308]	; (800bb74 <xTaskIncrementTick+0x14c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba44:	4a4b      	ldr	r2, [pc, #300]	; (800bb74 <xTaskIncrementTick+0x14c>)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d120      	bne.n	800ba92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba50:	4b49      	ldr	r3, [pc, #292]	; (800bb78 <xTaskIncrementTick+0x150>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	603b      	str	r3, [r7, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	e7fe      	b.n	800ba6e <xTaskIncrementTick+0x46>
 800ba70:	4b41      	ldr	r3, [pc, #260]	; (800bb78 <xTaskIncrementTick+0x150>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	4b41      	ldr	r3, [pc, #260]	; (800bb7c <xTaskIncrementTick+0x154>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a3f      	ldr	r2, [pc, #252]	; (800bb78 <xTaskIncrementTick+0x150>)
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	4a3f      	ldr	r2, [pc, #252]	; (800bb7c <xTaskIncrementTick+0x154>)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	4b3e      	ldr	r3, [pc, #248]	; (800bb80 <xTaskIncrementTick+0x158>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	4a3d      	ldr	r2, [pc, #244]	; (800bb80 <xTaskIncrementTick+0x158>)
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	f000 fad1 	bl	800c034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba92:	4b3c      	ldr	r3, [pc, #240]	; (800bb84 <xTaskIncrementTick+0x15c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d349      	bcc.n	800bb30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba9c:	4b36      	ldr	r3, [pc, #216]	; (800bb78 <xTaskIncrementTick+0x150>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d104      	bne.n	800bab0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa6:	4b37      	ldr	r3, [pc, #220]	; (800bb84 <xTaskIncrementTick+0x15c>)
 800baa8:	f04f 32ff 	mov.w	r2, #4294967295
 800baac:	601a      	str	r2, [r3, #0]
					break;
 800baae:	e03f      	b.n	800bb30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab0:	4b31      	ldr	r3, [pc, #196]	; (800bb78 <xTaskIncrementTick+0x150>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d203      	bcs.n	800bad0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bac8:	4a2e      	ldr	r2, [pc, #184]	; (800bb84 <xTaskIncrementTick+0x15c>)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bace:	e02f      	b.n	800bb30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe fd85 	bl	800a5e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	3318      	adds	r3, #24
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fd7c 	bl	800a5e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf0:	4b25      	ldr	r3, [pc, #148]	; (800bb88 <xTaskIncrementTick+0x160>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d903      	bls.n	800bb00 <xTaskIncrementTick+0xd8>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafc:	4a22      	ldr	r2, [pc, #136]	; (800bb88 <xTaskIncrementTick+0x160>)
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4a1f      	ldr	r2, [pc, #124]	; (800bb8c <xTaskIncrementTick+0x164>)
 800bb0e:	441a      	add	r2, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3304      	adds	r3, #4
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f7fe fd07 	bl	800a52a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <xTaskIncrementTick+0x168>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d3b8      	bcc.n	800ba9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb2e:	e7b5      	b.n	800ba9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb30:	4b17      	ldr	r3, [pc, #92]	; (800bb90 <xTaskIncrementTick+0x168>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb36:	4915      	ldr	r1, [pc, #84]	; (800bb8c <xTaskIncrementTick+0x164>)
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	440b      	add	r3, r1
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d901      	bls.n	800bb4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb4c:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <xTaskIncrementTick+0x16c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	e004      	b.n	800bb64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <xTaskIncrementTick+0x170>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	4a0d      	ldr	r2, [pc, #52]	; (800bb98 <xTaskIncrementTick+0x170>)
 800bb62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb64:	697b      	ldr	r3, [r7, #20]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20001364 	.word	0x20001364
 800bb74:	20001340 	.word	0x20001340
 800bb78:	200012f4 	.word	0x200012f4
 800bb7c:	200012f8 	.word	0x200012f8
 800bb80:	20001354 	.word	0x20001354
 800bb84:	2000135c 	.word	0x2000135c
 800bb88:	20001344 	.word	0x20001344
 800bb8c:	20000e6c 	.word	0x20000e6c
 800bb90:	20000e68 	.word	0x20000e68
 800bb94:	20001350 	.word	0x20001350
 800bb98:	2000134c 	.word	0x2000134c

0800bb9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bba2:	4b28      	ldr	r3, [pc, #160]	; (800bc44 <vTaskSwitchContext+0xa8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbaa:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <vTaskSwitchContext+0xac>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbb0:	e041      	b.n	800bc36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bbb2:	4b25      	ldr	r3, [pc, #148]	; (800bc48 <vTaskSwitchContext+0xac>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb8:	4b24      	ldr	r3, [pc, #144]	; (800bc4c <vTaskSwitchContext+0xb0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e010      	b.n	800bbe2 <vTaskSwitchContext+0x46>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10a      	bne.n	800bbdc <vTaskSwitchContext+0x40>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	607b      	str	r3, [r7, #4]
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <vTaskSwitchContext+0x3e>
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	491b      	ldr	r1, [pc, #108]	; (800bc50 <vTaskSwitchContext+0xb4>)
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	440b      	add	r3, r1
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0e4      	beq.n	800bbc0 <vTaskSwitchContext+0x24>
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4a13      	ldr	r2, [pc, #76]	; (800bc50 <vTaskSwitchContext+0xb4>)
 800bc02:	4413      	add	r3, r2
 800bc04:	60bb      	str	r3, [r7, #8]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	605a      	str	r2, [r3, #4]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	3308      	adds	r3, #8
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d104      	bne.n	800bc26 <vTaskSwitchContext+0x8a>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	605a      	str	r2, [r3, #4]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <vTaskSwitchContext+0xb8>)
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	4a06      	ldr	r2, [pc, #24]	; (800bc4c <vTaskSwitchContext+0xb0>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6013      	str	r3, [r2, #0]
}
 800bc36:	bf00      	nop
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	20001364 	.word	0x20001364
 800bc48:	20001350 	.word	0x20001350
 800bc4c:	20001344 	.word	0x20001344
 800bc50:	20000e6c 	.word	0x20000e6c
 800bc54:	20000e68 	.word	0x20000e68

0800bc58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60fb      	str	r3, [r7, #12]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc7e:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <vTaskPlaceOnEventList+0x44>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3318      	adds	r3, #24
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fe fc73 	bl	800a572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	6838      	ldr	r0, [r7, #0]
 800bc90:	f000 fb8a 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20000e68 	.word	0x20000e68

0800bca0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10a      	bne.n	800bcc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	617b      	str	r3, [r7, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3318      	adds	r3, #24
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f7fe fc2a 	bl	800a52a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bce0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	68b8      	ldr	r0, [r7, #8]
 800bce6:	f000 fb5f 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
	}
 800bcea:	bf00      	nop
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000e68 	.word	0x20000e68

0800bcf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	3318      	adds	r3, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fc5b 	bl	800a5e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd2e:	4b1e      	ldr	r3, [pc, #120]	; (800bda8 <xTaskRemoveFromEventList+0xb0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d11d      	bne.n	800bd72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fe fc52 	bl	800a5e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <xTaskRemoveFromEventList+0xb4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d903      	bls.n	800bd54 <xTaskRemoveFromEventList+0x5c>
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	4a16      	ldr	r2, [pc, #88]	; (800bdac <xTaskRemoveFromEventList+0xb4>)
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <xTaskRemoveFromEventList+0xb8>)
 800bd62:	441a      	add	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f7fe fbdd 	bl	800a52a <vListInsertEnd>
 800bd70:	e005      	b.n	800bd7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3318      	adds	r3, #24
 800bd76:	4619      	mov	r1, r3
 800bd78:	480e      	ldr	r0, [pc, #56]	; (800bdb4 <xTaskRemoveFromEventList+0xbc>)
 800bd7a:	f7fe fbd6 	bl	800a52a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd82:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <xTaskRemoveFromEventList+0xc0>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d905      	bls.n	800bd98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd90:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <xTaskRemoveFromEventList+0xc4>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	e001      	b.n	800bd9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd9c:	697b      	ldr	r3, [r7, #20]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20001364 	.word	0x20001364
 800bdac:	20001344 	.word	0x20001344
 800bdb0:	20000e6c 	.word	0x20000e6c
 800bdb4:	200012fc 	.word	0x200012fc
 800bdb8:	20000e68 	.word	0x20000e68
 800bdbc:	20001350 	.word	0x20001350

0800bdc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <vTaskInternalSetTimeOutState+0x24>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <vTaskInternalSetTimeOutState+0x28>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	605a      	str	r2, [r3, #4]
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	20001354 	.word	0x20001354
 800bde8:	20001340 	.word	0x20001340

0800bdec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	613b      	str	r3, [r7, #16]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60fb      	str	r3, [r7, #12]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be2e:	f000 ff89 	bl	800cd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be32:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <xTaskCheckForTimeOut+0xbc>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d102      	bne.n	800be52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e023      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <xTaskCheckForTimeOut+0xc0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d007      	beq.n	800be6e <xTaskCheckForTimeOut+0x82>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	429a      	cmp	r2, r3
 800be66:	d302      	bcc.n	800be6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	61fb      	str	r3, [r7, #28]
 800be6c:	e015      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	429a      	cmp	r2, r3
 800be76:	d20b      	bcs.n	800be90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff ff9b 	bl	800bdc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	61fb      	str	r3, [r7, #28]
 800be8e:	e004      	b.n	800be9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be96:	2301      	movs	r3, #1
 800be98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be9a:	f000 ff83 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800be9e:	69fb      	ldr	r3, [r7, #28]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20001340 	.word	0x20001340
 800beac:	20001354 	.word	0x20001354

0800beb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800beb4:	4b03      	ldr	r3, [pc, #12]	; (800bec4 <vTaskMissedYield+0x14>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	601a      	str	r2, [r3, #0]
}
 800beba:	bf00      	nop
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	20001350 	.word	0x20001350

0800bec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bed0:	f000 f852 	bl	800bf78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bed4:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <prvIdleTask+0x28>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d9f9      	bls.n	800bed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <prvIdleTask+0x2c>)
 800bede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800beec:	e7f0      	b.n	800bed0 <prvIdleTask+0x8>
 800beee:	bf00      	nop
 800bef0:	20000e6c 	.word	0x20000e6c
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	e00c      	b.n	800bf1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4a12      	ldr	r2, [pc, #72]	; (800bf58 <prvInitialiseTaskLists+0x60>)
 800bf10:	4413      	add	r3, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fadc 	bl	800a4d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b37      	cmp	r3, #55	; 0x37
 800bf22:	d9ef      	bls.n	800bf04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf24:	480d      	ldr	r0, [pc, #52]	; (800bf5c <prvInitialiseTaskLists+0x64>)
 800bf26:	f7fe fad3 	bl	800a4d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf2a:	480d      	ldr	r0, [pc, #52]	; (800bf60 <prvInitialiseTaskLists+0x68>)
 800bf2c:	f7fe fad0 	bl	800a4d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf30:	480c      	ldr	r0, [pc, #48]	; (800bf64 <prvInitialiseTaskLists+0x6c>)
 800bf32:	f7fe facd 	bl	800a4d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf36:	480c      	ldr	r0, [pc, #48]	; (800bf68 <prvInitialiseTaskLists+0x70>)
 800bf38:	f7fe faca 	bl	800a4d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf3c:	480b      	ldr	r0, [pc, #44]	; (800bf6c <prvInitialiseTaskLists+0x74>)
 800bf3e:	f7fe fac7 	bl	800a4d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf42:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <prvInitialiseTaskLists+0x78>)
 800bf44:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <prvInitialiseTaskLists+0x64>)
 800bf46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf48:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <prvInitialiseTaskLists+0x7c>)
 800bf4a:	4a05      	ldr	r2, [pc, #20]	; (800bf60 <prvInitialiseTaskLists+0x68>)
 800bf4c:	601a      	str	r2, [r3, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000e6c 	.word	0x20000e6c
 800bf5c:	200012cc 	.word	0x200012cc
 800bf60:	200012e0 	.word	0x200012e0
 800bf64:	200012fc 	.word	0x200012fc
 800bf68:	20001310 	.word	0x20001310
 800bf6c:	20001328 	.word	0x20001328
 800bf70:	200012f4 	.word	0x200012f4
 800bf74:	200012f8 	.word	0x200012f8

0800bf78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf7e:	e019      	b.n	800bfb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf80:	f000 fee0 	bl	800cd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf84:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <prvCheckTasksWaitingTermination+0x50>)
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fb27 	bl	800a5e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf96:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <prvCheckTasksWaitingTermination+0x54>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	4a0b      	ldr	r2, [pc, #44]	; (800bfcc <prvCheckTasksWaitingTermination+0x54>)
 800bf9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	4a0a      	ldr	r2, [pc, #40]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfaa:	f000 fefb 	bl	800cda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f810 	bl	800bfd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfb4:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <prvCheckTasksWaitingTermination+0x58>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e1      	bne.n	800bf80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20001310 	.word	0x20001310
 800bfcc:	2000133c 	.word	0x2000133c
 800bfd0:	20001324 	.word	0x20001324

0800bfd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d108      	bne.n	800bff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 f898 	bl	800d120 <vPortFree>
				vPortFree( pxTCB );
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 f895 	bl	800d120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bff6:	e018      	b.n	800c02a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d103      	bne.n	800c00a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 f88c 	bl	800d120 <vPortFree>
	}
 800c008:	e00f      	b.n	800c02a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c010:	2b02      	cmp	r3, #2
 800c012:	d00a      	beq.n	800c02a <prvDeleteTCB+0x56>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	60fb      	str	r3, [r7, #12]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <prvDeleteTCB+0x54>
	}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c046:	f04f 32ff 	mov.w	r2, #4294967295
 800c04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c04c:	e008      	b.n	800c060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	4a04      	ldr	r2, [pc, #16]	; (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c05e:	6013      	str	r3, [r2, #0]
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	200012f4 	.word	0x200012f4
 800c070:	2000135c 	.word	0x2000135c

0800c074 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c07a:	4b05      	ldr	r3, [pc, #20]	; (800c090 <xTaskGetCurrentTaskHandle+0x1c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c080:	687b      	ldr	r3, [r7, #4]
	}
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	20000e68 	.word	0x20000e68

0800c094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c09a:	4b0b      	ldr	r3, [pc, #44]	; (800c0c8 <xTaskGetSchedulerState+0x34>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	e008      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a8:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <xTaskGetSchedulerState+0x38>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	e001      	b.n	800c0ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ba:	687b      	ldr	r3, [r7, #4]
	}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20001348 	.word	0x20001348
 800c0cc:	20001364 	.word	0x20001364

0800c0d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d051      	beq.n	800c18a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	4b2a      	ldr	r3, [pc, #168]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d241      	bcs.n	800c178 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	db06      	blt.n	800c10a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fc:	4b25      	ldr	r3, [pc, #148]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6959      	ldr	r1, [r3, #20]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4a1f      	ldr	r2, [pc, #124]	; (800c198 <xTaskPriorityInherit+0xc8>)
 800c11c:	4413      	add	r3, r2
 800c11e:	4299      	cmp	r1, r3
 800c120:	d122      	bne.n	800c168 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	3304      	adds	r3, #4
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe fa5c 	bl	800a5e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c12c:	4b19      	ldr	r3, [pc, #100]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13a:	4b18      	ldr	r3, [pc, #96]	; (800c19c <xTaskPriorityInherit+0xcc>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d903      	bls.n	800c14a <xTaskPriorityInherit+0x7a>
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	4a15      	ldr	r2, [pc, #84]	; (800c19c <xTaskPriorityInherit+0xcc>)
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4a10      	ldr	r2, [pc, #64]	; (800c198 <xTaskPriorityInherit+0xc8>)
 800c158:	441a      	add	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7fe f9e2 	bl	800a52a <vListInsertEnd>
 800c166:	e004      	b.n	800c172 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	e008      	b.n	800c18a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <xTaskPriorityInherit+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	429a      	cmp	r2, r3
 800c184:	d201      	bcs.n	800c18a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c186:	2301      	movs	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c18a:	68fb      	ldr	r3, [r7, #12]
	}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000e68 	.word	0x20000e68
 800c198:	20000e6c 	.word	0x20000e6c
 800c19c:	20001344 	.word	0x20001344

0800c1a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d056      	beq.n	800c264 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1b6:	4b2e      	ldr	r3, [pc, #184]	; (800c270 <xTaskPriorityDisinherit+0xd0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d00a      	beq.n	800c1d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60bb      	str	r3, [r7, #8]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f8:	1e5a      	subs	r2, r3, #1
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c206:	429a      	cmp	r2, r3
 800c208:	d02c      	beq.n	800c264 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d128      	bne.n	800c264 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe f9e4 	bl	800a5e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <xTaskPriorityDisinherit+0xd4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d903      	bls.n	800c244 <xTaskPriorityDisinherit+0xa4>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	4a0c      	ldr	r2, [pc, #48]	; (800c274 <xTaskPriorityDisinherit+0xd4>)
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4a09      	ldr	r2, [pc, #36]	; (800c278 <xTaskPriorityDisinherit+0xd8>)
 800c252:	441a      	add	r2, r3
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	3304      	adds	r3, #4
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7fe f965 	bl	800a52a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c260:	2301      	movs	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c264:	697b      	ldr	r3, [r7, #20]
	}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000e68 	.word	0x20000e68
 800c274:	20001344 	.word	0x20001344
 800c278:	20000e6c 	.word	0x20000e6c

0800c27c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c28a:	2301      	movs	r3, #1
 800c28c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d06a      	beq.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10a      	bne.n	800c2b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d902      	bls.n	800c2c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e002      	b.n	800c2c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d04b      	beq.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d146      	bne.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2dc:	4b25      	ldr	r3, [pc, #148]	; (800c374 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d10a      	bne.n	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	60bb      	str	r3, [r7, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	69fa      	ldr	r2, [r7, #28]
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	db04      	blt.n	800c31a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	6959      	ldr	r1, [r3, #20]
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4a13      	ldr	r2, [pc, #76]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c32a:	4413      	add	r3, r2
 800c32c:	4299      	cmp	r1, r3
 800c32e:	d11c      	bne.n	800c36a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	3304      	adds	r3, #4
 800c334:	4618      	mov	r0, r3
 800c336:	f7fe f955 	bl	800a5e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d903      	bls.n	800c34e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34a:	4a0c      	ldr	r2, [pc, #48]	; (800c37c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a07      	ldr	r2, [pc, #28]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c35c:	441a      	add	r2, r3
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7fe f8e0 	bl	800a52a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c36a:	bf00      	nop
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000e68 	.word	0x20000e68
 800c378:	20000e6c 	.word	0x20000e6c
 800c37c:	20001344 	.word	0x20001344

0800c380 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c380:	b480      	push	{r7}
 800c382:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c384:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d004      	beq.n	800c396 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c38c:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c392:	3201      	adds	r2, #1
 800c394:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c398:	681b      	ldr	r3, [r3, #0]
	}
 800c39a:	4618      	mov	r0, r3
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	20000e68 	.word	0x20000e68

0800c3a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3b2:	4b21      	ldr	r3, [pc, #132]	; (800c438 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	4b20      	ldr	r3, [pc, #128]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe f910 	bl	800a5e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d10a      	bne.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d2:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4819      	ldr	r0, [pc, #100]	; (800c440 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3dc:	f7fe f8a5 	bl	800a52a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3e0:	e026      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d209      	bcs.n	800c40e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7fe f8b3 	bl	800a572 <vListInsert>
}
 800c40c:	e010      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3304      	adds	r3, #4
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fe f8a9 	bl	800a572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d202      	bcs.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c42a:	4a08      	ldr	r2, [pc, #32]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20001340 	.word	0x20001340
 800c43c:	20000e68 	.word	0x20000e68
 800c440:	20001328 	.word	0x20001328
 800c444:	200012f8 	.word	0x200012f8
 800c448:	200012f4 	.word	0x200012f4
 800c44c:	2000135c 	.word	0x2000135c

0800c450 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c45a:	f000 fb07 	bl	800ca6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c45e:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <xTimerCreateTimerTask+0x80>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d021      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe f80f 	bl	800a49c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	9202      	str	r2, [sp, #8]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	2302      	movs	r3, #2
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2300      	movs	r3, #0
 800c48e:	460a      	mov	r2, r1
 800c490:	4910      	ldr	r1, [pc, #64]	; (800c4d4 <xTimerCreateTimerTask+0x84>)
 800c492:	4811      	ldr	r0, [pc, #68]	; (800c4d8 <xTimerCreateTimerTask+0x88>)
 800c494:	f7fe ffd0 	bl	800b438 <xTaskCreateStatic>
 800c498:	4603      	mov	r3, r0
 800c49a:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c49c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4c6:	697b      	ldr	r3, [r7, #20]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20001398 	.word	0x20001398
 800c4d4:	08012d54 	.word	0x08012d54
 800c4d8:	0800c615 	.word	0x0800c615
 800c4dc:	2000139c 	.word	0x2000139c

0800c4e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08a      	sub	sp, #40	; 0x28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	623b      	str	r3, [r7, #32]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c50e:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <xTimerGenericCommand+0x98>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d02a      	beq.n	800c56c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2b05      	cmp	r3, #5
 800c526:	dc18      	bgt.n	800c55a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c528:	f7ff fdb4 	bl	800c094 <xTaskGetSchedulerState>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d109      	bne.n	800c546 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <xTimerGenericCommand+0x98>)
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f107 0110 	add.w	r1, r7, #16
 800c53a:	2300      	movs	r3, #0
 800c53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53e:	f7fe fa6f 	bl	800aa20 <xQueueGenericSend>
 800c542:	6278      	str	r0, [r7, #36]	; 0x24
 800c544:	e012      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c546:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <xTimerGenericCommand+0x98>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f107 0110 	add.w	r1, r7, #16
 800c54e:	2300      	movs	r3, #0
 800c550:	2200      	movs	r2, #0
 800c552:	f7fe fa65 	bl	800aa20 <xQueueGenericSend>
 800c556:	6278      	str	r0, [r7, #36]	; 0x24
 800c558:	e008      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <xTimerGenericCommand+0x98>)
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f107 0110 	add.w	r1, r7, #16
 800c562:	2300      	movs	r3, #0
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	f7fe fb59 	bl	800ac1c <xQueueGenericSendFromISR>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3728      	adds	r7, #40	; 0x28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001398 	.word	0x20001398

0800c57c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af02      	add	r7, sp, #8
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c586:	4b22      	ldr	r3, [pc, #136]	; (800c610 <prvProcessExpiredTimer+0x94>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3304      	adds	r3, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe f825 	bl	800a5e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d022      	beq.n	800c5ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	699a      	ldr	r2, [r3, #24]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	18d1      	adds	r1, r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	6978      	ldr	r0, [r7, #20]
 800c5b6:	f000 f8d1 	bl	800c75c <prvInsertTimerInActiveList>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01f      	beq.n	800c600 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f7ff ff88 	bl	800c4e0 <xTimerGenericCommand>
 800c5d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d113      	bne.n	800c600 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	60fb      	str	r3, [r7, #12]
}
 800c5ea:	bf00      	nop
 800c5ec:	e7fe      	b.n	800c5ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	6978      	ldr	r0, [r7, #20]
 800c606:	4798      	blx	r3
}
 800c608:	bf00      	nop
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20001390 	.word	0x20001390

0800c614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c61c:	f107 0308 	add.w	r3, r7, #8
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f857 	bl	800c6d4 <prvGetNextExpireTime>
 800c626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f803 	bl	800c638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c632:	f000 f8d5 	bl	800c7e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c636:	e7f1      	b.n	800c61c <prvTimerTask+0x8>

0800c638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c642:	f7ff f935 	bl	800b8b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 f866 	bl	800c71c <prvSampleTimeNow>
 800c650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d130      	bne.n	800c6ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	d806      	bhi.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c666:	f7ff f931 	bl	800b8cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c66a:	68f9      	ldr	r1, [r7, #12]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff ff85 	bl	800c57c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c672:	e024      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d008      	beq.n	800c68c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c67a:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <prvProcessTimerOrBlockTask+0x90>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <prvProcessTimerOrBlockTask+0x50>
 800c684:	2301      	movs	r3, #1
 800c686:	e000      	b.n	800c68a <prvProcessTimerOrBlockTask+0x52>
 800c688:	2300      	movs	r3, #0
 800c68a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c68c:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <prvProcessTimerOrBlockTask+0x94>)
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	f7fe fe99 	bl	800b3d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c69e:	f7ff f915 	bl	800b8cc <xTaskResumeAll>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <prvProcessTimerOrBlockTask+0x98>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
}
 800c6b8:	e001      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6ba:	f7ff f907 	bl	800b8cc <xTaskResumeAll>
}
 800c6be:	bf00      	nop
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20001394 	.word	0x20001394
 800c6cc:	20001398 	.word	0x20001398
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <prvGetNextExpireTime+0x16>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	e000      	b.n	800c6ec <prvGetNextExpireTime+0x18>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d105      	bne.n	800c704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e001      	b.n	800c708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20001390 	.word	0x20001390

0800c71c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c724:	f7ff f970 	bl	800ba08 <xTaskGetTickCount>
 800c728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	429a      	cmp	r2, r3
 800c732:	d205      	bcs.n	800c740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c734:	f000 f936 	bl	800c9a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e002      	b.n	800c746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c746:	4a04      	ldr	r2, [pc, #16]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	200013a0 	.word	0x200013a0

0800c75c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d812      	bhi.n	800c7a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d302      	bcc.n	800c796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c790:	2301      	movs	r3, #1
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	e01b      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c796:	4b10      	ldr	r3, [pc, #64]	; (800c7d8 <prvInsertTimerInActiveList+0x7c>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fd fee6 	bl	800a572 <vListInsert>
 800c7a6:	e012      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d206      	bcs.n	800c7be <prvInsertTimerInActiveList+0x62>
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d302      	bcc.n	800c7be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	e007      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <prvInsertTimerInActiveList+0x80>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7fd fed2 	bl	800a572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7ce:	697b      	ldr	r3, [r7, #20]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20001394 	.word	0x20001394
 800c7dc:	20001390 	.word	0x20001390

0800c7e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08e      	sub	sp, #56	; 0x38
 800c7e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e6:	e0ca      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da18      	bge.n	800c820 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ee:	1d3b      	adds	r3, r7, #4
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c816:	6850      	ldr	r0, [r2, #4]
 800c818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c81a:	6892      	ldr	r2, [r2, #8]
 800c81c:	4611      	mov	r1, r2
 800c81e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f2c0 80aa 	blt.w	800c97c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d004      	beq.n	800c83e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd fed3 	bl	800a5e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c83e:	463b      	mov	r3, r7
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff ff6b 	bl	800c71c <prvSampleTimeNow>
 800c846:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b09      	cmp	r3, #9
 800c84c:	f200 8097 	bhi.w	800c97e <prvProcessReceivedCommands+0x19e>
 800c850:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <prvProcessReceivedCommands+0x78>)
 800c852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c856:	bf00      	nop
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c881 	.word	0x0800c881
 800c860:	0800c881 	.word	0x0800c881
 800c864:	0800c8f5 	.word	0x0800c8f5
 800c868:	0800c909 	.word	0x0800c909
 800c86c:	0800c953 	.word	0x0800c953
 800c870:	0800c881 	.word	0x0800c881
 800c874:	0800c881 	.word	0x0800c881
 800c878:	0800c8f5 	.word	0x0800c8f5
 800c87c:	0800c909 	.word	0x0800c909
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	18d1      	adds	r1, r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a0:	f7ff ff5c 	bl	800c75c <prvInsertTimerInActiveList>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d069      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d05e      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	441a      	add	r2, r3
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d2:	f7ff fe05 	bl	800c4e0 <xTimerGenericCommand>
 800c8d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d14f      	bne.n	800c97e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	61bb      	str	r3, [r7, #24]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c906:	e03a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	617b      	str	r3, [r7, #20]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	18d1      	adds	r1, r2, r3
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c94c:	f7ff ff06 	bl	800c75c <prvInsertTimerInActiveList>
					break;
 800c950:	e015      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c958:	f003 0302 	and.w	r3, r3, #2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c962:	f000 fbdd 	bl	800d120 <vPortFree>
 800c966:	e00a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96e:	f023 0301 	bic.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c97a:	e000      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c97c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97e:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <prvProcessReceivedCommands+0x1c0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	1d39      	adds	r1, r7, #4
 800c984:	2200      	movs	r2, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe f9e4 	bl	800ad54 <xQueueReceive>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f47f af2a 	bne.w	800c7e8 <prvProcessReceivedCommands+0x8>
	}
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	3730      	adds	r7, #48	; 0x30
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20001398 	.word	0x20001398

0800c9a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9aa:	e048      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fe0d 	bl	800a5e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d02e      	beq.n	800ca3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d90e      	bls.n	800ca10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fd fdb2 	bl	800a572 <vListInsert>
 800ca0e:	e016      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fd60 	bl	800c4e0 <xTimerGenericCommand>
 800ca20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	603b      	str	r3, [r7, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1b1      	bne.n	800c9ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca56:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6013      	str	r3, [r2, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20001390 	.word	0x20001390
 800ca68:	20001394 	.word	0x20001394

0800ca6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca72:	f000 f967 	bl	800cd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d120      	bne.n	800cac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca7e:	4814      	ldr	r0, [pc, #80]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca80:	f7fd fd26 	bl	800a4d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca84:	4813      	ldr	r0, [pc, #76]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca86:	f7fd fd23 	bl	800a4d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca8a:	4b13      	ldr	r3, [pc, #76]	; (800cad8 <prvCheckForValidListAndQueue+0x6c>)
 800ca8c:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca90:	4b12      	ldr	r3, [pc, #72]	; (800cadc <prvCheckForValidListAndQueue+0x70>)
 800ca92:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <prvCheckForValidListAndQueue+0x74>)
 800ca9c:	4a11      	ldr	r2, [pc, #68]	; (800cae4 <prvCheckForValidListAndQueue+0x78>)
 800ca9e:	2110      	movs	r1, #16
 800caa0:	200a      	movs	r0, #10
 800caa2:	f7fd fe31 	bl	800a708 <xQueueGenericCreateStatic>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4a08      	ldr	r2, [pc, #32]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	490b      	ldr	r1, [pc, #44]	; (800cae8 <prvCheckForValidListAndQueue+0x7c>)
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fc5e 	bl	800b37c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cac0:	f000 f970 	bl	800cda4 <vPortExitCritical>
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20001398 	.word	0x20001398
 800cad0:	20001368 	.word	0x20001368
 800cad4:	2000137c 	.word	0x2000137c
 800cad8:	20001390 	.word	0x20001390
 800cadc:	20001394 	.word	0x20001394
 800cae0:	20001444 	.word	0x20001444
 800cae4:	200013a4 	.word	0x200013a4
 800cae8:	08012d5c 	.word	0x08012d5c

0800caec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3b04      	subs	r3, #4
 800cafc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f023 0201 	bic.w	r2, r3, #1
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb1c:	4a0c      	ldr	r2, [pc, #48]	; (800cb50 <pxPortInitialiseStack+0x64>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b14      	subs	r3, #20
 800cb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3b04      	subs	r3, #4
 800cb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f06f 0202 	mvn.w	r2, #2
 800cb3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b20      	subs	r3, #32
 800cb40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	0800cb55 	.word	0x0800cb55

0800cb54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5e:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <prvTaskExitError+0x54>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb66:	d00a      	beq.n	800cb7e <prvTaskExitError+0x2a>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	e7fe      	b.n	800cb7c <prvTaskExitError+0x28>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	60bb      	str	r3, [r7, #8]
}
 800cb90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb92:	bf00      	nop
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0fc      	beq.n	800cb94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	200000cc 	.word	0x200000cc
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20000e68 	.word	0x20000e68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b46      	ldr	r3, [pc, #280]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a46      	ldr	r2, [pc, #280]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc26:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3f      	ldr	r2, [pc, #252]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc46:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xPortStartScheduler+0x130>)
 800cc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc74:	e009      	b.n	800cc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4a2d      	ldr	r2, [pc, #180]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b80      	cmp	r3, #128	; 0x80
 800cc94:	d0ef      	beq.n	800cc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0307 	rsb	r3, r3, #7
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d00a      	beq.n	800ccb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccca:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <xPortStartScheduler+0x134>)
 800cccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccee:	f000 f8dd 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <xPortStartScheduler+0x13c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf8:	f000 f8fc 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <xPortStartScheduler+0x140>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <xPortStartScheduler+0x140>)
 800cd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd08:	f7ff ff66 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd0c:	f7fe ff46 	bl	800bb9c <vTaskSwitchContext>
	prvTaskExitError();
 800cd10:	f7ff ff20 	bl	800cb54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed00 	.word	0xe000ed00
 800cd24:	410fc271 	.word	0x410fc271
 800cd28:	410fc270 	.word	0x410fc270
 800cd2c:	e000e400 	.word	0xe000e400
 800cd30:	20001494 	.word	0x20001494
 800cd34:	20001498 	.word	0x20001498
 800cd38:	e000ed20 	.word	0xe000ed20
 800cd3c:	200000cc 	.word	0x200000cc
 800cd40:	e000ef34 	.word	0xe000ef34

0800cd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	607b      	str	r3, [r7, #4]
}
 800cd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <vPortEnterCritical+0x5c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <vPortEnterCritical+0x4a>
	}
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	200000cc 	.word	0x200000cc
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <vPortExitCritical+0x24>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	607b      	str	r3, [r7, #4]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d105      	bne.n	800cde6 <vPortExitCritical+0x42>
 800cdda:	2300      	movs	r3, #0
 800cddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f383 8811 	msr	BASEPRI, r3
}
 800cde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	200000cc 	.word	0x200000cc
	...

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe feb4 	bl	800bb9c <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	20000e68 	.word	0x20000e68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fdd1 	bl	800ba28 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	200000c0 	.word	0x200000c0
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d914      	bls.n	800cf44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <vPortValidateInterruptPriority+0x70>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20a      	bcs.n	800cf44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d90a      	bls.n	800cf6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <vPortValidateInterruptPriority+0x60>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	e000e3f0 	.word	0xe000e3f0
 800cf7c:	20001494 	.word	0x20001494
 800cf80:	e000ed0c 	.word	0xe000ed0c
 800cf84:	20001498 	.word	0x20001498

0800cf88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf94:	f7fe fc8c 	bl	800b8b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf98:	4b5b      	ldr	r3, [pc, #364]	; (800d108 <pvPortMalloc+0x180>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa0:	f000 f920 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa4:	4b59      	ldr	r3, [pc, #356]	; (800d10c <pvPortMalloc+0x184>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8093 	bne.w	800d0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01d      	beq.n	800cff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d06e      	beq.n	800d0d8 <pvPortMalloc+0x150>
 800cffa:	4b45      	ldr	r3, [pc, #276]	; (800d110 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d869      	bhi.n	800d0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d004:	4b43      	ldr	r3, [pc, #268]	; (800d114 <pvPortMalloc+0x18c>)
 800d006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d008:	4b42      	ldr	r3, [pc, #264]	; (800d114 <pvPortMalloc+0x18c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	e004      	b.n	800d01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <pvPortMalloc+0xa4>
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f1      	bne.n	800d010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <pvPortMalloc+0x180>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d032:	429a      	cmp	r2, r3
 800d034:	d050      	beq.n	800d0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2208      	movs	r2, #8
 800d03c:	4413      	add	r3, r2
 800d03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2308      	movs	r3, #8
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	d91f      	bls.n	800d098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <pvPortMalloc+0xf8>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	613b      	str	r3, [r7, #16]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f000 f908 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pvPortMalloc+0x188>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	; (800d110 <pvPortMalloc+0x188>)
 800d0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <pvPortMalloc+0x188>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <pvPortMalloc+0x190>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d203      	bcs.n	800d0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <pvPortMalloc+0x188>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <pvPortMalloc+0x190>)
 800d0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x184>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x194>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4a11      	ldr	r2, [pc, #68]	; (800d11c <pvPortMalloc+0x194>)
 800d0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0d8:	f7fe fbf8 	bl	800b8cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <pvPortMalloc+0x174>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60fb      	str	r3, [r7, #12]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <pvPortMalloc+0x172>
	return pvReturn;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	; 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	200050a4 	.word	0x200050a4
 800d10c:	200050b8 	.word	0x200050b8
 800d110:	200050a8 	.word	0x200050a8
 800d114:	2000509c 	.word	0x2000509c
 800d118:	200050ac 	.word	0x200050ac
 800d11c:	200050b0 	.word	0x200050b0

0800d120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d04d      	beq.n	800d1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d132:	2308      	movs	r3, #8
 800d134:	425b      	negs	r3, r3
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vPortFree+0xb8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vPortFree+0x44>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <vPortFree+0x62>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <vPortFree+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01e      	beq.n	800d1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11a      	bne.n	800d1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <vPortFree+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1a8:	f7fe fb82 	bl	800b8b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <vPortFree+0xbc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <vPortFree+0xbc>)
 800d1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f000 f874 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xc0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xc0>)
 800d1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ca:	f7fe fb7f 	bl	800b8cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200050b8 	.word	0x200050b8
 800d1dc:	200050a8 	.word	0x200050a8
 800d1e0:	200050b4 	.word	0x200050b4

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	2000149c 	.word	0x2000149c
 800d294:	2000509c 	.word	0x2000509c
 800d298:	200050a4 	.word	0x200050a4
 800d29c:	200050ac 	.word	0x200050ac
 800d2a0:	200050a8 	.word	0x200050a8
 800d2a4:	200050b8 	.word	0x200050b8

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	2000509c 	.word	0x2000509c
 800d358:	200050a4 	.word	0x200050a4

0800d35c <__errno>:
 800d35c:	4b01      	ldr	r3, [pc, #4]	; (800d364 <__errno+0x8>)
 800d35e:	6818      	ldr	r0, [r3, #0]
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	200000d0 	.word	0x200000d0

0800d368 <__libc_init_array>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4d0d      	ldr	r5, [pc, #52]	; (800d3a0 <__libc_init_array+0x38>)
 800d36c:	4c0d      	ldr	r4, [pc, #52]	; (800d3a4 <__libc_init_array+0x3c>)
 800d36e:	1b64      	subs	r4, r4, r5
 800d370:	10a4      	asrs	r4, r4, #2
 800d372:	2600      	movs	r6, #0
 800d374:	42a6      	cmp	r6, r4
 800d376:	d109      	bne.n	800d38c <__libc_init_array+0x24>
 800d378:	4d0b      	ldr	r5, [pc, #44]	; (800d3a8 <__libc_init_array+0x40>)
 800d37a:	4c0c      	ldr	r4, [pc, #48]	; (800d3ac <__libc_init_array+0x44>)
 800d37c:	f005 fc1c 	bl	8012bb8 <_init>
 800d380:	1b64      	subs	r4, r4, r5
 800d382:	10a4      	asrs	r4, r4, #2
 800d384:	2600      	movs	r6, #0
 800d386:	42a6      	cmp	r6, r4
 800d388:	d105      	bne.n	800d396 <__libc_init_array+0x2e>
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d390:	4798      	blx	r3
 800d392:	3601      	adds	r6, #1
 800d394:	e7ee      	b.n	800d374 <__libc_init_array+0xc>
 800d396:	f855 3b04 	ldr.w	r3, [r5], #4
 800d39a:	4798      	blx	r3
 800d39c:	3601      	adds	r6, #1
 800d39e:	e7f2      	b.n	800d386 <__libc_init_array+0x1e>
 800d3a0:	08013580 	.word	0x08013580
 800d3a4:	08013580 	.word	0x08013580
 800d3a8:	08013580 	.word	0x08013580
 800d3ac:	08013584 	.word	0x08013584

0800d3b0 <memcpy>:
 800d3b0:	440a      	add	r2, r1
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3b8:	d100      	bne.n	800d3bc <memcpy+0xc>
 800d3ba:	4770      	bx	lr
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3c6:	4291      	cmp	r1, r2
 800d3c8:	d1f9      	bne.n	800d3be <memcpy+0xe>
 800d3ca:	bd10      	pop	{r4, pc}

0800d3cc <memset>:
 800d3cc:	4402      	add	r2, r0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d100      	bne.n	800d3d6 <memset+0xa>
 800d3d4:	4770      	bx	lr
 800d3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3da:	e7f9      	b.n	800d3d0 <memset+0x4>

0800d3dc <__cvt>:
 800d3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	ec55 4b10 	vmov	r4, r5, d0
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	460e      	mov	r6, r1
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	462b      	mov	r3, r5
 800d3ec:	bfbb      	ittet	lt
 800d3ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d3f2:	461d      	movlt	r5, r3
 800d3f4:	2300      	movge	r3, #0
 800d3f6:	232d      	movlt	r3, #45	; 0x2d
 800d3f8:	700b      	strb	r3, [r1, #0]
 800d3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d400:	4691      	mov	r9, r2
 800d402:	f023 0820 	bic.w	r8, r3, #32
 800d406:	bfbc      	itt	lt
 800d408:	4622      	movlt	r2, r4
 800d40a:	4614      	movlt	r4, r2
 800d40c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d410:	d005      	beq.n	800d41e <__cvt+0x42>
 800d412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d416:	d100      	bne.n	800d41a <__cvt+0x3e>
 800d418:	3601      	adds	r6, #1
 800d41a:	2102      	movs	r1, #2
 800d41c:	e000      	b.n	800d420 <__cvt+0x44>
 800d41e:	2103      	movs	r1, #3
 800d420:	ab03      	add	r3, sp, #12
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	ab02      	add	r3, sp, #8
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	ec45 4b10 	vmov	d0, r4, r5
 800d42c:	4653      	mov	r3, sl
 800d42e:	4632      	mov	r2, r6
 800d430:	f001 fe56 	bl	800f0e0 <_dtoa_r>
 800d434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d438:	4607      	mov	r7, r0
 800d43a:	d102      	bne.n	800d442 <__cvt+0x66>
 800d43c:	f019 0f01 	tst.w	r9, #1
 800d440:	d022      	beq.n	800d488 <__cvt+0xac>
 800d442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d446:	eb07 0906 	add.w	r9, r7, r6
 800d44a:	d110      	bne.n	800d46e <__cvt+0x92>
 800d44c:	783b      	ldrb	r3, [r7, #0]
 800d44e:	2b30      	cmp	r3, #48	; 0x30
 800d450:	d10a      	bne.n	800d468 <__cvt+0x8c>
 800d452:	2200      	movs	r2, #0
 800d454:	2300      	movs	r3, #0
 800d456:	4620      	mov	r0, r4
 800d458:	4629      	mov	r1, r5
 800d45a:	f7f3 fb4d 	bl	8000af8 <__aeabi_dcmpeq>
 800d45e:	b918      	cbnz	r0, 800d468 <__cvt+0x8c>
 800d460:	f1c6 0601 	rsb	r6, r6, #1
 800d464:	f8ca 6000 	str.w	r6, [sl]
 800d468:	f8da 3000 	ldr.w	r3, [sl]
 800d46c:	4499      	add	r9, r3
 800d46e:	2200      	movs	r2, #0
 800d470:	2300      	movs	r3, #0
 800d472:	4620      	mov	r0, r4
 800d474:	4629      	mov	r1, r5
 800d476:	f7f3 fb3f 	bl	8000af8 <__aeabi_dcmpeq>
 800d47a:	b108      	cbz	r0, 800d480 <__cvt+0xa4>
 800d47c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d480:	2230      	movs	r2, #48	; 0x30
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	454b      	cmp	r3, r9
 800d486:	d307      	bcc.n	800d498 <__cvt+0xbc>
 800d488:	9b03      	ldr	r3, [sp, #12]
 800d48a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d48c:	1bdb      	subs	r3, r3, r7
 800d48e:	4638      	mov	r0, r7
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	b004      	add	sp, #16
 800d494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d498:	1c59      	adds	r1, r3, #1
 800d49a:	9103      	str	r1, [sp, #12]
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e7f0      	b.n	800d482 <__cvt+0xa6>

0800d4a0 <__exponent>:
 800d4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2900      	cmp	r1, #0
 800d4a6:	bfb8      	it	lt
 800d4a8:	4249      	neglt	r1, r1
 800d4aa:	f803 2b02 	strb.w	r2, [r3], #2
 800d4ae:	bfb4      	ite	lt
 800d4b0:	222d      	movlt	r2, #45	; 0x2d
 800d4b2:	222b      	movge	r2, #43	; 0x2b
 800d4b4:	2909      	cmp	r1, #9
 800d4b6:	7042      	strb	r2, [r0, #1]
 800d4b8:	dd2a      	ble.n	800d510 <__exponent+0x70>
 800d4ba:	f10d 0407 	add.w	r4, sp, #7
 800d4be:	46a4      	mov	ip, r4
 800d4c0:	270a      	movs	r7, #10
 800d4c2:	46a6      	mov	lr, r4
 800d4c4:	460a      	mov	r2, r1
 800d4c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d4ca:	fb07 1516 	mls	r5, r7, r6, r1
 800d4ce:	3530      	adds	r5, #48	; 0x30
 800d4d0:	2a63      	cmp	r2, #99	; 0x63
 800d4d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d4da:	4631      	mov	r1, r6
 800d4dc:	dcf1      	bgt.n	800d4c2 <__exponent+0x22>
 800d4de:	3130      	adds	r1, #48	; 0x30
 800d4e0:	f1ae 0502 	sub.w	r5, lr, #2
 800d4e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d4e8:	1c44      	adds	r4, r0, #1
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4561      	cmp	r1, ip
 800d4ee:	d30a      	bcc.n	800d506 <__exponent+0x66>
 800d4f0:	f10d 0209 	add.w	r2, sp, #9
 800d4f4:	eba2 020e 	sub.w	r2, r2, lr
 800d4f8:	4565      	cmp	r5, ip
 800d4fa:	bf88      	it	hi
 800d4fc:	2200      	movhi	r2, #0
 800d4fe:	4413      	add	r3, r2
 800d500:	1a18      	subs	r0, r3, r0
 800d502:	b003      	add	sp, #12
 800d504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d50a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d50e:	e7ed      	b.n	800d4ec <__exponent+0x4c>
 800d510:	2330      	movs	r3, #48	; 0x30
 800d512:	3130      	adds	r1, #48	; 0x30
 800d514:	7083      	strb	r3, [r0, #2]
 800d516:	70c1      	strb	r1, [r0, #3]
 800d518:	1d03      	adds	r3, r0, #4
 800d51a:	e7f1      	b.n	800d500 <__exponent+0x60>

0800d51c <_printf_float>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	ed2d 8b02 	vpush	{d8}
 800d524:	b08d      	sub	sp, #52	; 0x34
 800d526:	460c      	mov	r4, r1
 800d528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d52c:	4616      	mov	r6, r2
 800d52e:	461f      	mov	r7, r3
 800d530:	4605      	mov	r5, r0
 800d532:	f002 ff33 	bl	801039c <_localeconv_r>
 800d536:	f8d0 a000 	ldr.w	sl, [r0]
 800d53a:	4650      	mov	r0, sl
 800d53c:	f7f2 fe5a 	bl	80001f4 <strlen>
 800d540:	2300      	movs	r3, #0
 800d542:	930a      	str	r3, [sp, #40]	; 0x28
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	f8d8 3000 	ldr.w	r3, [r8]
 800d54c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d550:	3307      	adds	r3, #7
 800d552:	f023 0307 	bic.w	r3, r3, #7
 800d556:	f103 0208 	add.w	r2, r3, #8
 800d55a:	f8c8 2000 	str.w	r2, [r8]
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d566:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d56a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d56e:	9307      	str	r3, [sp, #28]
 800d570:	f8cd 8018 	str.w	r8, [sp, #24]
 800d574:	ee08 0a10 	vmov	s16, r0
 800d578:	4b9f      	ldr	r3, [pc, #636]	; (800d7f8 <_printf_float+0x2dc>)
 800d57a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295
 800d582:	f7f3 faeb 	bl	8000b5c <__aeabi_dcmpun>
 800d586:	bb88      	cbnz	r0, 800d5ec <_printf_float+0xd0>
 800d588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d58c:	4b9a      	ldr	r3, [pc, #616]	; (800d7f8 <_printf_float+0x2dc>)
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	f7f3 fac5 	bl	8000b20 <__aeabi_dcmple>
 800d596:	bb48      	cbnz	r0, 800d5ec <_printf_float+0xd0>
 800d598:	2200      	movs	r2, #0
 800d59a:	2300      	movs	r3, #0
 800d59c:	4640      	mov	r0, r8
 800d59e:	4649      	mov	r1, r9
 800d5a0:	f7f3 fab4 	bl	8000b0c <__aeabi_dcmplt>
 800d5a4:	b110      	cbz	r0, 800d5ac <_printf_float+0x90>
 800d5a6:	232d      	movs	r3, #45	; 0x2d
 800d5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ac:	4b93      	ldr	r3, [pc, #588]	; (800d7fc <_printf_float+0x2e0>)
 800d5ae:	4894      	ldr	r0, [pc, #592]	; (800d800 <_printf_float+0x2e4>)
 800d5b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d5b4:	bf94      	ite	ls
 800d5b6:	4698      	movls	r8, r3
 800d5b8:	4680      	movhi	r8, r0
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	6123      	str	r3, [r4, #16]
 800d5be:	9b05      	ldr	r3, [sp, #20]
 800d5c0:	f023 0204 	bic.w	r2, r3, #4
 800d5c4:	6022      	str	r2, [r4, #0]
 800d5c6:	f04f 0900 	mov.w	r9, #0
 800d5ca:	9700      	str	r7, [sp, #0]
 800d5cc:	4633      	mov	r3, r6
 800d5ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 f9d8 	bl	800d988 <_printf_common>
 800d5d8:	3001      	adds	r0, #1
 800d5da:	f040 8090 	bne.w	800d6fe <_printf_float+0x1e2>
 800d5de:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e2:	b00d      	add	sp, #52	; 0x34
 800d5e4:	ecbd 8b02 	vpop	{d8}
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	464b      	mov	r3, r9
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	f7f3 fab2 	bl	8000b5c <__aeabi_dcmpun>
 800d5f8:	b140      	cbz	r0, 800d60c <_printf_float+0xf0>
 800d5fa:	464b      	mov	r3, r9
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	bfbc      	itt	lt
 800d600:	232d      	movlt	r3, #45	; 0x2d
 800d602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d606:	487f      	ldr	r0, [pc, #508]	; (800d804 <_printf_float+0x2e8>)
 800d608:	4b7f      	ldr	r3, [pc, #508]	; (800d808 <_printf_float+0x2ec>)
 800d60a:	e7d1      	b.n	800d5b0 <_printf_float+0x94>
 800d60c:	6863      	ldr	r3, [r4, #4]
 800d60e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d612:	9206      	str	r2, [sp, #24]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	d13f      	bne.n	800d698 <_printf_float+0x17c>
 800d618:	2306      	movs	r3, #6
 800d61a:	6063      	str	r3, [r4, #4]
 800d61c:	9b05      	ldr	r3, [sp, #20]
 800d61e:	6861      	ldr	r1, [r4, #4]
 800d620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d624:	2300      	movs	r3, #0
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	ab0a      	add	r3, sp, #40	; 0x28
 800d62a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d62e:	ab09      	add	r3, sp, #36	; 0x24
 800d630:	ec49 8b10 	vmov	d0, r8, r9
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	6022      	str	r2, [r4, #0]
 800d638:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d63c:	4628      	mov	r0, r5
 800d63e:	f7ff fecd 	bl	800d3dc <__cvt>
 800d642:	9b06      	ldr	r3, [sp, #24]
 800d644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d646:	2b47      	cmp	r3, #71	; 0x47
 800d648:	4680      	mov	r8, r0
 800d64a:	d108      	bne.n	800d65e <_printf_float+0x142>
 800d64c:	1cc8      	adds	r0, r1, #3
 800d64e:	db02      	blt.n	800d656 <_printf_float+0x13a>
 800d650:	6863      	ldr	r3, [r4, #4]
 800d652:	4299      	cmp	r1, r3
 800d654:	dd41      	ble.n	800d6da <_printf_float+0x1be>
 800d656:	f1ab 0b02 	sub.w	fp, fp, #2
 800d65a:	fa5f fb8b 	uxtb.w	fp, fp
 800d65e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d662:	d820      	bhi.n	800d6a6 <_printf_float+0x18a>
 800d664:	3901      	subs	r1, #1
 800d666:	465a      	mov	r2, fp
 800d668:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d66c:	9109      	str	r1, [sp, #36]	; 0x24
 800d66e:	f7ff ff17 	bl	800d4a0 <__exponent>
 800d672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d674:	1813      	adds	r3, r2, r0
 800d676:	2a01      	cmp	r2, #1
 800d678:	4681      	mov	r9, r0
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	dc02      	bgt.n	800d684 <_printf_float+0x168>
 800d67e:	6822      	ldr	r2, [r4, #0]
 800d680:	07d2      	lsls	r2, r2, #31
 800d682:	d501      	bpl.n	800d688 <_printf_float+0x16c>
 800d684:	3301      	adds	r3, #1
 800d686:	6123      	str	r3, [r4, #16]
 800d688:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d09c      	beq.n	800d5ca <_printf_float+0xae>
 800d690:	232d      	movs	r3, #45	; 0x2d
 800d692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d696:	e798      	b.n	800d5ca <_printf_float+0xae>
 800d698:	9a06      	ldr	r2, [sp, #24]
 800d69a:	2a47      	cmp	r2, #71	; 0x47
 800d69c:	d1be      	bne.n	800d61c <_printf_float+0x100>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1bc      	bne.n	800d61c <_printf_float+0x100>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e7b9      	b.n	800d61a <_printf_float+0xfe>
 800d6a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d6aa:	d118      	bne.n	800d6de <_printf_float+0x1c2>
 800d6ac:	2900      	cmp	r1, #0
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	dd0b      	ble.n	800d6ca <_printf_float+0x1ae>
 800d6b2:	6121      	str	r1, [r4, #16]
 800d6b4:	b913      	cbnz	r3, 800d6bc <_printf_float+0x1a0>
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	07d0      	lsls	r0, r2, #31
 800d6ba:	d502      	bpl.n	800d6c2 <_printf_float+0x1a6>
 800d6bc:	3301      	adds	r3, #1
 800d6be:	440b      	add	r3, r1
 800d6c0:	6123      	str	r3, [r4, #16]
 800d6c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d6c4:	f04f 0900 	mov.w	r9, #0
 800d6c8:	e7de      	b.n	800d688 <_printf_float+0x16c>
 800d6ca:	b913      	cbnz	r3, 800d6d2 <_printf_float+0x1b6>
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	07d2      	lsls	r2, r2, #31
 800d6d0:	d501      	bpl.n	800d6d6 <_printf_float+0x1ba>
 800d6d2:	3302      	adds	r3, #2
 800d6d4:	e7f4      	b.n	800d6c0 <_printf_float+0x1a4>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e7f2      	b.n	800d6c0 <_printf_float+0x1a4>
 800d6da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e0:	4299      	cmp	r1, r3
 800d6e2:	db05      	blt.n	800d6f0 <_printf_float+0x1d4>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	6121      	str	r1, [r4, #16]
 800d6e8:	07d8      	lsls	r0, r3, #31
 800d6ea:	d5ea      	bpl.n	800d6c2 <_printf_float+0x1a6>
 800d6ec:	1c4b      	adds	r3, r1, #1
 800d6ee:	e7e7      	b.n	800d6c0 <_printf_float+0x1a4>
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	bfd4      	ite	le
 800d6f4:	f1c1 0202 	rsble	r2, r1, #2
 800d6f8:	2201      	movgt	r2, #1
 800d6fa:	4413      	add	r3, r2
 800d6fc:	e7e0      	b.n	800d6c0 <_printf_float+0x1a4>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	055a      	lsls	r2, r3, #21
 800d702:	d407      	bmi.n	800d714 <_printf_float+0x1f8>
 800d704:	6923      	ldr	r3, [r4, #16]
 800d706:	4642      	mov	r2, r8
 800d708:	4631      	mov	r1, r6
 800d70a:	4628      	mov	r0, r5
 800d70c:	47b8      	blx	r7
 800d70e:	3001      	adds	r0, #1
 800d710:	d12c      	bne.n	800d76c <_printf_float+0x250>
 800d712:	e764      	b.n	800d5de <_printf_float+0xc2>
 800d714:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d718:	f240 80e0 	bls.w	800d8dc <_printf_float+0x3c0>
 800d71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d720:	2200      	movs	r2, #0
 800d722:	2300      	movs	r3, #0
 800d724:	f7f3 f9e8 	bl	8000af8 <__aeabi_dcmpeq>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d034      	beq.n	800d796 <_printf_float+0x27a>
 800d72c:	4a37      	ldr	r2, [pc, #220]	; (800d80c <_printf_float+0x2f0>)
 800d72e:	2301      	movs	r3, #1
 800d730:	4631      	mov	r1, r6
 800d732:	4628      	mov	r0, r5
 800d734:	47b8      	blx	r7
 800d736:	3001      	adds	r0, #1
 800d738:	f43f af51 	beq.w	800d5de <_printf_float+0xc2>
 800d73c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d740:	429a      	cmp	r2, r3
 800d742:	db02      	blt.n	800d74a <_printf_float+0x22e>
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	07d8      	lsls	r0, r3, #31
 800d748:	d510      	bpl.n	800d76c <_printf_float+0x250>
 800d74a:	ee18 3a10 	vmov	r3, s16
 800d74e:	4652      	mov	r2, sl
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	47b8      	blx	r7
 800d756:	3001      	adds	r0, #1
 800d758:	f43f af41 	beq.w	800d5de <_printf_float+0xc2>
 800d75c:	f04f 0800 	mov.w	r8, #0
 800d760:	f104 091a 	add.w	r9, r4, #26
 800d764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d766:	3b01      	subs	r3, #1
 800d768:	4543      	cmp	r3, r8
 800d76a:	dc09      	bgt.n	800d780 <_printf_float+0x264>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	079b      	lsls	r3, r3, #30
 800d770:	f100 8105 	bmi.w	800d97e <_printf_float+0x462>
 800d774:	68e0      	ldr	r0, [r4, #12]
 800d776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d778:	4298      	cmp	r0, r3
 800d77a:	bfb8      	it	lt
 800d77c:	4618      	movlt	r0, r3
 800d77e:	e730      	b.n	800d5e2 <_printf_float+0xc6>
 800d780:	2301      	movs	r3, #1
 800d782:	464a      	mov	r2, r9
 800d784:	4631      	mov	r1, r6
 800d786:	4628      	mov	r0, r5
 800d788:	47b8      	blx	r7
 800d78a:	3001      	adds	r0, #1
 800d78c:	f43f af27 	beq.w	800d5de <_printf_float+0xc2>
 800d790:	f108 0801 	add.w	r8, r8, #1
 800d794:	e7e6      	b.n	800d764 <_printf_float+0x248>
 800d796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dc39      	bgt.n	800d810 <_printf_float+0x2f4>
 800d79c:	4a1b      	ldr	r2, [pc, #108]	; (800d80c <_printf_float+0x2f0>)
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	47b8      	blx	r7
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	f43f af19 	beq.w	800d5de <_printf_float+0xc2>
 800d7ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	d102      	bne.n	800d7ba <_printf_float+0x29e>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	07d9      	lsls	r1, r3, #31
 800d7b8:	d5d8      	bpl.n	800d76c <_printf_float+0x250>
 800d7ba:	ee18 3a10 	vmov	r3, s16
 800d7be:	4652      	mov	r2, sl
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	47b8      	blx	r7
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	f43f af09 	beq.w	800d5de <_printf_float+0xc2>
 800d7cc:	f04f 0900 	mov.w	r9, #0
 800d7d0:	f104 0a1a 	add.w	sl, r4, #26
 800d7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d6:	425b      	negs	r3, r3
 800d7d8:	454b      	cmp	r3, r9
 800d7da:	dc01      	bgt.n	800d7e0 <_printf_float+0x2c4>
 800d7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7de:	e792      	b.n	800d706 <_printf_float+0x1ea>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	4652      	mov	r2, sl
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b8      	blx	r7
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	f43f aef7 	beq.w	800d5de <_printf_float+0xc2>
 800d7f0:	f109 0901 	add.w	r9, r9, #1
 800d7f4:	e7ee      	b.n	800d7d4 <_printf_float+0x2b8>
 800d7f6:	bf00      	nop
 800d7f8:	7fefffff 	.word	0x7fefffff
 800d7fc:	08013050 	.word	0x08013050
 800d800:	08013054 	.word	0x08013054
 800d804:	0801305c 	.word	0x0801305c
 800d808:	08013058 	.word	0x08013058
 800d80c:	08013451 	.word	0x08013451
 800d810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d814:	429a      	cmp	r2, r3
 800d816:	bfa8      	it	ge
 800d818:	461a      	movge	r2, r3
 800d81a:	2a00      	cmp	r2, #0
 800d81c:	4691      	mov	r9, r2
 800d81e:	dc37      	bgt.n	800d890 <_printf_float+0x374>
 800d820:	f04f 0b00 	mov.w	fp, #0
 800d824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d828:	f104 021a 	add.w	r2, r4, #26
 800d82c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d82e:	9305      	str	r3, [sp, #20]
 800d830:	eba3 0309 	sub.w	r3, r3, r9
 800d834:	455b      	cmp	r3, fp
 800d836:	dc33      	bgt.n	800d8a0 <_printf_float+0x384>
 800d838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d83c:	429a      	cmp	r2, r3
 800d83e:	db3b      	blt.n	800d8b8 <_printf_float+0x39c>
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	07da      	lsls	r2, r3, #31
 800d844:	d438      	bmi.n	800d8b8 <_printf_float+0x39c>
 800d846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d848:	9a05      	ldr	r2, [sp, #20]
 800d84a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d84c:	1a9a      	subs	r2, r3, r2
 800d84e:	eba3 0901 	sub.w	r9, r3, r1
 800d852:	4591      	cmp	r9, r2
 800d854:	bfa8      	it	ge
 800d856:	4691      	movge	r9, r2
 800d858:	f1b9 0f00 	cmp.w	r9, #0
 800d85c:	dc35      	bgt.n	800d8ca <_printf_float+0x3ae>
 800d85e:	f04f 0800 	mov.w	r8, #0
 800d862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d866:	f104 0a1a 	add.w	sl, r4, #26
 800d86a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	eba3 0309 	sub.w	r3, r3, r9
 800d874:	4543      	cmp	r3, r8
 800d876:	f77f af79 	ble.w	800d76c <_printf_float+0x250>
 800d87a:	2301      	movs	r3, #1
 800d87c:	4652      	mov	r2, sl
 800d87e:	4631      	mov	r1, r6
 800d880:	4628      	mov	r0, r5
 800d882:	47b8      	blx	r7
 800d884:	3001      	adds	r0, #1
 800d886:	f43f aeaa 	beq.w	800d5de <_printf_float+0xc2>
 800d88a:	f108 0801 	add.w	r8, r8, #1
 800d88e:	e7ec      	b.n	800d86a <_printf_float+0x34e>
 800d890:	4613      	mov	r3, r2
 800d892:	4631      	mov	r1, r6
 800d894:	4642      	mov	r2, r8
 800d896:	4628      	mov	r0, r5
 800d898:	47b8      	blx	r7
 800d89a:	3001      	adds	r0, #1
 800d89c:	d1c0      	bne.n	800d820 <_printf_float+0x304>
 800d89e:	e69e      	b.n	800d5de <_printf_float+0xc2>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	9205      	str	r2, [sp, #20]
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	f43f ae97 	beq.w	800d5de <_printf_float+0xc2>
 800d8b0:	9a05      	ldr	r2, [sp, #20]
 800d8b2:	f10b 0b01 	add.w	fp, fp, #1
 800d8b6:	e7b9      	b.n	800d82c <_printf_float+0x310>
 800d8b8:	ee18 3a10 	vmov	r3, s16
 800d8bc:	4652      	mov	r2, sl
 800d8be:	4631      	mov	r1, r6
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b8      	blx	r7
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d1be      	bne.n	800d846 <_printf_float+0x32a>
 800d8c8:	e689      	b.n	800d5de <_printf_float+0xc2>
 800d8ca:	9a05      	ldr	r2, [sp, #20]
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	4442      	add	r2, r8
 800d8d0:	4631      	mov	r1, r6
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	47b8      	blx	r7
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d1c1      	bne.n	800d85e <_printf_float+0x342>
 800d8da:	e680      	b.n	800d5de <_printf_float+0xc2>
 800d8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8de:	2a01      	cmp	r2, #1
 800d8e0:	dc01      	bgt.n	800d8e6 <_printf_float+0x3ca>
 800d8e2:	07db      	lsls	r3, r3, #31
 800d8e4:	d538      	bpl.n	800d958 <_printf_float+0x43c>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b8      	blx	r7
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f43f ae74 	beq.w	800d5de <_printf_float+0xc2>
 800d8f6:	ee18 3a10 	vmov	r3, s16
 800d8fa:	4652      	mov	r2, sl
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4628      	mov	r0, r5
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	f43f ae6b 	beq.w	800d5de <_printf_float+0xc2>
 800d908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d90c:	2200      	movs	r2, #0
 800d90e:	2300      	movs	r3, #0
 800d910:	f7f3 f8f2 	bl	8000af8 <__aeabi_dcmpeq>
 800d914:	b9d8      	cbnz	r0, 800d94e <_printf_float+0x432>
 800d916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d918:	f108 0201 	add.w	r2, r8, #1
 800d91c:	3b01      	subs	r3, #1
 800d91e:	4631      	mov	r1, r6
 800d920:	4628      	mov	r0, r5
 800d922:	47b8      	blx	r7
 800d924:	3001      	adds	r0, #1
 800d926:	d10e      	bne.n	800d946 <_printf_float+0x42a>
 800d928:	e659      	b.n	800d5de <_printf_float+0xc2>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4652      	mov	r2, sl
 800d92e:	4631      	mov	r1, r6
 800d930:	4628      	mov	r0, r5
 800d932:	47b8      	blx	r7
 800d934:	3001      	adds	r0, #1
 800d936:	f43f ae52 	beq.w	800d5de <_printf_float+0xc2>
 800d93a:	f108 0801 	add.w	r8, r8, #1
 800d93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d940:	3b01      	subs	r3, #1
 800d942:	4543      	cmp	r3, r8
 800d944:	dcf1      	bgt.n	800d92a <_printf_float+0x40e>
 800d946:	464b      	mov	r3, r9
 800d948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d94c:	e6dc      	b.n	800d708 <_printf_float+0x1ec>
 800d94e:	f04f 0800 	mov.w	r8, #0
 800d952:	f104 0a1a 	add.w	sl, r4, #26
 800d956:	e7f2      	b.n	800d93e <_printf_float+0x422>
 800d958:	2301      	movs	r3, #1
 800d95a:	4642      	mov	r2, r8
 800d95c:	e7df      	b.n	800d91e <_printf_float+0x402>
 800d95e:	2301      	movs	r3, #1
 800d960:	464a      	mov	r2, r9
 800d962:	4631      	mov	r1, r6
 800d964:	4628      	mov	r0, r5
 800d966:	47b8      	blx	r7
 800d968:	3001      	adds	r0, #1
 800d96a:	f43f ae38 	beq.w	800d5de <_printf_float+0xc2>
 800d96e:	f108 0801 	add.w	r8, r8, #1
 800d972:	68e3      	ldr	r3, [r4, #12]
 800d974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d976:	1a5b      	subs	r3, r3, r1
 800d978:	4543      	cmp	r3, r8
 800d97a:	dcf0      	bgt.n	800d95e <_printf_float+0x442>
 800d97c:	e6fa      	b.n	800d774 <_printf_float+0x258>
 800d97e:	f04f 0800 	mov.w	r8, #0
 800d982:	f104 0919 	add.w	r9, r4, #25
 800d986:	e7f4      	b.n	800d972 <_printf_float+0x456>

0800d988 <_printf_common>:
 800d988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d98c:	4616      	mov	r6, r2
 800d98e:	4699      	mov	r9, r3
 800d990:	688a      	ldr	r2, [r1, #8]
 800d992:	690b      	ldr	r3, [r1, #16]
 800d994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d998:	4293      	cmp	r3, r2
 800d99a:	bfb8      	it	lt
 800d99c:	4613      	movlt	r3, r2
 800d99e:	6033      	str	r3, [r6, #0]
 800d9a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9a4:	4607      	mov	r7, r0
 800d9a6:	460c      	mov	r4, r1
 800d9a8:	b10a      	cbz	r2, 800d9ae <_printf_common+0x26>
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	6033      	str	r3, [r6, #0]
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	0699      	lsls	r1, r3, #26
 800d9b2:	bf42      	ittt	mi
 800d9b4:	6833      	ldrmi	r3, [r6, #0]
 800d9b6:	3302      	addmi	r3, #2
 800d9b8:	6033      	strmi	r3, [r6, #0]
 800d9ba:	6825      	ldr	r5, [r4, #0]
 800d9bc:	f015 0506 	ands.w	r5, r5, #6
 800d9c0:	d106      	bne.n	800d9d0 <_printf_common+0x48>
 800d9c2:	f104 0a19 	add.w	sl, r4, #25
 800d9c6:	68e3      	ldr	r3, [r4, #12]
 800d9c8:	6832      	ldr	r2, [r6, #0]
 800d9ca:	1a9b      	subs	r3, r3, r2
 800d9cc:	42ab      	cmp	r3, r5
 800d9ce:	dc26      	bgt.n	800da1e <_printf_common+0x96>
 800d9d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9d4:	1e13      	subs	r3, r2, #0
 800d9d6:	6822      	ldr	r2, [r4, #0]
 800d9d8:	bf18      	it	ne
 800d9da:	2301      	movne	r3, #1
 800d9dc:	0692      	lsls	r2, r2, #26
 800d9de:	d42b      	bmi.n	800da38 <_printf_common+0xb0>
 800d9e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	47c0      	blx	r8
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d01e      	beq.n	800da2c <_printf_common+0xa4>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	68e5      	ldr	r5, [r4, #12]
 800d9f2:	6832      	ldr	r2, [r6, #0]
 800d9f4:	f003 0306 	and.w	r3, r3, #6
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	bf08      	it	eq
 800d9fc:	1aad      	subeq	r5, r5, r2
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	6922      	ldr	r2, [r4, #16]
 800da02:	bf0c      	ite	eq
 800da04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da08:	2500      	movne	r5, #0
 800da0a:	4293      	cmp	r3, r2
 800da0c:	bfc4      	itt	gt
 800da0e:	1a9b      	subgt	r3, r3, r2
 800da10:	18ed      	addgt	r5, r5, r3
 800da12:	2600      	movs	r6, #0
 800da14:	341a      	adds	r4, #26
 800da16:	42b5      	cmp	r5, r6
 800da18:	d11a      	bne.n	800da50 <_printf_common+0xc8>
 800da1a:	2000      	movs	r0, #0
 800da1c:	e008      	b.n	800da30 <_printf_common+0xa8>
 800da1e:	2301      	movs	r3, #1
 800da20:	4652      	mov	r2, sl
 800da22:	4649      	mov	r1, r9
 800da24:	4638      	mov	r0, r7
 800da26:	47c0      	blx	r8
 800da28:	3001      	adds	r0, #1
 800da2a:	d103      	bne.n	800da34 <_printf_common+0xac>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da34:	3501      	adds	r5, #1
 800da36:	e7c6      	b.n	800d9c6 <_printf_common+0x3e>
 800da38:	18e1      	adds	r1, r4, r3
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	2030      	movs	r0, #48	; 0x30
 800da3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da42:	4422      	add	r2, r4
 800da44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da4c:	3302      	adds	r3, #2
 800da4e:	e7c7      	b.n	800d9e0 <_printf_common+0x58>
 800da50:	2301      	movs	r3, #1
 800da52:	4622      	mov	r2, r4
 800da54:	4649      	mov	r1, r9
 800da56:	4638      	mov	r0, r7
 800da58:	47c0      	blx	r8
 800da5a:	3001      	adds	r0, #1
 800da5c:	d0e6      	beq.n	800da2c <_printf_common+0xa4>
 800da5e:	3601      	adds	r6, #1
 800da60:	e7d9      	b.n	800da16 <_printf_common+0x8e>
	...

0800da64 <_printf_i>:
 800da64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da68:	7e0f      	ldrb	r7, [r1, #24]
 800da6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da6c:	2f78      	cmp	r7, #120	; 0x78
 800da6e:	4691      	mov	r9, r2
 800da70:	4680      	mov	r8, r0
 800da72:	460c      	mov	r4, r1
 800da74:	469a      	mov	sl, r3
 800da76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da7a:	d807      	bhi.n	800da8c <_printf_i+0x28>
 800da7c:	2f62      	cmp	r7, #98	; 0x62
 800da7e:	d80a      	bhi.n	800da96 <_printf_i+0x32>
 800da80:	2f00      	cmp	r7, #0
 800da82:	f000 80d8 	beq.w	800dc36 <_printf_i+0x1d2>
 800da86:	2f58      	cmp	r7, #88	; 0x58
 800da88:	f000 80a3 	beq.w	800dbd2 <_printf_i+0x16e>
 800da8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da94:	e03a      	b.n	800db0c <_printf_i+0xa8>
 800da96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da9a:	2b15      	cmp	r3, #21
 800da9c:	d8f6      	bhi.n	800da8c <_printf_i+0x28>
 800da9e:	a101      	add	r1, pc, #4	; (adr r1, 800daa4 <_printf_i+0x40>)
 800daa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daa4:	0800dafd 	.word	0x0800dafd
 800daa8:	0800db11 	.word	0x0800db11
 800daac:	0800da8d 	.word	0x0800da8d
 800dab0:	0800da8d 	.word	0x0800da8d
 800dab4:	0800da8d 	.word	0x0800da8d
 800dab8:	0800da8d 	.word	0x0800da8d
 800dabc:	0800db11 	.word	0x0800db11
 800dac0:	0800da8d 	.word	0x0800da8d
 800dac4:	0800da8d 	.word	0x0800da8d
 800dac8:	0800da8d 	.word	0x0800da8d
 800dacc:	0800da8d 	.word	0x0800da8d
 800dad0:	0800dc1d 	.word	0x0800dc1d
 800dad4:	0800db41 	.word	0x0800db41
 800dad8:	0800dbff 	.word	0x0800dbff
 800dadc:	0800da8d 	.word	0x0800da8d
 800dae0:	0800da8d 	.word	0x0800da8d
 800dae4:	0800dc3f 	.word	0x0800dc3f
 800dae8:	0800da8d 	.word	0x0800da8d
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800da8d 	.word	0x0800da8d
 800daf4:	0800da8d 	.word	0x0800da8d
 800daf8:	0800dc07 	.word	0x0800dc07
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	1d1a      	adds	r2, r3, #4
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	602a      	str	r2, [r5, #0]
 800db04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db0c:	2301      	movs	r3, #1
 800db0e:	e0a3      	b.n	800dc58 <_printf_i+0x1f4>
 800db10:	6820      	ldr	r0, [r4, #0]
 800db12:	6829      	ldr	r1, [r5, #0]
 800db14:	0606      	lsls	r6, r0, #24
 800db16:	f101 0304 	add.w	r3, r1, #4
 800db1a:	d50a      	bpl.n	800db32 <_printf_i+0xce>
 800db1c:	680e      	ldr	r6, [r1, #0]
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	2e00      	cmp	r6, #0
 800db22:	da03      	bge.n	800db2c <_printf_i+0xc8>
 800db24:	232d      	movs	r3, #45	; 0x2d
 800db26:	4276      	negs	r6, r6
 800db28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db2c:	485e      	ldr	r0, [pc, #376]	; (800dca8 <_printf_i+0x244>)
 800db2e:	230a      	movs	r3, #10
 800db30:	e019      	b.n	800db66 <_printf_i+0x102>
 800db32:	680e      	ldr	r6, [r1, #0]
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db3a:	bf18      	it	ne
 800db3c:	b236      	sxthne	r6, r6
 800db3e:	e7ef      	b.n	800db20 <_printf_i+0xbc>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1d19      	adds	r1, r3, #4
 800db46:	6029      	str	r1, [r5, #0]
 800db48:	0601      	lsls	r1, r0, #24
 800db4a:	d501      	bpl.n	800db50 <_printf_i+0xec>
 800db4c:	681e      	ldr	r6, [r3, #0]
 800db4e:	e002      	b.n	800db56 <_printf_i+0xf2>
 800db50:	0646      	lsls	r6, r0, #25
 800db52:	d5fb      	bpl.n	800db4c <_printf_i+0xe8>
 800db54:	881e      	ldrh	r6, [r3, #0]
 800db56:	4854      	ldr	r0, [pc, #336]	; (800dca8 <_printf_i+0x244>)
 800db58:	2f6f      	cmp	r7, #111	; 0x6f
 800db5a:	bf0c      	ite	eq
 800db5c:	2308      	moveq	r3, #8
 800db5e:	230a      	movne	r3, #10
 800db60:	2100      	movs	r1, #0
 800db62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db66:	6865      	ldr	r5, [r4, #4]
 800db68:	60a5      	str	r5, [r4, #8]
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	bfa2      	ittt	ge
 800db6e:	6821      	ldrge	r1, [r4, #0]
 800db70:	f021 0104 	bicge.w	r1, r1, #4
 800db74:	6021      	strge	r1, [r4, #0]
 800db76:	b90e      	cbnz	r6, 800db7c <_printf_i+0x118>
 800db78:	2d00      	cmp	r5, #0
 800db7a:	d04d      	beq.n	800dc18 <_printf_i+0x1b4>
 800db7c:	4615      	mov	r5, r2
 800db7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800db82:	fb03 6711 	mls	r7, r3, r1, r6
 800db86:	5dc7      	ldrb	r7, [r0, r7]
 800db88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db8c:	4637      	mov	r7, r6
 800db8e:	42bb      	cmp	r3, r7
 800db90:	460e      	mov	r6, r1
 800db92:	d9f4      	bls.n	800db7e <_printf_i+0x11a>
 800db94:	2b08      	cmp	r3, #8
 800db96:	d10b      	bne.n	800dbb0 <_printf_i+0x14c>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	07de      	lsls	r6, r3, #31
 800db9c:	d508      	bpl.n	800dbb0 <_printf_i+0x14c>
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	4299      	cmp	r1, r3
 800dba4:	bfde      	ittt	le
 800dba6:	2330      	movle	r3, #48	; 0x30
 800dba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbb0:	1b52      	subs	r2, r2, r5
 800dbb2:	6122      	str	r2, [r4, #16]
 800dbb4:	f8cd a000 	str.w	sl, [sp]
 800dbb8:	464b      	mov	r3, r9
 800dbba:	aa03      	add	r2, sp, #12
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	f7ff fee2 	bl	800d988 <_printf_common>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d14c      	bne.n	800dc62 <_printf_i+0x1fe>
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	b004      	add	sp, #16
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	4835      	ldr	r0, [pc, #212]	; (800dca8 <_printf_i+0x244>)
 800dbd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dbd8:	6829      	ldr	r1, [r5, #0]
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbe0:	6029      	str	r1, [r5, #0]
 800dbe2:	061d      	lsls	r5, r3, #24
 800dbe4:	d514      	bpl.n	800dc10 <_printf_i+0x1ac>
 800dbe6:	07df      	lsls	r7, r3, #31
 800dbe8:	bf44      	itt	mi
 800dbea:	f043 0320 	orrmi.w	r3, r3, #32
 800dbee:	6023      	strmi	r3, [r4, #0]
 800dbf0:	b91e      	cbnz	r6, 800dbfa <_printf_i+0x196>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	f023 0320 	bic.w	r3, r3, #32
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	2310      	movs	r3, #16
 800dbfc:	e7b0      	b.n	800db60 <_printf_i+0xfc>
 800dbfe:	6823      	ldr	r3, [r4, #0]
 800dc00:	f043 0320 	orr.w	r3, r3, #32
 800dc04:	6023      	str	r3, [r4, #0]
 800dc06:	2378      	movs	r3, #120	; 0x78
 800dc08:	4828      	ldr	r0, [pc, #160]	; (800dcac <_printf_i+0x248>)
 800dc0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc0e:	e7e3      	b.n	800dbd8 <_printf_i+0x174>
 800dc10:	0659      	lsls	r1, r3, #25
 800dc12:	bf48      	it	mi
 800dc14:	b2b6      	uxthmi	r6, r6
 800dc16:	e7e6      	b.n	800dbe6 <_printf_i+0x182>
 800dc18:	4615      	mov	r5, r2
 800dc1a:	e7bb      	b.n	800db94 <_printf_i+0x130>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	6826      	ldr	r6, [r4, #0]
 800dc20:	6961      	ldr	r1, [r4, #20]
 800dc22:	1d18      	adds	r0, r3, #4
 800dc24:	6028      	str	r0, [r5, #0]
 800dc26:	0635      	lsls	r5, r6, #24
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	d501      	bpl.n	800dc30 <_printf_i+0x1cc>
 800dc2c:	6019      	str	r1, [r3, #0]
 800dc2e:	e002      	b.n	800dc36 <_printf_i+0x1d2>
 800dc30:	0670      	lsls	r0, r6, #25
 800dc32:	d5fb      	bpl.n	800dc2c <_printf_i+0x1c8>
 800dc34:	8019      	strh	r1, [r3, #0]
 800dc36:	2300      	movs	r3, #0
 800dc38:	6123      	str	r3, [r4, #16]
 800dc3a:	4615      	mov	r5, r2
 800dc3c:	e7ba      	b.n	800dbb4 <_printf_i+0x150>
 800dc3e:	682b      	ldr	r3, [r5, #0]
 800dc40:	1d1a      	adds	r2, r3, #4
 800dc42:	602a      	str	r2, [r5, #0]
 800dc44:	681d      	ldr	r5, [r3, #0]
 800dc46:	6862      	ldr	r2, [r4, #4]
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7f2 fae0 	bl	8000210 <memchr>
 800dc50:	b108      	cbz	r0, 800dc56 <_printf_i+0x1f2>
 800dc52:	1b40      	subs	r0, r0, r5
 800dc54:	6060      	str	r0, [r4, #4]
 800dc56:	6863      	ldr	r3, [r4, #4]
 800dc58:	6123      	str	r3, [r4, #16]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc60:	e7a8      	b.n	800dbb4 <_printf_i+0x150>
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	462a      	mov	r2, r5
 800dc66:	4649      	mov	r1, r9
 800dc68:	4640      	mov	r0, r8
 800dc6a:	47d0      	blx	sl
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	d0ab      	beq.n	800dbc8 <_printf_i+0x164>
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	079b      	lsls	r3, r3, #30
 800dc74:	d413      	bmi.n	800dc9e <_printf_i+0x23a>
 800dc76:	68e0      	ldr	r0, [r4, #12]
 800dc78:	9b03      	ldr	r3, [sp, #12]
 800dc7a:	4298      	cmp	r0, r3
 800dc7c:	bfb8      	it	lt
 800dc7e:	4618      	movlt	r0, r3
 800dc80:	e7a4      	b.n	800dbcc <_printf_i+0x168>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4632      	mov	r2, r6
 800dc86:	4649      	mov	r1, r9
 800dc88:	4640      	mov	r0, r8
 800dc8a:	47d0      	blx	sl
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d09b      	beq.n	800dbc8 <_printf_i+0x164>
 800dc90:	3501      	adds	r5, #1
 800dc92:	68e3      	ldr	r3, [r4, #12]
 800dc94:	9903      	ldr	r1, [sp, #12]
 800dc96:	1a5b      	subs	r3, r3, r1
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	dcf2      	bgt.n	800dc82 <_printf_i+0x21e>
 800dc9c:	e7eb      	b.n	800dc76 <_printf_i+0x212>
 800dc9e:	2500      	movs	r5, #0
 800dca0:	f104 0619 	add.w	r6, r4, #25
 800dca4:	e7f5      	b.n	800dc92 <_printf_i+0x22e>
 800dca6:	bf00      	nop
 800dca8:	08013060 	.word	0x08013060
 800dcac:	08013071 	.word	0x08013071

0800dcb0 <_scanf_float>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	b087      	sub	sp, #28
 800dcb6:	4617      	mov	r7, r2
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	688b      	ldr	r3, [r1, #8]
 800dcbc:	1e5a      	subs	r2, r3, #1
 800dcbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dcc2:	bf83      	ittte	hi
 800dcc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dcc8:	195b      	addhi	r3, r3, r5
 800dcca:	9302      	strhi	r3, [sp, #8]
 800dccc:	2300      	movls	r3, #0
 800dcce:	bf86      	itte	hi
 800dcd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dcd4:	608b      	strhi	r3, [r1, #8]
 800dcd6:	9302      	strls	r3, [sp, #8]
 800dcd8:	680b      	ldr	r3, [r1, #0]
 800dcda:	468b      	mov	fp, r1
 800dcdc:	2500      	movs	r5, #0
 800dcde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dce2:	f84b 3b1c 	str.w	r3, [fp], #28
 800dce6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dcea:	4680      	mov	r8, r0
 800dcec:	460c      	mov	r4, r1
 800dcee:	465e      	mov	r6, fp
 800dcf0:	46aa      	mov	sl, r5
 800dcf2:	46a9      	mov	r9, r5
 800dcf4:	9501      	str	r5, [sp, #4]
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	b152      	cbz	r2, 800dd10 <_scanf_float+0x60>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b4e      	cmp	r3, #78	; 0x4e
 800dd00:	d864      	bhi.n	800ddcc <_scanf_float+0x11c>
 800dd02:	2b40      	cmp	r3, #64	; 0x40
 800dd04:	d83c      	bhi.n	800dd80 <_scanf_float+0xd0>
 800dd06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dd0a:	b2c8      	uxtb	r0, r1
 800dd0c:	280e      	cmp	r0, #14
 800dd0e:	d93a      	bls.n	800dd86 <_scanf_float+0xd6>
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	d003      	beq.n	800dd1e <_scanf_float+0x6e>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd22:	f1ba 0f01 	cmp.w	sl, #1
 800dd26:	f200 8113 	bhi.w	800df50 <_scanf_float+0x2a0>
 800dd2a:	455e      	cmp	r6, fp
 800dd2c:	f200 8105 	bhi.w	800df3a <_scanf_float+0x28a>
 800dd30:	2501      	movs	r5, #1
 800dd32:	4628      	mov	r0, r5
 800dd34:	b007      	add	sp, #28
 800dd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dd3e:	2a0d      	cmp	r2, #13
 800dd40:	d8e6      	bhi.n	800dd10 <_scanf_float+0x60>
 800dd42:	a101      	add	r1, pc, #4	; (adr r1, 800dd48 <_scanf_float+0x98>)
 800dd44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd48:	0800de87 	.word	0x0800de87
 800dd4c:	0800dd11 	.word	0x0800dd11
 800dd50:	0800dd11 	.word	0x0800dd11
 800dd54:	0800dd11 	.word	0x0800dd11
 800dd58:	0800dee7 	.word	0x0800dee7
 800dd5c:	0800debf 	.word	0x0800debf
 800dd60:	0800dd11 	.word	0x0800dd11
 800dd64:	0800dd11 	.word	0x0800dd11
 800dd68:	0800de95 	.word	0x0800de95
 800dd6c:	0800dd11 	.word	0x0800dd11
 800dd70:	0800dd11 	.word	0x0800dd11
 800dd74:	0800dd11 	.word	0x0800dd11
 800dd78:	0800dd11 	.word	0x0800dd11
 800dd7c:	0800de4d 	.word	0x0800de4d
 800dd80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dd84:	e7db      	b.n	800dd3e <_scanf_float+0x8e>
 800dd86:	290e      	cmp	r1, #14
 800dd88:	d8c2      	bhi.n	800dd10 <_scanf_float+0x60>
 800dd8a:	a001      	add	r0, pc, #4	; (adr r0, 800dd90 <_scanf_float+0xe0>)
 800dd8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dd90:	0800de3f 	.word	0x0800de3f
 800dd94:	0800dd11 	.word	0x0800dd11
 800dd98:	0800de3f 	.word	0x0800de3f
 800dd9c:	0800ded3 	.word	0x0800ded3
 800dda0:	0800dd11 	.word	0x0800dd11
 800dda4:	0800dded 	.word	0x0800dded
 800dda8:	0800de29 	.word	0x0800de29
 800ddac:	0800de29 	.word	0x0800de29
 800ddb0:	0800de29 	.word	0x0800de29
 800ddb4:	0800de29 	.word	0x0800de29
 800ddb8:	0800de29 	.word	0x0800de29
 800ddbc:	0800de29 	.word	0x0800de29
 800ddc0:	0800de29 	.word	0x0800de29
 800ddc4:	0800de29 	.word	0x0800de29
 800ddc8:	0800de29 	.word	0x0800de29
 800ddcc:	2b6e      	cmp	r3, #110	; 0x6e
 800ddce:	d809      	bhi.n	800dde4 <_scanf_float+0x134>
 800ddd0:	2b60      	cmp	r3, #96	; 0x60
 800ddd2:	d8b2      	bhi.n	800dd3a <_scanf_float+0x8a>
 800ddd4:	2b54      	cmp	r3, #84	; 0x54
 800ddd6:	d077      	beq.n	800dec8 <_scanf_float+0x218>
 800ddd8:	2b59      	cmp	r3, #89	; 0x59
 800ddda:	d199      	bne.n	800dd10 <_scanf_float+0x60>
 800dddc:	2d07      	cmp	r5, #7
 800ddde:	d197      	bne.n	800dd10 <_scanf_float+0x60>
 800dde0:	2508      	movs	r5, #8
 800dde2:	e029      	b.n	800de38 <_scanf_float+0x188>
 800dde4:	2b74      	cmp	r3, #116	; 0x74
 800dde6:	d06f      	beq.n	800dec8 <_scanf_float+0x218>
 800dde8:	2b79      	cmp	r3, #121	; 0x79
 800ddea:	e7f6      	b.n	800ddda <_scanf_float+0x12a>
 800ddec:	6821      	ldr	r1, [r4, #0]
 800ddee:	05c8      	lsls	r0, r1, #23
 800ddf0:	d51a      	bpl.n	800de28 <_scanf_float+0x178>
 800ddf2:	9b02      	ldr	r3, [sp, #8]
 800ddf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ddf8:	6021      	str	r1, [r4, #0]
 800ddfa:	f109 0901 	add.w	r9, r9, #1
 800ddfe:	b11b      	cbz	r3, 800de08 <_scanf_float+0x158>
 800de00:	3b01      	subs	r3, #1
 800de02:	3201      	adds	r2, #1
 800de04:	9302      	str	r3, [sp, #8]
 800de06:	60a2      	str	r2, [r4, #8]
 800de08:	68a3      	ldr	r3, [r4, #8]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	60a3      	str	r3, [r4, #8]
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	3301      	adds	r3, #1
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3b01      	subs	r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	607b      	str	r3, [r7, #4]
 800de1c:	f340 8084 	ble.w	800df28 <_scanf_float+0x278>
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	e766      	b.n	800dcf6 <_scanf_float+0x46>
 800de28:	eb1a 0f05 	cmn.w	sl, r5
 800de2c:	f47f af70 	bne.w	800dd10 <_scanf_float+0x60>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	f806 3b01 	strb.w	r3, [r6], #1
 800de3c:	e7e4      	b.n	800de08 <_scanf_float+0x158>
 800de3e:	6822      	ldr	r2, [r4, #0]
 800de40:	0610      	lsls	r0, r2, #24
 800de42:	f57f af65 	bpl.w	800dd10 <_scanf_float+0x60>
 800de46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de4a:	e7f4      	b.n	800de36 <_scanf_float+0x186>
 800de4c:	f1ba 0f00 	cmp.w	sl, #0
 800de50:	d10e      	bne.n	800de70 <_scanf_float+0x1c0>
 800de52:	f1b9 0f00 	cmp.w	r9, #0
 800de56:	d10e      	bne.n	800de76 <_scanf_float+0x1c6>
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800de5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800de62:	d108      	bne.n	800de76 <_scanf_float+0x1c6>
 800de64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800de68:	6022      	str	r2, [r4, #0]
 800de6a:	f04f 0a01 	mov.w	sl, #1
 800de6e:	e7e3      	b.n	800de38 <_scanf_float+0x188>
 800de70:	f1ba 0f02 	cmp.w	sl, #2
 800de74:	d055      	beq.n	800df22 <_scanf_float+0x272>
 800de76:	2d01      	cmp	r5, #1
 800de78:	d002      	beq.n	800de80 <_scanf_float+0x1d0>
 800de7a:	2d04      	cmp	r5, #4
 800de7c:	f47f af48 	bne.w	800dd10 <_scanf_float+0x60>
 800de80:	3501      	adds	r5, #1
 800de82:	b2ed      	uxtb	r5, r5
 800de84:	e7d8      	b.n	800de38 <_scanf_float+0x188>
 800de86:	f1ba 0f01 	cmp.w	sl, #1
 800de8a:	f47f af41 	bne.w	800dd10 <_scanf_float+0x60>
 800de8e:	f04f 0a02 	mov.w	sl, #2
 800de92:	e7d1      	b.n	800de38 <_scanf_float+0x188>
 800de94:	b97d      	cbnz	r5, 800deb6 <_scanf_float+0x206>
 800de96:	f1b9 0f00 	cmp.w	r9, #0
 800de9a:	f47f af3c 	bne.w	800dd16 <_scanf_float+0x66>
 800de9e:	6822      	ldr	r2, [r4, #0]
 800dea0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dea4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dea8:	f47f af39 	bne.w	800dd1e <_scanf_float+0x6e>
 800deac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800deb0:	6022      	str	r2, [r4, #0]
 800deb2:	2501      	movs	r5, #1
 800deb4:	e7c0      	b.n	800de38 <_scanf_float+0x188>
 800deb6:	2d03      	cmp	r5, #3
 800deb8:	d0e2      	beq.n	800de80 <_scanf_float+0x1d0>
 800deba:	2d05      	cmp	r5, #5
 800debc:	e7de      	b.n	800de7c <_scanf_float+0x1cc>
 800debe:	2d02      	cmp	r5, #2
 800dec0:	f47f af26 	bne.w	800dd10 <_scanf_float+0x60>
 800dec4:	2503      	movs	r5, #3
 800dec6:	e7b7      	b.n	800de38 <_scanf_float+0x188>
 800dec8:	2d06      	cmp	r5, #6
 800deca:	f47f af21 	bne.w	800dd10 <_scanf_float+0x60>
 800dece:	2507      	movs	r5, #7
 800ded0:	e7b2      	b.n	800de38 <_scanf_float+0x188>
 800ded2:	6822      	ldr	r2, [r4, #0]
 800ded4:	0591      	lsls	r1, r2, #22
 800ded6:	f57f af1b 	bpl.w	800dd10 <_scanf_float+0x60>
 800deda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dede:	6022      	str	r2, [r4, #0]
 800dee0:	f8cd 9004 	str.w	r9, [sp, #4]
 800dee4:	e7a8      	b.n	800de38 <_scanf_float+0x188>
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800deec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800def0:	d006      	beq.n	800df00 <_scanf_float+0x250>
 800def2:	0550      	lsls	r0, r2, #21
 800def4:	f57f af0c 	bpl.w	800dd10 <_scanf_float+0x60>
 800def8:	f1b9 0f00 	cmp.w	r9, #0
 800defc:	f43f af0f 	beq.w	800dd1e <_scanf_float+0x6e>
 800df00:	0591      	lsls	r1, r2, #22
 800df02:	bf58      	it	pl
 800df04:	9901      	ldrpl	r1, [sp, #4]
 800df06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df0a:	bf58      	it	pl
 800df0c:	eba9 0101 	subpl.w	r1, r9, r1
 800df10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800df14:	bf58      	it	pl
 800df16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df1a:	6022      	str	r2, [r4, #0]
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	e78a      	b.n	800de38 <_scanf_float+0x188>
 800df22:	f04f 0a03 	mov.w	sl, #3
 800df26:	e787      	b.n	800de38 <_scanf_float+0x188>
 800df28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df2c:	4639      	mov	r1, r7
 800df2e:	4640      	mov	r0, r8
 800df30:	4798      	blx	r3
 800df32:	2800      	cmp	r0, #0
 800df34:	f43f aedf 	beq.w	800dcf6 <_scanf_float+0x46>
 800df38:	e6ea      	b.n	800dd10 <_scanf_float+0x60>
 800df3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df42:	463a      	mov	r2, r7
 800df44:	4640      	mov	r0, r8
 800df46:	4798      	blx	r3
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	6123      	str	r3, [r4, #16]
 800df4e:	e6ec      	b.n	800dd2a <_scanf_float+0x7a>
 800df50:	1e6b      	subs	r3, r5, #1
 800df52:	2b06      	cmp	r3, #6
 800df54:	d825      	bhi.n	800dfa2 <_scanf_float+0x2f2>
 800df56:	2d02      	cmp	r5, #2
 800df58:	d836      	bhi.n	800dfc8 <_scanf_float+0x318>
 800df5a:	455e      	cmp	r6, fp
 800df5c:	f67f aee8 	bls.w	800dd30 <_scanf_float+0x80>
 800df60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df68:	463a      	mov	r2, r7
 800df6a:	4640      	mov	r0, r8
 800df6c:	4798      	blx	r3
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	3b01      	subs	r3, #1
 800df72:	6123      	str	r3, [r4, #16]
 800df74:	e7f1      	b.n	800df5a <_scanf_float+0x2aa>
 800df76:	9802      	ldr	r0, [sp, #8]
 800df78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800df80:	9002      	str	r0, [sp, #8]
 800df82:	463a      	mov	r2, r7
 800df84:	4640      	mov	r0, r8
 800df86:	4798      	blx	r3
 800df88:	6923      	ldr	r3, [r4, #16]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	6123      	str	r3, [r4, #16]
 800df8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df92:	fa5f fa8a 	uxtb.w	sl, sl
 800df96:	f1ba 0f02 	cmp.w	sl, #2
 800df9a:	d1ec      	bne.n	800df76 <_scanf_float+0x2c6>
 800df9c:	3d03      	subs	r5, #3
 800df9e:	b2ed      	uxtb	r5, r5
 800dfa0:	1b76      	subs	r6, r6, r5
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	05da      	lsls	r2, r3, #23
 800dfa6:	d52f      	bpl.n	800e008 <_scanf_float+0x358>
 800dfa8:	055b      	lsls	r3, r3, #21
 800dfaa:	d510      	bpl.n	800dfce <_scanf_float+0x31e>
 800dfac:	455e      	cmp	r6, fp
 800dfae:	f67f aebf 	bls.w	800dd30 <_scanf_float+0x80>
 800dfb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfba:	463a      	mov	r2, r7
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4798      	blx	r3
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	6123      	str	r3, [r4, #16]
 800dfc6:	e7f1      	b.n	800dfac <_scanf_float+0x2fc>
 800dfc8:	46aa      	mov	sl, r5
 800dfca:	9602      	str	r6, [sp, #8]
 800dfcc:	e7df      	b.n	800df8e <_scanf_float+0x2de>
 800dfce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	2965      	cmp	r1, #101	; 0x65
 800dfd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfda:	f106 35ff 	add.w	r5, r6, #4294967295
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	d00c      	beq.n	800dffc <_scanf_float+0x34c>
 800dfe2:	2945      	cmp	r1, #69	; 0x45
 800dfe4:	d00a      	beq.n	800dffc <_scanf_float+0x34c>
 800dfe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfea:	463a      	mov	r2, r7
 800dfec:	4640      	mov	r0, r8
 800dfee:	4798      	blx	r3
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	1eb5      	subs	r5, r6, #2
 800dffa:	6123      	str	r3, [r4, #16]
 800dffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e000:	463a      	mov	r2, r7
 800e002:	4640      	mov	r0, r8
 800e004:	4798      	blx	r3
 800e006:	462e      	mov	r6, r5
 800e008:	6825      	ldr	r5, [r4, #0]
 800e00a:	f015 0510 	ands.w	r5, r5, #16
 800e00e:	d159      	bne.n	800e0c4 <_scanf_float+0x414>
 800e010:	7035      	strb	r5, [r6, #0]
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e01c:	d11b      	bne.n	800e056 <_scanf_float+0x3a6>
 800e01e:	9b01      	ldr	r3, [sp, #4]
 800e020:	454b      	cmp	r3, r9
 800e022:	eba3 0209 	sub.w	r2, r3, r9
 800e026:	d123      	bne.n	800e070 <_scanf_float+0x3c0>
 800e028:	2200      	movs	r2, #0
 800e02a:	4659      	mov	r1, fp
 800e02c:	4640      	mov	r0, r8
 800e02e:	f000 ff1d 	bl	800ee6c <_strtod_r>
 800e032:	6822      	ldr	r2, [r4, #0]
 800e034:	9b03      	ldr	r3, [sp, #12]
 800e036:	f012 0f02 	tst.w	r2, #2
 800e03a:	ec57 6b10 	vmov	r6, r7, d0
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	d021      	beq.n	800e086 <_scanf_float+0x3d6>
 800e042:	9903      	ldr	r1, [sp, #12]
 800e044:	1d1a      	adds	r2, r3, #4
 800e046:	600a      	str	r2, [r1, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	e9c3 6700 	strd	r6, r7, [r3]
 800e04e:	68e3      	ldr	r3, [r4, #12]
 800e050:	3301      	adds	r3, #1
 800e052:	60e3      	str	r3, [r4, #12]
 800e054:	e66d      	b.n	800dd32 <_scanf_float+0x82>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d0e5      	beq.n	800e028 <_scanf_float+0x378>
 800e05c:	9905      	ldr	r1, [sp, #20]
 800e05e:	230a      	movs	r3, #10
 800e060:	462a      	mov	r2, r5
 800e062:	3101      	adds	r1, #1
 800e064:	4640      	mov	r0, r8
 800e066:	f000 ff89 	bl	800ef7c <_strtol_r>
 800e06a:	9b04      	ldr	r3, [sp, #16]
 800e06c:	9e05      	ldr	r6, [sp, #20]
 800e06e:	1ac2      	subs	r2, r0, r3
 800e070:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e074:	429e      	cmp	r6, r3
 800e076:	bf28      	it	cs
 800e078:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e07c:	4912      	ldr	r1, [pc, #72]	; (800e0c8 <_scanf_float+0x418>)
 800e07e:	4630      	mov	r0, r6
 800e080:	f000 f82c 	bl	800e0dc <siprintf>
 800e084:	e7d0      	b.n	800e028 <_scanf_float+0x378>
 800e086:	9903      	ldr	r1, [sp, #12]
 800e088:	f012 0f04 	tst.w	r2, #4
 800e08c:	f103 0204 	add.w	r2, r3, #4
 800e090:	600a      	str	r2, [r1, #0]
 800e092:	d1d9      	bne.n	800e048 <_scanf_float+0x398>
 800e094:	f8d3 8000 	ldr.w	r8, [r3]
 800e098:	ee10 2a10 	vmov	r2, s0
 800e09c:	ee10 0a10 	vmov	r0, s0
 800e0a0:	463b      	mov	r3, r7
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	f7f2 fd5a 	bl	8000b5c <__aeabi_dcmpun>
 800e0a8:	b128      	cbz	r0, 800e0b6 <_scanf_float+0x406>
 800e0aa:	4808      	ldr	r0, [pc, #32]	; (800e0cc <_scanf_float+0x41c>)
 800e0ac:	f000 f810 	bl	800e0d0 <nanf>
 800e0b0:	ed88 0a00 	vstr	s0, [r8]
 800e0b4:	e7cb      	b.n	800e04e <_scanf_float+0x39e>
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	f7f2 fdad 	bl	8000c18 <__aeabi_d2f>
 800e0be:	f8c8 0000 	str.w	r0, [r8]
 800e0c2:	e7c4      	b.n	800e04e <_scanf_float+0x39e>
 800e0c4:	2500      	movs	r5, #0
 800e0c6:	e634      	b.n	800dd32 <_scanf_float+0x82>
 800e0c8:	08013082 	.word	0x08013082
 800e0cc:	080134a3 	.word	0x080134a3

0800e0d0 <nanf>:
 800e0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e0d8 <nanf+0x8>
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	7fc00000 	.word	0x7fc00000

0800e0dc <siprintf>:
 800e0dc:	b40e      	push	{r1, r2, r3}
 800e0de:	b500      	push	{lr}
 800e0e0:	b09c      	sub	sp, #112	; 0x70
 800e0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800e0e4:	9002      	str	r0, [sp, #8]
 800e0e6:	9006      	str	r0, [sp, #24]
 800e0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0ec:	4809      	ldr	r0, [pc, #36]	; (800e114 <siprintf+0x38>)
 800e0ee:	9107      	str	r1, [sp, #28]
 800e0f0:	9104      	str	r1, [sp, #16]
 800e0f2:	4909      	ldr	r1, [pc, #36]	; (800e118 <siprintf+0x3c>)
 800e0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f8:	9105      	str	r1, [sp, #20]
 800e0fa:	6800      	ldr	r0, [r0, #0]
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	a902      	add	r1, sp, #8
 800e100:	f002 ff90 	bl	8011024 <_svfiprintf_r>
 800e104:	9b02      	ldr	r3, [sp, #8]
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	b01c      	add	sp, #112	; 0x70
 800e10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e110:	b003      	add	sp, #12
 800e112:	4770      	bx	lr
 800e114:	200000d0 	.word	0x200000d0
 800e118:	ffff0208 	.word	0xffff0208

0800e11c <siscanf>:
 800e11c:	b40e      	push	{r1, r2, r3}
 800e11e:	b510      	push	{r4, lr}
 800e120:	b09f      	sub	sp, #124	; 0x7c
 800e122:	ac21      	add	r4, sp, #132	; 0x84
 800e124:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e128:	f854 2b04 	ldr.w	r2, [r4], #4
 800e12c:	9201      	str	r2, [sp, #4]
 800e12e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e132:	9004      	str	r0, [sp, #16]
 800e134:	9008      	str	r0, [sp, #32]
 800e136:	f7f2 f85d 	bl	80001f4 <strlen>
 800e13a:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <siscanf+0x50>)
 800e13c:	9005      	str	r0, [sp, #20]
 800e13e:	9009      	str	r0, [sp, #36]	; 0x24
 800e140:	930d      	str	r3, [sp, #52]	; 0x34
 800e142:	480b      	ldr	r0, [pc, #44]	; (800e170 <siscanf+0x54>)
 800e144:	9a01      	ldr	r2, [sp, #4]
 800e146:	6800      	ldr	r0, [r0, #0]
 800e148:	9403      	str	r4, [sp, #12]
 800e14a:	2300      	movs	r3, #0
 800e14c:	9311      	str	r3, [sp, #68]	; 0x44
 800e14e:	9316      	str	r3, [sp, #88]	; 0x58
 800e150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e154:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e158:	a904      	add	r1, sp, #16
 800e15a:	4623      	mov	r3, r4
 800e15c:	f003 f8bc 	bl	80112d8 <__ssvfiscanf_r>
 800e160:	b01f      	add	sp, #124	; 0x7c
 800e162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e166:	b003      	add	sp, #12
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	0800e197 	.word	0x0800e197
 800e170:	200000d0 	.word	0x200000d0

0800e174 <__sread>:
 800e174:	b510      	push	{r4, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17c:	f003 fb76 	bl	801186c <_read_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	bfab      	itete	ge
 800e184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e186:	89a3      	ldrhlt	r3, [r4, #12]
 800e188:	181b      	addge	r3, r3, r0
 800e18a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e18e:	bfac      	ite	ge
 800e190:	6563      	strge	r3, [r4, #84]	; 0x54
 800e192:	81a3      	strhlt	r3, [r4, #12]
 800e194:	bd10      	pop	{r4, pc}

0800e196 <__seofread>:
 800e196:	2000      	movs	r0, #0
 800e198:	4770      	bx	lr

0800e19a <__swrite>:
 800e19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19e:	461f      	mov	r7, r3
 800e1a0:	898b      	ldrh	r3, [r1, #12]
 800e1a2:	05db      	lsls	r3, r3, #23
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	d505      	bpl.n	800e1b8 <__swrite+0x1e>
 800e1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f002 f8f6 	bl	80103a4 <_lseek_r>
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1c2:	81a3      	strh	r3, [r4, #12]
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ce:	f000 bed7 	b.w	800ef80 <_write_r>

0800e1d2 <__sseek>:
 800e1d2:	b510      	push	{r4, lr}
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1da:	f002 f8e3 	bl	80103a4 <_lseek_r>
 800e1de:	1c43      	adds	r3, r0, #1
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	bf15      	itete	ne
 800e1e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1ee:	81a3      	strheq	r3, [r4, #12]
 800e1f0:	bf18      	it	ne
 800e1f2:	81a3      	strhne	r3, [r4, #12]
 800e1f4:	bd10      	pop	{r4, pc}

0800e1f6 <__sclose>:
 800e1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1fa:	f000 bed3 	b.w	800efa4 <_close_r>

0800e1fe <strncmp>:
 800e1fe:	b510      	push	{r4, lr}
 800e200:	b17a      	cbz	r2, 800e222 <strncmp+0x24>
 800e202:	4603      	mov	r3, r0
 800e204:	3901      	subs	r1, #1
 800e206:	1884      	adds	r4, r0, r2
 800e208:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e20c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e210:	4290      	cmp	r0, r2
 800e212:	d101      	bne.n	800e218 <strncmp+0x1a>
 800e214:	42a3      	cmp	r3, r4
 800e216:	d101      	bne.n	800e21c <strncmp+0x1e>
 800e218:	1a80      	subs	r0, r0, r2
 800e21a:	bd10      	pop	{r4, pc}
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d1f3      	bne.n	800e208 <strncmp+0xa>
 800e220:	e7fa      	b.n	800e218 <strncmp+0x1a>
 800e222:	4610      	mov	r0, r2
 800e224:	e7f9      	b.n	800e21a <strncmp+0x1c>

0800e226 <sulp>:
 800e226:	b570      	push	{r4, r5, r6, lr}
 800e228:	4604      	mov	r4, r0
 800e22a:	460d      	mov	r5, r1
 800e22c:	ec45 4b10 	vmov	d0, r4, r5
 800e230:	4616      	mov	r6, r2
 800e232:	f002 fc55 	bl	8010ae0 <__ulp>
 800e236:	ec51 0b10 	vmov	r0, r1, d0
 800e23a:	b17e      	cbz	r6, 800e25c <sulp+0x36>
 800e23c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e240:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e244:	2b00      	cmp	r3, #0
 800e246:	dd09      	ble.n	800e25c <sulp+0x36>
 800e248:	051b      	lsls	r3, r3, #20
 800e24a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e24e:	2400      	movs	r4, #0
 800e250:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e254:	4622      	mov	r2, r4
 800e256:	462b      	mov	r3, r5
 800e258:	f7f2 f9e6 	bl	8000628 <__aeabi_dmul>
 800e25c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e260 <_strtod_l>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	ed2d 8b02 	vpush	{d8}
 800e268:	b09d      	sub	sp, #116	; 0x74
 800e26a:	461f      	mov	r7, r3
 800e26c:	2300      	movs	r3, #0
 800e26e:	9318      	str	r3, [sp, #96]	; 0x60
 800e270:	4ba2      	ldr	r3, [pc, #648]	; (800e4fc <_strtod_l+0x29c>)
 800e272:	9213      	str	r2, [sp, #76]	; 0x4c
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	9305      	str	r3, [sp, #20]
 800e278:	4604      	mov	r4, r0
 800e27a:	4618      	mov	r0, r3
 800e27c:	4688      	mov	r8, r1
 800e27e:	f7f1 ffb9 	bl	80001f4 <strlen>
 800e282:	f04f 0a00 	mov.w	sl, #0
 800e286:	4605      	mov	r5, r0
 800e288:	f04f 0b00 	mov.w	fp, #0
 800e28c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	2a2b      	cmp	r2, #43	; 0x2b
 800e296:	d04e      	beq.n	800e336 <_strtod_l+0xd6>
 800e298:	d83b      	bhi.n	800e312 <_strtod_l+0xb2>
 800e29a:	2a0d      	cmp	r2, #13
 800e29c:	d834      	bhi.n	800e308 <_strtod_l+0xa8>
 800e29e:	2a08      	cmp	r2, #8
 800e2a0:	d834      	bhi.n	800e30c <_strtod_l+0xac>
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	d03e      	beq.n	800e324 <_strtod_l+0xc4>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	930a      	str	r3, [sp, #40]	; 0x28
 800e2aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e2ac:	7833      	ldrb	r3, [r6, #0]
 800e2ae:	2b30      	cmp	r3, #48	; 0x30
 800e2b0:	f040 80b0 	bne.w	800e414 <_strtod_l+0x1b4>
 800e2b4:	7873      	ldrb	r3, [r6, #1]
 800e2b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2ba:	2b58      	cmp	r3, #88	; 0x58
 800e2bc:	d168      	bne.n	800e390 <_strtod_l+0x130>
 800e2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	ab18      	add	r3, sp, #96	; 0x60
 800e2c4:	9702      	str	r7, [sp, #8]
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	4a8d      	ldr	r2, [pc, #564]	; (800e500 <_strtod_l+0x2a0>)
 800e2ca:	ab19      	add	r3, sp, #100	; 0x64
 800e2cc:	a917      	add	r1, sp, #92	; 0x5c
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f001 fd5c 	bl	800fd8c <__gethex>
 800e2d4:	f010 0707 	ands.w	r7, r0, #7
 800e2d8:	4605      	mov	r5, r0
 800e2da:	d005      	beq.n	800e2e8 <_strtod_l+0x88>
 800e2dc:	2f06      	cmp	r7, #6
 800e2de:	d12c      	bne.n	800e33a <_strtod_l+0xda>
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	9617      	str	r6, [sp, #92]	; 0x5c
 800e2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f040 8590 	bne.w	800ee10 <_strtod_l+0xbb0>
 800e2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f2:	b1eb      	cbz	r3, 800e330 <_strtod_l+0xd0>
 800e2f4:	4652      	mov	r2, sl
 800e2f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2fa:	ec43 2b10 	vmov	d0, r2, r3
 800e2fe:	b01d      	add	sp, #116	; 0x74
 800e300:	ecbd 8b02 	vpop	{d8}
 800e304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e308:	2a20      	cmp	r2, #32
 800e30a:	d1cc      	bne.n	800e2a6 <_strtod_l+0x46>
 800e30c:	3301      	adds	r3, #1
 800e30e:	9317      	str	r3, [sp, #92]	; 0x5c
 800e310:	e7be      	b.n	800e290 <_strtod_l+0x30>
 800e312:	2a2d      	cmp	r2, #45	; 0x2d
 800e314:	d1c7      	bne.n	800e2a6 <_strtod_l+0x46>
 800e316:	2201      	movs	r2, #1
 800e318:	920a      	str	r2, [sp, #40]	; 0x28
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e31e:	785b      	ldrb	r3, [r3, #1]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1c2      	bne.n	800e2aa <_strtod_l+0x4a>
 800e324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e326:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f040 856e 	bne.w	800ee0c <_strtod_l+0xbac>
 800e330:	4652      	mov	r2, sl
 800e332:	465b      	mov	r3, fp
 800e334:	e7e1      	b.n	800e2fa <_strtod_l+0x9a>
 800e336:	2200      	movs	r2, #0
 800e338:	e7ee      	b.n	800e318 <_strtod_l+0xb8>
 800e33a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e33c:	b13a      	cbz	r2, 800e34e <_strtod_l+0xee>
 800e33e:	2135      	movs	r1, #53	; 0x35
 800e340:	a81a      	add	r0, sp, #104	; 0x68
 800e342:	f002 fcd8 	bl	8010cf6 <__copybits>
 800e346:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e348:	4620      	mov	r0, r4
 800e34a:	f002 f897 	bl	801047c <_Bfree>
 800e34e:	3f01      	subs	r7, #1
 800e350:	2f04      	cmp	r7, #4
 800e352:	d806      	bhi.n	800e362 <_strtod_l+0x102>
 800e354:	e8df f007 	tbb	[pc, r7]
 800e358:	1714030a 	.word	0x1714030a
 800e35c:	0a          	.byte	0x0a
 800e35d:	00          	.byte	0x00
 800e35e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e362:	0728      	lsls	r0, r5, #28
 800e364:	d5c0      	bpl.n	800e2e8 <_strtod_l+0x88>
 800e366:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e36a:	e7bd      	b.n	800e2e8 <_strtod_l+0x88>
 800e36c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e37a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e37e:	e7f0      	b.n	800e362 <_strtod_l+0x102>
 800e380:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e504 <_strtod_l+0x2a4>
 800e384:	e7ed      	b.n	800e362 <_strtod_l+0x102>
 800e386:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e38a:	f04f 3aff 	mov.w	sl, #4294967295
 800e38e:	e7e8      	b.n	800e362 <_strtod_l+0x102>
 800e390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	9217      	str	r2, [sp, #92]	; 0x5c
 800e396:	785b      	ldrb	r3, [r3, #1]
 800e398:	2b30      	cmp	r3, #48	; 0x30
 800e39a:	d0f9      	beq.n	800e390 <_strtod_l+0x130>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d0a3      	beq.n	800e2e8 <_strtod_l+0x88>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	f04f 0900 	mov.w	r9, #0
 800e3a6:	9304      	str	r3, [sp, #16]
 800e3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e3aa:	9308      	str	r3, [sp, #32]
 800e3ac:	f8cd 901c 	str.w	r9, [sp, #28]
 800e3b0:	464f      	mov	r7, r9
 800e3b2:	220a      	movs	r2, #10
 800e3b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e3b6:	7806      	ldrb	r6, [r0, #0]
 800e3b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e3bc:	b2d9      	uxtb	r1, r3
 800e3be:	2909      	cmp	r1, #9
 800e3c0:	d92a      	bls.n	800e418 <_strtod_l+0x1b8>
 800e3c2:	9905      	ldr	r1, [sp, #20]
 800e3c4:	462a      	mov	r2, r5
 800e3c6:	f7ff ff1a 	bl	800e1fe <strncmp>
 800e3ca:	b398      	cbz	r0, 800e434 <_strtod_l+0x1d4>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	4632      	mov	r2, r6
 800e3d0:	463d      	mov	r5, r7
 800e3d2:	9005      	str	r0, [sp, #20]
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2a65      	cmp	r2, #101	; 0x65
 800e3d8:	d001      	beq.n	800e3de <_strtod_l+0x17e>
 800e3da:	2a45      	cmp	r2, #69	; 0x45
 800e3dc:	d118      	bne.n	800e410 <_strtod_l+0x1b0>
 800e3de:	b91d      	cbnz	r5, 800e3e8 <_strtod_l+0x188>
 800e3e0:	9a04      	ldr	r2, [sp, #16]
 800e3e2:	4302      	orrs	r2, r0
 800e3e4:	d09e      	beq.n	800e324 <_strtod_l+0xc4>
 800e3e6:	2500      	movs	r5, #0
 800e3e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e3ec:	f108 0201 	add.w	r2, r8, #1
 800e3f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e3f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e3f6:	2a2b      	cmp	r2, #43	; 0x2b
 800e3f8:	d075      	beq.n	800e4e6 <_strtod_l+0x286>
 800e3fa:	2a2d      	cmp	r2, #45	; 0x2d
 800e3fc:	d07b      	beq.n	800e4f6 <_strtod_l+0x296>
 800e3fe:	f04f 0c00 	mov.w	ip, #0
 800e402:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e406:	2909      	cmp	r1, #9
 800e408:	f240 8082 	bls.w	800e510 <_strtod_l+0x2b0>
 800e40c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e410:	2600      	movs	r6, #0
 800e412:	e09d      	b.n	800e550 <_strtod_l+0x2f0>
 800e414:	2300      	movs	r3, #0
 800e416:	e7c4      	b.n	800e3a2 <_strtod_l+0x142>
 800e418:	2f08      	cmp	r7, #8
 800e41a:	bfd8      	it	le
 800e41c:	9907      	ldrle	r1, [sp, #28]
 800e41e:	f100 0001 	add.w	r0, r0, #1
 800e422:	bfda      	itte	le
 800e424:	fb02 3301 	mlale	r3, r2, r1, r3
 800e428:	9307      	strle	r3, [sp, #28]
 800e42a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e42e:	3701      	adds	r7, #1
 800e430:	9017      	str	r0, [sp, #92]	; 0x5c
 800e432:	e7bf      	b.n	800e3b4 <_strtod_l+0x154>
 800e434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e436:	195a      	adds	r2, r3, r5
 800e438:	9217      	str	r2, [sp, #92]	; 0x5c
 800e43a:	5d5a      	ldrb	r2, [r3, r5]
 800e43c:	2f00      	cmp	r7, #0
 800e43e:	d037      	beq.n	800e4b0 <_strtod_l+0x250>
 800e440:	9005      	str	r0, [sp, #20]
 800e442:	463d      	mov	r5, r7
 800e444:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e448:	2b09      	cmp	r3, #9
 800e44a:	d912      	bls.n	800e472 <_strtod_l+0x212>
 800e44c:	2301      	movs	r3, #1
 800e44e:	e7c2      	b.n	800e3d6 <_strtod_l+0x176>
 800e450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	9217      	str	r2, [sp, #92]	; 0x5c
 800e456:	785a      	ldrb	r2, [r3, #1]
 800e458:	3001      	adds	r0, #1
 800e45a:	2a30      	cmp	r2, #48	; 0x30
 800e45c:	d0f8      	beq.n	800e450 <_strtod_l+0x1f0>
 800e45e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e462:	2b08      	cmp	r3, #8
 800e464:	f200 84d9 	bhi.w	800ee1a <_strtod_l+0xbba>
 800e468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e46a:	9005      	str	r0, [sp, #20]
 800e46c:	2000      	movs	r0, #0
 800e46e:	9308      	str	r3, [sp, #32]
 800e470:	4605      	mov	r5, r0
 800e472:	3a30      	subs	r2, #48	; 0x30
 800e474:	f100 0301 	add.w	r3, r0, #1
 800e478:	d014      	beq.n	800e4a4 <_strtod_l+0x244>
 800e47a:	9905      	ldr	r1, [sp, #20]
 800e47c:	4419      	add	r1, r3
 800e47e:	9105      	str	r1, [sp, #20]
 800e480:	462b      	mov	r3, r5
 800e482:	eb00 0e05 	add.w	lr, r0, r5
 800e486:	210a      	movs	r1, #10
 800e488:	4573      	cmp	r3, lr
 800e48a:	d113      	bne.n	800e4b4 <_strtod_l+0x254>
 800e48c:	182b      	adds	r3, r5, r0
 800e48e:	2b08      	cmp	r3, #8
 800e490:	f105 0501 	add.w	r5, r5, #1
 800e494:	4405      	add	r5, r0
 800e496:	dc1c      	bgt.n	800e4d2 <_strtod_l+0x272>
 800e498:	9907      	ldr	r1, [sp, #28]
 800e49a:	230a      	movs	r3, #10
 800e49c:	fb03 2301 	mla	r3, r3, r1, r2
 800e4a0:	9307      	str	r3, [sp, #28]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4a6:	1c51      	adds	r1, r2, #1
 800e4a8:	9117      	str	r1, [sp, #92]	; 0x5c
 800e4aa:	7852      	ldrb	r2, [r2, #1]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	e7c9      	b.n	800e444 <_strtod_l+0x1e4>
 800e4b0:	4638      	mov	r0, r7
 800e4b2:	e7d2      	b.n	800e45a <_strtod_l+0x1fa>
 800e4b4:	2b08      	cmp	r3, #8
 800e4b6:	dc04      	bgt.n	800e4c2 <_strtod_l+0x262>
 800e4b8:	9e07      	ldr	r6, [sp, #28]
 800e4ba:	434e      	muls	r6, r1
 800e4bc:	9607      	str	r6, [sp, #28]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	e7e2      	b.n	800e488 <_strtod_l+0x228>
 800e4c2:	f103 0c01 	add.w	ip, r3, #1
 800e4c6:	f1bc 0f10 	cmp.w	ip, #16
 800e4ca:	bfd8      	it	le
 800e4cc:	fb01 f909 	mulle.w	r9, r1, r9
 800e4d0:	e7f5      	b.n	800e4be <_strtod_l+0x25e>
 800e4d2:	2d10      	cmp	r5, #16
 800e4d4:	bfdc      	itt	le
 800e4d6:	230a      	movle	r3, #10
 800e4d8:	fb03 2909 	mlale	r9, r3, r9, r2
 800e4dc:	e7e1      	b.n	800e4a2 <_strtod_l+0x242>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	9305      	str	r3, [sp, #20]
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e77c      	b.n	800e3e0 <_strtod_l+0x180>
 800e4e6:	f04f 0c00 	mov.w	ip, #0
 800e4ea:	f108 0202 	add.w	r2, r8, #2
 800e4ee:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e4f4:	e785      	b.n	800e402 <_strtod_l+0x1a2>
 800e4f6:	f04f 0c01 	mov.w	ip, #1
 800e4fa:	e7f6      	b.n	800e4ea <_strtod_l+0x28a>
 800e4fc:	080132d0 	.word	0x080132d0
 800e500:	08013088 	.word	0x08013088
 800e504:	7ff00000 	.word	0x7ff00000
 800e508:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e50a:	1c51      	adds	r1, r2, #1
 800e50c:	9117      	str	r1, [sp, #92]	; 0x5c
 800e50e:	7852      	ldrb	r2, [r2, #1]
 800e510:	2a30      	cmp	r2, #48	; 0x30
 800e512:	d0f9      	beq.n	800e508 <_strtod_l+0x2a8>
 800e514:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e518:	2908      	cmp	r1, #8
 800e51a:	f63f af79 	bhi.w	800e410 <_strtod_l+0x1b0>
 800e51e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e524:	9206      	str	r2, [sp, #24]
 800e526:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e528:	1c51      	adds	r1, r2, #1
 800e52a:	9117      	str	r1, [sp, #92]	; 0x5c
 800e52c:	7852      	ldrb	r2, [r2, #1]
 800e52e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e532:	2e09      	cmp	r6, #9
 800e534:	d937      	bls.n	800e5a6 <_strtod_l+0x346>
 800e536:	9e06      	ldr	r6, [sp, #24]
 800e538:	1b89      	subs	r1, r1, r6
 800e53a:	2908      	cmp	r1, #8
 800e53c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e540:	dc02      	bgt.n	800e548 <_strtod_l+0x2e8>
 800e542:	4576      	cmp	r6, lr
 800e544:	bfa8      	it	ge
 800e546:	4676      	movge	r6, lr
 800e548:	f1bc 0f00 	cmp.w	ip, #0
 800e54c:	d000      	beq.n	800e550 <_strtod_l+0x2f0>
 800e54e:	4276      	negs	r6, r6
 800e550:	2d00      	cmp	r5, #0
 800e552:	d14d      	bne.n	800e5f0 <_strtod_l+0x390>
 800e554:	9904      	ldr	r1, [sp, #16]
 800e556:	4301      	orrs	r1, r0
 800e558:	f47f aec6 	bne.w	800e2e8 <_strtod_l+0x88>
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f47f aee1 	bne.w	800e324 <_strtod_l+0xc4>
 800e562:	2a69      	cmp	r2, #105	; 0x69
 800e564:	d027      	beq.n	800e5b6 <_strtod_l+0x356>
 800e566:	dc24      	bgt.n	800e5b2 <_strtod_l+0x352>
 800e568:	2a49      	cmp	r2, #73	; 0x49
 800e56a:	d024      	beq.n	800e5b6 <_strtod_l+0x356>
 800e56c:	2a4e      	cmp	r2, #78	; 0x4e
 800e56e:	f47f aed9 	bne.w	800e324 <_strtod_l+0xc4>
 800e572:	499f      	ldr	r1, [pc, #636]	; (800e7f0 <_strtod_l+0x590>)
 800e574:	a817      	add	r0, sp, #92	; 0x5c
 800e576:	f001 fe61 	bl	801023c <__match>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f43f aed2 	beq.w	800e324 <_strtod_l+0xc4>
 800e580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b28      	cmp	r3, #40	; 0x28
 800e586:	d12d      	bne.n	800e5e4 <_strtod_l+0x384>
 800e588:	499a      	ldr	r1, [pc, #616]	; (800e7f4 <_strtod_l+0x594>)
 800e58a:	aa1a      	add	r2, sp, #104	; 0x68
 800e58c:	a817      	add	r0, sp, #92	; 0x5c
 800e58e:	f001 fe69 	bl	8010264 <__hexnan>
 800e592:	2805      	cmp	r0, #5
 800e594:	d126      	bne.n	800e5e4 <_strtod_l+0x384>
 800e596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e598:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e59c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e5a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e5a4:	e6a0      	b.n	800e2e8 <_strtod_l+0x88>
 800e5a6:	210a      	movs	r1, #10
 800e5a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e5ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e5b0:	e7b9      	b.n	800e526 <_strtod_l+0x2c6>
 800e5b2:	2a6e      	cmp	r2, #110	; 0x6e
 800e5b4:	e7db      	b.n	800e56e <_strtod_l+0x30e>
 800e5b6:	4990      	ldr	r1, [pc, #576]	; (800e7f8 <_strtod_l+0x598>)
 800e5b8:	a817      	add	r0, sp, #92	; 0x5c
 800e5ba:	f001 fe3f 	bl	801023c <__match>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f43f aeb0 	beq.w	800e324 <_strtod_l+0xc4>
 800e5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5c6:	498d      	ldr	r1, [pc, #564]	; (800e7fc <_strtod_l+0x59c>)
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	a817      	add	r0, sp, #92	; 0x5c
 800e5cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5ce:	f001 fe35 	bl	801023c <__match>
 800e5d2:	b910      	cbnz	r0, 800e5da <_strtod_l+0x37a>
 800e5d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e80c <_strtod_l+0x5ac>
 800e5de:	f04f 0a00 	mov.w	sl, #0
 800e5e2:	e681      	b.n	800e2e8 <_strtod_l+0x88>
 800e5e4:	4886      	ldr	r0, [pc, #536]	; (800e800 <_strtod_l+0x5a0>)
 800e5e6:	f003 f953 	bl	8011890 <nan>
 800e5ea:	ec5b ab10 	vmov	sl, fp, d0
 800e5ee:	e67b      	b.n	800e2e8 <_strtod_l+0x88>
 800e5f0:	9b05      	ldr	r3, [sp, #20]
 800e5f2:	9807      	ldr	r0, [sp, #28]
 800e5f4:	1af3      	subs	r3, r6, r3
 800e5f6:	2f00      	cmp	r7, #0
 800e5f8:	bf08      	it	eq
 800e5fa:	462f      	moveq	r7, r5
 800e5fc:	2d10      	cmp	r5, #16
 800e5fe:	9306      	str	r3, [sp, #24]
 800e600:	46a8      	mov	r8, r5
 800e602:	bfa8      	it	ge
 800e604:	f04f 0810 	movge.w	r8, #16
 800e608:	f7f1 ff94 	bl	8000534 <__aeabi_ui2d>
 800e60c:	2d09      	cmp	r5, #9
 800e60e:	4682      	mov	sl, r0
 800e610:	468b      	mov	fp, r1
 800e612:	dd13      	ble.n	800e63c <_strtod_l+0x3dc>
 800e614:	4b7b      	ldr	r3, [pc, #492]	; (800e804 <_strtod_l+0x5a4>)
 800e616:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e61a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e61e:	f7f2 f803 	bl	8000628 <__aeabi_dmul>
 800e622:	4682      	mov	sl, r0
 800e624:	4648      	mov	r0, r9
 800e626:	468b      	mov	fp, r1
 800e628:	f7f1 ff84 	bl	8000534 <__aeabi_ui2d>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	4650      	mov	r0, sl
 800e632:	4659      	mov	r1, fp
 800e634:	f7f1 fe42 	bl	80002bc <__adddf3>
 800e638:	4682      	mov	sl, r0
 800e63a:	468b      	mov	fp, r1
 800e63c:	2d0f      	cmp	r5, #15
 800e63e:	dc38      	bgt.n	800e6b2 <_strtod_l+0x452>
 800e640:	9b06      	ldr	r3, [sp, #24]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f43f ae50 	beq.w	800e2e8 <_strtod_l+0x88>
 800e648:	dd24      	ble.n	800e694 <_strtod_l+0x434>
 800e64a:	2b16      	cmp	r3, #22
 800e64c:	dc0b      	bgt.n	800e666 <_strtod_l+0x406>
 800e64e:	496d      	ldr	r1, [pc, #436]	; (800e804 <_strtod_l+0x5a4>)
 800e650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e654:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e658:	4652      	mov	r2, sl
 800e65a:	465b      	mov	r3, fp
 800e65c:	f7f1 ffe4 	bl	8000628 <__aeabi_dmul>
 800e660:	4682      	mov	sl, r0
 800e662:	468b      	mov	fp, r1
 800e664:	e640      	b.n	800e2e8 <_strtod_l+0x88>
 800e666:	9a06      	ldr	r2, [sp, #24]
 800e668:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e66c:	4293      	cmp	r3, r2
 800e66e:	db20      	blt.n	800e6b2 <_strtod_l+0x452>
 800e670:	4c64      	ldr	r4, [pc, #400]	; (800e804 <_strtod_l+0x5a4>)
 800e672:	f1c5 050f 	rsb	r5, r5, #15
 800e676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e67a:	4652      	mov	r2, sl
 800e67c:	465b      	mov	r3, fp
 800e67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e682:	f7f1 ffd1 	bl	8000628 <__aeabi_dmul>
 800e686:	9b06      	ldr	r3, [sp, #24]
 800e688:	1b5d      	subs	r5, r3, r5
 800e68a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e68e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e692:	e7e3      	b.n	800e65c <_strtod_l+0x3fc>
 800e694:	9b06      	ldr	r3, [sp, #24]
 800e696:	3316      	adds	r3, #22
 800e698:	db0b      	blt.n	800e6b2 <_strtod_l+0x452>
 800e69a:	9b05      	ldr	r3, [sp, #20]
 800e69c:	1b9e      	subs	r6, r3, r6
 800e69e:	4b59      	ldr	r3, [pc, #356]	; (800e804 <_strtod_l+0x5a4>)
 800e6a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e6a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4659      	mov	r1, fp
 800e6ac:	f7f2 f8e6 	bl	800087c <__aeabi_ddiv>
 800e6b0:	e7d6      	b.n	800e660 <_strtod_l+0x400>
 800e6b2:	9b06      	ldr	r3, [sp, #24]
 800e6b4:	eba5 0808 	sub.w	r8, r5, r8
 800e6b8:	4498      	add	r8, r3
 800e6ba:	f1b8 0f00 	cmp.w	r8, #0
 800e6be:	dd74      	ble.n	800e7aa <_strtod_l+0x54a>
 800e6c0:	f018 030f 	ands.w	r3, r8, #15
 800e6c4:	d00a      	beq.n	800e6dc <_strtod_l+0x47c>
 800e6c6:	494f      	ldr	r1, [pc, #316]	; (800e804 <_strtod_l+0x5a4>)
 800e6c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6cc:	4652      	mov	r2, sl
 800e6ce:	465b      	mov	r3, fp
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	f7f1 ffa8 	bl	8000628 <__aeabi_dmul>
 800e6d8:	4682      	mov	sl, r0
 800e6da:	468b      	mov	fp, r1
 800e6dc:	f038 080f 	bics.w	r8, r8, #15
 800e6e0:	d04f      	beq.n	800e782 <_strtod_l+0x522>
 800e6e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6e6:	dd22      	ble.n	800e72e <_strtod_l+0x4ce>
 800e6e8:	2500      	movs	r5, #0
 800e6ea:	462e      	mov	r6, r5
 800e6ec:	9507      	str	r5, [sp, #28]
 800e6ee:	9505      	str	r5, [sp, #20]
 800e6f0:	2322      	movs	r3, #34	; 0x22
 800e6f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e80c <_strtod_l+0x5ac>
 800e6f6:	6023      	str	r3, [r4, #0]
 800e6f8:	f04f 0a00 	mov.w	sl, #0
 800e6fc:	9b07      	ldr	r3, [sp, #28]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f43f adf2 	beq.w	800e2e8 <_strtod_l+0x88>
 800e704:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e706:	4620      	mov	r0, r4
 800e708:	f001 feb8 	bl	801047c <_Bfree>
 800e70c:	9905      	ldr	r1, [sp, #20]
 800e70e:	4620      	mov	r0, r4
 800e710:	f001 feb4 	bl	801047c <_Bfree>
 800e714:	4631      	mov	r1, r6
 800e716:	4620      	mov	r0, r4
 800e718:	f001 feb0 	bl	801047c <_Bfree>
 800e71c:	9907      	ldr	r1, [sp, #28]
 800e71e:	4620      	mov	r0, r4
 800e720:	f001 feac 	bl	801047c <_Bfree>
 800e724:	4629      	mov	r1, r5
 800e726:	4620      	mov	r0, r4
 800e728:	f001 fea8 	bl	801047c <_Bfree>
 800e72c:	e5dc      	b.n	800e2e8 <_strtod_l+0x88>
 800e72e:	4b36      	ldr	r3, [pc, #216]	; (800e808 <_strtod_l+0x5a8>)
 800e730:	9304      	str	r3, [sp, #16]
 800e732:	2300      	movs	r3, #0
 800e734:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e738:	4650      	mov	r0, sl
 800e73a:	4659      	mov	r1, fp
 800e73c:	4699      	mov	r9, r3
 800e73e:	f1b8 0f01 	cmp.w	r8, #1
 800e742:	dc21      	bgt.n	800e788 <_strtod_l+0x528>
 800e744:	b10b      	cbz	r3, 800e74a <_strtod_l+0x4ea>
 800e746:	4682      	mov	sl, r0
 800e748:	468b      	mov	fp, r1
 800e74a:	4b2f      	ldr	r3, [pc, #188]	; (800e808 <_strtod_l+0x5a8>)
 800e74c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e750:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e754:	4652      	mov	r2, sl
 800e756:	465b      	mov	r3, fp
 800e758:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e75c:	f7f1 ff64 	bl	8000628 <__aeabi_dmul>
 800e760:	4b2a      	ldr	r3, [pc, #168]	; (800e80c <_strtod_l+0x5ac>)
 800e762:	460a      	mov	r2, r1
 800e764:	400b      	ands	r3, r1
 800e766:	492a      	ldr	r1, [pc, #168]	; (800e810 <_strtod_l+0x5b0>)
 800e768:	428b      	cmp	r3, r1
 800e76a:	4682      	mov	sl, r0
 800e76c:	d8bc      	bhi.n	800e6e8 <_strtod_l+0x488>
 800e76e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e772:	428b      	cmp	r3, r1
 800e774:	bf86      	itte	hi
 800e776:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e814 <_strtod_l+0x5b4>
 800e77a:	f04f 3aff 	movhi.w	sl, #4294967295
 800e77e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e782:	2300      	movs	r3, #0
 800e784:	9304      	str	r3, [sp, #16]
 800e786:	e084      	b.n	800e892 <_strtod_l+0x632>
 800e788:	f018 0f01 	tst.w	r8, #1
 800e78c:	d005      	beq.n	800e79a <_strtod_l+0x53a>
 800e78e:	9b04      	ldr	r3, [sp, #16]
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 ff48 	bl	8000628 <__aeabi_dmul>
 800e798:	2301      	movs	r3, #1
 800e79a:	9a04      	ldr	r2, [sp, #16]
 800e79c:	3208      	adds	r2, #8
 800e79e:	f109 0901 	add.w	r9, r9, #1
 800e7a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7a6:	9204      	str	r2, [sp, #16]
 800e7a8:	e7c9      	b.n	800e73e <_strtod_l+0x4de>
 800e7aa:	d0ea      	beq.n	800e782 <_strtod_l+0x522>
 800e7ac:	f1c8 0800 	rsb	r8, r8, #0
 800e7b0:	f018 020f 	ands.w	r2, r8, #15
 800e7b4:	d00a      	beq.n	800e7cc <_strtod_l+0x56c>
 800e7b6:	4b13      	ldr	r3, [pc, #76]	; (800e804 <_strtod_l+0x5a4>)
 800e7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7bc:	4650      	mov	r0, sl
 800e7be:	4659      	mov	r1, fp
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	f7f2 f85a 	bl	800087c <__aeabi_ddiv>
 800e7c8:	4682      	mov	sl, r0
 800e7ca:	468b      	mov	fp, r1
 800e7cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e7d0:	d0d7      	beq.n	800e782 <_strtod_l+0x522>
 800e7d2:	f1b8 0f1f 	cmp.w	r8, #31
 800e7d6:	dd1f      	ble.n	800e818 <_strtod_l+0x5b8>
 800e7d8:	2500      	movs	r5, #0
 800e7da:	462e      	mov	r6, r5
 800e7dc:	9507      	str	r5, [sp, #28]
 800e7de:	9505      	str	r5, [sp, #20]
 800e7e0:	2322      	movs	r3, #34	; 0x22
 800e7e2:	f04f 0a00 	mov.w	sl, #0
 800e7e6:	f04f 0b00 	mov.w	fp, #0
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	e786      	b.n	800e6fc <_strtod_l+0x49c>
 800e7ee:	bf00      	nop
 800e7f0:	0801305d 	.word	0x0801305d
 800e7f4:	0801309c 	.word	0x0801309c
 800e7f8:	08013055 	.word	0x08013055
 800e7fc:	080131dc 	.word	0x080131dc
 800e800:	080134a3 	.word	0x080134a3
 800e804:	08013368 	.word	0x08013368
 800e808:	08013340 	.word	0x08013340
 800e80c:	7ff00000 	.word	0x7ff00000
 800e810:	7ca00000 	.word	0x7ca00000
 800e814:	7fefffff 	.word	0x7fefffff
 800e818:	f018 0310 	ands.w	r3, r8, #16
 800e81c:	bf18      	it	ne
 800e81e:	236a      	movne	r3, #106	; 0x6a
 800e820:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ebd0 <_strtod_l+0x970>
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	4650      	mov	r0, sl
 800e828:	4659      	mov	r1, fp
 800e82a:	2300      	movs	r3, #0
 800e82c:	f018 0f01 	tst.w	r8, #1
 800e830:	d004      	beq.n	800e83c <_strtod_l+0x5dc>
 800e832:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e836:	f7f1 fef7 	bl	8000628 <__aeabi_dmul>
 800e83a:	2301      	movs	r3, #1
 800e83c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e840:	f109 0908 	add.w	r9, r9, #8
 800e844:	d1f2      	bne.n	800e82c <_strtod_l+0x5cc>
 800e846:	b10b      	cbz	r3, 800e84c <_strtod_l+0x5ec>
 800e848:	4682      	mov	sl, r0
 800e84a:	468b      	mov	fp, r1
 800e84c:	9b04      	ldr	r3, [sp, #16]
 800e84e:	b1c3      	cbz	r3, 800e882 <_strtod_l+0x622>
 800e850:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e854:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e858:	2b00      	cmp	r3, #0
 800e85a:	4659      	mov	r1, fp
 800e85c:	dd11      	ble.n	800e882 <_strtod_l+0x622>
 800e85e:	2b1f      	cmp	r3, #31
 800e860:	f340 8124 	ble.w	800eaac <_strtod_l+0x84c>
 800e864:	2b34      	cmp	r3, #52	; 0x34
 800e866:	bfde      	ittt	le
 800e868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e86c:	f04f 33ff 	movle.w	r3, #4294967295
 800e870:	fa03 f202 	lslle.w	r2, r3, r2
 800e874:	f04f 0a00 	mov.w	sl, #0
 800e878:	bfcc      	ite	gt
 800e87a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e87e:	ea02 0b01 	andle.w	fp, r2, r1
 800e882:	2200      	movs	r2, #0
 800e884:	2300      	movs	r3, #0
 800e886:	4650      	mov	r0, sl
 800e888:	4659      	mov	r1, fp
 800e88a:	f7f2 f935 	bl	8000af8 <__aeabi_dcmpeq>
 800e88e:	2800      	cmp	r0, #0
 800e890:	d1a2      	bne.n	800e7d8 <_strtod_l+0x578>
 800e892:	9b07      	ldr	r3, [sp, #28]
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	9908      	ldr	r1, [sp, #32]
 800e898:	462b      	mov	r3, r5
 800e89a:	463a      	mov	r2, r7
 800e89c:	4620      	mov	r0, r4
 800e89e:	f001 fe55 	bl	801054c <__s2b>
 800e8a2:	9007      	str	r0, [sp, #28]
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f43f af1f 	beq.w	800e6e8 <_strtod_l+0x488>
 800e8aa:	9b05      	ldr	r3, [sp, #20]
 800e8ac:	1b9e      	subs	r6, r3, r6
 800e8ae:	9b06      	ldr	r3, [sp, #24]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bfb4      	ite	lt
 800e8b4:	4633      	movlt	r3, r6
 800e8b6:	2300      	movge	r3, #0
 800e8b8:	930c      	str	r3, [sp, #48]	; 0x30
 800e8ba:	9b06      	ldr	r3, [sp, #24]
 800e8bc:	2500      	movs	r5, #0
 800e8be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8c2:	9312      	str	r3, [sp, #72]	; 0x48
 800e8c4:	462e      	mov	r6, r5
 800e8c6:	9b07      	ldr	r3, [sp, #28]
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	6859      	ldr	r1, [r3, #4]
 800e8cc:	f001 fd96 	bl	80103fc <_Balloc>
 800e8d0:	9005      	str	r0, [sp, #20]
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f43f af0c 	beq.w	800e6f0 <_strtod_l+0x490>
 800e8d8:	9b07      	ldr	r3, [sp, #28]
 800e8da:	691a      	ldr	r2, [r3, #16]
 800e8dc:	3202      	adds	r2, #2
 800e8de:	f103 010c 	add.w	r1, r3, #12
 800e8e2:	0092      	lsls	r2, r2, #2
 800e8e4:	300c      	adds	r0, #12
 800e8e6:	f7fe fd63 	bl	800d3b0 <memcpy>
 800e8ea:	ec4b ab10 	vmov	d0, sl, fp
 800e8ee:	aa1a      	add	r2, sp, #104	; 0x68
 800e8f0:	a919      	add	r1, sp, #100	; 0x64
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f002 f970 	bl	8010bd8 <__d2b>
 800e8f8:	ec4b ab18 	vmov	d8, sl, fp
 800e8fc:	9018      	str	r0, [sp, #96]	; 0x60
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f43f aef6 	beq.w	800e6f0 <_strtod_l+0x490>
 800e904:	2101      	movs	r1, #1
 800e906:	4620      	mov	r0, r4
 800e908:	f001 feba 	bl	8010680 <__i2b>
 800e90c:	4606      	mov	r6, r0
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f aeee 	beq.w	800e6f0 <_strtod_l+0x490>
 800e914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e916:	9904      	ldr	r1, [sp, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfab      	itete	ge
 800e91c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e91e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e920:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e922:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e926:	bfac      	ite	ge
 800e928:	eb03 0902 	addge.w	r9, r3, r2
 800e92c:	1ad7      	sublt	r7, r2, r3
 800e92e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e930:	eba3 0801 	sub.w	r8, r3, r1
 800e934:	4490      	add	r8, r2
 800e936:	4ba1      	ldr	r3, [pc, #644]	; (800ebbc <_strtod_l+0x95c>)
 800e938:	f108 38ff 	add.w	r8, r8, #4294967295
 800e93c:	4598      	cmp	r8, r3
 800e93e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e942:	f280 80c7 	bge.w	800ead4 <_strtod_l+0x874>
 800e946:	eba3 0308 	sub.w	r3, r3, r8
 800e94a:	2b1f      	cmp	r3, #31
 800e94c:	eba2 0203 	sub.w	r2, r2, r3
 800e950:	f04f 0101 	mov.w	r1, #1
 800e954:	f300 80b1 	bgt.w	800eaba <_strtod_l+0x85a>
 800e958:	fa01 f303 	lsl.w	r3, r1, r3
 800e95c:	930d      	str	r3, [sp, #52]	; 0x34
 800e95e:	2300      	movs	r3, #0
 800e960:	9308      	str	r3, [sp, #32]
 800e962:	eb09 0802 	add.w	r8, r9, r2
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	45c1      	cmp	r9, r8
 800e96a:	4417      	add	r7, r2
 800e96c:	441f      	add	r7, r3
 800e96e:	464b      	mov	r3, r9
 800e970:	bfa8      	it	ge
 800e972:	4643      	movge	r3, r8
 800e974:	42bb      	cmp	r3, r7
 800e976:	bfa8      	it	ge
 800e978:	463b      	movge	r3, r7
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	bfc2      	ittt	gt
 800e97e:	eba8 0803 	subgt.w	r8, r8, r3
 800e982:	1aff      	subgt	r7, r7, r3
 800e984:	eba9 0903 	subgt.w	r9, r9, r3
 800e988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	dd17      	ble.n	800e9be <_strtod_l+0x75e>
 800e98e:	4631      	mov	r1, r6
 800e990:	461a      	mov	r2, r3
 800e992:	4620      	mov	r0, r4
 800e994:	f001 ff34 	bl	8010800 <__pow5mult>
 800e998:	4606      	mov	r6, r0
 800e99a:	2800      	cmp	r0, #0
 800e99c:	f43f aea8 	beq.w	800e6f0 <_strtod_l+0x490>
 800e9a0:	4601      	mov	r1, r0
 800e9a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f001 fe81 	bl	80106ac <__multiply>
 800e9aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f43f ae9f 	beq.w	800e6f0 <_strtod_l+0x490>
 800e9b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f001 fd61 	bl	801047c <_Bfree>
 800e9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9bc:	9318      	str	r3, [sp, #96]	; 0x60
 800e9be:	f1b8 0f00 	cmp.w	r8, #0
 800e9c2:	f300 808c 	bgt.w	800eade <_strtod_l+0x87e>
 800e9c6:	9b06      	ldr	r3, [sp, #24]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dd08      	ble.n	800e9de <_strtod_l+0x77e>
 800e9cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9ce:	9905      	ldr	r1, [sp, #20]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f001 ff15 	bl	8010800 <__pow5mult>
 800e9d6:	9005      	str	r0, [sp, #20]
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f43f ae89 	beq.w	800e6f0 <_strtod_l+0x490>
 800e9de:	2f00      	cmp	r7, #0
 800e9e0:	dd08      	ble.n	800e9f4 <_strtod_l+0x794>
 800e9e2:	9905      	ldr	r1, [sp, #20]
 800e9e4:	463a      	mov	r2, r7
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f001 ff64 	bl	80108b4 <__lshift>
 800e9ec:	9005      	str	r0, [sp, #20]
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f43f ae7e 	beq.w	800e6f0 <_strtod_l+0x490>
 800e9f4:	f1b9 0f00 	cmp.w	r9, #0
 800e9f8:	dd08      	ble.n	800ea0c <_strtod_l+0x7ac>
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	464a      	mov	r2, r9
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f001 ff58 	bl	80108b4 <__lshift>
 800ea04:	4606      	mov	r6, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f43f ae72 	beq.w	800e6f0 <_strtod_l+0x490>
 800ea0c:	9a05      	ldr	r2, [sp, #20]
 800ea0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ea10:	4620      	mov	r0, r4
 800ea12:	f001 ffdb 	bl	80109cc <__mdiff>
 800ea16:	4605      	mov	r5, r0
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f43f ae69 	beq.w	800e6f0 <_strtod_l+0x490>
 800ea1e:	68c3      	ldr	r3, [r0, #12]
 800ea20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea22:	2300      	movs	r3, #0
 800ea24:	60c3      	str	r3, [r0, #12]
 800ea26:	4631      	mov	r1, r6
 800ea28:	f001 ffb4 	bl	8010994 <__mcmp>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	da60      	bge.n	800eaf2 <_strtod_l+0x892>
 800ea30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea32:	ea53 030a 	orrs.w	r3, r3, sl
 800ea36:	f040 8082 	bne.w	800eb3e <_strtod_l+0x8de>
 800ea3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d17d      	bne.n	800eb3e <_strtod_l+0x8de>
 800ea42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea46:	0d1b      	lsrs	r3, r3, #20
 800ea48:	051b      	lsls	r3, r3, #20
 800ea4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea4e:	d976      	bls.n	800eb3e <_strtod_l+0x8de>
 800ea50:	696b      	ldr	r3, [r5, #20]
 800ea52:	b913      	cbnz	r3, 800ea5a <_strtod_l+0x7fa>
 800ea54:	692b      	ldr	r3, [r5, #16]
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	dd71      	ble.n	800eb3e <_strtod_l+0x8de>
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f001 ff28 	bl	80108b4 <__lshift>
 800ea64:	4631      	mov	r1, r6
 800ea66:	4605      	mov	r5, r0
 800ea68:	f001 ff94 	bl	8010994 <__mcmp>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	dd66      	ble.n	800eb3e <_strtod_l+0x8de>
 800ea70:	9904      	ldr	r1, [sp, #16]
 800ea72:	4a53      	ldr	r2, [pc, #332]	; (800ebc0 <_strtod_l+0x960>)
 800ea74:	465b      	mov	r3, fp
 800ea76:	2900      	cmp	r1, #0
 800ea78:	f000 8081 	beq.w	800eb7e <_strtod_l+0x91e>
 800ea7c:	ea02 010b 	and.w	r1, r2, fp
 800ea80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea84:	dc7b      	bgt.n	800eb7e <_strtod_l+0x91e>
 800ea86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea8a:	f77f aea9 	ble.w	800e7e0 <_strtod_l+0x580>
 800ea8e:	4b4d      	ldr	r3, [pc, #308]	; (800ebc4 <_strtod_l+0x964>)
 800ea90:	4650      	mov	r0, sl
 800ea92:	4659      	mov	r1, fp
 800ea94:	2200      	movs	r2, #0
 800ea96:	f7f1 fdc7 	bl	8000628 <__aeabi_dmul>
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4303      	orrs	r3, r0
 800ea9e:	bf08      	it	eq
 800eaa0:	2322      	moveq	r3, #34	; 0x22
 800eaa2:	4682      	mov	sl, r0
 800eaa4:	468b      	mov	fp, r1
 800eaa6:	bf08      	it	eq
 800eaa8:	6023      	streq	r3, [r4, #0]
 800eaaa:	e62b      	b.n	800e704 <_strtod_l+0x4a4>
 800eaac:	f04f 32ff 	mov.w	r2, #4294967295
 800eab0:	fa02 f303 	lsl.w	r3, r2, r3
 800eab4:	ea03 0a0a 	and.w	sl, r3, sl
 800eab8:	e6e3      	b.n	800e882 <_strtod_l+0x622>
 800eaba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800eabe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800eac2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800eac6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eaca:	fa01 f308 	lsl.w	r3, r1, r8
 800eace:	9308      	str	r3, [sp, #32]
 800ead0:	910d      	str	r1, [sp, #52]	; 0x34
 800ead2:	e746      	b.n	800e962 <_strtod_l+0x702>
 800ead4:	2300      	movs	r3, #0
 800ead6:	9308      	str	r3, [sp, #32]
 800ead8:	2301      	movs	r3, #1
 800eada:	930d      	str	r3, [sp, #52]	; 0x34
 800eadc:	e741      	b.n	800e962 <_strtod_l+0x702>
 800eade:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eae0:	4642      	mov	r2, r8
 800eae2:	4620      	mov	r0, r4
 800eae4:	f001 fee6 	bl	80108b4 <__lshift>
 800eae8:	9018      	str	r0, [sp, #96]	; 0x60
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f47f af6b 	bne.w	800e9c6 <_strtod_l+0x766>
 800eaf0:	e5fe      	b.n	800e6f0 <_strtod_l+0x490>
 800eaf2:	465f      	mov	r7, fp
 800eaf4:	d16e      	bne.n	800ebd4 <_strtod_l+0x974>
 800eaf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eafc:	b342      	cbz	r2, 800eb50 <_strtod_l+0x8f0>
 800eafe:	4a32      	ldr	r2, [pc, #200]	; (800ebc8 <_strtod_l+0x968>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d128      	bne.n	800eb56 <_strtod_l+0x8f6>
 800eb04:	9b04      	ldr	r3, [sp, #16]
 800eb06:	4651      	mov	r1, sl
 800eb08:	b1eb      	cbz	r3, 800eb46 <_strtod_l+0x8e6>
 800eb0a:	4b2d      	ldr	r3, [pc, #180]	; (800ebc0 <_strtod_l+0x960>)
 800eb0c:	403b      	ands	r3, r7
 800eb0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb12:	f04f 32ff 	mov.w	r2, #4294967295
 800eb16:	d819      	bhi.n	800eb4c <_strtod_l+0x8ec>
 800eb18:	0d1b      	lsrs	r3, r3, #20
 800eb1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb22:	4299      	cmp	r1, r3
 800eb24:	d117      	bne.n	800eb56 <_strtod_l+0x8f6>
 800eb26:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <_strtod_l+0x96c>)
 800eb28:	429f      	cmp	r7, r3
 800eb2a:	d102      	bne.n	800eb32 <_strtod_l+0x8d2>
 800eb2c:	3101      	adds	r1, #1
 800eb2e:	f43f addf 	beq.w	800e6f0 <_strtod_l+0x490>
 800eb32:	4b23      	ldr	r3, [pc, #140]	; (800ebc0 <_strtod_l+0x960>)
 800eb34:	403b      	ands	r3, r7
 800eb36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb3a:	f04f 0a00 	mov.w	sl, #0
 800eb3e:	9b04      	ldr	r3, [sp, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1a4      	bne.n	800ea8e <_strtod_l+0x82e>
 800eb44:	e5de      	b.n	800e704 <_strtod_l+0x4a4>
 800eb46:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4a:	e7ea      	b.n	800eb22 <_strtod_l+0x8c2>
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	e7e8      	b.n	800eb22 <_strtod_l+0x8c2>
 800eb50:	ea53 030a 	orrs.w	r3, r3, sl
 800eb54:	d08c      	beq.n	800ea70 <_strtod_l+0x810>
 800eb56:	9b08      	ldr	r3, [sp, #32]
 800eb58:	b1db      	cbz	r3, 800eb92 <_strtod_l+0x932>
 800eb5a:	423b      	tst	r3, r7
 800eb5c:	d0ef      	beq.n	800eb3e <_strtod_l+0x8de>
 800eb5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb60:	9a04      	ldr	r2, [sp, #16]
 800eb62:	4650      	mov	r0, sl
 800eb64:	4659      	mov	r1, fp
 800eb66:	b1c3      	cbz	r3, 800eb9a <_strtod_l+0x93a>
 800eb68:	f7ff fb5d 	bl	800e226 <sulp>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	460b      	mov	r3, r1
 800eb70:	ec51 0b18 	vmov	r0, r1, d8
 800eb74:	f7f1 fba2 	bl	80002bc <__adddf3>
 800eb78:	4682      	mov	sl, r0
 800eb7a:	468b      	mov	fp, r1
 800eb7c:	e7df      	b.n	800eb3e <_strtod_l+0x8de>
 800eb7e:	4013      	ands	r3, r2
 800eb80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb8c:	f04f 3aff 	mov.w	sl, #4294967295
 800eb90:	e7d5      	b.n	800eb3e <_strtod_l+0x8de>
 800eb92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb94:	ea13 0f0a 	tst.w	r3, sl
 800eb98:	e7e0      	b.n	800eb5c <_strtod_l+0x8fc>
 800eb9a:	f7ff fb44 	bl	800e226 <sulp>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	ec51 0b18 	vmov	r0, r1, d8
 800eba6:	f7f1 fb87 	bl	80002b8 <__aeabi_dsub>
 800ebaa:	2200      	movs	r2, #0
 800ebac:	2300      	movs	r3, #0
 800ebae:	4682      	mov	sl, r0
 800ebb0:	468b      	mov	fp, r1
 800ebb2:	f7f1 ffa1 	bl	8000af8 <__aeabi_dcmpeq>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d0c1      	beq.n	800eb3e <_strtod_l+0x8de>
 800ebba:	e611      	b.n	800e7e0 <_strtod_l+0x580>
 800ebbc:	fffffc02 	.word	0xfffffc02
 800ebc0:	7ff00000 	.word	0x7ff00000
 800ebc4:	39500000 	.word	0x39500000
 800ebc8:	000fffff 	.word	0x000fffff
 800ebcc:	7fefffff 	.word	0x7fefffff
 800ebd0:	080130b0 	.word	0x080130b0
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	f002 f85a 	bl	8010c90 <__ratio>
 800ebdc:	ec59 8b10 	vmov	r8, r9, d0
 800ebe0:	ee10 0a10 	vmov	r0, s0
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebea:	4649      	mov	r1, r9
 800ebec:	f7f1 ff98 	bl	8000b20 <__aeabi_dcmple>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d07a      	beq.n	800ecea <_strtod_l+0xa8a>
 800ebf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d04a      	beq.n	800ec90 <_strtod_l+0xa30>
 800ebfa:	4b95      	ldr	r3, [pc, #596]	; (800ee50 <_strtod_l+0xbf0>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ee50 <_strtod_l+0xbf0>
 800ec06:	f04f 0800 	mov.w	r8, #0
 800ec0a:	4b92      	ldr	r3, [pc, #584]	; (800ee54 <_strtod_l+0xbf4>)
 800ec0c:	403b      	ands	r3, r7
 800ec0e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec12:	4b91      	ldr	r3, [pc, #580]	; (800ee58 <_strtod_l+0xbf8>)
 800ec14:	429a      	cmp	r2, r3
 800ec16:	f040 80b0 	bne.w	800ed7a <_strtod_l+0xb1a>
 800ec1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ec22:	ec4b ab10 	vmov	d0, sl, fp
 800ec26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec2a:	f001 ff59 	bl	8010ae0 <__ulp>
 800ec2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec32:	ec53 2b10 	vmov	r2, r3, d0
 800ec36:	f7f1 fcf7 	bl	8000628 <__aeabi_dmul>
 800ec3a:	4652      	mov	r2, sl
 800ec3c:	465b      	mov	r3, fp
 800ec3e:	f7f1 fb3d 	bl	80002bc <__adddf3>
 800ec42:	460b      	mov	r3, r1
 800ec44:	4983      	ldr	r1, [pc, #524]	; (800ee54 <_strtod_l+0xbf4>)
 800ec46:	4a85      	ldr	r2, [pc, #532]	; (800ee5c <_strtod_l+0xbfc>)
 800ec48:	4019      	ands	r1, r3
 800ec4a:	4291      	cmp	r1, r2
 800ec4c:	4682      	mov	sl, r0
 800ec4e:	d960      	bls.n	800ed12 <_strtod_l+0xab2>
 800ec50:	ee18 3a90 	vmov	r3, s17
 800ec54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d104      	bne.n	800ec66 <_strtod_l+0xa06>
 800ec5c:	ee18 3a10 	vmov	r3, s16
 800ec60:	3301      	adds	r3, #1
 800ec62:	f43f ad45 	beq.w	800e6f0 <_strtod_l+0x490>
 800ec66:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ee68 <_strtod_l+0xc08>
 800ec6a:	f04f 3aff 	mov.w	sl, #4294967295
 800ec6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec70:	4620      	mov	r0, r4
 800ec72:	f001 fc03 	bl	801047c <_Bfree>
 800ec76:	9905      	ldr	r1, [sp, #20]
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f001 fbff 	bl	801047c <_Bfree>
 800ec7e:	4631      	mov	r1, r6
 800ec80:	4620      	mov	r0, r4
 800ec82:	f001 fbfb 	bl	801047c <_Bfree>
 800ec86:	4629      	mov	r1, r5
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f001 fbf7 	bl	801047c <_Bfree>
 800ec8e:	e61a      	b.n	800e8c6 <_strtod_l+0x666>
 800ec90:	f1ba 0f00 	cmp.w	sl, #0
 800ec94:	d11b      	bne.n	800ecce <_strtod_l+0xa6e>
 800ec96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec9a:	b9f3      	cbnz	r3, 800ecda <_strtod_l+0xa7a>
 800ec9c:	4b6c      	ldr	r3, [pc, #432]	; (800ee50 <_strtod_l+0xbf0>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	4640      	mov	r0, r8
 800eca2:	4649      	mov	r1, r9
 800eca4:	f7f1 ff32 	bl	8000b0c <__aeabi_dcmplt>
 800eca8:	b9d0      	cbnz	r0, 800ece0 <_strtod_l+0xa80>
 800ecaa:	4640      	mov	r0, r8
 800ecac:	4649      	mov	r1, r9
 800ecae:	4b6c      	ldr	r3, [pc, #432]	; (800ee60 <_strtod_l+0xc00>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f7f1 fcb9 	bl	8000628 <__aeabi_dmul>
 800ecb6:	4680      	mov	r8, r0
 800ecb8:	4689      	mov	r9, r1
 800ecba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ecc2:	9315      	str	r3, [sp, #84]	; 0x54
 800ecc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ecc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eccc:	e79d      	b.n	800ec0a <_strtod_l+0x9aa>
 800ecce:	f1ba 0f01 	cmp.w	sl, #1
 800ecd2:	d102      	bne.n	800ecda <_strtod_l+0xa7a>
 800ecd4:	2f00      	cmp	r7, #0
 800ecd6:	f43f ad83 	beq.w	800e7e0 <_strtod_l+0x580>
 800ecda:	4b62      	ldr	r3, [pc, #392]	; (800ee64 <_strtod_l+0xc04>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	e78e      	b.n	800ebfe <_strtod_l+0x99e>
 800ece0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ee60 <_strtod_l+0xc00>
 800ece4:	f04f 0800 	mov.w	r8, #0
 800ece8:	e7e7      	b.n	800ecba <_strtod_l+0xa5a>
 800ecea:	4b5d      	ldr	r3, [pc, #372]	; (800ee60 <_strtod_l+0xc00>)
 800ecec:	4640      	mov	r0, r8
 800ecee:	4649      	mov	r1, r9
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f7f1 fc99 	bl	8000628 <__aeabi_dmul>
 800ecf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf8:	4680      	mov	r8, r0
 800ecfa:	4689      	mov	r9, r1
 800ecfc:	b933      	cbnz	r3, 800ed0c <_strtod_l+0xaac>
 800ecfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed02:	900e      	str	r0, [sp, #56]	; 0x38
 800ed04:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ed0a:	e7dd      	b.n	800ecc8 <_strtod_l+0xa68>
 800ed0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ed10:	e7f9      	b.n	800ed06 <_strtod_l+0xaa6>
 800ed12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed16:	9b04      	ldr	r3, [sp, #16]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1a8      	bne.n	800ec6e <_strtod_l+0xa0e>
 800ed1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed22:	0d1b      	lsrs	r3, r3, #20
 800ed24:	051b      	lsls	r3, r3, #20
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d1a1      	bne.n	800ec6e <_strtod_l+0xa0e>
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	f7f1 ffdb 	bl	8000ce8 <__aeabi_d2lz>
 800ed32:	f7f1 fc4b 	bl	80005cc <__aeabi_l2d>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	f7f1 fabb 	bl	80002b8 <__aeabi_dsub>
 800ed42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed48:	ea43 030a 	orr.w	r3, r3, sl
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4689      	mov	r9, r1
 800ed52:	d055      	beq.n	800ee00 <_strtod_l+0xba0>
 800ed54:	a336      	add	r3, pc, #216	; (adr r3, 800ee30 <_strtod_l+0xbd0>)
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	f7f1 fed7 	bl	8000b0c <__aeabi_dcmplt>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	f47f acd0 	bne.w	800e704 <_strtod_l+0x4a4>
 800ed64:	a334      	add	r3, pc, #208	; (adr r3, 800ee38 <_strtod_l+0xbd8>)
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	f7f1 feeb 	bl	8000b48 <__aeabi_dcmpgt>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	f43f af7b 	beq.w	800ec6e <_strtod_l+0xa0e>
 800ed78:	e4c4      	b.n	800e704 <_strtod_l+0x4a4>
 800ed7a:	9b04      	ldr	r3, [sp, #16]
 800ed7c:	b333      	cbz	r3, 800edcc <_strtod_l+0xb6c>
 800ed7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed84:	d822      	bhi.n	800edcc <_strtod_l+0xb6c>
 800ed86:	a32e      	add	r3, pc, #184	; (adr r3, 800ee40 <_strtod_l+0xbe0>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	4649      	mov	r1, r9
 800ed90:	f7f1 fec6 	bl	8000b20 <__aeabi_dcmple>
 800ed94:	b1a0      	cbz	r0, 800edc0 <_strtod_l+0xb60>
 800ed96:	4649      	mov	r1, r9
 800ed98:	4640      	mov	r0, r8
 800ed9a:	f7f1 ff1d 	bl	8000bd8 <__aeabi_d2uiz>
 800ed9e:	2801      	cmp	r0, #1
 800eda0:	bf38      	it	cc
 800eda2:	2001      	movcc	r0, #1
 800eda4:	f7f1 fbc6 	bl	8000534 <__aeabi_ui2d>
 800eda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edaa:	4680      	mov	r8, r0
 800edac:	4689      	mov	r9, r1
 800edae:	bb23      	cbnz	r3, 800edfa <_strtod_l+0xb9a>
 800edb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edb4:	9010      	str	r0, [sp, #64]	; 0x40
 800edb6:	9311      	str	r3, [sp, #68]	; 0x44
 800edb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800edbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800edc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800edc8:	1a9b      	subs	r3, r3, r2
 800edca:	9309      	str	r3, [sp, #36]	; 0x24
 800edcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800edd0:	eeb0 0a48 	vmov.f32	s0, s16
 800edd4:	eef0 0a68 	vmov.f32	s1, s17
 800edd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eddc:	f001 fe80 	bl	8010ae0 <__ulp>
 800ede0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ede4:	ec53 2b10 	vmov	r2, r3, d0
 800ede8:	f7f1 fc1e 	bl	8000628 <__aeabi_dmul>
 800edec:	ec53 2b18 	vmov	r2, r3, d8
 800edf0:	f7f1 fa64 	bl	80002bc <__adddf3>
 800edf4:	4682      	mov	sl, r0
 800edf6:	468b      	mov	fp, r1
 800edf8:	e78d      	b.n	800ed16 <_strtod_l+0xab6>
 800edfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800edfe:	e7db      	b.n	800edb8 <_strtod_l+0xb58>
 800ee00:	a311      	add	r3, pc, #68	; (adr r3, 800ee48 <_strtod_l+0xbe8>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 fe81 	bl	8000b0c <__aeabi_dcmplt>
 800ee0a:	e7b2      	b.n	800ed72 <_strtod_l+0xb12>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	f7ff ba6b 	b.w	800e2f0 <_strtod_l+0x90>
 800ee1a:	2a65      	cmp	r2, #101	; 0x65
 800ee1c:	f43f ab5f 	beq.w	800e4de <_strtod_l+0x27e>
 800ee20:	2a45      	cmp	r2, #69	; 0x45
 800ee22:	f43f ab5c 	beq.w	800e4de <_strtod_l+0x27e>
 800ee26:	2301      	movs	r3, #1
 800ee28:	f7ff bb94 	b.w	800e554 <_strtod_l+0x2f4>
 800ee2c:	f3af 8000 	nop.w
 800ee30:	94a03595 	.word	0x94a03595
 800ee34:	3fdfffff 	.word	0x3fdfffff
 800ee38:	35afe535 	.word	0x35afe535
 800ee3c:	3fe00000 	.word	0x3fe00000
 800ee40:	ffc00000 	.word	0xffc00000
 800ee44:	41dfffff 	.word	0x41dfffff
 800ee48:	94a03595 	.word	0x94a03595
 800ee4c:	3fcfffff 	.word	0x3fcfffff
 800ee50:	3ff00000 	.word	0x3ff00000
 800ee54:	7ff00000 	.word	0x7ff00000
 800ee58:	7fe00000 	.word	0x7fe00000
 800ee5c:	7c9fffff 	.word	0x7c9fffff
 800ee60:	3fe00000 	.word	0x3fe00000
 800ee64:	bff00000 	.word	0xbff00000
 800ee68:	7fefffff 	.word	0x7fefffff

0800ee6c <_strtod_r>:
 800ee6c:	4b01      	ldr	r3, [pc, #4]	; (800ee74 <_strtod_r+0x8>)
 800ee6e:	f7ff b9f7 	b.w	800e260 <_strtod_l>
 800ee72:	bf00      	nop
 800ee74:	20000138 	.word	0x20000138

0800ee78 <_strtol_l.constprop.0>:
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7e:	d001      	beq.n	800ee84 <_strtol_l.constprop.0+0xc>
 800ee80:	2b24      	cmp	r3, #36	; 0x24
 800ee82:	d906      	bls.n	800ee92 <_strtol_l.constprop.0+0x1a>
 800ee84:	f7fe fa6a 	bl	800d35c <__errno>
 800ee88:	2316      	movs	r3, #22
 800ee8a:	6003      	str	r3, [r0, #0]
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ef78 <_strtol_l.constprop.0+0x100>
 800ee96:	460d      	mov	r5, r1
 800ee98:	462e      	mov	r6, r5
 800ee9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eea2:	f017 0708 	ands.w	r7, r7, #8
 800eea6:	d1f7      	bne.n	800ee98 <_strtol_l.constprop.0+0x20>
 800eea8:	2c2d      	cmp	r4, #45	; 0x2d
 800eeaa:	d132      	bne.n	800ef12 <_strtol_l.constprop.0+0x9a>
 800eeac:	782c      	ldrb	r4, [r5, #0]
 800eeae:	2701      	movs	r7, #1
 800eeb0:	1cb5      	adds	r5, r6, #2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d05b      	beq.n	800ef6e <_strtol_l.constprop.0+0xf6>
 800eeb6:	2b10      	cmp	r3, #16
 800eeb8:	d109      	bne.n	800eece <_strtol_l.constprop.0+0x56>
 800eeba:	2c30      	cmp	r4, #48	; 0x30
 800eebc:	d107      	bne.n	800eece <_strtol_l.constprop.0+0x56>
 800eebe:	782c      	ldrb	r4, [r5, #0]
 800eec0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eec4:	2c58      	cmp	r4, #88	; 0x58
 800eec6:	d14d      	bne.n	800ef64 <_strtol_l.constprop.0+0xec>
 800eec8:	786c      	ldrb	r4, [r5, #1]
 800eeca:	2310      	movs	r3, #16
 800eecc:	3502      	adds	r5, #2
 800eece:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eed2:	f108 38ff 	add.w	r8, r8, #4294967295
 800eed6:	f04f 0c00 	mov.w	ip, #0
 800eeda:	fbb8 f9f3 	udiv	r9, r8, r3
 800eede:	4666      	mov	r6, ip
 800eee0:	fb03 8a19 	mls	sl, r3, r9, r8
 800eee4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eee8:	f1be 0f09 	cmp.w	lr, #9
 800eeec:	d816      	bhi.n	800ef1c <_strtol_l.constprop.0+0xa4>
 800eeee:	4674      	mov	r4, lr
 800eef0:	42a3      	cmp	r3, r4
 800eef2:	dd24      	ble.n	800ef3e <_strtol_l.constprop.0+0xc6>
 800eef4:	f1bc 0f00 	cmp.w	ip, #0
 800eef8:	db1e      	blt.n	800ef38 <_strtol_l.constprop.0+0xc0>
 800eefa:	45b1      	cmp	r9, r6
 800eefc:	d31c      	bcc.n	800ef38 <_strtol_l.constprop.0+0xc0>
 800eefe:	d101      	bne.n	800ef04 <_strtol_l.constprop.0+0x8c>
 800ef00:	45a2      	cmp	sl, r4
 800ef02:	db19      	blt.n	800ef38 <_strtol_l.constprop.0+0xc0>
 800ef04:	fb06 4603 	mla	r6, r6, r3, r4
 800ef08:	f04f 0c01 	mov.w	ip, #1
 800ef0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef10:	e7e8      	b.n	800eee4 <_strtol_l.constprop.0+0x6c>
 800ef12:	2c2b      	cmp	r4, #43	; 0x2b
 800ef14:	bf04      	itt	eq
 800ef16:	782c      	ldrbeq	r4, [r5, #0]
 800ef18:	1cb5      	addeq	r5, r6, #2
 800ef1a:	e7ca      	b.n	800eeb2 <_strtol_l.constprop.0+0x3a>
 800ef1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ef20:	f1be 0f19 	cmp.w	lr, #25
 800ef24:	d801      	bhi.n	800ef2a <_strtol_l.constprop.0+0xb2>
 800ef26:	3c37      	subs	r4, #55	; 0x37
 800ef28:	e7e2      	b.n	800eef0 <_strtol_l.constprop.0+0x78>
 800ef2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ef2e:	f1be 0f19 	cmp.w	lr, #25
 800ef32:	d804      	bhi.n	800ef3e <_strtol_l.constprop.0+0xc6>
 800ef34:	3c57      	subs	r4, #87	; 0x57
 800ef36:	e7db      	b.n	800eef0 <_strtol_l.constprop.0+0x78>
 800ef38:	f04f 3cff 	mov.w	ip, #4294967295
 800ef3c:	e7e6      	b.n	800ef0c <_strtol_l.constprop.0+0x94>
 800ef3e:	f1bc 0f00 	cmp.w	ip, #0
 800ef42:	da05      	bge.n	800ef50 <_strtol_l.constprop.0+0xd8>
 800ef44:	2322      	movs	r3, #34	; 0x22
 800ef46:	6003      	str	r3, [r0, #0]
 800ef48:	4646      	mov	r6, r8
 800ef4a:	b942      	cbnz	r2, 800ef5e <_strtol_l.constprop.0+0xe6>
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	e79e      	b.n	800ee8e <_strtol_l.constprop.0+0x16>
 800ef50:	b107      	cbz	r7, 800ef54 <_strtol_l.constprop.0+0xdc>
 800ef52:	4276      	negs	r6, r6
 800ef54:	2a00      	cmp	r2, #0
 800ef56:	d0f9      	beq.n	800ef4c <_strtol_l.constprop.0+0xd4>
 800ef58:	f1bc 0f00 	cmp.w	ip, #0
 800ef5c:	d000      	beq.n	800ef60 <_strtol_l.constprop.0+0xe8>
 800ef5e:	1e69      	subs	r1, r5, #1
 800ef60:	6011      	str	r1, [r2, #0]
 800ef62:	e7f3      	b.n	800ef4c <_strtol_l.constprop.0+0xd4>
 800ef64:	2430      	movs	r4, #48	; 0x30
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1b1      	bne.n	800eece <_strtol_l.constprop.0+0x56>
 800ef6a:	2308      	movs	r3, #8
 800ef6c:	e7af      	b.n	800eece <_strtol_l.constprop.0+0x56>
 800ef6e:	2c30      	cmp	r4, #48	; 0x30
 800ef70:	d0a5      	beq.n	800eebe <_strtol_l.constprop.0+0x46>
 800ef72:	230a      	movs	r3, #10
 800ef74:	e7ab      	b.n	800eece <_strtol_l.constprop.0+0x56>
 800ef76:	bf00      	nop
 800ef78:	080130d9 	.word	0x080130d9

0800ef7c <_strtol_r>:
 800ef7c:	f7ff bf7c 	b.w	800ee78 <_strtol_l.constprop.0>

0800ef80 <_write_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4d07      	ldr	r5, [pc, #28]	; (800efa0 <_write_r+0x20>)
 800ef84:	4604      	mov	r4, r0
 800ef86:	4608      	mov	r0, r1
 800ef88:	4611      	mov	r1, r2
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	602a      	str	r2, [r5, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	f7f5 ffa1 	bl	8004ed6 <_write>
 800ef94:	1c43      	adds	r3, r0, #1
 800ef96:	d102      	bne.n	800ef9e <_write_r+0x1e>
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	b103      	cbz	r3, 800ef9e <_write_r+0x1e>
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	bd38      	pop	{r3, r4, r5, pc}
 800efa0:	200050c4 	.word	0x200050c4

0800efa4 <_close_r>:
 800efa4:	b538      	push	{r3, r4, r5, lr}
 800efa6:	4d06      	ldr	r5, [pc, #24]	; (800efc0 <_close_r+0x1c>)
 800efa8:	2300      	movs	r3, #0
 800efaa:	4604      	mov	r4, r0
 800efac:	4608      	mov	r0, r1
 800efae:	602b      	str	r3, [r5, #0]
 800efb0:	f7f5 ffad 	bl	8004f0e <_close>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d102      	bne.n	800efbe <_close_r+0x1a>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	b103      	cbz	r3, 800efbe <_close_r+0x1a>
 800efbc:	6023      	str	r3, [r4, #0]
 800efbe:	bd38      	pop	{r3, r4, r5, pc}
 800efc0:	200050c4 	.word	0x200050c4

0800efc4 <quorem>:
 800efc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	6903      	ldr	r3, [r0, #16]
 800efca:	690c      	ldr	r4, [r1, #16]
 800efcc:	42a3      	cmp	r3, r4
 800efce:	4607      	mov	r7, r0
 800efd0:	f2c0 8081 	blt.w	800f0d6 <quorem+0x112>
 800efd4:	3c01      	subs	r4, #1
 800efd6:	f101 0814 	add.w	r8, r1, #20
 800efda:	f100 0514 	add.w	r5, r0, #20
 800efde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efec:	3301      	adds	r3, #1
 800efee:	429a      	cmp	r2, r3
 800eff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eff8:	fbb2 f6f3 	udiv	r6, r2, r3
 800effc:	d331      	bcc.n	800f062 <quorem+0x9e>
 800effe:	f04f 0e00 	mov.w	lr, #0
 800f002:	4640      	mov	r0, r8
 800f004:	46ac      	mov	ip, r5
 800f006:	46f2      	mov	sl, lr
 800f008:	f850 2b04 	ldr.w	r2, [r0], #4
 800f00c:	b293      	uxth	r3, r2
 800f00e:	fb06 e303 	mla	r3, r6, r3, lr
 800f012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f016:	b29b      	uxth	r3, r3
 800f018:	ebaa 0303 	sub.w	r3, sl, r3
 800f01c:	f8dc a000 	ldr.w	sl, [ip]
 800f020:	0c12      	lsrs	r2, r2, #16
 800f022:	fa13 f38a 	uxtah	r3, r3, sl
 800f026:	fb06 e202 	mla	r2, r6, r2, lr
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	9b00      	ldr	r3, [sp, #0]
 800f02e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f032:	b292      	uxth	r2, r2
 800f034:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f03c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f040:	4581      	cmp	r9, r0
 800f042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f046:	f84c 3b04 	str.w	r3, [ip], #4
 800f04a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f04e:	d2db      	bcs.n	800f008 <quorem+0x44>
 800f050:	f855 300b 	ldr.w	r3, [r5, fp]
 800f054:	b92b      	cbnz	r3, 800f062 <quorem+0x9e>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	3b04      	subs	r3, #4
 800f05a:	429d      	cmp	r5, r3
 800f05c:	461a      	mov	r2, r3
 800f05e:	d32e      	bcc.n	800f0be <quorem+0xfa>
 800f060:	613c      	str	r4, [r7, #16]
 800f062:	4638      	mov	r0, r7
 800f064:	f001 fc96 	bl	8010994 <__mcmp>
 800f068:	2800      	cmp	r0, #0
 800f06a:	db24      	blt.n	800f0b6 <quorem+0xf2>
 800f06c:	3601      	adds	r6, #1
 800f06e:	4628      	mov	r0, r5
 800f070:	f04f 0c00 	mov.w	ip, #0
 800f074:	f858 2b04 	ldr.w	r2, [r8], #4
 800f078:	f8d0 e000 	ldr.w	lr, [r0]
 800f07c:	b293      	uxth	r3, r2
 800f07e:	ebac 0303 	sub.w	r3, ip, r3
 800f082:	0c12      	lsrs	r2, r2, #16
 800f084:	fa13 f38e 	uxtah	r3, r3, lr
 800f088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f08c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f090:	b29b      	uxth	r3, r3
 800f092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f096:	45c1      	cmp	r9, r8
 800f098:	f840 3b04 	str.w	r3, [r0], #4
 800f09c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0a0:	d2e8      	bcs.n	800f074 <quorem+0xb0>
 800f0a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0aa:	b922      	cbnz	r2, 800f0b6 <quorem+0xf2>
 800f0ac:	3b04      	subs	r3, #4
 800f0ae:	429d      	cmp	r5, r3
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	d30a      	bcc.n	800f0ca <quorem+0x106>
 800f0b4:	613c      	str	r4, [r7, #16]
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	b003      	add	sp, #12
 800f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	6812      	ldr	r2, [r2, #0]
 800f0c0:	3b04      	subs	r3, #4
 800f0c2:	2a00      	cmp	r2, #0
 800f0c4:	d1cc      	bne.n	800f060 <quorem+0x9c>
 800f0c6:	3c01      	subs	r4, #1
 800f0c8:	e7c7      	b.n	800f05a <quorem+0x96>
 800f0ca:	6812      	ldr	r2, [r2, #0]
 800f0cc:	3b04      	subs	r3, #4
 800f0ce:	2a00      	cmp	r2, #0
 800f0d0:	d1f0      	bne.n	800f0b4 <quorem+0xf0>
 800f0d2:	3c01      	subs	r4, #1
 800f0d4:	e7eb      	b.n	800f0ae <quorem+0xea>
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	e7ee      	b.n	800f0b8 <quorem+0xf4>
 800f0da:	0000      	movs	r0, r0
 800f0dc:	0000      	movs	r0, r0
	...

0800f0e0 <_dtoa_r>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	ed2d 8b04 	vpush	{d8-d9}
 800f0e8:	ec57 6b10 	vmov	r6, r7, d0
 800f0ec:	b093      	sub	sp, #76	; 0x4c
 800f0ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f0f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0f4:	9106      	str	r1, [sp, #24]
 800f0f6:	ee10 aa10 	vmov	sl, s0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f0fe:	930c      	str	r3, [sp, #48]	; 0x30
 800f100:	46bb      	mov	fp, r7
 800f102:	b975      	cbnz	r5, 800f122 <_dtoa_r+0x42>
 800f104:	2010      	movs	r0, #16
 800f106:	f001 f95f 	bl	80103c8 <malloc>
 800f10a:	4602      	mov	r2, r0
 800f10c:	6260      	str	r0, [r4, #36]	; 0x24
 800f10e:	b920      	cbnz	r0, 800f11a <_dtoa_r+0x3a>
 800f110:	4ba7      	ldr	r3, [pc, #668]	; (800f3b0 <_dtoa_r+0x2d0>)
 800f112:	21ea      	movs	r1, #234	; 0xea
 800f114:	48a7      	ldr	r0, [pc, #668]	; (800f3b4 <_dtoa_r+0x2d4>)
 800f116:	f002 fcc7 	bl	8011aa8 <__assert_func>
 800f11a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f11e:	6005      	str	r5, [r0, #0]
 800f120:	60c5      	str	r5, [r0, #12]
 800f122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f124:	6819      	ldr	r1, [r3, #0]
 800f126:	b151      	cbz	r1, 800f13e <_dtoa_r+0x5e>
 800f128:	685a      	ldr	r2, [r3, #4]
 800f12a:	604a      	str	r2, [r1, #4]
 800f12c:	2301      	movs	r3, #1
 800f12e:	4093      	lsls	r3, r2
 800f130:	608b      	str	r3, [r1, #8]
 800f132:	4620      	mov	r0, r4
 800f134:	f001 f9a2 	bl	801047c <_Bfree>
 800f138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f13a:	2200      	movs	r2, #0
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	1e3b      	subs	r3, r7, #0
 800f140:	bfaa      	itet	ge
 800f142:	2300      	movge	r3, #0
 800f144:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f148:	f8c8 3000 	strge.w	r3, [r8]
 800f14c:	4b9a      	ldr	r3, [pc, #616]	; (800f3b8 <_dtoa_r+0x2d8>)
 800f14e:	bfbc      	itt	lt
 800f150:	2201      	movlt	r2, #1
 800f152:	f8c8 2000 	strlt.w	r2, [r8]
 800f156:	ea33 030b 	bics.w	r3, r3, fp
 800f15a:	d11b      	bne.n	800f194 <_dtoa_r+0xb4>
 800f15c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f15e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f168:	4333      	orrs	r3, r6
 800f16a:	f000 8592 	beq.w	800fc92 <_dtoa_r+0xbb2>
 800f16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f170:	b963      	cbnz	r3, 800f18c <_dtoa_r+0xac>
 800f172:	4b92      	ldr	r3, [pc, #584]	; (800f3bc <_dtoa_r+0x2dc>)
 800f174:	e022      	b.n	800f1bc <_dtoa_r+0xdc>
 800f176:	4b92      	ldr	r3, [pc, #584]	; (800f3c0 <_dtoa_r+0x2e0>)
 800f178:	9301      	str	r3, [sp, #4]
 800f17a:	3308      	adds	r3, #8
 800f17c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	9801      	ldr	r0, [sp, #4]
 800f182:	b013      	add	sp, #76	; 0x4c
 800f184:	ecbd 8b04 	vpop	{d8-d9}
 800f188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18c:	4b8b      	ldr	r3, [pc, #556]	; (800f3bc <_dtoa_r+0x2dc>)
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	3303      	adds	r3, #3
 800f192:	e7f3      	b.n	800f17c <_dtoa_r+0x9c>
 800f194:	2200      	movs	r2, #0
 800f196:	2300      	movs	r3, #0
 800f198:	4650      	mov	r0, sl
 800f19a:	4659      	mov	r1, fp
 800f19c:	f7f1 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 800f1a0:	ec4b ab19 	vmov	d9, sl, fp
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	b158      	cbz	r0, 800f1c0 <_dtoa_r+0xe0>
 800f1a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f000 856b 	beq.w	800fc8c <_dtoa_r+0xbac>
 800f1b6:	4883      	ldr	r0, [pc, #524]	; (800f3c4 <_dtoa_r+0x2e4>)
 800f1b8:	6018      	str	r0, [r3, #0]
 800f1ba:	1e43      	subs	r3, r0, #1
 800f1bc:	9301      	str	r3, [sp, #4]
 800f1be:	e7df      	b.n	800f180 <_dtoa_r+0xa0>
 800f1c0:	ec4b ab10 	vmov	d0, sl, fp
 800f1c4:	aa10      	add	r2, sp, #64	; 0x40
 800f1c6:	a911      	add	r1, sp, #68	; 0x44
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f001 fd05 	bl	8010bd8 <__d2b>
 800f1ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f1d2:	ee08 0a10 	vmov	s16, r0
 800f1d6:	2d00      	cmp	r5, #0
 800f1d8:	f000 8084 	beq.w	800f2e4 <_dtoa_r+0x204>
 800f1dc:	ee19 3a90 	vmov	r3, s19
 800f1e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f1e8:	4656      	mov	r6, sl
 800f1ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f1ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f1f6:	4b74      	ldr	r3, [pc, #464]	; (800f3c8 <_dtoa_r+0x2e8>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 f85b 	bl	80002b8 <__aeabi_dsub>
 800f202:	a365      	add	r3, pc, #404	; (adr r3, 800f398 <_dtoa_r+0x2b8>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 fa0e 	bl	8000628 <__aeabi_dmul>
 800f20c:	a364      	add	r3, pc, #400	; (adr r3, 800f3a0 <_dtoa_r+0x2c0>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	f7f1 f853 	bl	80002bc <__adddf3>
 800f216:	4606      	mov	r6, r0
 800f218:	4628      	mov	r0, r5
 800f21a:	460f      	mov	r7, r1
 800f21c:	f7f1 f99a 	bl	8000554 <__aeabi_i2d>
 800f220:	a361      	add	r3, pc, #388	; (adr r3, 800f3a8 <_dtoa_r+0x2c8>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f9ff 	bl	8000628 <__aeabi_dmul>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 f843 	bl	80002bc <__adddf3>
 800f236:	4606      	mov	r6, r0
 800f238:	460f      	mov	r7, r1
 800f23a:	f7f1 fca5 	bl	8000b88 <__aeabi_d2iz>
 800f23e:	2200      	movs	r2, #0
 800f240:	9000      	str	r0, [sp, #0]
 800f242:	2300      	movs	r3, #0
 800f244:	4630      	mov	r0, r6
 800f246:	4639      	mov	r1, r7
 800f248:	f7f1 fc60 	bl	8000b0c <__aeabi_dcmplt>
 800f24c:	b150      	cbz	r0, 800f264 <_dtoa_r+0x184>
 800f24e:	9800      	ldr	r0, [sp, #0]
 800f250:	f7f1 f980 	bl	8000554 <__aeabi_i2d>
 800f254:	4632      	mov	r2, r6
 800f256:	463b      	mov	r3, r7
 800f258:	f7f1 fc4e 	bl	8000af8 <__aeabi_dcmpeq>
 800f25c:	b910      	cbnz	r0, 800f264 <_dtoa_r+0x184>
 800f25e:	9b00      	ldr	r3, [sp, #0]
 800f260:	3b01      	subs	r3, #1
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	9b00      	ldr	r3, [sp, #0]
 800f266:	2b16      	cmp	r3, #22
 800f268:	d85a      	bhi.n	800f320 <_dtoa_r+0x240>
 800f26a:	9a00      	ldr	r2, [sp, #0]
 800f26c:	4b57      	ldr	r3, [pc, #348]	; (800f3cc <_dtoa_r+0x2ec>)
 800f26e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	ec51 0b19 	vmov	r0, r1, d9
 800f27a:	f7f1 fc47 	bl	8000b0c <__aeabi_dcmplt>
 800f27e:	2800      	cmp	r0, #0
 800f280:	d050      	beq.n	800f324 <_dtoa_r+0x244>
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	3b01      	subs	r3, #1
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	2300      	movs	r3, #0
 800f28a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f28e:	1b5d      	subs	r5, r3, r5
 800f290:	1e6b      	subs	r3, r5, #1
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	bf45      	ittet	mi
 800f296:	f1c5 0301 	rsbmi	r3, r5, #1
 800f29a:	9304      	strmi	r3, [sp, #16]
 800f29c:	2300      	movpl	r3, #0
 800f29e:	2300      	movmi	r3, #0
 800f2a0:	bf4c      	ite	mi
 800f2a2:	9305      	strmi	r3, [sp, #20]
 800f2a4:	9304      	strpl	r3, [sp, #16]
 800f2a6:	9b00      	ldr	r3, [sp, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	db3d      	blt.n	800f328 <_dtoa_r+0x248>
 800f2ac:	9b05      	ldr	r3, [sp, #20]
 800f2ae:	9a00      	ldr	r2, [sp, #0]
 800f2b0:	920a      	str	r2, [sp, #40]	; 0x28
 800f2b2:	4413      	add	r3, r2
 800f2b4:	9305      	str	r3, [sp, #20]
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9307      	str	r3, [sp, #28]
 800f2ba:	9b06      	ldr	r3, [sp, #24]
 800f2bc:	2b09      	cmp	r3, #9
 800f2be:	f200 8089 	bhi.w	800f3d4 <_dtoa_r+0x2f4>
 800f2c2:	2b05      	cmp	r3, #5
 800f2c4:	bfc4      	itt	gt
 800f2c6:	3b04      	subgt	r3, #4
 800f2c8:	9306      	strgt	r3, [sp, #24]
 800f2ca:	9b06      	ldr	r3, [sp, #24]
 800f2cc:	f1a3 0302 	sub.w	r3, r3, #2
 800f2d0:	bfcc      	ite	gt
 800f2d2:	2500      	movgt	r5, #0
 800f2d4:	2501      	movle	r5, #1
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	f200 8087 	bhi.w	800f3ea <_dtoa_r+0x30a>
 800f2dc:	e8df f003 	tbb	[pc, r3]
 800f2e0:	59383a2d 	.word	0x59383a2d
 800f2e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f2e8:	441d      	add	r5, r3
 800f2ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	bfc1      	itttt	gt
 800f2f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f2fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800f2fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f302:	bfda      	itte	le
 800f304:	f1c3 0320 	rsble	r3, r3, #32
 800f308:	fa06 f003 	lslle.w	r0, r6, r3
 800f30c:	4318      	orrgt	r0, r3
 800f30e:	f7f1 f911 	bl	8000534 <__aeabi_ui2d>
 800f312:	2301      	movs	r3, #1
 800f314:	4606      	mov	r6, r0
 800f316:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f31a:	3d01      	subs	r5, #1
 800f31c:	930e      	str	r3, [sp, #56]	; 0x38
 800f31e:	e76a      	b.n	800f1f6 <_dtoa_r+0x116>
 800f320:	2301      	movs	r3, #1
 800f322:	e7b2      	b.n	800f28a <_dtoa_r+0x1aa>
 800f324:	900b      	str	r0, [sp, #44]	; 0x2c
 800f326:	e7b1      	b.n	800f28c <_dtoa_r+0x1ac>
 800f328:	9b04      	ldr	r3, [sp, #16]
 800f32a:	9a00      	ldr	r2, [sp, #0]
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	9304      	str	r3, [sp, #16]
 800f330:	4253      	negs	r3, r2
 800f332:	9307      	str	r3, [sp, #28]
 800f334:	2300      	movs	r3, #0
 800f336:	930a      	str	r3, [sp, #40]	; 0x28
 800f338:	e7bf      	b.n	800f2ba <_dtoa_r+0x1da>
 800f33a:	2300      	movs	r3, #0
 800f33c:	9308      	str	r3, [sp, #32]
 800f33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f340:	2b00      	cmp	r3, #0
 800f342:	dc55      	bgt.n	800f3f0 <_dtoa_r+0x310>
 800f344:	2301      	movs	r3, #1
 800f346:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f34a:	461a      	mov	r2, r3
 800f34c:	9209      	str	r2, [sp, #36]	; 0x24
 800f34e:	e00c      	b.n	800f36a <_dtoa_r+0x28a>
 800f350:	2301      	movs	r3, #1
 800f352:	e7f3      	b.n	800f33c <_dtoa_r+0x25c>
 800f354:	2300      	movs	r3, #0
 800f356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f358:	9308      	str	r3, [sp, #32]
 800f35a:	9b00      	ldr	r3, [sp, #0]
 800f35c:	4413      	add	r3, r2
 800f35e:	9302      	str	r3, [sp, #8]
 800f360:	3301      	adds	r3, #1
 800f362:	2b01      	cmp	r3, #1
 800f364:	9303      	str	r3, [sp, #12]
 800f366:	bfb8      	it	lt
 800f368:	2301      	movlt	r3, #1
 800f36a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f36c:	2200      	movs	r2, #0
 800f36e:	6042      	str	r2, [r0, #4]
 800f370:	2204      	movs	r2, #4
 800f372:	f102 0614 	add.w	r6, r2, #20
 800f376:	429e      	cmp	r6, r3
 800f378:	6841      	ldr	r1, [r0, #4]
 800f37a:	d93d      	bls.n	800f3f8 <_dtoa_r+0x318>
 800f37c:	4620      	mov	r0, r4
 800f37e:	f001 f83d 	bl	80103fc <_Balloc>
 800f382:	9001      	str	r0, [sp, #4]
 800f384:	2800      	cmp	r0, #0
 800f386:	d13b      	bne.n	800f400 <_dtoa_r+0x320>
 800f388:	4b11      	ldr	r3, [pc, #68]	; (800f3d0 <_dtoa_r+0x2f0>)
 800f38a:	4602      	mov	r2, r0
 800f38c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f390:	e6c0      	b.n	800f114 <_dtoa_r+0x34>
 800f392:	2301      	movs	r3, #1
 800f394:	e7df      	b.n	800f356 <_dtoa_r+0x276>
 800f396:	bf00      	nop
 800f398:	636f4361 	.word	0x636f4361
 800f39c:	3fd287a7 	.word	0x3fd287a7
 800f3a0:	8b60c8b3 	.word	0x8b60c8b3
 800f3a4:	3fc68a28 	.word	0x3fc68a28
 800f3a8:	509f79fb 	.word	0x509f79fb
 800f3ac:	3fd34413 	.word	0x3fd34413
 800f3b0:	080131e6 	.word	0x080131e6
 800f3b4:	080131fd 	.word	0x080131fd
 800f3b8:	7ff00000 	.word	0x7ff00000
 800f3bc:	080131e2 	.word	0x080131e2
 800f3c0:	080131d9 	.word	0x080131d9
 800f3c4:	08013452 	.word	0x08013452
 800f3c8:	3ff80000 	.word	0x3ff80000
 800f3cc:	08013368 	.word	0x08013368
 800f3d0:	08013258 	.word	0x08013258
 800f3d4:	2501      	movs	r5, #1
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	9306      	str	r3, [sp, #24]
 800f3da:	9508      	str	r5, [sp, #32]
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	2312      	movs	r3, #18
 800f3e8:	e7b0      	b.n	800f34c <_dtoa_r+0x26c>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	9308      	str	r3, [sp, #32]
 800f3ee:	e7f5      	b.n	800f3dc <_dtoa_r+0x2fc>
 800f3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f3f6:	e7b8      	b.n	800f36a <_dtoa_r+0x28a>
 800f3f8:	3101      	adds	r1, #1
 800f3fa:	6041      	str	r1, [r0, #4]
 800f3fc:	0052      	lsls	r2, r2, #1
 800f3fe:	e7b8      	b.n	800f372 <_dtoa_r+0x292>
 800f400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f402:	9a01      	ldr	r2, [sp, #4]
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	9b03      	ldr	r3, [sp, #12]
 800f408:	2b0e      	cmp	r3, #14
 800f40a:	f200 809d 	bhi.w	800f548 <_dtoa_r+0x468>
 800f40e:	2d00      	cmp	r5, #0
 800f410:	f000 809a 	beq.w	800f548 <_dtoa_r+0x468>
 800f414:	9b00      	ldr	r3, [sp, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	dd32      	ble.n	800f480 <_dtoa_r+0x3a0>
 800f41a:	4ab7      	ldr	r2, [pc, #732]	; (800f6f8 <_dtoa_r+0x618>)
 800f41c:	f003 030f 	and.w	r3, r3, #15
 800f420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f424:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f428:	9b00      	ldr	r3, [sp, #0]
 800f42a:	05d8      	lsls	r0, r3, #23
 800f42c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f430:	d516      	bpl.n	800f460 <_dtoa_r+0x380>
 800f432:	4bb2      	ldr	r3, [pc, #712]	; (800f6fc <_dtoa_r+0x61c>)
 800f434:	ec51 0b19 	vmov	r0, r1, d9
 800f438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f43c:	f7f1 fa1e 	bl	800087c <__aeabi_ddiv>
 800f440:	f007 070f 	and.w	r7, r7, #15
 800f444:	4682      	mov	sl, r0
 800f446:	468b      	mov	fp, r1
 800f448:	2503      	movs	r5, #3
 800f44a:	4eac      	ldr	r6, [pc, #688]	; (800f6fc <_dtoa_r+0x61c>)
 800f44c:	b957      	cbnz	r7, 800f464 <_dtoa_r+0x384>
 800f44e:	4642      	mov	r2, r8
 800f450:	464b      	mov	r3, r9
 800f452:	4650      	mov	r0, sl
 800f454:	4659      	mov	r1, fp
 800f456:	f7f1 fa11 	bl	800087c <__aeabi_ddiv>
 800f45a:	4682      	mov	sl, r0
 800f45c:	468b      	mov	fp, r1
 800f45e:	e028      	b.n	800f4b2 <_dtoa_r+0x3d2>
 800f460:	2502      	movs	r5, #2
 800f462:	e7f2      	b.n	800f44a <_dtoa_r+0x36a>
 800f464:	07f9      	lsls	r1, r7, #31
 800f466:	d508      	bpl.n	800f47a <_dtoa_r+0x39a>
 800f468:	4640      	mov	r0, r8
 800f46a:	4649      	mov	r1, r9
 800f46c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f470:	f7f1 f8da 	bl	8000628 <__aeabi_dmul>
 800f474:	3501      	adds	r5, #1
 800f476:	4680      	mov	r8, r0
 800f478:	4689      	mov	r9, r1
 800f47a:	107f      	asrs	r7, r7, #1
 800f47c:	3608      	adds	r6, #8
 800f47e:	e7e5      	b.n	800f44c <_dtoa_r+0x36c>
 800f480:	f000 809b 	beq.w	800f5ba <_dtoa_r+0x4da>
 800f484:	9b00      	ldr	r3, [sp, #0]
 800f486:	4f9d      	ldr	r7, [pc, #628]	; (800f6fc <_dtoa_r+0x61c>)
 800f488:	425e      	negs	r6, r3
 800f48a:	4b9b      	ldr	r3, [pc, #620]	; (800f6f8 <_dtoa_r+0x618>)
 800f48c:	f006 020f 	and.w	r2, r6, #15
 800f490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f498:	ec51 0b19 	vmov	r0, r1, d9
 800f49c:	f7f1 f8c4 	bl	8000628 <__aeabi_dmul>
 800f4a0:	1136      	asrs	r6, r6, #4
 800f4a2:	4682      	mov	sl, r0
 800f4a4:	468b      	mov	fp, r1
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	2502      	movs	r5, #2
 800f4aa:	2e00      	cmp	r6, #0
 800f4ac:	d17a      	bne.n	800f5a4 <_dtoa_r+0x4c4>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1d3      	bne.n	800f45a <_dtoa_r+0x37a>
 800f4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f000 8082 	beq.w	800f5be <_dtoa_r+0x4de>
 800f4ba:	4b91      	ldr	r3, [pc, #580]	; (800f700 <_dtoa_r+0x620>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	4650      	mov	r0, sl
 800f4c0:	4659      	mov	r1, fp
 800f4c2:	f7f1 fb23 	bl	8000b0c <__aeabi_dcmplt>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d079      	beq.n	800f5be <_dtoa_r+0x4de>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d076      	beq.n	800f5be <_dtoa_r+0x4de>
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	dd36      	ble.n	800f544 <_dtoa_r+0x464>
 800f4d6:	9b00      	ldr	r3, [sp, #0]
 800f4d8:	4650      	mov	r0, sl
 800f4da:	4659      	mov	r1, fp
 800f4dc:	1e5f      	subs	r7, r3, #1
 800f4de:	2200      	movs	r2, #0
 800f4e0:	4b88      	ldr	r3, [pc, #544]	; (800f704 <_dtoa_r+0x624>)
 800f4e2:	f7f1 f8a1 	bl	8000628 <__aeabi_dmul>
 800f4e6:	9e02      	ldr	r6, [sp, #8]
 800f4e8:	4682      	mov	sl, r0
 800f4ea:	468b      	mov	fp, r1
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f7f1 f830 	bl	8000554 <__aeabi_i2d>
 800f4f4:	4652      	mov	r2, sl
 800f4f6:	465b      	mov	r3, fp
 800f4f8:	f7f1 f896 	bl	8000628 <__aeabi_dmul>
 800f4fc:	4b82      	ldr	r3, [pc, #520]	; (800f708 <_dtoa_r+0x628>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	f7f0 fedc 	bl	80002bc <__adddf3>
 800f504:	46d0      	mov	r8, sl
 800f506:	46d9      	mov	r9, fp
 800f508:	4682      	mov	sl, r0
 800f50a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f50e:	2e00      	cmp	r6, #0
 800f510:	d158      	bne.n	800f5c4 <_dtoa_r+0x4e4>
 800f512:	4b7e      	ldr	r3, [pc, #504]	; (800f70c <_dtoa_r+0x62c>)
 800f514:	2200      	movs	r2, #0
 800f516:	4640      	mov	r0, r8
 800f518:	4649      	mov	r1, r9
 800f51a:	f7f0 fecd 	bl	80002b8 <__aeabi_dsub>
 800f51e:	4652      	mov	r2, sl
 800f520:	465b      	mov	r3, fp
 800f522:	4680      	mov	r8, r0
 800f524:	4689      	mov	r9, r1
 800f526:	f7f1 fb0f 	bl	8000b48 <__aeabi_dcmpgt>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	f040 8295 	bne.w	800fa5a <_dtoa_r+0x97a>
 800f530:	4652      	mov	r2, sl
 800f532:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f536:	4640      	mov	r0, r8
 800f538:	4649      	mov	r1, r9
 800f53a:	f7f1 fae7 	bl	8000b0c <__aeabi_dcmplt>
 800f53e:	2800      	cmp	r0, #0
 800f540:	f040 8289 	bne.w	800fa56 <_dtoa_r+0x976>
 800f544:	ec5b ab19 	vmov	sl, fp, d9
 800f548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f2c0 8148 	blt.w	800f7e0 <_dtoa_r+0x700>
 800f550:	9a00      	ldr	r2, [sp, #0]
 800f552:	2a0e      	cmp	r2, #14
 800f554:	f300 8144 	bgt.w	800f7e0 <_dtoa_r+0x700>
 800f558:	4b67      	ldr	r3, [pc, #412]	; (800f6f8 <_dtoa_r+0x618>)
 800f55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f55e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f564:	2b00      	cmp	r3, #0
 800f566:	f280 80d5 	bge.w	800f714 <_dtoa_r+0x634>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f300 80d1 	bgt.w	800f714 <_dtoa_r+0x634>
 800f572:	f040 826f 	bne.w	800fa54 <_dtoa_r+0x974>
 800f576:	4b65      	ldr	r3, [pc, #404]	; (800f70c <_dtoa_r+0x62c>)
 800f578:	2200      	movs	r2, #0
 800f57a:	4640      	mov	r0, r8
 800f57c:	4649      	mov	r1, r9
 800f57e:	f7f1 f853 	bl	8000628 <__aeabi_dmul>
 800f582:	4652      	mov	r2, sl
 800f584:	465b      	mov	r3, fp
 800f586:	f7f1 fad5 	bl	8000b34 <__aeabi_dcmpge>
 800f58a:	9e03      	ldr	r6, [sp, #12]
 800f58c:	4637      	mov	r7, r6
 800f58e:	2800      	cmp	r0, #0
 800f590:	f040 8245 	bne.w	800fa1e <_dtoa_r+0x93e>
 800f594:	9d01      	ldr	r5, [sp, #4]
 800f596:	2331      	movs	r3, #49	; 0x31
 800f598:	f805 3b01 	strb.w	r3, [r5], #1
 800f59c:	9b00      	ldr	r3, [sp, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	e240      	b.n	800fa26 <_dtoa_r+0x946>
 800f5a4:	07f2      	lsls	r2, r6, #31
 800f5a6:	d505      	bpl.n	800f5b4 <_dtoa_r+0x4d4>
 800f5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5ac:	f7f1 f83c 	bl	8000628 <__aeabi_dmul>
 800f5b0:	3501      	adds	r5, #1
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	1076      	asrs	r6, r6, #1
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	e777      	b.n	800f4aa <_dtoa_r+0x3ca>
 800f5ba:	2502      	movs	r5, #2
 800f5bc:	e779      	b.n	800f4b2 <_dtoa_r+0x3d2>
 800f5be:	9f00      	ldr	r7, [sp, #0]
 800f5c0:	9e03      	ldr	r6, [sp, #12]
 800f5c2:	e794      	b.n	800f4ee <_dtoa_r+0x40e>
 800f5c4:	9901      	ldr	r1, [sp, #4]
 800f5c6:	4b4c      	ldr	r3, [pc, #304]	; (800f6f8 <_dtoa_r+0x618>)
 800f5c8:	4431      	add	r1, r6
 800f5ca:	910d      	str	r1, [sp, #52]	; 0x34
 800f5cc:	9908      	ldr	r1, [sp, #32]
 800f5ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5d6:	2900      	cmp	r1, #0
 800f5d8:	d043      	beq.n	800f662 <_dtoa_r+0x582>
 800f5da:	494d      	ldr	r1, [pc, #308]	; (800f710 <_dtoa_r+0x630>)
 800f5dc:	2000      	movs	r0, #0
 800f5de:	f7f1 f94d 	bl	800087c <__aeabi_ddiv>
 800f5e2:	4652      	mov	r2, sl
 800f5e4:	465b      	mov	r3, fp
 800f5e6:	f7f0 fe67 	bl	80002b8 <__aeabi_dsub>
 800f5ea:	9d01      	ldr	r5, [sp, #4]
 800f5ec:	4682      	mov	sl, r0
 800f5ee:	468b      	mov	fp, r1
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	4640      	mov	r0, r8
 800f5f4:	f7f1 fac8 	bl	8000b88 <__aeabi_d2iz>
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	f7f0 ffab 	bl	8000554 <__aeabi_i2d>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	f7f0 fe57 	bl	80002b8 <__aeabi_dsub>
 800f60a:	3630      	adds	r6, #48	; 0x30
 800f60c:	f805 6b01 	strb.w	r6, [r5], #1
 800f610:	4652      	mov	r2, sl
 800f612:	465b      	mov	r3, fp
 800f614:	4680      	mov	r8, r0
 800f616:	4689      	mov	r9, r1
 800f618:	f7f1 fa78 	bl	8000b0c <__aeabi_dcmplt>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d163      	bne.n	800f6e8 <_dtoa_r+0x608>
 800f620:	4642      	mov	r2, r8
 800f622:	464b      	mov	r3, r9
 800f624:	4936      	ldr	r1, [pc, #216]	; (800f700 <_dtoa_r+0x620>)
 800f626:	2000      	movs	r0, #0
 800f628:	f7f0 fe46 	bl	80002b8 <__aeabi_dsub>
 800f62c:	4652      	mov	r2, sl
 800f62e:	465b      	mov	r3, fp
 800f630:	f7f1 fa6c 	bl	8000b0c <__aeabi_dcmplt>
 800f634:	2800      	cmp	r0, #0
 800f636:	f040 80b5 	bne.w	800f7a4 <_dtoa_r+0x6c4>
 800f63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f63c:	429d      	cmp	r5, r3
 800f63e:	d081      	beq.n	800f544 <_dtoa_r+0x464>
 800f640:	4b30      	ldr	r3, [pc, #192]	; (800f704 <_dtoa_r+0x624>)
 800f642:	2200      	movs	r2, #0
 800f644:	4650      	mov	r0, sl
 800f646:	4659      	mov	r1, fp
 800f648:	f7f0 ffee 	bl	8000628 <__aeabi_dmul>
 800f64c:	4b2d      	ldr	r3, [pc, #180]	; (800f704 <_dtoa_r+0x624>)
 800f64e:	4682      	mov	sl, r0
 800f650:	468b      	mov	fp, r1
 800f652:	4640      	mov	r0, r8
 800f654:	4649      	mov	r1, r9
 800f656:	2200      	movs	r2, #0
 800f658:	f7f0 ffe6 	bl	8000628 <__aeabi_dmul>
 800f65c:	4680      	mov	r8, r0
 800f65e:	4689      	mov	r9, r1
 800f660:	e7c6      	b.n	800f5f0 <_dtoa_r+0x510>
 800f662:	4650      	mov	r0, sl
 800f664:	4659      	mov	r1, fp
 800f666:	f7f0 ffdf 	bl	8000628 <__aeabi_dmul>
 800f66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f66c:	9d01      	ldr	r5, [sp, #4]
 800f66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f670:	4682      	mov	sl, r0
 800f672:	468b      	mov	fp, r1
 800f674:	4649      	mov	r1, r9
 800f676:	4640      	mov	r0, r8
 800f678:	f7f1 fa86 	bl	8000b88 <__aeabi_d2iz>
 800f67c:	4606      	mov	r6, r0
 800f67e:	f7f0 ff69 	bl	8000554 <__aeabi_i2d>
 800f682:	3630      	adds	r6, #48	; 0x30
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4640      	mov	r0, r8
 800f68a:	4649      	mov	r1, r9
 800f68c:	f7f0 fe14 	bl	80002b8 <__aeabi_dsub>
 800f690:	f805 6b01 	strb.w	r6, [r5], #1
 800f694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f696:	429d      	cmp	r5, r3
 800f698:	4680      	mov	r8, r0
 800f69a:	4689      	mov	r9, r1
 800f69c:	f04f 0200 	mov.w	r2, #0
 800f6a0:	d124      	bne.n	800f6ec <_dtoa_r+0x60c>
 800f6a2:	4b1b      	ldr	r3, [pc, #108]	; (800f710 <_dtoa_r+0x630>)
 800f6a4:	4650      	mov	r0, sl
 800f6a6:	4659      	mov	r1, fp
 800f6a8:	f7f0 fe08 	bl	80002bc <__adddf3>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	f7f1 fa48 	bl	8000b48 <__aeabi_dcmpgt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d173      	bne.n	800f7a4 <_dtoa_r+0x6c4>
 800f6bc:	4652      	mov	r2, sl
 800f6be:	465b      	mov	r3, fp
 800f6c0:	4913      	ldr	r1, [pc, #76]	; (800f710 <_dtoa_r+0x630>)
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	f7f0 fdf8 	bl	80002b8 <__aeabi_dsub>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4640      	mov	r0, r8
 800f6ce:	4649      	mov	r1, r9
 800f6d0:	f7f1 fa1c 	bl	8000b0c <__aeabi_dcmplt>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	f43f af35 	beq.w	800f544 <_dtoa_r+0x464>
 800f6da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6dc:	1e6b      	subs	r3, r5, #1
 800f6de:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6e4:	2b30      	cmp	r3, #48	; 0x30
 800f6e6:	d0f8      	beq.n	800f6da <_dtoa_r+0x5fa>
 800f6e8:	9700      	str	r7, [sp, #0]
 800f6ea:	e049      	b.n	800f780 <_dtoa_r+0x6a0>
 800f6ec:	4b05      	ldr	r3, [pc, #20]	; (800f704 <_dtoa_r+0x624>)
 800f6ee:	f7f0 ff9b 	bl	8000628 <__aeabi_dmul>
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	4689      	mov	r9, r1
 800f6f6:	e7bd      	b.n	800f674 <_dtoa_r+0x594>
 800f6f8:	08013368 	.word	0x08013368
 800f6fc:	08013340 	.word	0x08013340
 800f700:	3ff00000 	.word	0x3ff00000
 800f704:	40240000 	.word	0x40240000
 800f708:	401c0000 	.word	0x401c0000
 800f70c:	40140000 	.word	0x40140000
 800f710:	3fe00000 	.word	0x3fe00000
 800f714:	9d01      	ldr	r5, [sp, #4]
 800f716:	4656      	mov	r6, sl
 800f718:	465f      	mov	r7, fp
 800f71a:	4642      	mov	r2, r8
 800f71c:	464b      	mov	r3, r9
 800f71e:	4630      	mov	r0, r6
 800f720:	4639      	mov	r1, r7
 800f722:	f7f1 f8ab 	bl	800087c <__aeabi_ddiv>
 800f726:	f7f1 fa2f 	bl	8000b88 <__aeabi_d2iz>
 800f72a:	4682      	mov	sl, r0
 800f72c:	f7f0 ff12 	bl	8000554 <__aeabi_i2d>
 800f730:	4642      	mov	r2, r8
 800f732:	464b      	mov	r3, r9
 800f734:	f7f0 ff78 	bl	8000628 <__aeabi_dmul>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	4630      	mov	r0, r6
 800f73e:	4639      	mov	r1, r7
 800f740:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f744:	f7f0 fdb8 	bl	80002b8 <__aeabi_dsub>
 800f748:	f805 6b01 	strb.w	r6, [r5], #1
 800f74c:	9e01      	ldr	r6, [sp, #4]
 800f74e:	9f03      	ldr	r7, [sp, #12]
 800f750:	1bae      	subs	r6, r5, r6
 800f752:	42b7      	cmp	r7, r6
 800f754:	4602      	mov	r2, r0
 800f756:	460b      	mov	r3, r1
 800f758:	d135      	bne.n	800f7c6 <_dtoa_r+0x6e6>
 800f75a:	f7f0 fdaf 	bl	80002bc <__adddf3>
 800f75e:	4642      	mov	r2, r8
 800f760:	464b      	mov	r3, r9
 800f762:	4606      	mov	r6, r0
 800f764:	460f      	mov	r7, r1
 800f766:	f7f1 f9ef 	bl	8000b48 <__aeabi_dcmpgt>
 800f76a:	b9d0      	cbnz	r0, 800f7a2 <_dtoa_r+0x6c2>
 800f76c:	4642      	mov	r2, r8
 800f76e:	464b      	mov	r3, r9
 800f770:	4630      	mov	r0, r6
 800f772:	4639      	mov	r1, r7
 800f774:	f7f1 f9c0 	bl	8000af8 <__aeabi_dcmpeq>
 800f778:	b110      	cbz	r0, 800f780 <_dtoa_r+0x6a0>
 800f77a:	f01a 0f01 	tst.w	sl, #1
 800f77e:	d110      	bne.n	800f7a2 <_dtoa_r+0x6c2>
 800f780:	4620      	mov	r0, r4
 800f782:	ee18 1a10 	vmov	r1, s16
 800f786:	f000 fe79 	bl	801047c <_Bfree>
 800f78a:	2300      	movs	r3, #0
 800f78c:	9800      	ldr	r0, [sp, #0]
 800f78e:	702b      	strb	r3, [r5, #0]
 800f790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f792:	3001      	adds	r0, #1
 800f794:	6018      	str	r0, [r3, #0]
 800f796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f43f acf1 	beq.w	800f180 <_dtoa_r+0xa0>
 800f79e:	601d      	str	r5, [r3, #0]
 800f7a0:	e4ee      	b.n	800f180 <_dtoa_r+0xa0>
 800f7a2:	9f00      	ldr	r7, [sp, #0]
 800f7a4:	462b      	mov	r3, r5
 800f7a6:	461d      	mov	r5, r3
 800f7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7ac:	2a39      	cmp	r2, #57	; 0x39
 800f7ae:	d106      	bne.n	800f7be <_dtoa_r+0x6de>
 800f7b0:	9a01      	ldr	r2, [sp, #4]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d1f7      	bne.n	800f7a6 <_dtoa_r+0x6c6>
 800f7b6:	9901      	ldr	r1, [sp, #4]
 800f7b8:	2230      	movs	r2, #48	; 0x30
 800f7ba:	3701      	adds	r7, #1
 800f7bc:	700a      	strb	r2, [r1, #0]
 800f7be:	781a      	ldrb	r2, [r3, #0]
 800f7c0:	3201      	adds	r2, #1
 800f7c2:	701a      	strb	r2, [r3, #0]
 800f7c4:	e790      	b.n	800f6e8 <_dtoa_r+0x608>
 800f7c6:	4ba6      	ldr	r3, [pc, #664]	; (800fa60 <_dtoa_r+0x980>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f7f0 ff2d 	bl	8000628 <__aeabi_dmul>
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	460f      	mov	r7, r1
 800f7d6:	f7f1 f98f 	bl	8000af8 <__aeabi_dcmpeq>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d09d      	beq.n	800f71a <_dtoa_r+0x63a>
 800f7de:	e7cf      	b.n	800f780 <_dtoa_r+0x6a0>
 800f7e0:	9a08      	ldr	r2, [sp, #32]
 800f7e2:	2a00      	cmp	r2, #0
 800f7e4:	f000 80d7 	beq.w	800f996 <_dtoa_r+0x8b6>
 800f7e8:	9a06      	ldr	r2, [sp, #24]
 800f7ea:	2a01      	cmp	r2, #1
 800f7ec:	f300 80ba 	bgt.w	800f964 <_dtoa_r+0x884>
 800f7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	f000 80b2 	beq.w	800f95c <_dtoa_r+0x87c>
 800f7f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7fc:	9e07      	ldr	r6, [sp, #28]
 800f7fe:	9d04      	ldr	r5, [sp, #16]
 800f800:	9a04      	ldr	r2, [sp, #16]
 800f802:	441a      	add	r2, r3
 800f804:	9204      	str	r2, [sp, #16]
 800f806:	9a05      	ldr	r2, [sp, #20]
 800f808:	2101      	movs	r1, #1
 800f80a:	441a      	add	r2, r3
 800f80c:	4620      	mov	r0, r4
 800f80e:	9205      	str	r2, [sp, #20]
 800f810:	f000 ff36 	bl	8010680 <__i2b>
 800f814:	4607      	mov	r7, r0
 800f816:	2d00      	cmp	r5, #0
 800f818:	dd0c      	ble.n	800f834 <_dtoa_r+0x754>
 800f81a:	9b05      	ldr	r3, [sp, #20]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dd09      	ble.n	800f834 <_dtoa_r+0x754>
 800f820:	42ab      	cmp	r3, r5
 800f822:	9a04      	ldr	r2, [sp, #16]
 800f824:	bfa8      	it	ge
 800f826:	462b      	movge	r3, r5
 800f828:	1ad2      	subs	r2, r2, r3
 800f82a:	9204      	str	r2, [sp, #16]
 800f82c:	9a05      	ldr	r2, [sp, #20]
 800f82e:	1aed      	subs	r5, r5, r3
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	9305      	str	r3, [sp, #20]
 800f834:	9b07      	ldr	r3, [sp, #28]
 800f836:	b31b      	cbz	r3, 800f880 <_dtoa_r+0x7a0>
 800f838:	9b08      	ldr	r3, [sp, #32]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 80af 	beq.w	800f99e <_dtoa_r+0x8be>
 800f840:	2e00      	cmp	r6, #0
 800f842:	dd13      	ble.n	800f86c <_dtoa_r+0x78c>
 800f844:	4639      	mov	r1, r7
 800f846:	4632      	mov	r2, r6
 800f848:	4620      	mov	r0, r4
 800f84a:	f000 ffd9 	bl	8010800 <__pow5mult>
 800f84e:	ee18 2a10 	vmov	r2, s16
 800f852:	4601      	mov	r1, r0
 800f854:	4607      	mov	r7, r0
 800f856:	4620      	mov	r0, r4
 800f858:	f000 ff28 	bl	80106ac <__multiply>
 800f85c:	ee18 1a10 	vmov	r1, s16
 800f860:	4680      	mov	r8, r0
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fe0a 	bl	801047c <_Bfree>
 800f868:	ee08 8a10 	vmov	s16, r8
 800f86c:	9b07      	ldr	r3, [sp, #28]
 800f86e:	1b9a      	subs	r2, r3, r6
 800f870:	d006      	beq.n	800f880 <_dtoa_r+0x7a0>
 800f872:	ee18 1a10 	vmov	r1, s16
 800f876:	4620      	mov	r0, r4
 800f878:	f000 ffc2 	bl	8010800 <__pow5mult>
 800f87c:	ee08 0a10 	vmov	s16, r0
 800f880:	2101      	movs	r1, #1
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fefc 	bl	8010680 <__i2b>
 800f888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	4606      	mov	r6, r0
 800f88e:	f340 8088 	ble.w	800f9a2 <_dtoa_r+0x8c2>
 800f892:	461a      	mov	r2, r3
 800f894:	4601      	mov	r1, r0
 800f896:	4620      	mov	r0, r4
 800f898:	f000 ffb2 	bl	8010800 <__pow5mult>
 800f89c:	9b06      	ldr	r3, [sp, #24]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	f340 8081 	ble.w	800f9a8 <_dtoa_r+0x8c8>
 800f8a6:	f04f 0800 	mov.w	r8, #0
 800f8aa:	6933      	ldr	r3, [r6, #16]
 800f8ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8b0:	6918      	ldr	r0, [r3, #16]
 800f8b2:	f000 fe95 	bl	80105e0 <__hi0bits>
 800f8b6:	f1c0 0020 	rsb	r0, r0, #32
 800f8ba:	9b05      	ldr	r3, [sp, #20]
 800f8bc:	4418      	add	r0, r3
 800f8be:	f010 001f 	ands.w	r0, r0, #31
 800f8c2:	f000 8092 	beq.w	800f9ea <_dtoa_r+0x90a>
 800f8c6:	f1c0 0320 	rsb	r3, r0, #32
 800f8ca:	2b04      	cmp	r3, #4
 800f8cc:	f340 808a 	ble.w	800f9e4 <_dtoa_r+0x904>
 800f8d0:	f1c0 001c 	rsb	r0, r0, #28
 800f8d4:	9b04      	ldr	r3, [sp, #16]
 800f8d6:	4403      	add	r3, r0
 800f8d8:	9304      	str	r3, [sp, #16]
 800f8da:	9b05      	ldr	r3, [sp, #20]
 800f8dc:	4403      	add	r3, r0
 800f8de:	4405      	add	r5, r0
 800f8e0:	9305      	str	r3, [sp, #20]
 800f8e2:	9b04      	ldr	r3, [sp, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dd07      	ble.n	800f8f8 <_dtoa_r+0x818>
 800f8e8:	ee18 1a10 	vmov	r1, s16
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f000 ffe0 	bl	80108b4 <__lshift>
 800f8f4:	ee08 0a10 	vmov	s16, r0
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dd05      	ble.n	800f90a <_dtoa_r+0x82a>
 800f8fe:	4631      	mov	r1, r6
 800f900:	461a      	mov	r2, r3
 800f902:	4620      	mov	r0, r4
 800f904:	f000 ffd6 	bl	80108b4 <__lshift>
 800f908:	4606      	mov	r6, r0
 800f90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d06e      	beq.n	800f9ee <_dtoa_r+0x90e>
 800f910:	ee18 0a10 	vmov	r0, s16
 800f914:	4631      	mov	r1, r6
 800f916:	f001 f83d 	bl	8010994 <__mcmp>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	da67      	bge.n	800f9ee <_dtoa_r+0x90e>
 800f91e:	9b00      	ldr	r3, [sp, #0]
 800f920:	3b01      	subs	r3, #1
 800f922:	ee18 1a10 	vmov	r1, s16
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	220a      	movs	r2, #10
 800f92a:	2300      	movs	r3, #0
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 fdc7 	bl	80104c0 <__multadd>
 800f932:	9b08      	ldr	r3, [sp, #32]
 800f934:	ee08 0a10 	vmov	s16, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 81b1 	beq.w	800fca0 <_dtoa_r+0xbc0>
 800f93e:	2300      	movs	r3, #0
 800f940:	4639      	mov	r1, r7
 800f942:	220a      	movs	r2, #10
 800f944:	4620      	mov	r0, r4
 800f946:	f000 fdbb 	bl	80104c0 <__multadd>
 800f94a:	9b02      	ldr	r3, [sp, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	4607      	mov	r7, r0
 800f950:	f300 808e 	bgt.w	800fa70 <_dtoa_r+0x990>
 800f954:	9b06      	ldr	r3, [sp, #24]
 800f956:	2b02      	cmp	r3, #2
 800f958:	dc51      	bgt.n	800f9fe <_dtoa_r+0x91e>
 800f95a:	e089      	b.n	800fa70 <_dtoa_r+0x990>
 800f95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f95e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f962:	e74b      	b.n	800f7fc <_dtoa_r+0x71c>
 800f964:	9b03      	ldr	r3, [sp, #12]
 800f966:	1e5e      	subs	r6, r3, #1
 800f968:	9b07      	ldr	r3, [sp, #28]
 800f96a:	42b3      	cmp	r3, r6
 800f96c:	bfbf      	itttt	lt
 800f96e:	9b07      	ldrlt	r3, [sp, #28]
 800f970:	9607      	strlt	r6, [sp, #28]
 800f972:	1af2      	sublt	r2, r6, r3
 800f974:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f976:	bfb6      	itet	lt
 800f978:	189b      	addlt	r3, r3, r2
 800f97a:	1b9e      	subge	r6, r3, r6
 800f97c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	bfb8      	it	lt
 800f982:	2600      	movlt	r6, #0
 800f984:	2b00      	cmp	r3, #0
 800f986:	bfb7      	itett	lt
 800f988:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f98c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f990:	1a9d      	sublt	r5, r3, r2
 800f992:	2300      	movlt	r3, #0
 800f994:	e734      	b.n	800f800 <_dtoa_r+0x720>
 800f996:	9e07      	ldr	r6, [sp, #28]
 800f998:	9d04      	ldr	r5, [sp, #16]
 800f99a:	9f08      	ldr	r7, [sp, #32]
 800f99c:	e73b      	b.n	800f816 <_dtoa_r+0x736>
 800f99e:	9a07      	ldr	r2, [sp, #28]
 800f9a0:	e767      	b.n	800f872 <_dtoa_r+0x792>
 800f9a2:	9b06      	ldr	r3, [sp, #24]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	dc18      	bgt.n	800f9da <_dtoa_r+0x8fa>
 800f9a8:	f1ba 0f00 	cmp.w	sl, #0
 800f9ac:	d115      	bne.n	800f9da <_dtoa_r+0x8fa>
 800f9ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9b2:	b993      	cbnz	r3, 800f9da <_dtoa_r+0x8fa>
 800f9b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9b8:	0d1b      	lsrs	r3, r3, #20
 800f9ba:	051b      	lsls	r3, r3, #20
 800f9bc:	b183      	cbz	r3, 800f9e0 <_dtoa_r+0x900>
 800f9be:	9b04      	ldr	r3, [sp, #16]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	9304      	str	r3, [sp, #16]
 800f9c4:	9b05      	ldr	r3, [sp, #20]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	f04f 0801 	mov.w	r8, #1
 800f9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f47f af6a 	bne.w	800f8aa <_dtoa_r+0x7ca>
 800f9d6:	2001      	movs	r0, #1
 800f9d8:	e76f      	b.n	800f8ba <_dtoa_r+0x7da>
 800f9da:	f04f 0800 	mov.w	r8, #0
 800f9de:	e7f6      	b.n	800f9ce <_dtoa_r+0x8ee>
 800f9e0:	4698      	mov	r8, r3
 800f9e2:	e7f4      	b.n	800f9ce <_dtoa_r+0x8ee>
 800f9e4:	f43f af7d 	beq.w	800f8e2 <_dtoa_r+0x802>
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	301c      	adds	r0, #28
 800f9ec:	e772      	b.n	800f8d4 <_dtoa_r+0x7f4>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	dc37      	bgt.n	800fa64 <_dtoa_r+0x984>
 800f9f4:	9b06      	ldr	r3, [sp, #24]
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	dd34      	ble.n	800fa64 <_dtoa_r+0x984>
 800f9fa:	9b03      	ldr	r3, [sp, #12]
 800f9fc:	9302      	str	r3, [sp, #8]
 800f9fe:	9b02      	ldr	r3, [sp, #8]
 800fa00:	b96b      	cbnz	r3, 800fa1e <_dtoa_r+0x93e>
 800fa02:	4631      	mov	r1, r6
 800fa04:	2205      	movs	r2, #5
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fd5a 	bl	80104c0 <__multadd>
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	4606      	mov	r6, r0
 800fa10:	ee18 0a10 	vmov	r0, s16
 800fa14:	f000 ffbe 	bl	8010994 <__mcmp>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	f73f adbb 	bgt.w	800f594 <_dtoa_r+0x4b4>
 800fa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa20:	9d01      	ldr	r5, [sp, #4]
 800fa22:	43db      	mvns	r3, r3
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	f04f 0800 	mov.w	r8, #0
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f000 fd25 	bl	801047c <_Bfree>
 800fa32:	2f00      	cmp	r7, #0
 800fa34:	f43f aea4 	beq.w	800f780 <_dtoa_r+0x6a0>
 800fa38:	f1b8 0f00 	cmp.w	r8, #0
 800fa3c:	d005      	beq.n	800fa4a <_dtoa_r+0x96a>
 800fa3e:	45b8      	cmp	r8, r7
 800fa40:	d003      	beq.n	800fa4a <_dtoa_r+0x96a>
 800fa42:	4641      	mov	r1, r8
 800fa44:	4620      	mov	r0, r4
 800fa46:	f000 fd19 	bl	801047c <_Bfree>
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 fd15 	bl	801047c <_Bfree>
 800fa52:	e695      	b.n	800f780 <_dtoa_r+0x6a0>
 800fa54:	2600      	movs	r6, #0
 800fa56:	4637      	mov	r7, r6
 800fa58:	e7e1      	b.n	800fa1e <_dtoa_r+0x93e>
 800fa5a:	9700      	str	r7, [sp, #0]
 800fa5c:	4637      	mov	r7, r6
 800fa5e:	e599      	b.n	800f594 <_dtoa_r+0x4b4>
 800fa60:	40240000 	.word	0x40240000
 800fa64:	9b08      	ldr	r3, [sp, #32]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f000 80ca 	beq.w	800fc00 <_dtoa_r+0xb20>
 800fa6c:	9b03      	ldr	r3, [sp, #12]
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	2d00      	cmp	r5, #0
 800fa72:	dd05      	ble.n	800fa80 <_dtoa_r+0x9a0>
 800fa74:	4639      	mov	r1, r7
 800fa76:	462a      	mov	r2, r5
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 ff1b 	bl	80108b4 <__lshift>
 800fa7e:	4607      	mov	r7, r0
 800fa80:	f1b8 0f00 	cmp.w	r8, #0
 800fa84:	d05b      	beq.n	800fb3e <_dtoa_r+0xa5e>
 800fa86:	6879      	ldr	r1, [r7, #4]
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f000 fcb7 	bl	80103fc <_Balloc>
 800fa8e:	4605      	mov	r5, r0
 800fa90:	b928      	cbnz	r0, 800fa9e <_dtoa_r+0x9be>
 800fa92:	4b87      	ldr	r3, [pc, #540]	; (800fcb0 <_dtoa_r+0xbd0>)
 800fa94:	4602      	mov	r2, r0
 800fa96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa9a:	f7ff bb3b 	b.w	800f114 <_dtoa_r+0x34>
 800fa9e:	693a      	ldr	r2, [r7, #16]
 800faa0:	3202      	adds	r2, #2
 800faa2:	0092      	lsls	r2, r2, #2
 800faa4:	f107 010c 	add.w	r1, r7, #12
 800faa8:	300c      	adds	r0, #12
 800faaa:	f7fd fc81 	bl	800d3b0 <memcpy>
 800faae:	2201      	movs	r2, #1
 800fab0:	4629      	mov	r1, r5
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 fefe 	bl	80108b4 <__lshift>
 800fab8:	9b01      	ldr	r3, [sp, #4]
 800faba:	f103 0901 	add.w	r9, r3, #1
 800fabe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fac2:	4413      	add	r3, r2
 800fac4:	9305      	str	r3, [sp, #20]
 800fac6:	f00a 0301 	and.w	r3, sl, #1
 800faca:	46b8      	mov	r8, r7
 800facc:	9304      	str	r3, [sp, #16]
 800face:	4607      	mov	r7, r0
 800fad0:	4631      	mov	r1, r6
 800fad2:	ee18 0a10 	vmov	r0, s16
 800fad6:	f7ff fa75 	bl	800efc4 <quorem>
 800fada:	4641      	mov	r1, r8
 800fadc:	9002      	str	r0, [sp, #8]
 800fade:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fae2:	ee18 0a10 	vmov	r0, s16
 800fae6:	f000 ff55 	bl	8010994 <__mcmp>
 800faea:	463a      	mov	r2, r7
 800faec:	9003      	str	r0, [sp, #12]
 800faee:	4631      	mov	r1, r6
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 ff6b 	bl	80109cc <__mdiff>
 800faf6:	68c2      	ldr	r2, [r0, #12]
 800faf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800fafc:	4605      	mov	r5, r0
 800fafe:	bb02      	cbnz	r2, 800fb42 <_dtoa_r+0xa62>
 800fb00:	4601      	mov	r1, r0
 800fb02:	ee18 0a10 	vmov	r0, s16
 800fb06:	f000 ff45 	bl	8010994 <__mcmp>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4620      	mov	r0, r4
 800fb10:	9207      	str	r2, [sp, #28]
 800fb12:	f000 fcb3 	bl	801047c <_Bfree>
 800fb16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb1a:	ea43 0102 	orr.w	r1, r3, r2
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	430b      	orrs	r3, r1
 800fb22:	464d      	mov	r5, r9
 800fb24:	d10f      	bne.n	800fb46 <_dtoa_r+0xa66>
 800fb26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb2a:	d02a      	beq.n	800fb82 <_dtoa_r+0xaa2>
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	dd02      	ble.n	800fb38 <_dtoa_r+0xa58>
 800fb32:	9b02      	ldr	r3, [sp, #8]
 800fb34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fb38:	f88b a000 	strb.w	sl, [fp]
 800fb3c:	e775      	b.n	800fa2a <_dtoa_r+0x94a>
 800fb3e:	4638      	mov	r0, r7
 800fb40:	e7ba      	b.n	800fab8 <_dtoa_r+0x9d8>
 800fb42:	2201      	movs	r2, #1
 800fb44:	e7e2      	b.n	800fb0c <_dtoa_r+0xa2c>
 800fb46:	9b03      	ldr	r3, [sp, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	db04      	blt.n	800fb56 <_dtoa_r+0xa76>
 800fb4c:	9906      	ldr	r1, [sp, #24]
 800fb4e:	430b      	orrs	r3, r1
 800fb50:	9904      	ldr	r1, [sp, #16]
 800fb52:	430b      	orrs	r3, r1
 800fb54:	d122      	bne.n	800fb9c <_dtoa_r+0xabc>
 800fb56:	2a00      	cmp	r2, #0
 800fb58:	ddee      	ble.n	800fb38 <_dtoa_r+0xa58>
 800fb5a:	ee18 1a10 	vmov	r1, s16
 800fb5e:	2201      	movs	r2, #1
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 fea7 	bl	80108b4 <__lshift>
 800fb66:	4631      	mov	r1, r6
 800fb68:	ee08 0a10 	vmov	s16, r0
 800fb6c:	f000 ff12 	bl	8010994 <__mcmp>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	dc03      	bgt.n	800fb7c <_dtoa_r+0xa9c>
 800fb74:	d1e0      	bne.n	800fb38 <_dtoa_r+0xa58>
 800fb76:	f01a 0f01 	tst.w	sl, #1
 800fb7a:	d0dd      	beq.n	800fb38 <_dtoa_r+0xa58>
 800fb7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb80:	d1d7      	bne.n	800fb32 <_dtoa_r+0xa52>
 800fb82:	2339      	movs	r3, #57	; 0x39
 800fb84:	f88b 3000 	strb.w	r3, [fp]
 800fb88:	462b      	mov	r3, r5
 800fb8a:	461d      	mov	r5, r3
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb92:	2a39      	cmp	r2, #57	; 0x39
 800fb94:	d071      	beq.n	800fc7a <_dtoa_r+0xb9a>
 800fb96:	3201      	adds	r2, #1
 800fb98:	701a      	strb	r2, [r3, #0]
 800fb9a:	e746      	b.n	800fa2a <_dtoa_r+0x94a>
 800fb9c:	2a00      	cmp	r2, #0
 800fb9e:	dd07      	ble.n	800fbb0 <_dtoa_r+0xad0>
 800fba0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fba4:	d0ed      	beq.n	800fb82 <_dtoa_r+0xaa2>
 800fba6:	f10a 0301 	add.w	r3, sl, #1
 800fbaa:	f88b 3000 	strb.w	r3, [fp]
 800fbae:	e73c      	b.n	800fa2a <_dtoa_r+0x94a>
 800fbb0:	9b05      	ldr	r3, [sp, #20]
 800fbb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fbb6:	4599      	cmp	r9, r3
 800fbb8:	d047      	beq.n	800fc4a <_dtoa_r+0xb6a>
 800fbba:	ee18 1a10 	vmov	r1, s16
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	220a      	movs	r2, #10
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 fc7c 	bl	80104c0 <__multadd>
 800fbc8:	45b8      	cmp	r8, r7
 800fbca:	ee08 0a10 	vmov	s16, r0
 800fbce:	f04f 0300 	mov.w	r3, #0
 800fbd2:	f04f 020a 	mov.w	r2, #10
 800fbd6:	4641      	mov	r1, r8
 800fbd8:	4620      	mov	r0, r4
 800fbda:	d106      	bne.n	800fbea <_dtoa_r+0xb0a>
 800fbdc:	f000 fc70 	bl	80104c0 <__multadd>
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	4607      	mov	r7, r0
 800fbe4:	f109 0901 	add.w	r9, r9, #1
 800fbe8:	e772      	b.n	800fad0 <_dtoa_r+0x9f0>
 800fbea:	f000 fc69 	bl	80104c0 <__multadd>
 800fbee:	4639      	mov	r1, r7
 800fbf0:	4680      	mov	r8, r0
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	220a      	movs	r2, #10
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 fc62 	bl	80104c0 <__multadd>
 800fbfc:	4607      	mov	r7, r0
 800fbfe:	e7f1      	b.n	800fbe4 <_dtoa_r+0xb04>
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	9302      	str	r3, [sp, #8]
 800fc04:	9d01      	ldr	r5, [sp, #4]
 800fc06:	ee18 0a10 	vmov	r0, s16
 800fc0a:	4631      	mov	r1, r6
 800fc0c:	f7ff f9da 	bl	800efc4 <quorem>
 800fc10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc14:	9b01      	ldr	r3, [sp, #4]
 800fc16:	f805 ab01 	strb.w	sl, [r5], #1
 800fc1a:	1aea      	subs	r2, r5, r3
 800fc1c:	9b02      	ldr	r3, [sp, #8]
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	dd09      	ble.n	800fc36 <_dtoa_r+0xb56>
 800fc22:	ee18 1a10 	vmov	r1, s16
 800fc26:	2300      	movs	r3, #0
 800fc28:	220a      	movs	r2, #10
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 fc48 	bl	80104c0 <__multadd>
 800fc30:	ee08 0a10 	vmov	s16, r0
 800fc34:	e7e7      	b.n	800fc06 <_dtoa_r+0xb26>
 800fc36:	9b02      	ldr	r3, [sp, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	bfc8      	it	gt
 800fc3c:	461d      	movgt	r5, r3
 800fc3e:	9b01      	ldr	r3, [sp, #4]
 800fc40:	bfd8      	it	le
 800fc42:	2501      	movle	r5, #1
 800fc44:	441d      	add	r5, r3
 800fc46:	f04f 0800 	mov.w	r8, #0
 800fc4a:	ee18 1a10 	vmov	r1, s16
 800fc4e:	2201      	movs	r2, #1
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fe2f 	bl	80108b4 <__lshift>
 800fc56:	4631      	mov	r1, r6
 800fc58:	ee08 0a10 	vmov	s16, r0
 800fc5c:	f000 fe9a 	bl	8010994 <__mcmp>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	dc91      	bgt.n	800fb88 <_dtoa_r+0xaa8>
 800fc64:	d102      	bne.n	800fc6c <_dtoa_r+0xb8c>
 800fc66:	f01a 0f01 	tst.w	sl, #1
 800fc6a:	d18d      	bne.n	800fb88 <_dtoa_r+0xaa8>
 800fc6c:	462b      	mov	r3, r5
 800fc6e:	461d      	mov	r5, r3
 800fc70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc74:	2a30      	cmp	r2, #48	; 0x30
 800fc76:	d0fa      	beq.n	800fc6e <_dtoa_r+0xb8e>
 800fc78:	e6d7      	b.n	800fa2a <_dtoa_r+0x94a>
 800fc7a:	9a01      	ldr	r2, [sp, #4]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d184      	bne.n	800fb8a <_dtoa_r+0xaaa>
 800fc80:	9b00      	ldr	r3, [sp, #0]
 800fc82:	3301      	adds	r3, #1
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	2331      	movs	r3, #49	; 0x31
 800fc88:	7013      	strb	r3, [r2, #0]
 800fc8a:	e6ce      	b.n	800fa2a <_dtoa_r+0x94a>
 800fc8c:	4b09      	ldr	r3, [pc, #36]	; (800fcb4 <_dtoa_r+0xbd4>)
 800fc8e:	f7ff ba95 	b.w	800f1bc <_dtoa_r+0xdc>
 800fc92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f47f aa6e 	bne.w	800f176 <_dtoa_r+0x96>
 800fc9a:	4b07      	ldr	r3, [pc, #28]	; (800fcb8 <_dtoa_r+0xbd8>)
 800fc9c:	f7ff ba8e 	b.w	800f1bc <_dtoa_r+0xdc>
 800fca0:	9b02      	ldr	r3, [sp, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dcae      	bgt.n	800fc04 <_dtoa_r+0xb24>
 800fca6:	9b06      	ldr	r3, [sp, #24]
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	f73f aea8 	bgt.w	800f9fe <_dtoa_r+0x91e>
 800fcae:	e7a9      	b.n	800fc04 <_dtoa_r+0xb24>
 800fcb0:	08013258 	.word	0x08013258
 800fcb4:	08013451 	.word	0x08013451
 800fcb8:	080131d9 	.word	0x080131d9

0800fcbc <rshift>:
 800fcbc:	6903      	ldr	r3, [r0, #16]
 800fcbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fcc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcca:	f100 0414 	add.w	r4, r0, #20
 800fcce:	dd45      	ble.n	800fd5c <rshift+0xa0>
 800fcd0:	f011 011f 	ands.w	r1, r1, #31
 800fcd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fcd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fcdc:	d10c      	bne.n	800fcf8 <rshift+0x3c>
 800fcde:	f100 0710 	add.w	r7, r0, #16
 800fce2:	4629      	mov	r1, r5
 800fce4:	42b1      	cmp	r1, r6
 800fce6:	d334      	bcc.n	800fd52 <rshift+0x96>
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	1eea      	subs	r2, r5, #3
 800fcee:	4296      	cmp	r6, r2
 800fcf0:	bf38      	it	cc
 800fcf2:	2300      	movcc	r3, #0
 800fcf4:	4423      	add	r3, r4
 800fcf6:	e015      	b.n	800fd24 <rshift+0x68>
 800fcf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fcfc:	f1c1 0820 	rsb	r8, r1, #32
 800fd00:	40cf      	lsrs	r7, r1
 800fd02:	f105 0e04 	add.w	lr, r5, #4
 800fd06:	46a1      	mov	r9, r4
 800fd08:	4576      	cmp	r6, lr
 800fd0a:	46f4      	mov	ip, lr
 800fd0c:	d815      	bhi.n	800fd3a <rshift+0x7e>
 800fd0e:	1a9a      	subs	r2, r3, r2
 800fd10:	0092      	lsls	r2, r2, #2
 800fd12:	3a04      	subs	r2, #4
 800fd14:	3501      	adds	r5, #1
 800fd16:	42ae      	cmp	r6, r5
 800fd18:	bf38      	it	cc
 800fd1a:	2200      	movcc	r2, #0
 800fd1c:	18a3      	adds	r3, r4, r2
 800fd1e:	50a7      	str	r7, [r4, r2]
 800fd20:	b107      	cbz	r7, 800fd24 <rshift+0x68>
 800fd22:	3304      	adds	r3, #4
 800fd24:	1b1a      	subs	r2, r3, r4
 800fd26:	42a3      	cmp	r3, r4
 800fd28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd2c:	bf08      	it	eq
 800fd2e:	2300      	moveq	r3, #0
 800fd30:	6102      	str	r2, [r0, #16]
 800fd32:	bf08      	it	eq
 800fd34:	6143      	streq	r3, [r0, #20]
 800fd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd3a:	f8dc c000 	ldr.w	ip, [ip]
 800fd3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd42:	ea4c 0707 	orr.w	r7, ip, r7
 800fd46:	f849 7b04 	str.w	r7, [r9], #4
 800fd4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd4e:	40cf      	lsrs	r7, r1
 800fd50:	e7da      	b.n	800fd08 <rshift+0x4c>
 800fd52:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd56:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd5a:	e7c3      	b.n	800fce4 <rshift+0x28>
 800fd5c:	4623      	mov	r3, r4
 800fd5e:	e7e1      	b.n	800fd24 <rshift+0x68>

0800fd60 <__hexdig_fun>:
 800fd60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd64:	2b09      	cmp	r3, #9
 800fd66:	d802      	bhi.n	800fd6e <__hexdig_fun+0xe>
 800fd68:	3820      	subs	r0, #32
 800fd6a:	b2c0      	uxtb	r0, r0
 800fd6c:	4770      	bx	lr
 800fd6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fd72:	2b05      	cmp	r3, #5
 800fd74:	d801      	bhi.n	800fd7a <__hexdig_fun+0x1a>
 800fd76:	3847      	subs	r0, #71	; 0x47
 800fd78:	e7f7      	b.n	800fd6a <__hexdig_fun+0xa>
 800fd7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd7e:	2b05      	cmp	r3, #5
 800fd80:	d801      	bhi.n	800fd86 <__hexdig_fun+0x26>
 800fd82:	3827      	subs	r0, #39	; 0x27
 800fd84:	e7f1      	b.n	800fd6a <__hexdig_fun+0xa>
 800fd86:	2000      	movs	r0, #0
 800fd88:	4770      	bx	lr
	...

0800fd8c <__gethex>:
 800fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	ed2d 8b02 	vpush	{d8}
 800fd94:	b089      	sub	sp, #36	; 0x24
 800fd96:	ee08 0a10 	vmov	s16, r0
 800fd9a:	9304      	str	r3, [sp, #16]
 800fd9c:	4bb4      	ldr	r3, [pc, #720]	; (8010070 <__gethex+0x2e4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	468b      	mov	fp, r1
 800fda6:	4690      	mov	r8, r2
 800fda8:	f7f0 fa24 	bl	80001f4 <strlen>
 800fdac:	9b01      	ldr	r3, [sp, #4]
 800fdae:	f8db 2000 	ldr.w	r2, [fp]
 800fdb2:	4403      	add	r3, r0
 800fdb4:	4682      	mov	sl, r0
 800fdb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fdba:	9305      	str	r3, [sp, #20]
 800fdbc:	1c93      	adds	r3, r2, #2
 800fdbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fdc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fdc6:	32fe      	adds	r2, #254	; 0xfe
 800fdc8:	18d1      	adds	r1, r2, r3
 800fdca:	461f      	mov	r7, r3
 800fdcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fdd0:	9100      	str	r1, [sp, #0]
 800fdd2:	2830      	cmp	r0, #48	; 0x30
 800fdd4:	d0f8      	beq.n	800fdc8 <__gethex+0x3c>
 800fdd6:	f7ff ffc3 	bl	800fd60 <__hexdig_fun>
 800fdda:	4604      	mov	r4, r0
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d13a      	bne.n	800fe56 <__gethex+0xca>
 800fde0:	9901      	ldr	r1, [sp, #4]
 800fde2:	4652      	mov	r2, sl
 800fde4:	4638      	mov	r0, r7
 800fde6:	f7fe fa0a 	bl	800e1fe <strncmp>
 800fdea:	4605      	mov	r5, r0
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d168      	bne.n	800fec2 <__gethex+0x136>
 800fdf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fdf4:	eb07 060a 	add.w	r6, r7, sl
 800fdf8:	f7ff ffb2 	bl	800fd60 <__hexdig_fun>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d062      	beq.n	800fec6 <__gethex+0x13a>
 800fe00:	4633      	mov	r3, r6
 800fe02:	7818      	ldrb	r0, [r3, #0]
 800fe04:	2830      	cmp	r0, #48	; 0x30
 800fe06:	461f      	mov	r7, r3
 800fe08:	f103 0301 	add.w	r3, r3, #1
 800fe0c:	d0f9      	beq.n	800fe02 <__gethex+0x76>
 800fe0e:	f7ff ffa7 	bl	800fd60 <__hexdig_fun>
 800fe12:	2301      	movs	r3, #1
 800fe14:	fab0 f480 	clz	r4, r0
 800fe18:	0964      	lsrs	r4, r4, #5
 800fe1a:	4635      	mov	r5, r6
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	463a      	mov	r2, r7
 800fe20:	4616      	mov	r6, r2
 800fe22:	3201      	adds	r2, #1
 800fe24:	7830      	ldrb	r0, [r6, #0]
 800fe26:	f7ff ff9b 	bl	800fd60 <__hexdig_fun>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d1f8      	bne.n	800fe20 <__gethex+0x94>
 800fe2e:	9901      	ldr	r1, [sp, #4]
 800fe30:	4652      	mov	r2, sl
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7fe f9e3 	bl	800e1fe <strncmp>
 800fe38:	b980      	cbnz	r0, 800fe5c <__gethex+0xd0>
 800fe3a:	b94d      	cbnz	r5, 800fe50 <__gethex+0xc4>
 800fe3c:	eb06 050a 	add.w	r5, r6, sl
 800fe40:	462a      	mov	r2, r5
 800fe42:	4616      	mov	r6, r2
 800fe44:	3201      	adds	r2, #1
 800fe46:	7830      	ldrb	r0, [r6, #0]
 800fe48:	f7ff ff8a 	bl	800fd60 <__hexdig_fun>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d1f8      	bne.n	800fe42 <__gethex+0xb6>
 800fe50:	1bad      	subs	r5, r5, r6
 800fe52:	00ad      	lsls	r5, r5, #2
 800fe54:	e004      	b.n	800fe60 <__gethex+0xd4>
 800fe56:	2400      	movs	r4, #0
 800fe58:	4625      	mov	r5, r4
 800fe5a:	e7e0      	b.n	800fe1e <__gethex+0x92>
 800fe5c:	2d00      	cmp	r5, #0
 800fe5e:	d1f7      	bne.n	800fe50 <__gethex+0xc4>
 800fe60:	7833      	ldrb	r3, [r6, #0]
 800fe62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe66:	2b50      	cmp	r3, #80	; 0x50
 800fe68:	d13b      	bne.n	800fee2 <__gethex+0x156>
 800fe6a:	7873      	ldrb	r3, [r6, #1]
 800fe6c:	2b2b      	cmp	r3, #43	; 0x2b
 800fe6e:	d02c      	beq.n	800feca <__gethex+0x13e>
 800fe70:	2b2d      	cmp	r3, #45	; 0x2d
 800fe72:	d02e      	beq.n	800fed2 <__gethex+0x146>
 800fe74:	1c71      	adds	r1, r6, #1
 800fe76:	f04f 0900 	mov.w	r9, #0
 800fe7a:	7808      	ldrb	r0, [r1, #0]
 800fe7c:	f7ff ff70 	bl	800fd60 <__hexdig_fun>
 800fe80:	1e43      	subs	r3, r0, #1
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b18      	cmp	r3, #24
 800fe86:	d82c      	bhi.n	800fee2 <__gethex+0x156>
 800fe88:	f1a0 0210 	sub.w	r2, r0, #16
 800fe8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe90:	f7ff ff66 	bl	800fd60 <__hexdig_fun>
 800fe94:	1e43      	subs	r3, r0, #1
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b18      	cmp	r3, #24
 800fe9a:	d91d      	bls.n	800fed8 <__gethex+0x14c>
 800fe9c:	f1b9 0f00 	cmp.w	r9, #0
 800fea0:	d000      	beq.n	800fea4 <__gethex+0x118>
 800fea2:	4252      	negs	r2, r2
 800fea4:	4415      	add	r5, r2
 800fea6:	f8cb 1000 	str.w	r1, [fp]
 800feaa:	b1e4      	cbz	r4, 800fee6 <__gethex+0x15a>
 800feac:	9b00      	ldr	r3, [sp, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	bf14      	ite	ne
 800feb2:	2700      	movne	r7, #0
 800feb4:	2706      	moveq	r7, #6
 800feb6:	4638      	mov	r0, r7
 800feb8:	b009      	add	sp, #36	; 0x24
 800feba:	ecbd 8b02 	vpop	{d8}
 800febe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec2:	463e      	mov	r6, r7
 800fec4:	4625      	mov	r5, r4
 800fec6:	2401      	movs	r4, #1
 800fec8:	e7ca      	b.n	800fe60 <__gethex+0xd4>
 800feca:	f04f 0900 	mov.w	r9, #0
 800fece:	1cb1      	adds	r1, r6, #2
 800fed0:	e7d3      	b.n	800fe7a <__gethex+0xee>
 800fed2:	f04f 0901 	mov.w	r9, #1
 800fed6:	e7fa      	b.n	800fece <__gethex+0x142>
 800fed8:	230a      	movs	r3, #10
 800feda:	fb03 0202 	mla	r2, r3, r2, r0
 800fede:	3a10      	subs	r2, #16
 800fee0:	e7d4      	b.n	800fe8c <__gethex+0x100>
 800fee2:	4631      	mov	r1, r6
 800fee4:	e7df      	b.n	800fea6 <__gethex+0x11a>
 800fee6:	1bf3      	subs	r3, r6, r7
 800fee8:	3b01      	subs	r3, #1
 800feea:	4621      	mov	r1, r4
 800feec:	2b07      	cmp	r3, #7
 800feee:	dc0b      	bgt.n	800ff08 <__gethex+0x17c>
 800fef0:	ee18 0a10 	vmov	r0, s16
 800fef4:	f000 fa82 	bl	80103fc <_Balloc>
 800fef8:	4604      	mov	r4, r0
 800fefa:	b940      	cbnz	r0, 800ff0e <__gethex+0x182>
 800fefc:	4b5d      	ldr	r3, [pc, #372]	; (8010074 <__gethex+0x2e8>)
 800fefe:	4602      	mov	r2, r0
 800ff00:	21de      	movs	r1, #222	; 0xde
 800ff02:	485d      	ldr	r0, [pc, #372]	; (8010078 <__gethex+0x2ec>)
 800ff04:	f001 fdd0 	bl	8011aa8 <__assert_func>
 800ff08:	3101      	adds	r1, #1
 800ff0a:	105b      	asrs	r3, r3, #1
 800ff0c:	e7ee      	b.n	800feec <__gethex+0x160>
 800ff0e:	f100 0914 	add.w	r9, r0, #20
 800ff12:	f04f 0b00 	mov.w	fp, #0
 800ff16:	f1ca 0301 	rsb	r3, sl, #1
 800ff1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff1e:	f8cd b000 	str.w	fp, [sp]
 800ff22:	9306      	str	r3, [sp, #24]
 800ff24:	42b7      	cmp	r7, r6
 800ff26:	d340      	bcc.n	800ffaa <__gethex+0x21e>
 800ff28:	9802      	ldr	r0, [sp, #8]
 800ff2a:	9b00      	ldr	r3, [sp, #0]
 800ff2c:	f840 3b04 	str.w	r3, [r0], #4
 800ff30:	eba0 0009 	sub.w	r0, r0, r9
 800ff34:	1080      	asrs	r0, r0, #2
 800ff36:	0146      	lsls	r6, r0, #5
 800ff38:	6120      	str	r0, [r4, #16]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f000 fb50 	bl	80105e0 <__hi0bits>
 800ff40:	1a30      	subs	r0, r6, r0
 800ff42:	f8d8 6000 	ldr.w	r6, [r8]
 800ff46:	42b0      	cmp	r0, r6
 800ff48:	dd63      	ble.n	8010012 <__gethex+0x286>
 800ff4a:	1b87      	subs	r7, r0, r6
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fef4 	bl	8010d3c <__any_on>
 800ff54:	4682      	mov	sl, r0
 800ff56:	b1a8      	cbz	r0, 800ff84 <__gethex+0x1f8>
 800ff58:	1e7b      	subs	r3, r7, #1
 800ff5a:	1159      	asrs	r1, r3, #5
 800ff5c:	f003 021f 	and.w	r2, r3, #31
 800ff60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ff64:	f04f 0a01 	mov.w	sl, #1
 800ff68:	fa0a f202 	lsl.w	r2, sl, r2
 800ff6c:	420a      	tst	r2, r1
 800ff6e:	d009      	beq.n	800ff84 <__gethex+0x1f8>
 800ff70:	4553      	cmp	r3, sl
 800ff72:	dd05      	ble.n	800ff80 <__gethex+0x1f4>
 800ff74:	1eb9      	subs	r1, r7, #2
 800ff76:	4620      	mov	r0, r4
 800ff78:	f000 fee0 	bl	8010d3c <__any_on>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d145      	bne.n	801000c <__gethex+0x280>
 800ff80:	f04f 0a02 	mov.w	sl, #2
 800ff84:	4639      	mov	r1, r7
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7ff fe98 	bl	800fcbc <rshift>
 800ff8c:	443d      	add	r5, r7
 800ff8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff92:	42ab      	cmp	r3, r5
 800ff94:	da4c      	bge.n	8010030 <__gethex+0x2a4>
 800ff96:	ee18 0a10 	vmov	r0, s16
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	f000 fa6e 	bl	801047c <_Bfree>
 800ffa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	6013      	str	r3, [r2, #0]
 800ffa6:	27a3      	movs	r7, #163	; 0xa3
 800ffa8:	e785      	b.n	800feb6 <__gethex+0x12a>
 800ffaa:	1e73      	subs	r3, r6, #1
 800ffac:	9a05      	ldr	r2, [sp, #20]
 800ffae:	9303      	str	r3, [sp, #12]
 800ffb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d019      	beq.n	800ffec <__gethex+0x260>
 800ffb8:	f1bb 0f20 	cmp.w	fp, #32
 800ffbc:	d107      	bne.n	800ffce <__gethex+0x242>
 800ffbe:	9b02      	ldr	r3, [sp, #8]
 800ffc0:	9a00      	ldr	r2, [sp, #0]
 800ffc2:	f843 2b04 	str.w	r2, [r3], #4
 800ffc6:	9302      	str	r3, [sp, #8]
 800ffc8:	2300      	movs	r3, #0
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	469b      	mov	fp, r3
 800ffce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ffd2:	f7ff fec5 	bl	800fd60 <__hexdig_fun>
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	f000 000f 	and.w	r0, r0, #15
 800ffdc:	fa00 f00b 	lsl.w	r0, r0, fp
 800ffe0:	4303      	orrs	r3, r0
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	f10b 0b04 	add.w	fp, fp, #4
 800ffe8:	9b03      	ldr	r3, [sp, #12]
 800ffea:	e00d      	b.n	8010008 <__gethex+0x27c>
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	9a06      	ldr	r2, [sp, #24]
 800fff0:	4413      	add	r3, r2
 800fff2:	42bb      	cmp	r3, r7
 800fff4:	d3e0      	bcc.n	800ffb8 <__gethex+0x22c>
 800fff6:	4618      	mov	r0, r3
 800fff8:	9901      	ldr	r1, [sp, #4]
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	4652      	mov	r2, sl
 800fffe:	f7fe f8fe 	bl	800e1fe <strncmp>
 8010002:	9b07      	ldr	r3, [sp, #28]
 8010004:	2800      	cmp	r0, #0
 8010006:	d1d7      	bne.n	800ffb8 <__gethex+0x22c>
 8010008:	461e      	mov	r6, r3
 801000a:	e78b      	b.n	800ff24 <__gethex+0x198>
 801000c:	f04f 0a03 	mov.w	sl, #3
 8010010:	e7b8      	b.n	800ff84 <__gethex+0x1f8>
 8010012:	da0a      	bge.n	801002a <__gethex+0x29e>
 8010014:	1a37      	subs	r7, r6, r0
 8010016:	4621      	mov	r1, r4
 8010018:	ee18 0a10 	vmov	r0, s16
 801001c:	463a      	mov	r2, r7
 801001e:	f000 fc49 	bl	80108b4 <__lshift>
 8010022:	1bed      	subs	r5, r5, r7
 8010024:	4604      	mov	r4, r0
 8010026:	f100 0914 	add.w	r9, r0, #20
 801002a:	f04f 0a00 	mov.w	sl, #0
 801002e:	e7ae      	b.n	800ff8e <__gethex+0x202>
 8010030:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010034:	42a8      	cmp	r0, r5
 8010036:	dd72      	ble.n	801011e <__gethex+0x392>
 8010038:	1b45      	subs	r5, r0, r5
 801003a:	42ae      	cmp	r6, r5
 801003c:	dc36      	bgt.n	80100ac <__gethex+0x320>
 801003e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d02a      	beq.n	801009c <__gethex+0x310>
 8010046:	2b03      	cmp	r3, #3
 8010048:	d02c      	beq.n	80100a4 <__gethex+0x318>
 801004a:	2b01      	cmp	r3, #1
 801004c:	d11c      	bne.n	8010088 <__gethex+0x2fc>
 801004e:	42ae      	cmp	r6, r5
 8010050:	d11a      	bne.n	8010088 <__gethex+0x2fc>
 8010052:	2e01      	cmp	r6, #1
 8010054:	d112      	bne.n	801007c <__gethex+0x2f0>
 8010056:	9a04      	ldr	r2, [sp, #16]
 8010058:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	2301      	movs	r3, #1
 8010060:	6123      	str	r3, [r4, #16]
 8010062:	f8c9 3000 	str.w	r3, [r9]
 8010066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010068:	2762      	movs	r7, #98	; 0x62
 801006a:	601c      	str	r4, [r3, #0]
 801006c:	e723      	b.n	800feb6 <__gethex+0x12a>
 801006e:	bf00      	nop
 8010070:	080132d0 	.word	0x080132d0
 8010074:	08013258 	.word	0x08013258
 8010078:	08013269 	.word	0x08013269
 801007c:	1e71      	subs	r1, r6, #1
 801007e:	4620      	mov	r0, r4
 8010080:	f000 fe5c 	bl	8010d3c <__any_on>
 8010084:	2800      	cmp	r0, #0
 8010086:	d1e6      	bne.n	8010056 <__gethex+0x2ca>
 8010088:	ee18 0a10 	vmov	r0, s16
 801008c:	4621      	mov	r1, r4
 801008e:	f000 f9f5 	bl	801047c <_Bfree>
 8010092:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010094:	2300      	movs	r3, #0
 8010096:	6013      	str	r3, [r2, #0]
 8010098:	2750      	movs	r7, #80	; 0x50
 801009a:	e70c      	b.n	800feb6 <__gethex+0x12a>
 801009c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1f2      	bne.n	8010088 <__gethex+0x2fc>
 80100a2:	e7d8      	b.n	8010056 <__gethex+0x2ca>
 80100a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1d5      	bne.n	8010056 <__gethex+0x2ca>
 80100aa:	e7ed      	b.n	8010088 <__gethex+0x2fc>
 80100ac:	1e6f      	subs	r7, r5, #1
 80100ae:	f1ba 0f00 	cmp.w	sl, #0
 80100b2:	d131      	bne.n	8010118 <__gethex+0x38c>
 80100b4:	b127      	cbz	r7, 80100c0 <__gethex+0x334>
 80100b6:	4639      	mov	r1, r7
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 fe3f 	bl	8010d3c <__any_on>
 80100be:	4682      	mov	sl, r0
 80100c0:	117b      	asrs	r3, r7, #5
 80100c2:	2101      	movs	r1, #1
 80100c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80100c8:	f007 071f 	and.w	r7, r7, #31
 80100cc:	fa01 f707 	lsl.w	r7, r1, r7
 80100d0:	421f      	tst	r7, r3
 80100d2:	4629      	mov	r1, r5
 80100d4:	4620      	mov	r0, r4
 80100d6:	bf18      	it	ne
 80100d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80100dc:	1b76      	subs	r6, r6, r5
 80100de:	f7ff fded 	bl	800fcbc <rshift>
 80100e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80100e6:	2702      	movs	r7, #2
 80100e8:	f1ba 0f00 	cmp.w	sl, #0
 80100ec:	d048      	beq.n	8010180 <__gethex+0x3f4>
 80100ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100f2:	2b02      	cmp	r3, #2
 80100f4:	d015      	beq.n	8010122 <__gethex+0x396>
 80100f6:	2b03      	cmp	r3, #3
 80100f8:	d017      	beq.n	801012a <__gethex+0x39e>
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d109      	bne.n	8010112 <__gethex+0x386>
 80100fe:	f01a 0f02 	tst.w	sl, #2
 8010102:	d006      	beq.n	8010112 <__gethex+0x386>
 8010104:	f8d9 0000 	ldr.w	r0, [r9]
 8010108:	ea4a 0a00 	orr.w	sl, sl, r0
 801010c:	f01a 0f01 	tst.w	sl, #1
 8010110:	d10e      	bne.n	8010130 <__gethex+0x3a4>
 8010112:	f047 0710 	orr.w	r7, r7, #16
 8010116:	e033      	b.n	8010180 <__gethex+0x3f4>
 8010118:	f04f 0a01 	mov.w	sl, #1
 801011c:	e7d0      	b.n	80100c0 <__gethex+0x334>
 801011e:	2701      	movs	r7, #1
 8010120:	e7e2      	b.n	80100e8 <__gethex+0x35c>
 8010122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010124:	f1c3 0301 	rsb	r3, r3, #1
 8010128:	9315      	str	r3, [sp, #84]	; 0x54
 801012a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801012c:	2b00      	cmp	r3, #0
 801012e:	d0f0      	beq.n	8010112 <__gethex+0x386>
 8010130:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010134:	f104 0314 	add.w	r3, r4, #20
 8010138:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801013c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010140:	f04f 0c00 	mov.w	ip, #0
 8010144:	4618      	mov	r0, r3
 8010146:	f853 2b04 	ldr.w	r2, [r3], #4
 801014a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801014e:	d01c      	beq.n	801018a <__gethex+0x3fe>
 8010150:	3201      	adds	r2, #1
 8010152:	6002      	str	r2, [r0, #0]
 8010154:	2f02      	cmp	r7, #2
 8010156:	f104 0314 	add.w	r3, r4, #20
 801015a:	d13f      	bne.n	80101dc <__gethex+0x450>
 801015c:	f8d8 2000 	ldr.w	r2, [r8]
 8010160:	3a01      	subs	r2, #1
 8010162:	42b2      	cmp	r2, r6
 8010164:	d10a      	bne.n	801017c <__gethex+0x3f0>
 8010166:	1171      	asrs	r1, r6, #5
 8010168:	2201      	movs	r2, #1
 801016a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801016e:	f006 061f 	and.w	r6, r6, #31
 8010172:	fa02 f606 	lsl.w	r6, r2, r6
 8010176:	421e      	tst	r6, r3
 8010178:	bf18      	it	ne
 801017a:	4617      	movne	r7, r2
 801017c:	f047 0720 	orr.w	r7, r7, #32
 8010180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010182:	601c      	str	r4, [r3, #0]
 8010184:	9b04      	ldr	r3, [sp, #16]
 8010186:	601d      	str	r5, [r3, #0]
 8010188:	e695      	b.n	800feb6 <__gethex+0x12a>
 801018a:	4299      	cmp	r1, r3
 801018c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010190:	d8d8      	bhi.n	8010144 <__gethex+0x3b8>
 8010192:	68a3      	ldr	r3, [r4, #8]
 8010194:	459b      	cmp	fp, r3
 8010196:	db19      	blt.n	80101cc <__gethex+0x440>
 8010198:	6861      	ldr	r1, [r4, #4]
 801019a:	ee18 0a10 	vmov	r0, s16
 801019e:	3101      	adds	r1, #1
 80101a0:	f000 f92c 	bl	80103fc <_Balloc>
 80101a4:	4681      	mov	r9, r0
 80101a6:	b918      	cbnz	r0, 80101b0 <__gethex+0x424>
 80101a8:	4b1a      	ldr	r3, [pc, #104]	; (8010214 <__gethex+0x488>)
 80101aa:	4602      	mov	r2, r0
 80101ac:	2184      	movs	r1, #132	; 0x84
 80101ae:	e6a8      	b.n	800ff02 <__gethex+0x176>
 80101b0:	6922      	ldr	r2, [r4, #16]
 80101b2:	3202      	adds	r2, #2
 80101b4:	f104 010c 	add.w	r1, r4, #12
 80101b8:	0092      	lsls	r2, r2, #2
 80101ba:	300c      	adds	r0, #12
 80101bc:	f7fd f8f8 	bl	800d3b0 <memcpy>
 80101c0:	4621      	mov	r1, r4
 80101c2:	ee18 0a10 	vmov	r0, s16
 80101c6:	f000 f959 	bl	801047c <_Bfree>
 80101ca:	464c      	mov	r4, r9
 80101cc:	6923      	ldr	r3, [r4, #16]
 80101ce:	1c5a      	adds	r2, r3, #1
 80101d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101d4:	6122      	str	r2, [r4, #16]
 80101d6:	2201      	movs	r2, #1
 80101d8:	615a      	str	r2, [r3, #20]
 80101da:	e7bb      	b.n	8010154 <__gethex+0x3c8>
 80101dc:	6922      	ldr	r2, [r4, #16]
 80101de:	455a      	cmp	r2, fp
 80101e0:	dd0b      	ble.n	80101fa <__gethex+0x46e>
 80101e2:	2101      	movs	r1, #1
 80101e4:	4620      	mov	r0, r4
 80101e6:	f7ff fd69 	bl	800fcbc <rshift>
 80101ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101ee:	3501      	adds	r5, #1
 80101f0:	42ab      	cmp	r3, r5
 80101f2:	f6ff aed0 	blt.w	800ff96 <__gethex+0x20a>
 80101f6:	2701      	movs	r7, #1
 80101f8:	e7c0      	b.n	801017c <__gethex+0x3f0>
 80101fa:	f016 061f 	ands.w	r6, r6, #31
 80101fe:	d0fa      	beq.n	80101f6 <__gethex+0x46a>
 8010200:	4453      	add	r3, sl
 8010202:	f1c6 0620 	rsb	r6, r6, #32
 8010206:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801020a:	f000 f9e9 	bl	80105e0 <__hi0bits>
 801020e:	42b0      	cmp	r0, r6
 8010210:	dbe7      	blt.n	80101e2 <__gethex+0x456>
 8010212:	e7f0      	b.n	80101f6 <__gethex+0x46a>
 8010214:	08013258 	.word	0x08013258

08010218 <L_shift>:
 8010218:	f1c2 0208 	rsb	r2, r2, #8
 801021c:	0092      	lsls	r2, r2, #2
 801021e:	b570      	push	{r4, r5, r6, lr}
 8010220:	f1c2 0620 	rsb	r6, r2, #32
 8010224:	6843      	ldr	r3, [r0, #4]
 8010226:	6804      	ldr	r4, [r0, #0]
 8010228:	fa03 f506 	lsl.w	r5, r3, r6
 801022c:	432c      	orrs	r4, r5
 801022e:	40d3      	lsrs	r3, r2
 8010230:	6004      	str	r4, [r0, #0]
 8010232:	f840 3f04 	str.w	r3, [r0, #4]!
 8010236:	4288      	cmp	r0, r1
 8010238:	d3f4      	bcc.n	8010224 <L_shift+0xc>
 801023a:	bd70      	pop	{r4, r5, r6, pc}

0801023c <__match>:
 801023c:	b530      	push	{r4, r5, lr}
 801023e:	6803      	ldr	r3, [r0, #0]
 8010240:	3301      	adds	r3, #1
 8010242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010246:	b914      	cbnz	r4, 801024e <__match+0x12>
 8010248:	6003      	str	r3, [r0, #0]
 801024a:	2001      	movs	r0, #1
 801024c:	bd30      	pop	{r4, r5, pc}
 801024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010252:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010256:	2d19      	cmp	r5, #25
 8010258:	bf98      	it	ls
 801025a:	3220      	addls	r2, #32
 801025c:	42a2      	cmp	r2, r4
 801025e:	d0f0      	beq.n	8010242 <__match+0x6>
 8010260:	2000      	movs	r0, #0
 8010262:	e7f3      	b.n	801024c <__match+0x10>

08010264 <__hexnan>:
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	680b      	ldr	r3, [r1, #0]
 801026a:	115e      	asrs	r6, r3, #5
 801026c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010270:	f013 031f 	ands.w	r3, r3, #31
 8010274:	b087      	sub	sp, #28
 8010276:	bf18      	it	ne
 8010278:	3604      	addne	r6, #4
 801027a:	2500      	movs	r5, #0
 801027c:	1f37      	subs	r7, r6, #4
 801027e:	4690      	mov	r8, r2
 8010280:	6802      	ldr	r2, [r0, #0]
 8010282:	9301      	str	r3, [sp, #4]
 8010284:	4682      	mov	sl, r0
 8010286:	f846 5c04 	str.w	r5, [r6, #-4]
 801028a:	46b9      	mov	r9, r7
 801028c:	463c      	mov	r4, r7
 801028e:	9502      	str	r5, [sp, #8]
 8010290:	46ab      	mov	fp, r5
 8010292:	7851      	ldrb	r1, [r2, #1]
 8010294:	1c53      	adds	r3, r2, #1
 8010296:	9303      	str	r3, [sp, #12]
 8010298:	b341      	cbz	r1, 80102ec <__hexnan+0x88>
 801029a:	4608      	mov	r0, r1
 801029c:	9205      	str	r2, [sp, #20]
 801029e:	9104      	str	r1, [sp, #16]
 80102a0:	f7ff fd5e 	bl	800fd60 <__hexdig_fun>
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d14f      	bne.n	8010348 <__hexnan+0xe4>
 80102a8:	9904      	ldr	r1, [sp, #16]
 80102aa:	9a05      	ldr	r2, [sp, #20]
 80102ac:	2920      	cmp	r1, #32
 80102ae:	d818      	bhi.n	80102e2 <__hexnan+0x7e>
 80102b0:	9b02      	ldr	r3, [sp, #8]
 80102b2:	459b      	cmp	fp, r3
 80102b4:	dd13      	ble.n	80102de <__hexnan+0x7a>
 80102b6:	454c      	cmp	r4, r9
 80102b8:	d206      	bcs.n	80102c8 <__hexnan+0x64>
 80102ba:	2d07      	cmp	r5, #7
 80102bc:	dc04      	bgt.n	80102c8 <__hexnan+0x64>
 80102be:	462a      	mov	r2, r5
 80102c0:	4649      	mov	r1, r9
 80102c2:	4620      	mov	r0, r4
 80102c4:	f7ff ffa8 	bl	8010218 <L_shift>
 80102c8:	4544      	cmp	r4, r8
 80102ca:	d950      	bls.n	801036e <__hexnan+0x10a>
 80102cc:	2300      	movs	r3, #0
 80102ce:	f1a4 0904 	sub.w	r9, r4, #4
 80102d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80102d6:	f8cd b008 	str.w	fp, [sp, #8]
 80102da:	464c      	mov	r4, r9
 80102dc:	461d      	mov	r5, r3
 80102de:	9a03      	ldr	r2, [sp, #12]
 80102e0:	e7d7      	b.n	8010292 <__hexnan+0x2e>
 80102e2:	2929      	cmp	r1, #41	; 0x29
 80102e4:	d156      	bne.n	8010394 <__hexnan+0x130>
 80102e6:	3202      	adds	r2, #2
 80102e8:	f8ca 2000 	str.w	r2, [sl]
 80102ec:	f1bb 0f00 	cmp.w	fp, #0
 80102f0:	d050      	beq.n	8010394 <__hexnan+0x130>
 80102f2:	454c      	cmp	r4, r9
 80102f4:	d206      	bcs.n	8010304 <__hexnan+0xa0>
 80102f6:	2d07      	cmp	r5, #7
 80102f8:	dc04      	bgt.n	8010304 <__hexnan+0xa0>
 80102fa:	462a      	mov	r2, r5
 80102fc:	4649      	mov	r1, r9
 80102fe:	4620      	mov	r0, r4
 8010300:	f7ff ff8a 	bl	8010218 <L_shift>
 8010304:	4544      	cmp	r4, r8
 8010306:	d934      	bls.n	8010372 <__hexnan+0x10e>
 8010308:	f1a8 0204 	sub.w	r2, r8, #4
 801030c:	4623      	mov	r3, r4
 801030e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010312:	f842 1f04 	str.w	r1, [r2, #4]!
 8010316:	429f      	cmp	r7, r3
 8010318:	d2f9      	bcs.n	801030e <__hexnan+0xaa>
 801031a:	1b3b      	subs	r3, r7, r4
 801031c:	f023 0303 	bic.w	r3, r3, #3
 8010320:	3304      	adds	r3, #4
 8010322:	3401      	adds	r4, #1
 8010324:	3e03      	subs	r6, #3
 8010326:	42b4      	cmp	r4, r6
 8010328:	bf88      	it	hi
 801032a:	2304      	movhi	r3, #4
 801032c:	4443      	add	r3, r8
 801032e:	2200      	movs	r2, #0
 8010330:	f843 2b04 	str.w	r2, [r3], #4
 8010334:	429f      	cmp	r7, r3
 8010336:	d2fb      	bcs.n	8010330 <__hexnan+0xcc>
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	b91b      	cbnz	r3, 8010344 <__hexnan+0xe0>
 801033c:	4547      	cmp	r7, r8
 801033e:	d127      	bne.n	8010390 <__hexnan+0x12c>
 8010340:	2301      	movs	r3, #1
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	2005      	movs	r0, #5
 8010346:	e026      	b.n	8010396 <__hexnan+0x132>
 8010348:	3501      	adds	r5, #1
 801034a:	2d08      	cmp	r5, #8
 801034c:	f10b 0b01 	add.w	fp, fp, #1
 8010350:	dd06      	ble.n	8010360 <__hexnan+0xfc>
 8010352:	4544      	cmp	r4, r8
 8010354:	d9c3      	bls.n	80102de <__hexnan+0x7a>
 8010356:	2300      	movs	r3, #0
 8010358:	f844 3c04 	str.w	r3, [r4, #-4]
 801035c:	2501      	movs	r5, #1
 801035e:	3c04      	subs	r4, #4
 8010360:	6822      	ldr	r2, [r4, #0]
 8010362:	f000 000f 	and.w	r0, r0, #15
 8010366:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801036a:	6022      	str	r2, [r4, #0]
 801036c:	e7b7      	b.n	80102de <__hexnan+0x7a>
 801036e:	2508      	movs	r5, #8
 8010370:	e7b5      	b.n	80102de <__hexnan+0x7a>
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d0df      	beq.n	8010338 <__hexnan+0xd4>
 8010378:	f04f 32ff 	mov.w	r2, #4294967295
 801037c:	f1c3 0320 	rsb	r3, r3, #32
 8010380:	fa22 f303 	lsr.w	r3, r2, r3
 8010384:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010388:	401a      	ands	r2, r3
 801038a:	f846 2c04 	str.w	r2, [r6, #-4]
 801038e:	e7d3      	b.n	8010338 <__hexnan+0xd4>
 8010390:	3f04      	subs	r7, #4
 8010392:	e7d1      	b.n	8010338 <__hexnan+0xd4>
 8010394:	2004      	movs	r0, #4
 8010396:	b007      	add	sp, #28
 8010398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801039c <_localeconv_r>:
 801039c:	4800      	ldr	r0, [pc, #0]	; (80103a0 <_localeconv_r+0x4>)
 801039e:	4770      	bx	lr
 80103a0:	20000228 	.word	0x20000228

080103a4 <_lseek_r>:
 80103a4:	b538      	push	{r3, r4, r5, lr}
 80103a6:	4d07      	ldr	r5, [pc, #28]	; (80103c4 <_lseek_r+0x20>)
 80103a8:	4604      	mov	r4, r0
 80103aa:	4608      	mov	r0, r1
 80103ac:	4611      	mov	r1, r2
 80103ae:	2200      	movs	r2, #0
 80103b0:	602a      	str	r2, [r5, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	f7f4 fdd2 	bl	8004f5c <_lseek>
 80103b8:	1c43      	adds	r3, r0, #1
 80103ba:	d102      	bne.n	80103c2 <_lseek_r+0x1e>
 80103bc:	682b      	ldr	r3, [r5, #0]
 80103be:	b103      	cbz	r3, 80103c2 <_lseek_r+0x1e>
 80103c0:	6023      	str	r3, [r4, #0]
 80103c2:	bd38      	pop	{r3, r4, r5, pc}
 80103c4:	200050c4 	.word	0x200050c4

080103c8 <malloc>:
 80103c8:	4b02      	ldr	r3, [pc, #8]	; (80103d4 <malloc+0xc>)
 80103ca:	4601      	mov	r1, r0
 80103cc:	6818      	ldr	r0, [r3, #0]
 80103ce:	f000 bd59 	b.w	8010e84 <_malloc_r>
 80103d2:	bf00      	nop
 80103d4:	200000d0 	.word	0x200000d0

080103d8 <__ascii_mbtowc>:
 80103d8:	b082      	sub	sp, #8
 80103da:	b901      	cbnz	r1, 80103de <__ascii_mbtowc+0x6>
 80103dc:	a901      	add	r1, sp, #4
 80103de:	b142      	cbz	r2, 80103f2 <__ascii_mbtowc+0x1a>
 80103e0:	b14b      	cbz	r3, 80103f6 <__ascii_mbtowc+0x1e>
 80103e2:	7813      	ldrb	r3, [r2, #0]
 80103e4:	600b      	str	r3, [r1, #0]
 80103e6:	7812      	ldrb	r2, [r2, #0]
 80103e8:	1e10      	subs	r0, r2, #0
 80103ea:	bf18      	it	ne
 80103ec:	2001      	movne	r0, #1
 80103ee:	b002      	add	sp, #8
 80103f0:	4770      	bx	lr
 80103f2:	4610      	mov	r0, r2
 80103f4:	e7fb      	b.n	80103ee <__ascii_mbtowc+0x16>
 80103f6:	f06f 0001 	mvn.w	r0, #1
 80103fa:	e7f8      	b.n	80103ee <__ascii_mbtowc+0x16>

080103fc <_Balloc>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010400:	4604      	mov	r4, r0
 8010402:	460d      	mov	r5, r1
 8010404:	b976      	cbnz	r6, 8010424 <_Balloc+0x28>
 8010406:	2010      	movs	r0, #16
 8010408:	f7ff ffde 	bl	80103c8 <malloc>
 801040c:	4602      	mov	r2, r0
 801040e:	6260      	str	r0, [r4, #36]	; 0x24
 8010410:	b920      	cbnz	r0, 801041c <_Balloc+0x20>
 8010412:	4b18      	ldr	r3, [pc, #96]	; (8010474 <_Balloc+0x78>)
 8010414:	4818      	ldr	r0, [pc, #96]	; (8010478 <_Balloc+0x7c>)
 8010416:	2166      	movs	r1, #102	; 0x66
 8010418:	f001 fb46 	bl	8011aa8 <__assert_func>
 801041c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010420:	6006      	str	r6, [r0, #0]
 8010422:	60c6      	str	r6, [r0, #12]
 8010424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010426:	68f3      	ldr	r3, [r6, #12]
 8010428:	b183      	cbz	r3, 801044c <_Balloc+0x50>
 801042a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010432:	b9b8      	cbnz	r0, 8010464 <_Balloc+0x68>
 8010434:	2101      	movs	r1, #1
 8010436:	fa01 f605 	lsl.w	r6, r1, r5
 801043a:	1d72      	adds	r2, r6, #5
 801043c:	0092      	lsls	r2, r2, #2
 801043e:	4620      	mov	r0, r4
 8010440:	f000 fc9d 	bl	8010d7e <_calloc_r>
 8010444:	b160      	cbz	r0, 8010460 <_Balloc+0x64>
 8010446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801044a:	e00e      	b.n	801046a <_Balloc+0x6e>
 801044c:	2221      	movs	r2, #33	; 0x21
 801044e:	2104      	movs	r1, #4
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fc94 	bl	8010d7e <_calloc_r>
 8010456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010458:	60f0      	str	r0, [r6, #12]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1e4      	bne.n	801042a <_Balloc+0x2e>
 8010460:	2000      	movs	r0, #0
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	6802      	ldr	r2, [r0, #0]
 8010466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801046a:	2300      	movs	r3, #0
 801046c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010470:	e7f7      	b.n	8010462 <_Balloc+0x66>
 8010472:	bf00      	nop
 8010474:	080131e6 	.word	0x080131e6
 8010478:	080132e4 	.word	0x080132e4

0801047c <_Bfree>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010480:	4605      	mov	r5, r0
 8010482:	460c      	mov	r4, r1
 8010484:	b976      	cbnz	r6, 80104a4 <_Bfree+0x28>
 8010486:	2010      	movs	r0, #16
 8010488:	f7ff ff9e 	bl	80103c8 <malloc>
 801048c:	4602      	mov	r2, r0
 801048e:	6268      	str	r0, [r5, #36]	; 0x24
 8010490:	b920      	cbnz	r0, 801049c <_Bfree+0x20>
 8010492:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <_Bfree+0x3c>)
 8010494:	4809      	ldr	r0, [pc, #36]	; (80104bc <_Bfree+0x40>)
 8010496:	218a      	movs	r1, #138	; 0x8a
 8010498:	f001 fb06 	bl	8011aa8 <__assert_func>
 801049c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104a0:	6006      	str	r6, [r0, #0]
 80104a2:	60c6      	str	r6, [r0, #12]
 80104a4:	b13c      	cbz	r4, 80104b6 <_Bfree+0x3a>
 80104a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104a8:	6862      	ldr	r2, [r4, #4]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104b0:	6021      	str	r1, [r4, #0]
 80104b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
 80104b8:	080131e6 	.word	0x080131e6
 80104bc:	080132e4 	.word	0x080132e4

080104c0 <__multadd>:
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	690d      	ldr	r5, [r1, #16]
 80104c6:	4607      	mov	r7, r0
 80104c8:	460c      	mov	r4, r1
 80104ca:	461e      	mov	r6, r3
 80104cc:	f101 0c14 	add.w	ip, r1, #20
 80104d0:	2000      	movs	r0, #0
 80104d2:	f8dc 3000 	ldr.w	r3, [ip]
 80104d6:	b299      	uxth	r1, r3
 80104d8:	fb02 6101 	mla	r1, r2, r1, r6
 80104dc:	0c1e      	lsrs	r6, r3, #16
 80104de:	0c0b      	lsrs	r3, r1, #16
 80104e0:	fb02 3306 	mla	r3, r2, r6, r3
 80104e4:	b289      	uxth	r1, r1
 80104e6:	3001      	adds	r0, #1
 80104e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104ec:	4285      	cmp	r5, r0
 80104ee:	f84c 1b04 	str.w	r1, [ip], #4
 80104f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104f6:	dcec      	bgt.n	80104d2 <__multadd+0x12>
 80104f8:	b30e      	cbz	r6, 801053e <__multadd+0x7e>
 80104fa:	68a3      	ldr	r3, [r4, #8]
 80104fc:	42ab      	cmp	r3, r5
 80104fe:	dc19      	bgt.n	8010534 <__multadd+0x74>
 8010500:	6861      	ldr	r1, [r4, #4]
 8010502:	4638      	mov	r0, r7
 8010504:	3101      	adds	r1, #1
 8010506:	f7ff ff79 	bl	80103fc <_Balloc>
 801050a:	4680      	mov	r8, r0
 801050c:	b928      	cbnz	r0, 801051a <__multadd+0x5a>
 801050e:	4602      	mov	r2, r0
 8010510:	4b0c      	ldr	r3, [pc, #48]	; (8010544 <__multadd+0x84>)
 8010512:	480d      	ldr	r0, [pc, #52]	; (8010548 <__multadd+0x88>)
 8010514:	21b5      	movs	r1, #181	; 0xb5
 8010516:	f001 fac7 	bl	8011aa8 <__assert_func>
 801051a:	6922      	ldr	r2, [r4, #16]
 801051c:	3202      	adds	r2, #2
 801051e:	f104 010c 	add.w	r1, r4, #12
 8010522:	0092      	lsls	r2, r2, #2
 8010524:	300c      	adds	r0, #12
 8010526:	f7fc ff43 	bl	800d3b0 <memcpy>
 801052a:	4621      	mov	r1, r4
 801052c:	4638      	mov	r0, r7
 801052e:	f7ff ffa5 	bl	801047c <_Bfree>
 8010532:	4644      	mov	r4, r8
 8010534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010538:	3501      	adds	r5, #1
 801053a:	615e      	str	r6, [r3, #20]
 801053c:	6125      	str	r5, [r4, #16]
 801053e:	4620      	mov	r0, r4
 8010540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010544:	08013258 	.word	0x08013258
 8010548:	080132e4 	.word	0x080132e4

0801054c <__s2b>:
 801054c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010550:	460c      	mov	r4, r1
 8010552:	4615      	mov	r5, r2
 8010554:	461f      	mov	r7, r3
 8010556:	2209      	movs	r2, #9
 8010558:	3308      	adds	r3, #8
 801055a:	4606      	mov	r6, r0
 801055c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010560:	2100      	movs	r1, #0
 8010562:	2201      	movs	r2, #1
 8010564:	429a      	cmp	r2, r3
 8010566:	db09      	blt.n	801057c <__s2b+0x30>
 8010568:	4630      	mov	r0, r6
 801056a:	f7ff ff47 	bl	80103fc <_Balloc>
 801056e:	b940      	cbnz	r0, 8010582 <__s2b+0x36>
 8010570:	4602      	mov	r2, r0
 8010572:	4b19      	ldr	r3, [pc, #100]	; (80105d8 <__s2b+0x8c>)
 8010574:	4819      	ldr	r0, [pc, #100]	; (80105dc <__s2b+0x90>)
 8010576:	21ce      	movs	r1, #206	; 0xce
 8010578:	f001 fa96 	bl	8011aa8 <__assert_func>
 801057c:	0052      	lsls	r2, r2, #1
 801057e:	3101      	adds	r1, #1
 8010580:	e7f0      	b.n	8010564 <__s2b+0x18>
 8010582:	9b08      	ldr	r3, [sp, #32]
 8010584:	6143      	str	r3, [r0, #20]
 8010586:	2d09      	cmp	r5, #9
 8010588:	f04f 0301 	mov.w	r3, #1
 801058c:	6103      	str	r3, [r0, #16]
 801058e:	dd16      	ble.n	80105be <__s2b+0x72>
 8010590:	f104 0909 	add.w	r9, r4, #9
 8010594:	46c8      	mov	r8, r9
 8010596:	442c      	add	r4, r5
 8010598:	f818 3b01 	ldrb.w	r3, [r8], #1
 801059c:	4601      	mov	r1, r0
 801059e:	3b30      	subs	r3, #48	; 0x30
 80105a0:	220a      	movs	r2, #10
 80105a2:	4630      	mov	r0, r6
 80105a4:	f7ff ff8c 	bl	80104c0 <__multadd>
 80105a8:	45a0      	cmp	r8, r4
 80105aa:	d1f5      	bne.n	8010598 <__s2b+0x4c>
 80105ac:	f1a5 0408 	sub.w	r4, r5, #8
 80105b0:	444c      	add	r4, r9
 80105b2:	1b2d      	subs	r5, r5, r4
 80105b4:	1963      	adds	r3, r4, r5
 80105b6:	42bb      	cmp	r3, r7
 80105b8:	db04      	blt.n	80105c4 <__s2b+0x78>
 80105ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105be:	340a      	adds	r4, #10
 80105c0:	2509      	movs	r5, #9
 80105c2:	e7f6      	b.n	80105b2 <__s2b+0x66>
 80105c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105c8:	4601      	mov	r1, r0
 80105ca:	3b30      	subs	r3, #48	; 0x30
 80105cc:	220a      	movs	r2, #10
 80105ce:	4630      	mov	r0, r6
 80105d0:	f7ff ff76 	bl	80104c0 <__multadd>
 80105d4:	e7ee      	b.n	80105b4 <__s2b+0x68>
 80105d6:	bf00      	nop
 80105d8:	08013258 	.word	0x08013258
 80105dc:	080132e4 	.word	0x080132e4

080105e0 <__hi0bits>:
 80105e0:	0c03      	lsrs	r3, r0, #16
 80105e2:	041b      	lsls	r3, r3, #16
 80105e4:	b9d3      	cbnz	r3, 801061c <__hi0bits+0x3c>
 80105e6:	0400      	lsls	r0, r0, #16
 80105e8:	2310      	movs	r3, #16
 80105ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105ee:	bf04      	itt	eq
 80105f0:	0200      	lsleq	r0, r0, #8
 80105f2:	3308      	addeq	r3, #8
 80105f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105f8:	bf04      	itt	eq
 80105fa:	0100      	lsleq	r0, r0, #4
 80105fc:	3304      	addeq	r3, #4
 80105fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010602:	bf04      	itt	eq
 8010604:	0080      	lsleq	r0, r0, #2
 8010606:	3302      	addeq	r3, #2
 8010608:	2800      	cmp	r0, #0
 801060a:	db05      	blt.n	8010618 <__hi0bits+0x38>
 801060c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010610:	f103 0301 	add.w	r3, r3, #1
 8010614:	bf08      	it	eq
 8010616:	2320      	moveq	r3, #32
 8010618:	4618      	mov	r0, r3
 801061a:	4770      	bx	lr
 801061c:	2300      	movs	r3, #0
 801061e:	e7e4      	b.n	80105ea <__hi0bits+0xa>

08010620 <__lo0bits>:
 8010620:	6803      	ldr	r3, [r0, #0]
 8010622:	f013 0207 	ands.w	r2, r3, #7
 8010626:	4601      	mov	r1, r0
 8010628:	d00b      	beq.n	8010642 <__lo0bits+0x22>
 801062a:	07da      	lsls	r2, r3, #31
 801062c:	d423      	bmi.n	8010676 <__lo0bits+0x56>
 801062e:	0798      	lsls	r0, r3, #30
 8010630:	bf49      	itett	mi
 8010632:	085b      	lsrmi	r3, r3, #1
 8010634:	089b      	lsrpl	r3, r3, #2
 8010636:	2001      	movmi	r0, #1
 8010638:	600b      	strmi	r3, [r1, #0]
 801063a:	bf5c      	itt	pl
 801063c:	600b      	strpl	r3, [r1, #0]
 801063e:	2002      	movpl	r0, #2
 8010640:	4770      	bx	lr
 8010642:	b298      	uxth	r0, r3
 8010644:	b9a8      	cbnz	r0, 8010672 <__lo0bits+0x52>
 8010646:	0c1b      	lsrs	r3, r3, #16
 8010648:	2010      	movs	r0, #16
 801064a:	b2da      	uxtb	r2, r3
 801064c:	b90a      	cbnz	r2, 8010652 <__lo0bits+0x32>
 801064e:	3008      	adds	r0, #8
 8010650:	0a1b      	lsrs	r3, r3, #8
 8010652:	071a      	lsls	r2, r3, #28
 8010654:	bf04      	itt	eq
 8010656:	091b      	lsreq	r3, r3, #4
 8010658:	3004      	addeq	r0, #4
 801065a:	079a      	lsls	r2, r3, #30
 801065c:	bf04      	itt	eq
 801065e:	089b      	lsreq	r3, r3, #2
 8010660:	3002      	addeq	r0, #2
 8010662:	07da      	lsls	r2, r3, #31
 8010664:	d403      	bmi.n	801066e <__lo0bits+0x4e>
 8010666:	085b      	lsrs	r3, r3, #1
 8010668:	f100 0001 	add.w	r0, r0, #1
 801066c:	d005      	beq.n	801067a <__lo0bits+0x5a>
 801066e:	600b      	str	r3, [r1, #0]
 8010670:	4770      	bx	lr
 8010672:	4610      	mov	r0, r2
 8010674:	e7e9      	b.n	801064a <__lo0bits+0x2a>
 8010676:	2000      	movs	r0, #0
 8010678:	4770      	bx	lr
 801067a:	2020      	movs	r0, #32
 801067c:	4770      	bx	lr
	...

08010680 <__i2b>:
 8010680:	b510      	push	{r4, lr}
 8010682:	460c      	mov	r4, r1
 8010684:	2101      	movs	r1, #1
 8010686:	f7ff feb9 	bl	80103fc <_Balloc>
 801068a:	4602      	mov	r2, r0
 801068c:	b928      	cbnz	r0, 801069a <__i2b+0x1a>
 801068e:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <__i2b+0x24>)
 8010690:	4805      	ldr	r0, [pc, #20]	; (80106a8 <__i2b+0x28>)
 8010692:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010696:	f001 fa07 	bl	8011aa8 <__assert_func>
 801069a:	2301      	movs	r3, #1
 801069c:	6144      	str	r4, [r0, #20]
 801069e:	6103      	str	r3, [r0, #16]
 80106a0:	bd10      	pop	{r4, pc}
 80106a2:	bf00      	nop
 80106a4:	08013258 	.word	0x08013258
 80106a8:	080132e4 	.word	0x080132e4

080106ac <__multiply>:
 80106ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b0:	4691      	mov	r9, r2
 80106b2:	690a      	ldr	r2, [r1, #16]
 80106b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	bfb8      	it	lt
 80106bc:	460b      	movlt	r3, r1
 80106be:	460c      	mov	r4, r1
 80106c0:	bfbc      	itt	lt
 80106c2:	464c      	movlt	r4, r9
 80106c4:	4699      	movlt	r9, r3
 80106c6:	6927      	ldr	r7, [r4, #16]
 80106c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106cc:	68a3      	ldr	r3, [r4, #8]
 80106ce:	6861      	ldr	r1, [r4, #4]
 80106d0:	eb07 060a 	add.w	r6, r7, sl
 80106d4:	42b3      	cmp	r3, r6
 80106d6:	b085      	sub	sp, #20
 80106d8:	bfb8      	it	lt
 80106da:	3101      	addlt	r1, #1
 80106dc:	f7ff fe8e 	bl	80103fc <_Balloc>
 80106e0:	b930      	cbnz	r0, 80106f0 <__multiply+0x44>
 80106e2:	4602      	mov	r2, r0
 80106e4:	4b44      	ldr	r3, [pc, #272]	; (80107f8 <__multiply+0x14c>)
 80106e6:	4845      	ldr	r0, [pc, #276]	; (80107fc <__multiply+0x150>)
 80106e8:	f240 115d 	movw	r1, #349	; 0x15d
 80106ec:	f001 f9dc 	bl	8011aa8 <__assert_func>
 80106f0:	f100 0514 	add.w	r5, r0, #20
 80106f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106f8:	462b      	mov	r3, r5
 80106fa:	2200      	movs	r2, #0
 80106fc:	4543      	cmp	r3, r8
 80106fe:	d321      	bcc.n	8010744 <__multiply+0x98>
 8010700:	f104 0314 	add.w	r3, r4, #20
 8010704:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010708:	f109 0314 	add.w	r3, r9, #20
 801070c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010710:	9202      	str	r2, [sp, #8]
 8010712:	1b3a      	subs	r2, r7, r4
 8010714:	3a15      	subs	r2, #21
 8010716:	f022 0203 	bic.w	r2, r2, #3
 801071a:	3204      	adds	r2, #4
 801071c:	f104 0115 	add.w	r1, r4, #21
 8010720:	428f      	cmp	r7, r1
 8010722:	bf38      	it	cc
 8010724:	2204      	movcc	r2, #4
 8010726:	9201      	str	r2, [sp, #4]
 8010728:	9a02      	ldr	r2, [sp, #8]
 801072a:	9303      	str	r3, [sp, #12]
 801072c:	429a      	cmp	r2, r3
 801072e:	d80c      	bhi.n	801074a <__multiply+0x9e>
 8010730:	2e00      	cmp	r6, #0
 8010732:	dd03      	ble.n	801073c <__multiply+0x90>
 8010734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010738:	2b00      	cmp	r3, #0
 801073a:	d05a      	beq.n	80107f2 <__multiply+0x146>
 801073c:	6106      	str	r6, [r0, #16]
 801073e:	b005      	add	sp, #20
 8010740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010744:	f843 2b04 	str.w	r2, [r3], #4
 8010748:	e7d8      	b.n	80106fc <__multiply+0x50>
 801074a:	f8b3 a000 	ldrh.w	sl, [r3]
 801074e:	f1ba 0f00 	cmp.w	sl, #0
 8010752:	d024      	beq.n	801079e <__multiply+0xf2>
 8010754:	f104 0e14 	add.w	lr, r4, #20
 8010758:	46a9      	mov	r9, r5
 801075a:	f04f 0c00 	mov.w	ip, #0
 801075e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010762:	f8d9 1000 	ldr.w	r1, [r9]
 8010766:	fa1f fb82 	uxth.w	fp, r2
 801076a:	b289      	uxth	r1, r1
 801076c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010770:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010774:	f8d9 2000 	ldr.w	r2, [r9]
 8010778:	4461      	add	r1, ip
 801077a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801077e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010786:	b289      	uxth	r1, r1
 8010788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801078c:	4577      	cmp	r7, lr
 801078e:	f849 1b04 	str.w	r1, [r9], #4
 8010792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010796:	d8e2      	bhi.n	801075e <__multiply+0xb2>
 8010798:	9a01      	ldr	r2, [sp, #4]
 801079a:	f845 c002 	str.w	ip, [r5, r2]
 801079e:	9a03      	ldr	r2, [sp, #12]
 80107a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107a4:	3304      	adds	r3, #4
 80107a6:	f1b9 0f00 	cmp.w	r9, #0
 80107aa:	d020      	beq.n	80107ee <__multiply+0x142>
 80107ac:	6829      	ldr	r1, [r5, #0]
 80107ae:	f104 0c14 	add.w	ip, r4, #20
 80107b2:	46ae      	mov	lr, r5
 80107b4:	f04f 0a00 	mov.w	sl, #0
 80107b8:	f8bc b000 	ldrh.w	fp, [ip]
 80107bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107c0:	fb09 220b 	mla	r2, r9, fp, r2
 80107c4:	4492      	add	sl, r2
 80107c6:	b289      	uxth	r1, r1
 80107c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80107cc:	f84e 1b04 	str.w	r1, [lr], #4
 80107d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80107d4:	f8be 1000 	ldrh.w	r1, [lr]
 80107d8:	0c12      	lsrs	r2, r2, #16
 80107da:	fb09 1102 	mla	r1, r9, r2, r1
 80107de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80107e2:	4567      	cmp	r7, ip
 80107e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80107e8:	d8e6      	bhi.n	80107b8 <__multiply+0x10c>
 80107ea:	9a01      	ldr	r2, [sp, #4]
 80107ec:	50a9      	str	r1, [r5, r2]
 80107ee:	3504      	adds	r5, #4
 80107f0:	e79a      	b.n	8010728 <__multiply+0x7c>
 80107f2:	3e01      	subs	r6, #1
 80107f4:	e79c      	b.n	8010730 <__multiply+0x84>
 80107f6:	bf00      	nop
 80107f8:	08013258 	.word	0x08013258
 80107fc:	080132e4 	.word	0x080132e4

08010800 <__pow5mult>:
 8010800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010804:	4615      	mov	r5, r2
 8010806:	f012 0203 	ands.w	r2, r2, #3
 801080a:	4606      	mov	r6, r0
 801080c:	460f      	mov	r7, r1
 801080e:	d007      	beq.n	8010820 <__pow5mult+0x20>
 8010810:	4c25      	ldr	r4, [pc, #148]	; (80108a8 <__pow5mult+0xa8>)
 8010812:	3a01      	subs	r2, #1
 8010814:	2300      	movs	r3, #0
 8010816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801081a:	f7ff fe51 	bl	80104c0 <__multadd>
 801081e:	4607      	mov	r7, r0
 8010820:	10ad      	asrs	r5, r5, #2
 8010822:	d03d      	beq.n	80108a0 <__pow5mult+0xa0>
 8010824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010826:	b97c      	cbnz	r4, 8010848 <__pow5mult+0x48>
 8010828:	2010      	movs	r0, #16
 801082a:	f7ff fdcd 	bl	80103c8 <malloc>
 801082e:	4602      	mov	r2, r0
 8010830:	6270      	str	r0, [r6, #36]	; 0x24
 8010832:	b928      	cbnz	r0, 8010840 <__pow5mult+0x40>
 8010834:	4b1d      	ldr	r3, [pc, #116]	; (80108ac <__pow5mult+0xac>)
 8010836:	481e      	ldr	r0, [pc, #120]	; (80108b0 <__pow5mult+0xb0>)
 8010838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801083c:	f001 f934 	bl	8011aa8 <__assert_func>
 8010840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010844:	6004      	str	r4, [r0, #0]
 8010846:	60c4      	str	r4, [r0, #12]
 8010848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801084c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010850:	b94c      	cbnz	r4, 8010866 <__pow5mult+0x66>
 8010852:	f240 2171 	movw	r1, #625	; 0x271
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff ff12 	bl	8010680 <__i2b>
 801085c:	2300      	movs	r3, #0
 801085e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010862:	4604      	mov	r4, r0
 8010864:	6003      	str	r3, [r0, #0]
 8010866:	f04f 0900 	mov.w	r9, #0
 801086a:	07eb      	lsls	r3, r5, #31
 801086c:	d50a      	bpl.n	8010884 <__pow5mult+0x84>
 801086e:	4639      	mov	r1, r7
 8010870:	4622      	mov	r2, r4
 8010872:	4630      	mov	r0, r6
 8010874:	f7ff ff1a 	bl	80106ac <__multiply>
 8010878:	4639      	mov	r1, r7
 801087a:	4680      	mov	r8, r0
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff fdfd 	bl	801047c <_Bfree>
 8010882:	4647      	mov	r7, r8
 8010884:	106d      	asrs	r5, r5, #1
 8010886:	d00b      	beq.n	80108a0 <__pow5mult+0xa0>
 8010888:	6820      	ldr	r0, [r4, #0]
 801088a:	b938      	cbnz	r0, 801089c <__pow5mult+0x9c>
 801088c:	4622      	mov	r2, r4
 801088e:	4621      	mov	r1, r4
 8010890:	4630      	mov	r0, r6
 8010892:	f7ff ff0b 	bl	80106ac <__multiply>
 8010896:	6020      	str	r0, [r4, #0]
 8010898:	f8c0 9000 	str.w	r9, [r0]
 801089c:	4604      	mov	r4, r0
 801089e:	e7e4      	b.n	801086a <__pow5mult+0x6a>
 80108a0:	4638      	mov	r0, r7
 80108a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108a6:	bf00      	nop
 80108a8:	08013430 	.word	0x08013430
 80108ac:	080131e6 	.word	0x080131e6
 80108b0:	080132e4 	.word	0x080132e4

080108b4 <__lshift>:
 80108b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b8:	460c      	mov	r4, r1
 80108ba:	6849      	ldr	r1, [r1, #4]
 80108bc:	6923      	ldr	r3, [r4, #16]
 80108be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108c2:	68a3      	ldr	r3, [r4, #8]
 80108c4:	4607      	mov	r7, r0
 80108c6:	4691      	mov	r9, r2
 80108c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108cc:	f108 0601 	add.w	r6, r8, #1
 80108d0:	42b3      	cmp	r3, r6
 80108d2:	db0b      	blt.n	80108ec <__lshift+0x38>
 80108d4:	4638      	mov	r0, r7
 80108d6:	f7ff fd91 	bl	80103fc <_Balloc>
 80108da:	4605      	mov	r5, r0
 80108dc:	b948      	cbnz	r0, 80108f2 <__lshift+0x3e>
 80108de:	4602      	mov	r2, r0
 80108e0:	4b2a      	ldr	r3, [pc, #168]	; (801098c <__lshift+0xd8>)
 80108e2:	482b      	ldr	r0, [pc, #172]	; (8010990 <__lshift+0xdc>)
 80108e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108e8:	f001 f8de 	bl	8011aa8 <__assert_func>
 80108ec:	3101      	adds	r1, #1
 80108ee:	005b      	lsls	r3, r3, #1
 80108f0:	e7ee      	b.n	80108d0 <__lshift+0x1c>
 80108f2:	2300      	movs	r3, #0
 80108f4:	f100 0114 	add.w	r1, r0, #20
 80108f8:	f100 0210 	add.w	r2, r0, #16
 80108fc:	4618      	mov	r0, r3
 80108fe:	4553      	cmp	r3, sl
 8010900:	db37      	blt.n	8010972 <__lshift+0xbe>
 8010902:	6920      	ldr	r0, [r4, #16]
 8010904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010908:	f104 0314 	add.w	r3, r4, #20
 801090c:	f019 091f 	ands.w	r9, r9, #31
 8010910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010914:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010918:	d02f      	beq.n	801097a <__lshift+0xc6>
 801091a:	f1c9 0e20 	rsb	lr, r9, #32
 801091e:	468a      	mov	sl, r1
 8010920:	f04f 0c00 	mov.w	ip, #0
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	fa02 f209 	lsl.w	r2, r2, r9
 801092a:	ea42 020c 	orr.w	r2, r2, ip
 801092e:	f84a 2b04 	str.w	r2, [sl], #4
 8010932:	f853 2b04 	ldr.w	r2, [r3], #4
 8010936:	4298      	cmp	r0, r3
 8010938:	fa22 fc0e 	lsr.w	ip, r2, lr
 801093c:	d8f2      	bhi.n	8010924 <__lshift+0x70>
 801093e:	1b03      	subs	r3, r0, r4
 8010940:	3b15      	subs	r3, #21
 8010942:	f023 0303 	bic.w	r3, r3, #3
 8010946:	3304      	adds	r3, #4
 8010948:	f104 0215 	add.w	r2, r4, #21
 801094c:	4290      	cmp	r0, r2
 801094e:	bf38      	it	cc
 8010950:	2304      	movcc	r3, #4
 8010952:	f841 c003 	str.w	ip, [r1, r3]
 8010956:	f1bc 0f00 	cmp.w	ip, #0
 801095a:	d001      	beq.n	8010960 <__lshift+0xac>
 801095c:	f108 0602 	add.w	r6, r8, #2
 8010960:	3e01      	subs	r6, #1
 8010962:	4638      	mov	r0, r7
 8010964:	612e      	str	r6, [r5, #16]
 8010966:	4621      	mov	r1, r4
 8010968:	f7ff fd88 	bl	801047c <_Bfree>
 801096c:	4628      	mov	r0, r5
 801096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010972:	f842 0f04 	str.w	r0, [r2, #4]!
 8010976:	3301      	adds	r3, #1
 8010978:	e7c1      	b.n	80108fe <__lshift+0x4a>
 801097a:	3904      	subs	r1, #4
 801097c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010980:	f841 2f04 	str.w	r2, [r1, #4]!
 8010984:	4298      	cmp	r0, r3
 8010986:	d8f9      	bhi.n	801097c <__lshift+0xc8>
 8010988:	e7ea      	b.n	8010960 <__lshift+0xac>
 801098a:	bf00      	nop
 801098c:	08013258 	.word	0x08013258
 8010990:	080132e4 	.word	0x080132e4

08010994 <__mcmp>:
 8010994:	b530      	push	{r4, r5, lr}
 8010996:	6902      	ldr	r2, [r0, #16]
 8010998:	690c      	ldr	r4, [r1, #16]
 801099a:	1b12      	subs	r2, r2, r4
 801099c:	d10e      	bne.n	80109bc <__mcmp+0x28>
 801099e:	f100 0314 	add.w	r3, r0, #20
 80109a2:	3114      	adds	r1, #20
 80109a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109b4:	42a5      	cmp	r5, r4
 80109b6:	d003      	beq.n	80109c0 <__mcmp+0x2c>
 80109b8:	d305      	bcc.n	80109c6 <__mcmp+0x32>
 80109ba:	2201      	movs	r2, #1
 80109bc:	4610      	mov	r0, r2
 80109be:	bd30      	pop	{r4, r5, pc}
 80109c0:	4283      	cmp	r3, r0
 80109c2:	d3f3      	bcc.n	80109ac <__mcmp+0x18>
 80109c4:	e7fa      	b.n	80109bc <__mcmp+0x28>
 80109c6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ca:	e7f7      	b.n	80109bc <__mcmp+0x28>

080109cc <__mdiff>:
 80109cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	460c      	mov	r4, r1
 80109d2:	4606      	mov	r6, r0
 80109d4:	4611      	mov	r1, r2
 80109d6:	4620      	mov	r0, r4
 80109d8:	4690      	mov	r8, r2
 80109da:	f7ff ffdb 	bl	8010994 <__mcmp>
 80109de:	1e05      	subs	r5, r0, #0
 80109e0:	d110      	bne.n	8010a04 <__mdiff+0x38>
 80109e2:	4629      	mov	r1, r5
 80109e4:	4630      	mov	r0, r6
 80109e6:	f7ff fd09 	bl	80103fc <_Balloc>
 80109ea:	b930      	cbnz	r0, 80109fa <__mdiff+0x2e>
 80109ec:	4b3a      	ldr	r3, [pc, #232]	; (8010ad8 <__mdiff+0x10c>)
 80109ee:	4602      	mov	r2, r0
 80109f0:	f240 2132 	movw	r1, #562	; 0x232
 80109f4:	4839      	ldr	r0, [pc, #228]	; (8010adc <__mdiff+0x110>)
 80109f6:	f001 f857 	bl	8011aa8 <__assert_func>
 80109fa:	2301      	movs	r3, #1
 80109fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a04:	bfa4      	itt	ge
 8010a06:	4643      	movge	r3, r8
 8010a08:	46a0      	movge	r8, r4
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a10:	bfa6      	itte	ge
 8010a12:	461c      	movge	r4, r3
 8010a14:	2500      	movge	r5, #0
 8010a16:	2501      	movlt	r5, #1
 8010a18:	f7ff fcf0 	bl	80103fc <_Balloc>
 8010a1c:	b920      	cbnz	r0, 8010a28 <__mdiff+0x5c>
 8010a1e:	4b2e      	ldr	r3, [pc, #184]	; (8010ad8 <__mdiff+0x10c>)
 8010a20:	4602      	mov	r2, r0
 8010a22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a26:	e7e5      	b.n	80109f4 <__mdiff+0x28>
 8010a28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a2c:	6926      	ldr	r6, [r4, #16]
 8010a2e:	60c5      	str	r5, [r0, #12]
 8010a30:	f104 0914 	add.w	r9, r4, #20
 8010a34:	f108 0514 	add.w	r5, r8, #20
 8010a38:	f100 0e14 	add.w	lr, r0, #20
 8010a3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a44:	f108 0210 	add.w	r2, r8, #16
 8010a48:	46f2      	mov	sl, lr
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a54:	fa1f f883 	uxth.w	r8, r3
 8010a58:	fa11 f18b 	uxtah	r1, r1, fp
 8010a5c:	0c1b      	lsrs	r3, r3, #16
 8010a5e:	eba1 0808 	sub.w	r8, r1, r8
 8010a62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a6a:	fa1f f888 	uxth.w	r8, r8
 8010a6e:	1419      	asrs	r1, r3, #16
 8010a70:	454e      	cmp	r6, r9
 8010a72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a76:	f84a 3b04 	str.w	r3, [sl], #4
 8010a7a:	d8e7      	bhi.n	8010a4c <__mdiff+0x80>
 8010a7c:	1b33      	subs	r3, r6, r4
 8010a7e:	3b15      	subs	r3, #21
 8010a80:	f023 0303 	bic.w	r3, r3, #3
 8010a84:	3304      	adds	r3, #4
 8010a86:	3415      	adds	r4, #21
 8010a88:	42a6      	cmp	r6, r4
 8010a8a:	bf38      	it	cc
 8010a8c:	2304      	movcc	r3, #4
 8010a8e:	441d      	add	r5, r3
 8010a90:	4473      	add	r3, lr
 8010a92:	469e      	mov	lr, r3
 8010a94:	462e      	mov	r6, r5
 8010a96:	4566      	cmp	r6, ip
 8010a98:	d30e      	bcc.n	8010ab8 <__mdiff+0xec>
 8010a9a:	f10c 0203 	add.w	r2, ip, #3
 8010a9e:	1b52      	subs	r2, r2, r5
 8010aa0:	f022 0203 	bic.w	r2, r2, #3
 8010aa4:	3d03      	subs	r5, #3
 8010aa6:	45ac      	cmp	ip, r5
 8010aa8:	bf38      	it	cc
 8010aaa:	2200      	movcc	r2, #0
 8010aac:	441a      	add	r2, r3
 8010aae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ab2:	b17b      	cbz	r3, 8010ad4 <__mdiff+0x108>
 8010ab4:	6107      	str	r7, [r0, #16]
 8010ab6:	e7a3      	b.n	8010a00 <__mdiff+0x34>
 8010ab8:	f856 8b04 	ldr.w	r8, [r6], #4
 8010abc:	fa11 f288 	uxtah	r2, r1, r8
 8010ac0:	1414      	asrs	r4, r2, #16
 8010ac2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ac6:	b292      	uxth	r2, r2
 8010ac8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010acc:	f84e 2b04 	str.w	r2, [lr], #4
 8010ad0:	1421      	asrs	r1, r4, #16
 8010ad2:	e7e0      	b.n	8010a96 <__mdiff+0xca>
 8010ad4:	3f01      	subs	r7, #1
 8010ad6:	e7ea      	b.n	8010aae <__mdiff+0xe2>
 8010ad8:	08013258 	.word	0x08013258
 8010adc:	080132e4 	.word	0x080132e4

08010ae0 <__ulp>:
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	ed8d 0b00 	vstr	d0, [sp]
 8010ae6:	9b01      	ldr	r3, [sp, #4]
 8010ae8:	4912      	ldr	r1, [pc, #72]	; (8010b34 <__ulp+0x54>)
 8010aea:	4019      	ands	r1, r3
 8010aec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010af0:	2900      	cmp	r1, #0
 8010af2:	dd05      	ble.n	8010b00 <__ulp+0x20>
 8010af4:	2200      	movs	r2, #0
 8010af6:	460b      	mov	r3, r1
 8010af8:	ec43 2b10 	vmov	d0, r2, r3
 8010afc:	b002      	add	sp, #8
 8010afe:	4770      	bx	lr
 8010b00:	4249      	negs	r1, r1
 8010b02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010b06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010b0a:	f04f 0200 	mov.w	r2, #0
 8010b0e:	f04f 0300 	mov.w	r3, #0
 8010b12:	da04      	bge.n	8010b1e <__ulp+0x3e>
 8010b14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010b18:	fa41 f300 	asr.w	r3, r1, r0
 8010b1c:	e7ec      	b.n	8010af8 <__ulp+0x18>
 8010b1e:	f1a0 0114 	sub.w	r1, r0, #20
 8010b22:	291e      	cmp	r1, #30
 8010b24:	bfda      	itte	le
 8010b26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010b2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8010b2e:	2101      	movgt	r1, #1
 8010b30:	460a      	mov	r2, r1
 8010b32:	e7e1      	b.n	8010af8 <__ulp+0x18>
 8010b34:	7ff00000 	.word	0x7ff00000

08010b38 <__b2d>:
 8010b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3a:	6905      	ldr	r5, [r0, #16]
 8010b3c:	f100 0714 	add.w	r7, r0, #20
 8010b40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b44:	1f2e      	subs	r6, r5, #4
 8010b46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7ff fd48 	bl	80105e0 <__hi0bits>
 8010b50:	f1c0 0320 	rsb	r3, r0, #32
 8010b54:	280a      	cmp	r0, #10
 8010b56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010bd4 <__b2d+0x9c>
 8010b5a:	600b      	str	r3, [r1, #0]
 8010b5c:	dc14      	bgt.n	8010b88 <__b2d+0x50>
 8010b5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b62:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b66:	42b7      	cmp	r7, r6
 8010b68:	ea41 030c 	orr.w	r3, r1, ip
 8010b6c:	bf34      	ite	cc
 8010b6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b72:	2100      	movcs	r1, #0
 8010b74:	3015      	adds	r0, #21
 8010b76:	fa04 f000 	lsl.w	r0, r4, r0
 8010b7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8010b7e:	ea40 0201 	orr.w	r2, r0, r1
 8010b82:	ec43 2b10 	vmov	d0, r2, r3
 8010b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b88:	42b7      	cmp	r7, r6
 8010b8a:	bf3a      	itte	cc
 8010b8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b90:	f1a5 0608 	subcc.w	r6, r5, #8
 8010b94:	2100      	movcs	r1, #0
 8010b96:	380b      	subs	r0, #11
 8010b98:	d017      	beq.n	8010bca <__b2d+0x92>
 8010b9a:	f1c0 0c20 	rsb	ip, r0, #32
 8010b9e:	fa04 f500 	lsl.w	r5, r4, r0
 8010ba2:	42be      	cmp	r6, r7
 8010ba4:	fa21 f40c 	lsr.w	r4, r1, ip
 8010ba8:	ea45 0504 	orr.w	r5, r5, r4
 8010bac:	bf8c      	ite	hi
 8010bae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010bb2:	2400      	movls	r4, #0
 8010bb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010bb8:	fa01 f000 	lsl.w	r0, r1, r0
 8010bbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8010bc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010bc4:	ea40 0204 	orr.w	r2, r0, r4
 8010bc8:	e7db      	b.n	8010b82 <__b2d+0x4a>
 8010bca:	ea44 030c 	orr.w	r3, r4, ip
 8010bce:	460a      	mov	r2, r1
 8010bd0:	e7d7      	b.n	8010b82 <__b2d+0x4a>
 8010bd2:	bf00      	nop
 8010bd4:	3ff00000 	.word	0x3ff00000

08010bd8 <__d2b>:
 8010bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bdc:	4689      	mov	r9, r1
 8010bde:	2101      	movs	r1, #1
 8010be0:	ec57 6b10 	vmov	r6, r7, d0
 8010be4:	4690      	mov	r8, r2
 8010be6:	f7ff fc09 	bl	80103fc <_Balloc>
 8010bea:	4604      	mov	r4, r0
 8010bec:	b930      	cbnz	r0, 8010bfc <__d2b+0x24>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	4b25      	ldr	r3, [pc, #148]	; (8010c88 <__d2b+0xb0>)
 8010bf2:	4826      	ldr	r0, [pc, #152]	; (8010c8c <__d2b+0xb4>)
 8010bf4:	f240 310a 	movw	r1, #778	; 0x30a
 8010bf8:	f000 ff56 	bl	8011aa8 <__assert_func>
 8010bfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c04:	bb35      	cbnz	r5, 8010c54 <__d2b+0x7c>
 8010c06:	2e00      	cmp	r6, #0
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	d028      	beq.n	8010c5e <__d2b+0x86>
 8010c0c:	4668      	mov	r0, sp
 8010c0e:	9600      	str	r6, [sp, #0]
 8010c10:	f7ff fd06 	bl	8010620 <__lo0bits>
 8010c14:	9900      	ldr	r1, [sp, #0]
 8010c16:	b300      	cbz	r0, 8010c5a <__d2b+0x82>
 8010c18:	9a01      	ldr	r2, [sp, #4]
 8010c1a:	f1c0 0320 	rsb	r3, r0, #32
 8010c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c22:	430b      	orrs	r3, r1
 8010c24:	40c2      	lsrs	r2, r0
 8010c26:	6163      	str	r3, [r4, #20]
 8010c28:	9201      	str	r2, [sp, #4]
 8010c2a:	9b01      	ldr	r3, [sp, #4]
 8010c2c:	61a3      	str	r3, [r4, #24]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	bf14      	ite	ne
 8010c32:	2202      	movne	r2, #2
 8010c34:	2201      	moveq	r2, #1
 8010c36:	6122      	str	r2, [r4, #16]
 8010c38:	b1d5      	cbz	r5, 8010c70 <__d2b+0x98>
 8010c3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c3e:	4405      	add	r5, r0
 8010c40:	f8c9 5000 	str.w	r5, [r9]
 8010c44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c48:	f8c8 0000 	str.w	r0, [r8]
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	b003      	add	sp, #12
 8010c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c58:	e7d5      	b.n	8010c06 <__d2b+0x2e>
 8010c5a:	6161      	str	r1, [r4, #20]
 8010c5c:	e7e5      	b.n	8010c2a <__d2b+0x52>
 8010c5e:	a801      	add	r0, sp, #4
 8010c60:	f7ff fcde 	bl	8010620 <__lo0bits>
 8010c64:	9b01      	ldr	r3, [sp, #4]
 8010c66:	6163      	str	r3, [r4, #20]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	6122      	str	r2, [r4, #16]
 8010c6c:	3020      	adds	r0, #32
 8010c6e:	e7e3      	b.n	8010c38 <__d2b+0x60>
 8010c70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c78:	f8c9 0000 	str.w	r0, [r9]
 8010c7c:	6918      	ldr	r0, [r3, #16]
 8010c7e:	f7ff fcaf 	bl	80105e0 <__hi0bits>
 8010c82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c86:	e7df      	b.n	8010c48 <__d2b+0x70>
 8010c88:	08013258 	.word	0x08013258
 8010c8c:	080132e4 	.word	0x080132e4

08010c90 <__ratio>:
 8010c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	4688      	mov	r8, r1
 8010c96:	4669      	mov	r1, sp
 8010c98:	4681      	mov	r9, r0
 8010c9a:	f7ff ff4d 	bl	8010b38 <__b2d>
 8010c9e:	a901      	add	r1, sp, #4
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	ec55 4b10 	vmov	r4, r5, d0
 8010ca6:	f7ff ff47 	bl	8010b38 <__b2d>
 8010caa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010cb2:	eba3 0c02 	sub.w	ip, r3, r2
 8010cb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cc0:	ec51 0b10 	vmov	r0, r1, d0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	bfd6      	itet	le
 8010cc8:	460a      	movle	r2, r1
 8010cca:	462a      	movgt	r2, r5
 8010ccc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010cd0:	468b      	mov	fp, r1
 8010cd2:	462f      	mov	r7, r5
 8010cd4:	bfd4      	ite	le
 8010cd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010cda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010cde:	4620      	mov	r0, r4
 8010ce0:	ee10 2a10 	vmov	r2, s0
 8010ce4:	465b      	mov	r3, fp
 8010ce6:	4639      	mov	r1, r7
 8010ce8:	f7ef fdc8 	bl	800087c <__aeabi_ddiv>
 8010cec:	ec41 0b10 	vmov	d0, r0, r1
 8010cf0:	b003      	add	sp, #12
 8010cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cf6 <__copybits>:
 8010cf6:	3901      	subs	r1, #1
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	1149      	asrs	r1, r1, #5
 8010cfc:	6914      	ldr	r4, [r2, #16]
 8010cfe:	3101      	adds	r1, #1
 8010d00:	f102 0314 	add.w	r3, r2, #20
 8010d04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d0c:	1f05      	subs	r5, r0, #4
 8010d0e:	42a3      	cmp	r3, r4
 8010d10:	d30c      	bcc.n	8010d2c <__copybits+0x36>
 8010d12:	1aa3      	subs	r3, r4, r2
 8010d14:	3b11      	subs	r3, #17
 8010d16:	f023 0303 	bic.w	r3, r3, #3
 8010d1a:	3211      	adds	r2, #17
 8010d1c:	42a2      	cmp	r2, r4
 8010d1e:	bf88      	it	hi
 8010d20:	2300      	movhi	r3, #0
 8010d22:	4418      	add	r0, r3
 8010d24:	2300      	movs	r3, #0
 8010d26:	4288      	cmp	r0, r1
 8010d28:	d305      	bcc.n	8010d36 <__copybits+0x40>
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d30:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d34:	e7eb      	b.n	8010d0e <__copybits+0x18>
 8010d36:	f840 3b04 	str.w	r3, [r0], #4
 8010d3a:	e7f4      	b.n	8010d26 <__copybits+0x30>

08010d3c <__any_on>:
 8010d3c:	f100 0214 	add.w	r2, r0, #20
 8010d40:	6900      	ldr	r0, [r0, #16]
 8010d42:	114b      	asrs	r3, r1, #5
 8010d44:	4298      	cmp	r0, r3
 8010d46:	b510      	push	{r4, lr}
 8010d48:	db11      	blt.n	8010d6e <__any_on+0x32>
 8010d4a:	dd0a      	ble.n	8010d62 <__any_on+0x26>
 8010d4c:	f011 011f 	ands.w	r1, r1, #31
 8010d50:	d007      	beq.n	8010d62 <__any_on+0x26>
 8010d52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d56:	fa24 f001 	lsr.w	r0, r4, r1
 8010d5a:	fa00 f101 	lsl.w	r1, r0, r1
 8010d5e:	428c      	cmp	r4, r1
 8010d60:	d10b      	bne.n	8010d7a <__any_on+0x3e>
 8010d62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d803      	bhi.n	8010d72 <__any_on+0x36>
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	bd10      	pop	{r4, pc}
 8010d6e:	4603      	mov	r3, r0
 8010d70:	e7f7      	b.n	8010d62 <__any_on+0x26>
 8010d72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d76:	2900      	cmp	r1, #0
 8010d78:	d0f5      	beq.n	8010d66 <__any_on+0x2a>
 8010d7a:	2001      	movs	r0, #1
 8010d7c:	e7f6      	b.n	8010d6c <__any_on+0x30>

08010d7e <_calloc_r>:
 8010d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d80:	fba1 2402 	umull	r2, r4, r1, r2
 8010d84:	b94c      	cbnz	r4, 8010d9a <_calloc_r+0x1c>
 8010d86:	4611      	mov	r1, r2
 8010d88:	9201      	str	r2, [sp, #4]
 8010d8a:	f000 f87b 	bl	8010e84 <_malloc_r>
 8010d8e:	9a01      	ldr	r2, [sp, #4]
 8010d90:	4605      	mov	r5, r0
 8010d92:	b930      	cbnz	r0, 8010da2 <_calloc_r+0x24>
 8010d94:	4628      	mov	r0, r5
 8010d96:	b003      	add	sp, #12
 8010d98:	bd30      	pop	{r4, r5, pc}
 8010d9a:	220c      	movs	r2, #12
 8010d9c:	6002      	str	r2, [r0, #0]
 8010d9e:	2500      	movs	r5, #0
 8010da0:	e7f8      	b.n	8010d94 <_calloc_r+0x16>
 8010da2:	4621      	mov	r1, r4
 8010da4:	f7fc fb12 	bl	800d3cc <memset>
 8010da8:	e7f4      	b.n	8010d94 <_calloc_r+0x16>
	...

08010dac <_free_r>:
 8010dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dae:	2900      	cmp	r1, #0
 8010db0:	d044      	beq.n	8010e3c <_free_r+0x90>
 8010db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010db6:	9001      	str	r0, [sp, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f1a1 0404 	sub.w	r4, r1, #4
 8010dbe:	bfb8      	it	lt
 8010dc0:	18e4      	addlt	r4, r4, r3
 8010dc2:	f001 f875 	bl	8011eb0 <__malloc_lock>
 8010dc6:	4a1e      	ldr	r2, [pc, #120]	; (8010e40 <_free_r+0x94>)
 8010dc8:	9801      	ldr	r0, [sp, #4]
 8010dca:	6813      	ldr	r3, [r2, #0]
 8010dcc:	b933      	cbnz	r3, 8010ddc <_free_r+0x30>
 8010dce:	6063      	str	r3, [r4, #4]
 8010dd0:	6014      	str	r4, [r2, #0]
 8010dd2:	b003      	add	sp, #12
 8010dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dd8:	f001 b870 	b.w	8011ebc <__malloc_unlock>
 8010ddc:	42a3      	cmp	r3, r4
 8010dde:	d908      	bls.n	8010df2 <_free_r+0x46>
 8010de0:	6825      	ldr	r5, [r4, #0]
 8010de2:	1961      	adds	r1, r4, r5
 8010de4:	428b      	cmp	r3, r1
 8010de6:	bf01      	itttt	eq
 8010de8:	6819      	ldreq	r1, [r3, #0]
 8010dea:	685b      	ldreq	r3, [r3, #4]
 8010dec:	1949      	addeq	r1, r1, r5
 8010dee:	6021      	streq	r1, [r4, #0]
 8010df0:	e7ed      	b.n	8010dce <_free_r+0x22>
 8010df2:	461a      	mov	r2, r3
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	b10b      	cbz	r3, 8010dfc <_free_r+0x50>
 8010df8:	42a3      	cmp	r3, r4
 8010dfa:	d9fa      	bls.n	8010df2 <_free_r+0x46>
 8010dfc:	6811      	ldr	r1, [r2, #0]
 8010dfe:	1855      	adds	r5, r2, r1
 8010e00:	42a5      	cmp	r5, r4
 8010e02:	d10b      	bne.n	8010e1c <_free_r+0x70>
 8010e04:	6824      	ldr	r4, [r4, #0]
 8010e06:	4421      	add	r1, r4
 8010e08:	1854      	adds	r4, r2, r1
 8010e0a:	42a3      	cmp	r3, r4
 8010e0c:	6011      	str	r1, [r2, #0]
 8010e0e:	d1e0      	bne.n	8010dd2 <_free_r+0x26>
 8010e10:	681c      	ldr	r4, [r3, #0]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	6053      	str	r3, [r2, #4]
 8010e16:	4421      	add	r1, r4
 8010e18:	6011      	str	r1, [r2, #0]
 8010e1a:	e7da      	b.n	8010dd2 <_free_r+0x26>
 8010e1c:	d902      	bls.n	8010e24 <_free_r+0x78>
 8010e1e:	230c      	movs	r3, #12
 8010e20:	6003      	str	r3, [r0, #0]
 8010e22:	e7d6      	b.n	8010dd2 <_free_r+0x26>
 8010e24:	6825      	ldr	r5, [r4, #0]
 8010e26:	1961      	adds	r1, r4, r5
 8010e28:	428b      	cmp	r3, r1
 8010e2a:	bf04      	itt	eq
 8010e2c:	6819      	ldreq	r1, [r3, #0]
 8010e2e:	685b      	ldreq	r3, [r3, #4]
 8010e30:	6063      	str	r3, [r4, #4]
 8010e32:	bf04      	itt	eq
 8010e34:	1949      	addeq	r1, r1, r5
 8010e36:	6021      	streq	r1, [r4, #0]
 8010e38:	6054      	str	r4, [r2, #4]
 8010e3a:	e7ca      	b.n	8010dd2 <_free_r+0x26>
 8010e3c:	b003      	add	sp, #12
 8010e3e:	bd30      	pop	{r4, r5, pc}
 8010e40:	200050bc 	.word	0x200050bc

08010e44 <sbrk_aligned>:
 8010e44:	b570      	push	{r4, r5, r6, lr}
 8010e46:	4e0e      	ldr	r6, [pc, #56]	; (8010e80 <sbrk_aligned+0x3c>)
 8010e48:	460c      	mov	r4, r1
 8010e4a:	6831      	ldr	r1, [r6, #0]
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	b911      	cbnz	r1, 8010e56 <sbrk_aligned+0x12>
 8010e50:	f000 fd26 	bl	80118a0 <_sbrk_r>
 8010e54:	6030      	str	r0, [r6, #0]
 8010e56:	4621      	mov	r1, r4
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f000 fd21 	bl	80118a0 <_sbrk_r>
 8010e5e:	1c43      	adds	r3, r0, #1
 8010e60:	d00a      	beq.n	8010e78 <sbrk_aligned+0x34>
 8010e62:	1cc4      	adds	r4, r0, #3
 8010e64:	f024 0403 	bic.w	r4, r4, #3
 8010e68:	42a0      	cmp	r0, r4
 8010e6a:	d007      	beq.n	8010e7c <sbrk_aligned+0x38>
 8010e6c:	1a21      	subs	r1, r4, r0
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f000 fd16 	bl	80118a0 <_sbrk_r>
 8010e74:	3001      	adds	r0, #1
 8010e76:	d101      	bne.n	8010e7c <sbrk_aligned+0x38>
 8010e78:	f04f 34ff 	mov.w	r4, #4294967295
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
 8010e80:	200050c0 	.word	0x200050c0

08010e84 <_malloc_r>:
 8010e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e88:	1ccd      	adds	r5, r1, #3
 8010e8a:	f025 0503 	bic.w	r5, r5, #3
 8010e8e:	3508      	adds	r5, #8
 8010e90:	2d0c      	cmp	r5, #12
 8010e92:	bf38      	it	cc
 8010e94:	250c      	movcc	r5, #12
 8010e96:	2d00      	cmp	r5, #0
 8010e98:	4607      	mov	r7, r0
 8010e9a:	db01      	blt.n	8010ea0 <_malloc_r+0x1c>
 8010e9c:	42a9      	cmp	r1, r5
 8010e9e:	d905      	bls.n	8010eac <_malloc_r+0x28>
 8010ea0:	230c      	movs	r3, #12
 8010ea2:	603b      	str	r3, [r7, #0]
 8010ea4:	2600      	movs	r6, #0
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eac:	4e2e      	ldr	r6, [pc, #184]	; (8010f68 <_malloc_r+0xe4>)
 8010eae:	f000 ffff 	bl	8011eb0 <__malloc_lock>
 8010eb2:	6833      	ldr	r3, [r6, #0]
 8010eb4:	461c      	mov	r4, r3
 8010eb6:	bb34      	cbnz	r4, 8010f06 <_malloc_r+0x82>
 8010eb8:	4629      	mov	r1, r5
 8010eba:	4638      	mov	r0, r7
 8010ebc:	f7ff ffc2 	bl	8010e44 <sbrk_aligned>
 8010ec0:	1c43      	adds	r3, r0, #1
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	d14d      	bne.n	8010f62 <_malloc_r+0xde>
 8010ec6:	6834      	ldr	r4, [r6, #0]
 8010ec8:	4626      	mov	r6, r4
 8010eca:	2e00      	cmp	r6, #0
 8010ecc:	d140      	bne.n	8010f50 <_malloc_r+0xcc>
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	eb04 0803 	add.w	r8, r4, r3
 8010ed8:	f000 fce2 	bl	80118a0 <_sbrk_r>
 8010edc:	4580      	cmp	r8, r0
 8010ede:	d13a      	bne.n	8010f56 <_malloc_r+0xd2>
 8010ee0:	6821      	ldr	r1, [r4, #0]
 8010ee2:	3503      	adds	r5, #3
 8010ee4:	1a6d      	subs	r5, r5, r1
 8010ee6:	f025 0503 	bic.w	r5, r5, #3
 8010eea:	3508      	adds	r5, #8
 8010eec:	2d0c      	cmp	r5, #12
 8010eee:	bf38      	it	cc
 8010ef0:	250c      	movcc	r5, #12
 8010ef2:	4629      	mov	r1, r5
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	f7ff ffa5 	bl	8010e44 <sbrk_aligned>
 8010efa:	3001      	adds	r0, #1
 8010efc:	d02b      	beq.n	8010f56 <_malloc_r+0xd2>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	442b      	add	r3, r5
 8010f02:	6023      	str	r3, [r4, #0]
 8010f04:	e00e      	b.n	8010f24 <_malloc_r+0xa0>
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	1b52      	subs	r2, r2, r5
 8010f0a:	d41e      	bmi.n	8010f4a <_malloc_r+0xc6>
 8010f0c:	2a0b      	cmp	r2, #11
 8010f0e:	d916      	bls.n	8010f3e <_malloc_r+0xba>
 8010f10:	1961      	adds	r1, r4, r5
 8010f12:	42a3      	cmp	r3, r4
 8010f14:	6025      	str	r5, [r4, #0]
 8010f16:	bf18      	it	ne
 8010f18:	6059      	strne	r1, [r3, #4]
 8010f1a:	6863      	ldr	r3, [r4, #4]
 8010f1c:	bf08      	it	eq
 8010f1e:	6031      	streq	r1, [r6, #0]
 8010f20:	5162      	str	r2, [r4, r5]
 8010f22:	604b      	str	r3, [r1, #4]
 8010f24:	4638      	mov	r0, r7
 8010f26:	f104 060b 	add.w	r6, r4, #11
 8010f2a:	f000 ffc7 	bl	8011ebc <__malloc_unlock>
 8010f2e:	f026 0607 	bic.w	r6, r6, #7
 8010f32:	1d23      	adds	r3, r4, #4
 8010f34:	1af2      	subs	r2, r6, r3
 8010f36:	d0b6      	beq.n	8010ea6 <_malloc_r+0x22>
 8010f38:	1b9b      	subs	r3, r3, r6
 8010f3a:	50a3      	str	r3, [r4, r2]
 8010f3c:	e7b3      	b.n	8010ea6 <_malloc_r+0x22>
 8010f3e:	6862      	ldr	r2, [r4, #4]
 8010f40:	42a3      	cmp	r3, r4
 8010f42:	bf0c      	ite	eq
 8010f44:	6032      	streq	r2, [r6, #0]
 8010f46:	605a      	strne	r2, [r3, #4]
 8010f48:	e7ec      	b.n	8010f24 <_malloc_r+0xa0>
 8010f4a:	4623      	mov	r3, r4
 8010f4c:	6864      	ldr	r4, [r4, #4]
 8010f4e:	e7b2      	b.n	8010eb6 <_malloc_r+0x32>
 8010f50:	4634      	mov	r4, r6
 8010f52:	6876      	ldr	r6, [r6, #4]
 8010f54:	e7b9      	b.n	8010eca <_malloc_r+0x46>
 8010f56:	230c      	movs	r3, #12
 8010f58:	603b      	str	r3, [r7, #0]
 8010f5a:	4638      	mov	r0, r7
 8010f5c:	f000 ffae 	bl	8011ebc <__malloc_unlock>
 8010f60:	e7a1      	b.n	8010ea6 <_malloc_r+0x22>
 8010f62:	6025      	str	r5, [r4, #0]
 8010f64:	e7de      	b.n	8010f24 <_malloc_r+0xa0>
 8010f66:	bf00      	nop
 8010f68:	200050bc 	.word	0x200050bc

08010f6c <__ssputs_r>:
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	688e      	ldr	r6, [r1, #8]
 8010f72:	429e      	cmp	r6, r3
 8010f74:	4682      	mov	sl, r0
 8010f76:	460c      	mov	r4, r1
 8010f78:	4690      	mov	r8, r2
 8010f7a:	461f      	mov	r7, r3
 8010f7c:	d838      	bhi.n	8010ff0 <__ssputs_r+0x84>
 8010f7e:	898a      	ldrh	r2, [r1, #12]
 8010f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f84:	d032      	beq.n	8010fec <__ssputs_r+0x80>
 8010f86:	6825      	ldr	r5, [r4, #0]
 8010f88:	6909      	ldr	r1, [r1, #16]
 8010f8a:	eba5 0901 	sub.w	r9, r5, r1
 8010f8e:	6965      	ldr	r5, [r4, #20]
 8010f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f98:	3301      	adds	r3, #1
 8010f9a:	444b      	add	r3, r9
 8010f9c:	106d      	asrs	r5, r5, #1
 8010f9e:	429d      	cmp	r5, r3
 8010fa0:	bf38      	it	cc
 8010fa2:	461d      	movcc	r5, r3
 8010fa4:	0553      	lsls	r3, r2, #21
 8010fa6:	d531      	bpl.n	801100c <__ssputs_r+0xa0>
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f7ff ff6b 	bl	8010e84 <_malloc_r>
 8010fae:	4606      	mov	r6, r0
 8010fb0:	b950      	cbnz	r0, 8010fc8 <__ssputs_r+0x5c>
 8010fb2:	230c      	movs	r3, #12
 8010fb4:	f8ca 3000 	str.w	r3, [sl]
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fbe:	81a3      	strh	r3, [r4, #12]
 8010fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc8:	6921      	ldr	r1, [r4, #16]
 8010fca:	464a      	mov	r2, r9
 8010fcc:	f7fc f9f0 	bl	800d3b0 <memcpy>
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fda:	81a3      	strh	r3, [r4, #12]
 8010fdc:	6126      	str	r6, [r4, #16]
 8010fde:	6165      	str	r5, [r4, #20]
 8010fe0:	444e      	add	r6, r9
 8010fe2:	eba5 0509 	sub.w	r5, r5, r9
 8010fe6:	6026      	str	r6, [r4, #0]
 8010fe8:	60a5      	str	r5, [r4, #8]
 8010fea:	463e      	mov	r6, r7
 8010fec:	42be      	cmp	r6, r7
 8010fee:	d900      	bls.n	8010ff2 <__ssputs_r+0x86>
 8010ff0:	463e      	mov	r6, r7
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	4632      	mov	r2, r6
 8010ff6:	4641      	mov	r1, r8
 8010ff8:	f000 ff40 	bl	8011e7c <memmove>
 8010ffc:	68a3      	ldr	r3, [r4, #8]
 8010ffe:	1b9b      	subs	r3, r3, r6
 8011000:	60a3      	str	r3, [r4, #8]
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	4433      	add	r3, r6
 8011006:	6023      	str	r3, [r4, #0]
 8011008:	2000      	movs	r0, #0
 801100a:	e7db      	b.n	8010fc4 <__ssputs_r+0x58>
 801100c:	462a      	mov	r2, r5
 801100e:	f000 ff5b 	bl	8011ec8 <_realloc_r>
 8011012:	4606      	mov	r6, r0
 8011014:	2800      	cmp	r0, #0
 8011016:	d1e1      	bne.n	8010fdc <__ssputs_r+0x70>
 8011018:	6921      	ldr	r1, [r4, #16]
 801101a:	4650      	mov	r0, sl
 801101c:	f7ff fec6 	bl	8010dac <_free_r>
 8011020:	e7c7      	b.n	8010fb2 <__ssputs_r+0x46>
	...

08011024 <_svfiprintf_r>:
 8011024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011028:	4698      	mov	r8, r3
 801102a:	898b      	ldrh	r3, [r1, #12]
 801102c:	061b      	lsls	r3, r3, #24
 801102e:	b09d      	sub	sp, #116	; 0x74
 8011030:	4607      	mov	r7, r0
 8011032:	460d      	mov	r5, r1
 8011034:	4614      	mov	r4, r2
 8011036:	d50e      	bpl.n	8011056 <_svfiprintf_r+0x32>
 8011038:	690b      	ldr	r3, [r1, #16]
 801103a:	b963      	cbnz	r3, 8011056 <_svfiprintf_r+0x32>
 801103c:	2140      	movs	r1, #64	; 0x40
 801103e:	f7ff ff21 	bl	8010e84 <_malloc_r>
 8011042:	6028      	str	r0, [r5, #0]
 8011044:	6128      	str	r0, [r5, #16]
 8011046:	b920      	cbnz	r0, 8011052 <_svfiprintf_r+0x2e>
 8011048:	230c      	movs	r3, #12
 801104a:	603b      	str	r3, [r7, #0]
 801104c:	f04f 30ff 	mov.w	r0, #4294967295
 8011050:	e0d1      	b.n	80111f6 <_svfiprintf_r+0x1d2>
 8011052:	2340      	movs	r3, #64	; 0x40
 8011054:	616b      	str	r3, [r5, #20]
 8011056:	2300      	movs	r3, #0
 8011058:	9309      	str	r3, [sp, #36]	; 0x24
 801105a:	2320      	movs	r3, #32
 801105c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011060:	f8cd 800c 	str.w	r8, [sp, #12]
 8011064:	2330      	movs	r3, #48	; 0x30
 8011066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011210 <_svfiprintf_r+0x1ec>
 801106a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801106e:	f04f 0901 	mov.w	r9, #1
 8011072:	4623      	mov	r3, r4
 8011074:	469a      	mov	sl, r3
 8011076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801107a:	b10a      	cbz	r2, 8011080 <_svfiprintf_r+0x5c>
 801107c:	2a25      	cmp	r2, #37	; 0x25
 801107e:	d1f9      	bne.n	8011074 <_svfiprintf_r+0x50>
 8011080:	ebba 0b04 	subs.w	fp, sl, r4
 8011084:	d00b      	beq.n	801109e <_svfiprintf_r+0x7a>
 8011086:	465b      	mov	r3, fp
 8011088:	4622      	mov	r2, r4
 801108a:	4629      	mov	r1, r5
 801108c:	4638      	mov	r0, r7
 801108e:	f7ff ff6d 	bl	8010f6c <__ssputs_r>
 8011092:	3001      	adds	r0, #1
 8011094:	f000 80aa 	beq.w	80111ec <_svfiprintf_r+0x1c8>
 8011098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801109a:	445a      	add	r2, fp
 801109c:	9209      	str	r2, [sp, #36]	; 0x24
 801109e:	f89a 3000 	ldrb.w	r3, [sl]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f000 80a2 	beq.w	80111ec <_svfiprintf_r+0x1c8>
 80110a8:	2300      	movs	r3, #0
 80110aa:	f04f 32ff 	mov.w	r2, #4294967295
 80110ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110b2:	f10a 0a01 	add.w	sl, sl, #1
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	9307      	str	r3, [sp, #28]
 80110ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110be:	931a      	str	r3, [sp, #104]	; 0x68
 80110c0:	4654      	mov	r4, sl
 80110c2:	2205      	movs	r2, #5
 80110c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c8:	4851      	ldr	r0, [pc, #324]	; (8011210 <_svfiprintf_r+0x1ec>)
 80110ca:	f7ef f8a1 	bl	8000210 <memchr>
 80110ce:	9a04      	ldr	r2, [sp, #16]
 80110d0:	b9d8      	cbnz	r0, 801110a <_svfiprintf_r+0xe6>
 80110d2:	06d0      	lsls	r0, r2, #27
 80110d4:	bf44      	itt	mi
 80110d6:	2320      	movmi	r3, #32
 80110d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110dc:	0711      	lsls	r1, r2, #28
 80110de:	bf44      	itt	mi
 80110e0:	232b      	movmi	r3, #43	; 0x2b
 80110e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e6:	f89a 3000 	ldrb.w	r3, [sl]
 80110ea:	2b2a      	cmp	r3, #42	; 0x2a
 80110ec:	d015      	beq.n	801111a <_svfiprintf_r+0xf6>
 80110ee:	9a07      	ldr	r2, [sp, #28]
 80110f0:	4654      	mov	r4, sl
 80110f2:	2000      	movs	r0, #0
 80110f4:	f04f 0c0a 	mov.w	ip, #10
 80110f8:	4621      	mov	r1, r4
 80110fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110fe:	3b30      	subs	r3, #48	; 0x30
 8011100:	2b09      	cmp	r3, #9
 8011102:	d94e      	bls.n	80111a2 <_svfiprintf_r+0x17e>
 8011104:	b1b0      	cbz	r0, 8011134 <_svfiprintf_r+0x110>
 8011106:	9207      	str	r2, [sp, #28]
 8011108:	e014      	b.n	8011134 <_svfiprintf_r+0x110>
 801110a:	eba0 0308 	sub.w	r3, r0, r8
 801110e:	fa09 f303 	lsl.w	r3, r9, r3
 8011112:	4313      	orrs	r3, r2
 8011114:	9304      	str	r3, [sp, #16]
 8011116:	46a2      	mov	sl, r4
 8011118:	e7d2      	b.n	80110c0 <_svfiprintf_r+0x9c>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	1d19      	adds	r1, r3, #4
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	9103      	str	r1, [sp, #12]
 8011122:	2b00      	cmp	r3, #0
 8011124:	bfbb      	ittet	lt
 8011126:	425b      	neglt	r3, r3
 8011128:	f042 0202 	orrlt.w	r2, r2, #2
 801112c:	9307      	strge	r3, [sp, #28]
 801112e:	9307      	strlt	r3, [sp, #28]
 8011130:	bfb8      	it	lt
 8011132:	9204      	strlt	r2, [sp, #16]
 8011134:	7823      	ldrb	r3, [r4, #0]
 8011136:	2b2e      	cmp	r3, #46	; 0x2e
 8011138:	d10c      	bne.n	8011154 <_svfiprintf_r+0x130>
 801113a:	7863      	ldrb	r3, [r4, #1]
 801113c:	2b2a      	cmp	r3, #42	; 0x2a
 801113e:	d135      	bne.n	80111ac <_svfiprintf_r+0x188>
 8011140:	9b03      	ldr	r3, [sp, #12]
 8011142:	1d1a      	adds	r2, r3, #4
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	9203      	str	r2, [sp, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	bfb8      	it	lt
 801114c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011150:	3402      	adds	r4, #2
 8011152:	9305      	str	r3, [sp, #20]
 8011154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011220 <_svfiprintf_r+0x1fc>
 8011158:	7821      	ldrb	r1, [r4, #0]
 801115a:	2203      	movs	r2, #3
 801115c:	4650      	mov	r0, sl
 801115e:	f7ef f857 	bl	8000210 <memchr>
 8011162:	b140      	cbz	r0, 8011176 <_svfiprintf_r+0x152>
 8011164:	2340      	movs	r3, #64	; 0x40
 8011166:	eba0 000a 	sub.w	r0, r0, sl
 801116a:	fa03 f000 	lsl.w	r0, r3, r0
 801116e:	9b04      	ldr	r3, [sp, #16]
 8011170:	4303      	orrs	r3, r0
 8011172:	3401      	adds	r4, #1
 8011174:	9304      	str	r3, [sp, #16]
 8011176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117a:	4826      	ldr	r0, [pc, #152]	; (8011214 <_svfiprintf_r+0x1f0>)
 801117c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011180:	2206      	movs	r2, #6
 8011182:	f7ef f845 	bl	8000210 <memchr>
 8011186:	2800      	cmp	r0, #0
 8011188:	d038      	beq.n	80111fc <_svfiprintf_r+0x1d8>
 801118a:	4b23      	ldr	r3, [pc, #140]	; (8011218 <_svfiprintf_r+0x1f4>)
 801118c:	bb1b      	cbnz	r3, 80111d6 <_svfiprintf_r+0x1b2>
 801118e:	9b03      	ldr	r3, [sp, #12]
 8011190:	3307      	adds	r3, #7
 8011192:	f023 0307 	bic.w	r3, r3, #7
 8011196:	3308      	adds	r3, #8
 8011198:	9303      	str	r3, [sp, #12]
 801119a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801119c:	4433      	add	r3, r6
 801119e:	9309      	str	r3, [sp, #36]	; 0x24
 80111a0:	e767      	b.n	8011072 <_svfiprintf_r+0x4e>
 80111a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80111a6:	460c      	mov	r4, r1
 80111a8:	2001      	movs	r0, #1
 80111aa:	e7a5      	b.n	80110f8 <_svfiprintf_r+0xd4>
 80111ac:	2300      	movs	r3, #0
 80111ae:	3401      	adds	r4, #1
 80111b0:	9305      	str	r3, [sp, #20]
 80111b2:	4619      	mov	r1, r3
 80111b4:	f04f 0c0a 	mov.w	ip, #10
 80111b8:	4620      	mov	r0, r4
 80111ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111be:	3a30      	subs	r2, #48	; 0x30
 80111c0:	2a09      	cmp	r2, #9
 80111c2:	d903      	bls.n	80111cc <_svfiprintf_r+0x1a8>
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d0c5      	beq.n	8011154 <_svfiprintf_r+0x130>
 80111c8:	9105      	str	r1, [sp, #20]
 80111ca:	e7c3      	b.n	8011154 <_svfiprintf_r+0x130>
 80111cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80111d0:	4604      	mov	r4, r0
 80111d2:	2301      	movs	r3, #1
 80111d4:	e7f0      	b.n	80111b8 <_svfiprintf_r+0x194>
 80111d6:	ab03      	add	r3, sp, #12
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	462a      	mov	r2, r5
 80111dc:	4b0f      	ldr	r3, [pc, #60]	; (801121c <_svfiprintf_r+0x1f8>)
 80111de:	a904      	add	r1, sp, #16
 80111e0:	4638      	mov	r0, r7
 80111e2:	f7fc f99b 	bl	800d51c <_printf_float>
 80111e6:	1c42      	adds	r2, r0, #1
 80111e8:	4606      	mov	r6, r0
 80111ea:	d1d6      	bne.n	801119a <_svfiprintf_r+0x176>
 80111ec:	89ab      	ldrh	r3, [r5, #12]
 80111ee:	065b      	lsls	r3, r3, #25
 80111f0:	f53f af2c 	bmi.w	801104c <_svfiprintf_r+0x28>
 80111f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111f6:	b01d      	add	sp, #116	; 0x74
 80111f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111fc:	ab03      	add	r3, sp, #12
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	462a      	mov	r2, r5
 8011202:	4b06      	ldr	r3, [pc, #24]	; (801121c <_svfiprintf_r+0x1f8>)
 8011204:	a904      	add	r1, sp, #16
 8011206:	4638      	mov	r0, r7
 8011208:	f7fc fc2c 	bl	800da64 <_printf_i>
 801120c:	e7eb      	b.n	80111e6 <_svfiprintf_r+0x1c2>
 801120e:	bf00      	nop
 8011210:	0801343c 	.word	0x0801343c
 8011214:	08013446 	.word	0x08013446
 8011218:	0800d51d 	.word	0x0800d51d
 801121c:	08010f6d 	.word	0x08010f6d
 8011220:	08013442 	.word	0x08013442

08011224 <_sungetc_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	1c4b      	adds	r3, r1, #1
 8011228:	4614      	mov	r4, r2
 801122a:	d103      	bne.n	8011234 <_sungetc_r+0x10>
 801122c:	f04f 35ff 	mov.w	r5, #4294967295
 8011230:	4628      	mov	r0, r5
 8011232:	bd38      	pop	{r3, r4, r5, pc}
 8011234:	8993      	ldrh	r3, [r2, #12]
 8011236:	f023 0320 	bic.w	r3, r3, #32
 801123a:	8193      	strh	r3, [r2, #12]
 801123c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801123e:	6852      	ldr	r2, [r2, #4]
 8011240:	b2cd      	uxtb	r5, r1
 8011242:	b18b      	cbz	r3, 8011268 <_sungetc_r+0x44>
 8011244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011246:	4293      	cmp	r3, r2
 8011248:	dd08      	ble.n	801125c <_sungetc_r+0x38>
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	1e5a      	subs	r2, r3, #1
 801124e:	6022      	str	r2, [r4, #0]
 8011250:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011254:	6863      	ldr	r3, [r4, #4]
 8011256:	3301      	adds	r3, #1
 8011258:	6063      	str	r3, [r4, #4]
 801125a:	e7e9      	b.n	8011230 <_sungetc_r+0xc>
 801125c:	4621      	mov	r1, r4
 801125e:	f000 fbdb 	bl	8011a18 <__submore>
 8011262:	2800      	cmp	r0, #0
 8011264:	d0f1      	beq.n	801124a <_sungetc_r+0x26>
 8011266:	e7e1      	b.n	801122c <_sungetc_r+0x8>
 8011268:	6921      	ldr	r1, [r4, #16]
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	b151      	cbz	r1, 8011284 <_sungetc_r+0x60>
 801126e:	4299      	cmp	r1, r3
 8011270:	d208      	bcs.n	8011284 <_sungetc_r+0x60>
 8011272:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011276:	42a9      	cmp	r1, r5
 8011278:	d104      	bne.n	8011284 <_sungetc_r+0x60>
 801127a:	3b01      	subs	r3, #1
 801127c:	3201      	adds	r2, #1
 801127e:	6023      	str	r3, [r4, #0]
 8011280:	6062      	str	r2, [r4, #4]
 8011282:	e7d5      	b.n	8011230 <_sungetc_r+0xc>
 8011284:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801128c:	6363      	str	r3, [r4, #52]	; 0x34
 801128e:	2303      	movs	r3, #3
 8011290:	63a3      	str	r3, [r4, #56]	; 0x38
 8011292:	4623      	mov	r3, r4
 8011294:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011298:	6023      	str	r3, [r4, #0]
 801129a:	2301      	movs	r3, #1
 801129c:	e7dc      	b.n	8011258 <_sungetc_r+0x34>

0801129e <__ssrefill_r>:
 801129e:	b510      	push	{r4, lr}
 80112a0:	460c      	mov	r4, r1
 80112a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80112a4:	b169      	cbz	r1, 80112c2 <__ssrefill_r+0x24>
 80112a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112aa:	4299      	cmp	r1, r3
 80112ac:	d001      	beq.n	80112b2 <__ssrefill_r+0x14>
 80112ae:	f7ff fd7d 	bl	8010dac <_free_r>
 80112b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112b4:	6063      	str	r3, [r4, #4]
 80112b6:	2000      	movs	r0, #0
 80112b8:	6360      	str	r0, [r4, #52]	; 0x34
 80112ba:	b113      	cbz	r3, 80112c2 <__ssrefill_r+0x24>
 80112bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80112be:	6023      	str	r3, [r4, #0]
 80112c0:	bd10      	pop	{r4, pc}
 80112c2:	6923      	ldr	r3, [r4, #16]
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	2300      	movs	r3, #0
 80112c8:	6063      	str	r3, [r4, #4]
 80112ca:	89a3      	ldrh	r3, [r4, #12]
 80112cc:	f043 0320 	orr.w	r3, r3, #32
 80112d0:	81a3      	strh	r3, [r4, #12]
 80112d2:	f04f 30ff 	mov.w	r0, #4294967295
 80112d6:	e7f3      	b.n	80112c0 <__ssrefill_r+0x22>

080112d8 <__ssvfiscanf_r>:
 80112d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112dc:	460c      	mov	r4, r1
 80112de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80112e2:	2100      	movs	r1, #0
 80112e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80112e8:	49a6      	ldr	r1, [pc, #664]	; (8011584 <__ssvfiscanf_r+0x2ac>)
 80112ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80112ec:	f10d 0804 	add.w	r8, sp, #4
 80112f0:	49a5      	ldr	r1, [pc, #660]	; (8011588 <__ssvfiscanf_r+0x2b0>)
 80112f2:	4fa6      	ldr	r7, [pc, #664]	; (801158c <__ssvfiscanf_r+0x2b4>)
 80112f4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011590 <__ssvfiscanf_r+0x2b8>
 80112f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80112fc:	4606      	mov	r6, r0
 80112fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	7813      	ldrb	r3, [r2, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 815a 	beq.w	80115be <__ssvfiscanf_r+0x2e6>
 801130a:	5dd9      	ldrb	r1, [r3, r7]
 801130c:	f011 0108 	ands.w	r1, r1, #8
 8011310:	f102 0501 	add.w	r5, r2, #1
 8011314:	d019      	beq.n	801134a <__ssvfiscanf_r+0x72>
 8011316:	6863      	ldr	r3, [r4, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	dd0f      	ble.n	801133c <__ssvfiscanf_r+0x64>
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	781a      	ldrb	r2, [r3, #0]
 8011320:	5cba      	ldrb	r2, [r7, r2]
 8011322:	0712      	lsls	r2, r2, #28
 8011324:	d401      	bmi.n	801132a <__ssvfiscanf_r+0x52>
 8011326:	462a      	mov	r2, r5
 8011328:	e7eb      	b.n	8011302 <__ssvfiscanf_r+0x2a>
 801132a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801132c:	3201      	adds	r2, #1
 801132e:	9245      	str	r2, [sp, #276]	; 0x114
 8011330:	6862      	ldr	r2, [r4, #4]
 8011332:	3301      	adds	r3, #1
 8011334:	3a01      	subs	r2, #1
 8011336:	6062      	str	r2, [r4, #4]
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	e7ec      	b.n	8011316 <__ssvfiscanf_r+0x3e>
 801133c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801133e:	4621      	mov	r1, r4
 8011340:	4630      	mov	r0, r6
 8011342:	4798      	blx	r3
 8011344:	2800      	cmp	r0, #0
 8011346:	d0e9      	beq.n	801131c <__ssvfiscanf_r+0x44>
 8011348:	e7ed      	b.n	8011326 <__ssvfiscanf_r+0x4e>
 801134a:	2b25      	cmp	r3, #37	; 0x25
 801134c:	d012      	beq.n	8011374 <__ssvfiscanf_r+0x9c>
 801134e:	469a      	mov	sl, r3
 8011350:	6863      	ldr	r3, [r4, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	f340 8091 	ble.w	801147a <__ssvfiscanf_r+0x1a2>
 8011358:	6822      	ldr	r2, [r4, #0]
 801135a:	7813      	ldrb	r3, [r2, #0]
 801135c:	4553      	cmp	r3, sl
 801135e:	f040 812e 	bne.w	80115be <__ssvfiscanf_r+0x2e6>
 8011362:	6863      	ldr	r3, [r4, #4]
 8011364:	3b01      	subs	r3, #1
 8011366:	6063      	str	r3, [r4, #4]
 8011368:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801136a:	3201      	adds	r2, #1
 801136c:	3301      	adds	r3, #1
 801136e:	6022      	str	r2, [r4, #0]
 8011370:	9345      	str	r3, [sp, #276]	; 0x114
 8011372:	e7d8      	b.n	8011326 <__ssvfiscanf_r+0x4e>
 8011374:	9141      	str	r1, [sp, #260]	; 0x104
 8011376:	9143      	str	r1, [sp, #268]	; 0x10c
 8011378:	7853      	ldrb	r3, [r2, #1]
 801137a:	2b2a      	cmp	r3, #42	; 0x2a
 801137c:	bf02      	ittt	eq
 801137e:	2310      	moveq	r3, #16
 8011380:	1c95      	addeq	r5, r2, #2
 8011382:	9341      	streq	r3, [sp, #260]	; 0x104
 8011384:	220a      	movs	r2, #10
 8011386:	46aa      	mov	sl, r5
 8011388:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801138c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011390:	2b09      	cmp	r3, #9
 8011392:	d91d      	bls.n	80113d0 <__ssvfiscanf_r+0xf8>
 8011394:	487e      	ldr	r0, [pc, #504]	; (8011590 <__ssvfiscanf_r+0x2b8>)
 8011396:	2203      	movs	r2, #3
 8011398:	f7ee ff3a 	bl	8000210 <memchr>
 801139c:	b140      	cbz	r0, 80113b0 <__ssvfiscanf_r+0xd8>
 801139e:	2301      	movs	r3, #1
 80113a0:	eba0 0009 	sub.w	r0, r0, r9
 80113a4:	fa03 f000 	lsl.w	r0, r3, r0
 80113a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80113aa:	4318      	orrs	r0, r3
 80113ac:	9041      	str	r0, [sp, #260]	; 0x104
 80113ae:	4655      	mov	r5, sl
 80113b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80113b4:	2b78      	cmp	r3, #120	; 0x78
 80113b6:	d806      	bhi.n	80113c6 <__ssvfiscanf_r+0xee>
 80113b8:	2b57      	cmp	r3, #87	; 0x57
 80113ba:	d810      	bhi.n	80113de <__ssvfiscanf_r+0x106>
 80113bc:	2b25      	cmp	r3, #37	; 0x25
 80113be:	d0c6      	beq.n	801134e <__ssvfiscanf_r+0x76>
 80113c0:	d856      	bhi.n	8011470 <__ssvfiscanf_r+0x198>
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d064      	beq.n	8011490 <__ssvfiscanf_r+0x1b8>
 80113c6:	2303      	movs	r3, #3
 80113c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80113ca:	230a      	movs	r3, #10
 80113cc:	9342      	str	r3, [sp, #264]	; 0x108
 80113ce:	e071      	b.n	80114b4 <__ssvfiscanf_r+0x1dc>
 80113d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80113d2:	fb02 1103 	mla	r1, r2, r3, r1
 80113d6:	3930      	subs	r1, #48	; 0x30
 80113d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80113da:	4655      	mov	r5, sl
 80113dc:	e7d3      	b.n	8011386 <__ssvfiscanf_r+0xae>
 80113de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80113e2:	2a20      	cmp	r2, #32
 80113e4:	d8ef      	bhi.n	80113c6 <__ssvfiscanf_r+0xee>
 80113e6:	a101      	add	r1, pc, #4	; (adr r1, 80113ec <__ssvfiscanf_r+0x114>)
 80113e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80113ec:	0801149f 	.word	0x0801149f
 80113f0:	080113c7 	.word	0x080113c7
 80113f4:	080113c7 	.word	0x080113c7
 80113f8:	080114fd 	.word	0x080114fd
 80113fc:	080113c7 	.word	0x080113c7
 8011400:	080113c7 	.word	0x080113c7
 8011404:	080113c7 	.word	0x080113c7
 8011408:	080113c7 	.word	0x080113c7
 801140c:	080113c7 	.word	0x080113c7
 8011410:	080113c7 	.word	0x080113c7
 8011414:	080113c7 	.word	0x080113c7
 8011418:	08011513 	.word	0x08011513
 801141c:	080114e9 	.word	0x080114e9
 8011420:	08011477 	.word	0x08011477
 8011424:	08011477 	.word	0x08011477
 8011428:	08011477 	.word	0x08011477
 801142c:	080113c7 	.word	0x080113c7
 8011430:	080114ed 	.word	0x080114ed
 8011434:	080113c7 	.word	0x080113c7
 8011438:	080113c7 	.word	0x080113c7
 801143c:	080113c7 	.word	0x080113c7
 8011440:	080113c7 	.word	0x080113c7
 8011444:	08011523 	.word	0x08011523
 8011448:	080114f5 	.word	0x080114f5
 801144c:	08011497 	.word	0x08011497
 8011450:	080113c7 	.word	0x080113c7
 8011454:	080113c7 	.word	0x080113c7
 8011458:	0801151f 	.word	0x0801151f
 801145c:	080113c7 	.word	0x080113c7
 8011460:	080114e9 	.word	0x080114e9
 8011464:	080113c7 	.word	0x080113c7
 8011468:	080113c7 	.word	0x080113c7
 801146c:	0801149f 	.word	0x0801149f
 8011470:	3b45      	subs	r3, #69	; 0x45
 8011472:	2b02      	cmp	r3, #2
 8011474:	d8a7      	bhi.n	80113c6 <__ssvfiscanf_r+0xee>
 8011476:	2305      	movs	r3, #5
 8011478:	e01b      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 801147a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801147c:	4621      	mov	r1, r4
 801147e:	4630      	mov	r0, r6
 8011480:	4798      	blx	r3
 8011482:	2800      	cmp	r0, #0
 8011484:	f43f af68 	beq.w	8011358 <__ssvfiscanf_r+0x80>
 8011488:	9844      	ldr	r0, [sp, #272]	; 0x110
 801148a:	2800      	cmp	r0, #0
 801148c:	f040 808d 	bne.w	80115aa <__ssvfiscanf_r+0x2d2>
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	e08f      	b.n	80115b6 <__ssvfiscanf_r+0x2de>
 8011496:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011498:	f042 0220 	orr.w	r2, r2, #32
 801149c:	9241      	str	r2, [sp, #260]	; 0x104
 801149e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80114a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114a4:	9241      	str	r2, [sp, #260]	; 0x104
 80114a6:	2210      	movs	r2, #16
 80114a8:	2b6f      	cmp	r3, #111	; 0x6f
 80114aa:	9242      	str	r2, [sp, #264]	; 0x108
 80114ac:	bf34      	ite	cc
 80114ae:	2303      	movcc	r3, #3
 80114b0:	2304      	movcs	r3, #4
 80114b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80114b4:	6863      	ldr	r3, [r4, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	dd42      	ble.n	8011540 <__ssvfiscanf_r+0x268>
 80114ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80114bc:	0659      	lsls	r1, r3, #25
 80114be:	d404      	bmi.n	80114ca <__ssvfiscanf_r+0x1f2>
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	781a      	ldrb	r2, [r3, #0]
 80114c4:	5cba      	ldrb	r2, [r7, r2]
 80114c6:	0712      	lsls	r2, r2, #28
 80114c8:	d441      	bmi.n	801154e <__ssvfiscanf_r+0x276>
 80114ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	dc50      	bgt.n	8011572 <__ssvfiscanf_r+0x29a>
 80114d0:	466b      	mov	r3, sp
 80114d2:	4622      	mov	r2, r4
 80114d4:	a941      	add	r1, sp, #260	; 0x104
 80114d6:	4630      	mov	r0, r6
 80114d8:	f000 f876 	bl	80115c8 <_scanf_chars>
 80114dc:	2801      	cmp	r0, #1
 80114de:	d06e      	beq.n	80115be <__ssvfiscanf_r+0x2e6>
 80114e0:	2802      	cmp	r0, #2
 80114e2:	f47f af20 	bne.w	8011326 <__ssvfiscanf_r+0x4e>
 80114e6:	e7cf      	b.n	8011488 <__ssvfiscanf_r+0x1b0>
 80114e8:	220a      	movs	r2, #10
 80114ea:	e7dd      	b.n	80114a8 <__ssvfiscanf_r+0x1d0>
 80114ec:	2300      	movs	r3, #0
 80114ee:	9342      	str	r3, [sp, #264]	; 0x108
 80114f0:	2303      	movs	r3, #3
 80114f2:	e7de      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 80114f4:	2308      	movs	r3, #8
 80114f6:	9342      	str	r3, [sp, #264]	; 0x108
 80114f8:	2304      	movs	r3, #4
 80114fa:	e7da      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 80114fc:	4629      	mov	r1, r5
 80114fe:	4640      	mov	r0, r8
 8011500:	f000 f9de 	bl	80118c0 <__sccl>
 8011504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801150a:	9341      	str	r3, [sp, #260]	; 0x104
 801150c:	4605      	mov	r5, r0
 801150e:	2301      	movs	r3, #1
 8011510:	e7cf      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 8011512:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011518:	9341      	str	r3, [sp, #260]	; 0x104
 801151a:	2300      	movs	r3, #0
 801151c:	e7c9      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 801151e:	2302      	movs	r3, #2
 8011520:	e7c7      	b.n	80114b2 <__ssvfiscanf_r+0x1da>
 8011522:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011524:	06c3      	lsls	r3, r0, #27
 8011526:	f53f aefe 	bmi.w	8011326 <__ssvfiscanf_r+0x4e>
 801152a:	9b00      	ldr	r3, [sp, #0]
 801152c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801152e:	1d19      	adds	r1, r3, #4
 8011530:	9100      	str	r1, [sp, #0]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f010 0f01 	tst.w	r0, #1
 8011538:	bf14      	ite	ne
 801153a:	801a      	strhne	r2, [r3, #0]
 801153c:	601a      	streq	r2, [r3, #0]
 801153e:	e6f2      	b.n	8011326 <__ssvfiscanf_r+0x4e>
 8011540:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011542:	4621      	mov	r1, r4
 8011544:	4630      	mov	r0, r6
 8011546:	4798      	blx	r3
 8011548:	2800      	cmp	r0, #0
 801154a:	d0b6      	beq.n	80114ba <__ssvfiscanf_r+0x1e2>
 801154c:	e79c      	b.n	8011488 <__ssvfiscanf_r+0x1b0>
 801154e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011550:	3201      	adds	r2, #1
 8011552:	9245      	str	r2, [sp, #276]	; 0x114
 8011554:	6862      	ldr	r2, [r4, #4]
 8011556:	3a01      	subs	r2, #1
 8011558:	2a00      	cmp	r2, #0
 801155a:	6062      	str	r2, [r4, #4]
 801155c:	dd02      	ble.n	8011564 <__ssvfiscanf_r+0x28c>
 801155e:	3301      	adds	r3, #1
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	e7ad      	b.n	80114c0 <__ssvfiscanf_r+0x1e8>
 8011564:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011566:	4621      	mov	r1, r4
 8011568:	4630      	mov	r0, r6
 801156a:	4798      	blx	r3
 801156c:	2800      	cmp	r0, #0
 801156e:	d0a7      	beq.n	80114c0 <__ssvfiscanf_r+0x1e8>
 8011570:	e78a      	b.n	8011488 <__ssvfiscanf_r+0x1b0>
 8011572:	2b04      	cmp	r3, #4
 8011574:	dc0e      	bgt.n	8011594 <__ssvfiscanf_r+0x2bc>
 8011576:	466b      	mov	r3, sp
 8011578:	4622      	mov	r2, r4
 801157a:	a941      	add	r1, sp, #260	; 0x104
 801157c:	4630      	mov	r0, r6
 801157e:	f000 f87d 	bl	801167c <_scanf_i>
 8011582:	e7ab      	b.n	80114dc <__ssvfiscanf_r+0x204>
 8011584:	08011225 	.word	0x08011225
 8011588:	0801129f 	.word	0x0801129f
 801158c:	080130d9 	.word	0x080130d9
 8011590:	08013442 	.word	0x08013442
 8011594:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <__ssvfiscanf_r+0x2ec>)
 8011596:	2b00      	cmp	r3, #0
 8011598:	f43f aec5 	beq.w	8011326 <__ssvfiscanf_r+0x4e>
 801159c:	466b      	mov	r3, sp
 801159e:	4622      	mov	r2, r4
 80115a0:	a941      	add	r1, sp, #260	; 0x104
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7fc fb84 	bl	800dcb0 <_scanf_float>
 80115a8:	e798      	b.n	80114dc <__ssvfiscanf_r+0x204>
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80115b0:	bf18      	it	ne
 80115b2:	f04f 30ff 	movne.w	r0, #4294967295
 80115b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80115ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80115c0:	e7f9      	b.n	80115b6 <__ssvfiscanf_r+0x2de>
 80115c2:	bf00      	nop
 80115c4:	0800dcb1 	.word	0x0800dcb1

080115c8 <_scanf_chars>:
 80115c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115cc:	4615      	mov	r5, r2
 80115ce:	688a      	ldr	r2, [r1, #8]
 80115d0:	4680      	mov	r8, r0
 80115d2:	460c      	mov	r4, r1
 80115d4:	b932      	cbnz	r2, 80115e4 <_scanf_chars+0x1c>
 80115d6:	698a      	ldr	r2, [r1, #24]
 80115d8:	2a00      	cmp	r2, #0
 80115da:	bf0c      	ite	eq
 80115dc:	2201      	moveq	r2, #1
 80115de:	f04f 32ff 	movne.w	r2, #4294967295
 80115e2:	608a      	str	r2, [r1, #8]
 80115e4:	6822      	ldr	r2, [r4, #0]
 80115e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011678 <_scanf_chars+0xb0>
 80115ea:	06d1      	lsls	r1, r2, #27
 80115ec:	bf5f      	itttt	pl
 80115ee:	681a      	ldrpl	r2, [r3, #0]
 80115f0:	1d11      	addpl	r1, r2, #4
 80115f2:	6019      	strpl	r1, [r3, #0]
 80115f4:	6816      	ldrpl	r6, [r2, #0]
 80115f6:	2700      	movs	r7, #0
 80115f8:	69a0      	ldr	r0, [r4, #24]
 80115fa:	b188      	cbz	r0, 8011620 <_scanf_chars+0x58>
 80115fc:	2801      	cmp	r0, #1
 80115fe:	d107      	bne.n	8011610 <_scanf_chars+0x48>
 8011600:	682a      	ldr	r2, [r5, #0]
 8011602:	7811      	ldrb	r1, [r2, #0]
 8011604:	6962      	ldr	r2, [r4, #20]
 8011606:	5c52      	ldrb	r2, [r2, r1]
 8011608:	b952      	cbnz	r2, 8011620 <_scanf_chars+0x58>
 801160a:	2f00      	cmp	r7, #0
 801160c:	d031      	beq.n	8011672 <_scanf_chars+0xaa>
 801160e:	e022      	b.n	8011656 <_scanf_chars+0x8e>
 8011610:	2802      	cmp	r0, #2
 8011612:	d120      	bne.n	8011656 <_scanf_chars+0x8e>
 8011614:	682b      	ldr	r3, [r5, #0]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	f813 3009 	ldrb.w	r3, [r3, r9]
 801161c:	071b      	lsls	r3, r3, #28
 801161e:	d41a      	bmi.n	8011656 <_scanf_chars+0x8e>
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	06da      	lsls	r2, r3, #27
 8011624:	bf5e      	ittt	pl
 8011626:	682b      	ldrpl	r3, [r5, #0]
 8011628:	781b      	ldrbpl	r3, [r3, #0]
 801162a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801162e:	682a      	ldr	r2, [r5, #0]
 8011630:	686b      	ldr	r3, [r5, #4]
 8011632:	3201      	adds	r2, #1
 8011634:	602a      	str	r2, [r5, #0]
 8011636:	68a2      	ldr	r2, [r4, #8]
 8011638:	3b01      	subs	r3, #1
 801163a:	3a01      	subs	r2, #1
 801163c:	606b      	str	r3, [r5, #4]
 801163e:	3701      	adds	r7, #1
 8011640:	60a2      	str	r2, [r4, #8]
 8011642:	b142      	cbz	r2, 8011656 <_scanf_chars+0x8e>
 8011644:	2b00      	cmp	r3, #0
 8011646:	dcd7      	bgt.n	80115f8 <_scanf_chars+0x30>
 8011648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801164c:	4629      	mov	r1, r5
 801164e:	4640      	mov	r0, r8
 8011650:	4798      	blx	r3
 8011652:	2800      	cmp	r0, #0
 8011654:	d0d0      	beq.n	80115f8 <_scanf_chars+0x30>
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	f013 0310 	ands.w	r3, r3, #16
 801165c:	d105      	bne.n	801166a <_scanf_chars+0xa2>
 801165e:	68e2      	ldr	r2, [r4, #12]
 8011660:	3201      	adds	r2, #1
 8011662:	60e2      	str	r2, [r4, #12]
 8011664:	69a2      	ldr	r2, [r4, #24]
 8011666:	b102      	cbz	r2, 801166a <_scanf_chars+0xa2>
 8011668:	7033      	strb	r3, [r6, #0]
 801166a:	6923      	ldr	r3, [r4, #16]
 801166c:	443b      	add	r3, r7
 801166e:	6123      	str	r3, [r4, #16]
 8011670:	2000      	movs	r0, #0
 8011672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011676:	bf00      	nop
 8011678:	080130d9 	.word	0x080130d9

0801167c <_scanf_i>:
 801167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	4698      	mov	r8, r3
 8011682:	4b76      	ldr	r3, [pc, #472]	; (801185c <_scanf_i+0x1e0>)
 8011684:	460c      	mov	r4, r1
 8011686:	4682      	mov	sl, r0
 8011688:	4616      	mov	r6, r2
 801168a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801168e:	b087      	sub	sp, #28
 8011690:	ab03      	add	r3, sp, #12
 8011692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011696:	4b72      	ldr	r3, [pc, #456]	; (8011860 <_scanf_i+0x1e4>)
 8011698:	69a1      	ldr	r1, [r4, #24]
 801169a:	4a72      	ldr	r2, [pc, #456]	; (8011864 <_scanf_i+0x1e8>)
 801169c:	2903      	cmp	r1, #3
 801169e:	bf18      	it	ne
 80116a0:	461a      	movne	r2, r3
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	9201      	str	r2, [sp, #4]
 80116a6:	1e5a      	subs	r2, r3, #1
 80116a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80116ac:	bf88      	it	hi
 80116ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80116b2:	4627      	mov	r7, r4
 80116b4:	bf82      	ittt	hi
 80116b6:	eb03 0905 	addhi.w	r9, r3, r5
 80116ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80116be:	60a3      	strhi	r3, [r4, #8]
 80116c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80116c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80116c8:	bf98      	it	ls
 80116ca:	f04f 0900 	movls.w	r9, #0
 80116ce:	6023      	str	r3, [r4, #0]
 80116d0:	463d      	mov	r5, r7
 80116d2:	f04f 0b00 	mov.w	fp, #0
 80116d6:	6831      	ldr	r1, [r6, #0]
 80116d8:	ab03      	add	r3, sp, #12
 80116da:	7809      	ldrb	r1, [r1, #0]
 80116dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80116e0:	2202      	movs	r2, #2
 80116e2:	f7ee fd95 	bl	8000210 <memchr>
 80116e6:	b328      	cbz	r0, 8011734 <_scanf_i+0xb8>
 80116e8:	f1bb 0f01 	cmp.w	fp, #1
 80116ec:	d159      	bne.n	80117a2 <_scanf_i+0x126>
 80116ee:	6862      	ldr	r2, [r4, #4]
 80116f0:	b92a      	cbnz	r2, 80116fe <_scanf_i+0x82>
 80116f2:	6822      	ldr	r2, [r4, #0]
 80116f4:	2308      	movs	r3, #8
 80116f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116fa:	6063      	str	r3, [r4, #4]
 80116fc:	6022      	str	r2, [r4, #0]
 80116fe:	6822      	ldr	r2, [r4, #0]
 8011700:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011704:	6022      	str	r2, [r4, #0]
 8011706:	68a2      	ldr	r2, [r4, #8]
 8011708:	1e51      	subs	r1, r2, #1
 801170a:	60a1      	str	r1, [r4, #8]
 801170c:	b192      	cbz	r2, 8011734 <_scanf_i+0xb8>
 801170e:	6832      	ldr	r2, [r6, #0]
 8011710:	1c51      	adds	r1, r2, #1
 8011712:	6031      	str	r1, [r6, #0]
 8011714:	7812      	ldrb	r2, [r2, #0]
 8011716:	f805 2b01 	strb.w	r2, [r5], #1
 801171a:	6872      	ldr	r2, [r6, #4]
 801171c:	3a01      	subs	r2, #1
 801171e:	2a00      	cmp	r2, #0
 8011720:	6072      	str	r2, [r6, #4]
 8011722:	dc07      	bgt.n	8011734 <_scanf_i+0xb8>
 8011724:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011728:	4631      	mov	r1, r6
 801172a:	4650      	mov	r0, sl
 801172c:	4790      	blx	r2
 801172e:	2800      	cmp	r0, #0
 8011730:	f040 8085 	bne.w	801183e <_scanf_i+0x1c2>
 8011734:	f10b 0b01 	add.w	fp, fp, #1
 8011738:	f1bb 0f03 	cmp.w	fp, #3
 801173c:	d1cb      	bne.n	80116d6 <_scanf_i+0x5a>
 801173e:	6863      	ldr	r3, [r4, #4]
 8011740:	b90b      	cbnz	r3, 8011746 <_scanf_i+0xca>
 8011742:	230a      	movs	r3, #10
 8011744:	6063      	str	r3, [r4, #4]
 8011746:	6863      	ldr	r3, [r4, #4]
 8011748:	4947      	ldr	r1, [pc, #284]	; (8011868 <_scanf_i+0x1ec>)
 801174a:	6960      	ldr	r0, [r4, #20]
 801174c:	1ac9      	subs	r1, r1, r3
 801174e:	f000 f8b7 	bl	80118c0 <__sccl>
 8011752:	f04f 0b00 	mov.w	fp, #0
 8011756:	68a3      	ldr	r3, [r4, #8]
 8011758:	6822      	ldr	r2, [r4, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d03d      	beq.n	80117da <_scanf_i+0x15e>
 801175e:	6831      	ldr	r1, [r6, #0]
 8011760:	6960      	ldr	r0, [r4, #20]
 8011762:	f891 c000 	ldrb.w	ip, [r1]
 8011766:	f810 000c 	ldrb.w	r0, [r0, ip]
 801176a:	2800      	cmp	r0, #0
 801176c:	d035      	beq.n	80117da <_scanf_i+0x15e>
 801176e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011772:	d124      	bne.n	80117be <_scanf_i+0x142>
 8011774:	0510      	lsls	r0, r2, #20
 8011776:	d522      	bpl.n	80117be <_scanf_i+0x142>
 8011778:	f10b 0b01 	add.w	fp, fp, #1
 801177c:	f1b9 0f00 	cmp.w	r9, #0
 8011780:	d003      	beq.n	801178a <_scanf_i+0x10e>
 8011782:	3301      	adds	r3, #1
 8011784:	f109 39ff 	add.w	r9, r9, #4294967295
 8011788:	60a3      	str	r3, [r4, #8]
 801178a:	6873      	ldr	r3, [r6, #4]
 801178c:	3b01      	subs	r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	6073      	str	r3, [r6, #4]
 8011792:	dd1b      	ble.n	80117cc <_scanf_i+0x150>
 8011794:	6833      	ldr	r3, [r6, #0]
 8011796:	3301      	adds	r3, #1
 8011798:	6033      	str	r3, [r6, #0]
 801179a:	68a3      	ldr	r3, [r4, #8]
 801179c:	3b01      	subs	r3, #1
 801179e:	60a3      	str	r3, [r4, #8]
 80117a0:	e7d9      	b.n	8011756 <_scanf_i+0xda>
 80117a2:	f1bb 0f02 	cmp.w	fp, #2
 80117a6:	d1ae      	bne.n	8011706 <_scanf_i+0x8a>
 80117a8:	6822      	ldr	r2, [r4, #0]
 80117aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80117ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80117b2:	d1bf      	bne.n	8011734 <_scanf_i+0xb8>
 80117b4:	2310      	movs	r3, #16
 80117b6:	6063      	str	r3, [r4, #4]
 80117b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80117bc:	e7a2      	b.n	8011704 <_scanf_i+0x88>
 80117be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80117c2:	6022      	str	r2, [r4, #0]
 80117c4:	780b      	ldrb	r3, [r1, #0]
 80117c6:	f805 3b01 	strb.w	r3, [r5], #1
 80117ca:	e7de      	b.n	801178a <_scanf_i+0x10e>
 80117cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80117d0:	4631      	mov	r1, r6
 80117d2:	4650      	mov	r0, sl
 80117d4:	4798      	blx	r3
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d0df      	beq.n	801179a <_scanf_i+0x11e>
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	05db      	lsls	r3, r3, #23
 80117de:	d50d      	bpl.n	80117fc <_scanf_i+0x180>
 80117e0:	42bd      	cmp	r5, r7
 80117e2:	d909      	bls.n	80117f8 <_scanf_i+0x17c>
 80117e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80117e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117ec:	4632      	mov	r2, r6
 80117ee:	4650      	mov	r0, sl
 80117f0:	4798      	blx	r3
 80117f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80117f6:	464d      	mov	r5, r9
 80117f8:	42bd      	cmp	r5, r7
 80117fa:	d02d      	beq.n	8011858 <_scanf_i+0x1dc>
 80117fc:	6822      	ldr	r2, [r4, #0]
 80117fe:	f012 0210 	ands.w	r2, r2, #16
 8011802:	d113      	bne.n	801182c <_scanf_i+0x1b0>
 8011804:	702a      	strb	r2, [r5, #0]
 8011806:	6863      	ldr	r3, [r4, #4]
 8011808:	9e01      	ldr	r6, [sp, #4]
 801180a:	4639      	mov	r1, r7
 801180c:	4650      	mov	r0, sl
 801180e:	47b0      	blx	r6
 8011810:	6821      	ldr	r1, [r4, #0]
 8011812:	f8d8 3000 	ldr.w	r3, [r8]
 8011816:	f011 0f20 	tst.w	r1, #32
 801181a:	d013      	beq.n	8011844 <_scanf_i+0x1c8>
 801181c:	1d1a      	adds	r2, r3, #4
 801181e:	f8c8 2000 	str.w	r2, [r8]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	6018      	str	r0, [r3, #0]
 8011826:	68e3      	ldr	r3, [r4, #12]
 8011828:	3301      	adds	r3, #1
 801182a:	60e3      	str	r3, [r4, #12]
 801182c:	1bed      	subs	r5, r5, r7
 801182e:	44ab      	add	fp, r5
 8011830:	6925      	ldr	r5, [r4, #16]
 8011832:	445d      	add	r5, fp
 8011834:	6125      	str	r5, [r4, #16]
 8011836:	2000      	movs	r0, #0
 8011838:	b007      	add	sp, #28
 801183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801183e:	f04f 0b00 	mov.w	fp, #0
 8011842:	e7ca      	b.n	80117da <_scanf_i+0x15e>
 8011844:	1d1a      	adds	r2, r3, #4
 8011846:	f8c8 2000 	str.w	r2, [r8]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f011 0f01 	tst.w	r1, #1
 8011850:	bf14      	ite	ne
 8011852:	8018      	strhne	r0, [r3, #0]
 8011854:	6018      	streq	r0, [r3, #0]
 8011856:	e7e6      	b.n	8011826 <_scanf_i+0x1aa>
 8011858:	2001      	movs	r0, #1
 801185a:	e7ed      	b.n	8011838 <_scanf_i+0x1bc>
 801185c:	08012d64 	.word	0x08012d64
 8011860:	08011a15 	.word	0x08011a15
 8011864:	0800ef7d 	.word	0x0800ef7d
 8011868:	08013466 	.word	0x08013466

0801186c <_read_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d07      	ldr	r5, [pc, #28]	; (801188c <_read_r+0x20>)
 8011870:	4604      	mov	r4, r0
 8011872:	4608      	mov	r0, r1
 8011874:	4611      	mov	r1, r2
 8011876:	2200      	movs	r2, #0
 8011878:	602a      	str	r2, [r5, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f7f3 fb0e 	bl	8004e9c <_read>
 8011880:	1c43      	adds	r3, r0, #1
 8011882:	d102      	bne.n	801188a <_read_r+0x1e>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	b103      	cbz	r3, 801188a <_read_r+0x1e>
 8011888:	6023      	str	r3, [r4, #0]
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	200050c4 	.word	0x200050c4

08011890 <nan>:
 8011890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011898 <nan+0x8>
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	00000000 	.word	0x00000000
 801189c:	7ff80000 	.word	0x7ff80000

080118a0 <_sbrk_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4d06      	ldr	r5, [pc, #24]	; (80118bc <_sbrk_r+0x1c>)
 80118a4:	2300      	movs	r3, #0
 80118a6:	4604      	mov	r4, r0
 80118a8:	4608      	mov	r0, r1
 80118aa:	602b      	str	r3, [r5, #0]
 80118ac:	f7f3 fb64 	bl	8004f78 <_sbrk>
 80118b0:	1c43      	adds	r3, r0, #1
 80118b2:	d102      	bne.n	80118ba <_sbrk_r+0x1a>
 80118b4:	682b      	ldr	r3, [r5, #0]
 80118b6:	b103      	cbz	r3, 80118ba <_sbrk_r+0x1a>
 80118b8:	6023      	str	r3, [r4, #0]
 80118ba:	bd38      	pop	{r3, r4, r5, pc}
 80118bc:	200050c4 	.word	0x200050c4

080118c0 <__sccl>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	780b      	ldrb	r3, [r1, #0]
 80118c4:	4604      	mov	r4, r0
 80118c6:	2b5e      	cmp	r3, #94	; 0x5e
 80118c8:	bf0b      	itete	eq
 80118ca:	784b      	ldrbeq	r3, [r1, #1]
 80118cc:	1c48      	addne	r0, r1, #1
 80118ce:	1c88      	addeq	r0, r1, #2
 80118d0:	2200      	movne	r2, #0
 80118d2:	bf08      	it	eq
 80118d4:	2201      	moveq	r2, #1
 80118d6:	1e61      	subs	r1, r4, #1
 80118d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80118dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80118e0:	42a9      	cmp	r1, r5
 80118e2:	d1fb      	bne.n	80118dc <__sccl+0x1c>
 80118e4:	b90b      	cbnz	r3, 80118ea <__sccl+0x2a>
 80118e6:	3801      	subs	r0, #1
 80118e8:	bd70      	pop	{r4, r5, r6, pc}
 80118ea:	f082 0201 	eor.w	r2, r2, #1
 80118ee:	54e2      	strb	r2, [r4, r3]
 80118f0:	4605      	mov	r5, r0
 80118f2:	4628      	mov	r0, r5
 80118f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80118f8:	292d      	cmp	r1, #45	; 0x2d
 80118fa:	d006      	beq.n	801190a <__sccl+0x4a>
 80118fc:	295d      	cmp	r1, #93	; 0x5d
 80118fe:	d0f3      	beq.n	80118e8 <__sccl+0x28>
 8011900:	b909      	cbnz	r1, 8011906 <__sccl+0x46>
 8011902:	4628      	mov	r0, r5
 8011904:	e7f0      	b.n	80118e8 <__sccl+0x28>
 8011906:	460b      	mov	r3, r1
 8011908:	e7f1      	b.n	80118ee <__sccl+0x2e>
 801190a:	786e      	ldrb	r6, [r5, #1]
 801190c:	2e5d      	cmp	r6, #93	; 0x5d
 801190e:	d0fa      	beq.n	8011906 <__sccl+0x46>
 8011910:	42b3      	cmp	r3, r6
 8011912:	dcf8      	bgt.n	8011906 <__sccl+0x46>
 8011914:	3502      	adds	r5, #2
 8011916:	4619      	mov	r1, r3
 8011918:	3101      	adds	r1, #1
 801191a:	428e      	cmp	r6, r1
 801191c:	5462      	strb	r2, [r4, r1]
 801191e:	dcfb      	bgt.n	8011918 <__sccl+0x58>
 8011920:	1af1      	subs	r1, r6, r3
 8011922:	3901      	subs	r1, #1
 8011924:	1c58      	adds	r0, r3, #1
 8011926:	42b3      	cmp	r3, r6
 8011928:	bfa8      	it	ge
 801192a:	2100      	movge	r1, #0
 801192c:	1843      	adds	r3, r0, r1
 801192e:	e7e0      	b.n	80118f2 <__sccl+0x32>

08011930 <_strtoul_l.constprop.0>:
 8011930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011934:	4f36      	ldr	r7, [pc, #216]	; (8011a10 <_strtoul_l.constprop.0+0xe0>)
 8011936:	4686      	mov	lr, r0
 8011938:	460d      	mov	r5, r1
 801193a:	4628      	mov	r0, r5
 801193c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011940:	5de6      	ldrb	r6, [r4, r7]
 8011942:	f016 0608 	ands.w	r6, r6, #8
 8011946:	d1f8      	bne.n	801193a <_strtoul_l.constprop.0+0xa>
 8011948:	2c2d      	cmp	r4, #45	; 0x2d
 801194a:	d12f      	bne.n	80119ac <_strtoul_l.constprop.0+0x7c>
 801194c:	782c      	ldrb	r4, [r5, #0]
 801194e:	2601      	movs	r6, #1
 8011950:	1c85      	adds	r5, r0, #2
 8011952:	2b00      	cmp	r3, #0
 8011954:	d057      	beq.n	8011a06 <_strtoul_l.constprop.0+0xd6>
 8011956:	2b10      	cmp	r3, #16
 8011958:	d109      	bne.n	801196e <_strtoul_l.constprop.0+0x3e>
 801195a:	2c30      	cmp	r4, #48	; 0x30
 801195c:	d107      	bne.n	801196e <_strtoul_l.constprop.0+0x3e>
 801195e:	7828      	ldrb	r0, [r5, #0]
 8011960:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011964:	2858      	cmp	r0, #88	; 0x58
 8011966:	d149      	bne.n	80119fc <_strtoul_l.constprop.0+0xcc>
 8011968:	786c      	ldrb	r4, [r5, #1]
 801196a:	2310      	movs	r3, #16
 801196c:	3502      	adds	r5, #2
 801196e:	f04f 38ff 	mov.w	r8, #4294967295
 8011972:	2700      	movs	r7, #0
 8011974:	fbb8 f8f3 	udiv	r8, r8, r3
 8011978:	fb03 f908 	mul.w	r9, r3, r8
 801197c:	ea6f 0909 	mvn.w	r9, r9
 8011980:	4638      	mov	r0, r7
 8011982:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011986:	f1bc 0f09 	cmp.w	ip, #9
 801198a:	d814      	bhi.n	80119b6 <_strtoul_l.constprop.0+0x86>
 801198c:	4664      	mov	r4, ip
 801198e:	42a3      	cmp	r3, r4
 8011990:	dd22      	ble.n	80119d8 <_strtoul_l.constprop.0+0xa8>
 8011992:	2f00      	cmp	r7, #0
 8011994:	db1d      	blt.n	80119d2 <_strtoul_l.constprop.0+0xa2>
 8011996:	4580      	cmp	r8, r0
 8011998:	d31b      	bcc.n	80119d2 <_strtoul_l.constprop.0+0xa2>
 801199a:	d101      	bne.n	80119a0 <_strtoul_l.constprop.0+0x70>
 801199c:	45a1      	cmp	r9, r4
 801199e:	db18      	blt.n	80119d2 <_strtoul_l.constprop.0+0xa2>
 80119a0:	fb00 4003 	mla	r0, r0, r3, r4
 80119a4:	2701      	movs	r7, #1
 80119a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119aa:	e7ea      	b.n	8011982 <_strtoul_l.constprop.0+0x52>
 80119ac:	2c2b      	cmp	r4, #43	; 0x2b
 80119ae:	bf04      	itt	eq
 80119b0:	782c      	ldrbeq	r4, [r5, #0]
 80119b2:	1c85      	addeq	r5, r0, #2
 80119b4:	e7cd      	b.n	8011952 <_strtoul_l.constprop.0+0x22>
 80119b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80119ba:	f1bc 0f19 	cmp.w	ip, #25
 80119be:	d801      	bhi.n	80119c4 <_strtoul_l.constprop.0+0x94>
 80119c0:	3c37      	subs	r4, #55	; 0x37
 80119c2:	e7e4      	b.n	801198e <_strtoul_l.constprop.0+0x5e>
 80119c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80119c8:	f1bc 0f19 	cmp.w	ip, #25
 80119cc:	d804      	bhi.n	80119d8 <_strtoul_l.constprop.0+0xa8>
 80119ce:	3c57      	subs	r4, #87	; 0x57
 80119d0:	e7dd      	b.n	801198e <_strtoul_l.constprop.0+0x5e>
 80119d2:	f04f 37ff 	mov.w	r7, #4294967295
 80119d6:	e7e6      	b.n	80119a6 <_strtoul_l.constprop.0+0x76>
 80119d8:	2f00      	cmp	r7, #0
 80119da:	da07      	bge.n	80119ec <_strtoul_l.constprop.0+0xbc>
 80119dc:	2322      	movs	r3, #34	; 0x22
 80119de:	f8ce 3000 	str.w	r3, [lr]
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295
 80119e6:	b932      	cbnz	r2, 80119f6 <_strtoul_l.constprop.0+0xc6>
 80119e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ec:	b106      	cbz	r6, 80119f0 <_strtoul_l.constprop.0+0xc0>
 80119ee:	4240      	negs	r0, r0
 80119f0:	2a00      	cmp	r2, #0
 80119f2:	d0f9      	beq.n	80119e8 <_strtoul_l.constprop.0+0xb8>
 80119f4:	b107      	cbz	r7, 80119f8 <_strtoul_l.constprop.0+0xc8>
 80119f6:	1e69      	subs	r1, r5, #1
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	e7f5      	b.n	80119e8 <_strtoul_l.constprop.0+0xb8>
 80119fc:	2430      	movs	r4, #48	; 0x30
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1b5      	bne.n	801196e <_strtoul_l.constprop.0+0x3e>
 8011a02:	2308      	movs	r3, #8
 8011a04:	e7b3      	b.n	801196e <_strtoul_l.constprop.0+0x3e>
 8011a06:	2c30      	cmp	r4, #48	; 0x30
 8011a08:	d0a9      	beq.n	801195e <_strtoul_l.constprop.0+0x2e>
 8011a0a:	230a      	movs	r3, #10
 8011a0c:	e7af      	b.n	801196e <_strtoul_l.constprop.0+0x3e>
 8011a0e:	bf00      	nop
 8011a10:	080130d9 	.word	0x080130d9

08011a14 <_strtoul_r>:
 8011a14:	f7ff bf8c 	b.w	8011930 <_strtoul_l.constprop.0>

08011a18 <__submore>:
 8011a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a1c:	460c      	mov	r4, r1
 8011a1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a24:	4299      	cmp	r1, r3
 8011a26:	d11d      	bne.n	8011a64 <__submore+0x4c>
 8011a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a2c:	f7ff fa2a 	bl	8010e84 <_malloc_r>
 8011a30:	b918      	cbnz	r0, 8011a3a <__submore+0x22>
 8011a32:	f04f 30ff 	mov.w	r0, #4294967295
 8011a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8011a40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011a44:	6360      	str	r0, [r4, #52]	; 0x34
 8011a46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011a4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011a4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011a52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011a56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011a5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011a5e:	6020      	str	r0, [r4, #0]
 8011a60:	2000      	movs	r0, #0
 8011a62:	e7e8      	b.n	8011a36 <__submore+0x1e>
 8011a64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011a66:	0077      	lsls	r7, r6, #1
 8011a68:	463a      	mov	r2, r7
 8011a6a:	f000 fa2d 	bl	8011ec8 <_realloc_r>
 8011a6e:	4605      	mov	r5, r0
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d0de      	beq.n	8011a32 <__submore+0x1a>
 8011a74:	eb00 0806 	add.w	r8, r0, r6
 8011a78:	4601      	mov	r1, r0
 8011a7a:	4632      	mov	r2, r6
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	f7fb fc97 	bl	800d3b0 <memcpy>
 8011a82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011a86:	f8c4 8000 	str.w	r8, [r4]
 8011a8a:	e7e9      	b.n	8011a60 <__submore+0x48>

08011a8c <__ascii_wctomb>:
 8011a8c:	b149      	cbz	r1, 8011aa2 <__ascii_wctomb+0x16>
 8011a8e:	2aff      	cmp	r2, #255	; 0xff
 8011a90:	bf85      	ittet	hi
 8011a92:	238a      	movhi	r3, #138	; 0x8a
 8011a94:	6003      	strhi	r3, [r0, #0]
 8011a96:	700a      	strbls	r2, [r1, #0]
 8011a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a9c:	bf98      	it	ls
 8011a9e:	2001      	movls	r0, #1
 8011aa0:	4770      	bx	lr
 8011aa2:	4608      	mov	r0, r1
 8011aa4:	4770      	bx	lr
	...

08011aa8 <__assert_func>:
 8011aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aaa:	4614      	mov	r4, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	4b09      	ldr	r3, [pc, #36]	; (8011ad4 <__assert_func+0x2c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4605      	mov	r5, r0
 8011ab4:	68d8      	ldr	r0, [r3, #12]
 8011ab6:	b14c      	cbz	r4, 8011acc <__assert_func+0x24>
 8011ab8:	4b07      	ldr	r3, [pc, #28]	; (8011ad8 <__assert_func+0x30>)
 8011aba:	9100      	str	r1, [sp, #0]
 8011abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ac0:	4906      	ldr	r1, [pc, #24]	; (8011adc <__assert_func+0x34>)
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f000 f9a6 	bl	8011e14 <fiprintf>
 8011ac8:	f000 fc46 	bl	8012358 <abort>
 8011acc:	4b04      	ldr	r3, [pc, #16]	; (8011ae0 <__assert_func+0x38>)
 8011ace:	461c      	mov	r4, r3
 8011ad0:	e7f3      	b.n	8011aba <__assert_func+0x12>
 8011ad2:	bf00      	nop
 8011ad4:	200000d0 	.word	0x200000d0
 8011ad8:	08013468 	.word	0x08013468
 8011adc:	08013475 	.word	0x08013475
 8011ae0:	080134a3 	.word	0x080134a3

08011ae4 <__sflush_r>:
 8011ae4:	898a      	ldrh	r2, [r1, #12]
 8011ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	4605      	mov	r5, r0
 8011aec:	0710      	lsls	r0, r2, #28
 8011aee:	460c      	mov	r4, r1
 8011af0:	d458      	bmi.n	8011ba4 <__sflush_r+0xc0>
 8011af2:	684b      	ldr	r3, [r1, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	dc05      	bgt.n	8011b04 <__sflush_r+0x20>
 8011af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	dc02      	bgt.n	8011b04 <__sflush_r+0x20>
 8011afe:	2000      	movs	r0, #0
 8011b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b06:	2e00      	cmp	r6, #0
 8011b08:	d0f9      	beq.n	8011afe <__sflush_r+0x1a>
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b10:	682f      	ldr	r7, [r5, #0]
 8011b12:	602b      	str	r3, [r5, #0]
 8011b14:	d032      	beq.n	8011b7c <__sflush_r+0x98>
 8011b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b18:	89a3      	ldrh	r3, [r4, #12]
 8011b1a:	075a      	lsls	r2, r3, #29
 8011b1c:	d505      	bpl.n	8011b2a <__sflush_r+0x46>
 8011b1e:	6863      	ldr	r3, [r4, #4]
 8011b20:	1ac0      	subs	r0, r0, r3
 8011b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b24:	b10b      	cbz	r3, 8011b2a <__sflush_r+0x46>
 8011b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b28:	1ac0      	subs	r0, r0, r3
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b30:	6a21      	ldr	r1, [r4, #32]
 8011b32:	4628      	mov	r0, r5
 8011b34:	47b0      	blx	r6
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	d106      	bne.n	8011b4a <__sflush_r+0x66>
 8011b3c:	6829      	ldr	r1, [r5, #0]
 8011b3e:	291d      	cmp	r1, #29
 8011b40:	d82c      	bhi.n	8011b9c <__sflush_r+0xb8>
 8011b42:	4a2a      	ldr	r2, [pc, #168]	; (8011bec <__sflush_r+0x108>)
 8011b44:	40ca      	lsrs	r2, r1
 8011b46:	07d6      	lsls	r6, r2, #31
 8011b48:	d528      	bpl.n	8011b9c <__sflush_r+0xb8>
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	6062      	str	r2, [r4, #4]
 8011b4e:	04d9      	lsls	r1, r3, #19
 8011b50:	6922      	ldr	r2, [r4, #16]
 8011b52:	6022      	str	r2, [r4, #0]
 8011b54:	d504      	bpl.n	8011b60 <__sflush_r+0x7c>
 8011b56:	1c42      	adds	r2, r0, #1
 8011b58:	d101      	bne.n	8011b5e <__sflush_r+0x7a>
 8011b5a:	682b      	ldr	r3, [r5, #0]
 8011b5c:	b903      	cbnz	r3, 8011b60 <__sflush_r+0x7c>
 8011b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8011b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b62:	602f      	str	r7, [r5, #0]
 8011b64:	2900      	cmp	r1, #0
 8011b66:	d0ca      	beq.n	8011afe <__sflush_r+0x1a>
 8011b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b6c:	4299      	cmp	r1, r3
 8011b6e:	d002      	beq.n	8011b76 <__sflush_r+0x92>
 8011b70:	4628      	mov	r0, r5
 8011b72:	f7ff f91b 	bl	8010dac <_free_r>
 8011b76:	2000      	movs	r0, #0
 8011b78:	6360      	str	r0, [r4, #52]	; 0x34
 8011b7a:	e7c1      	b.n	8011b00 <__sflush_r+0x1c>
 8011b7c:	6a21      	ldr	r1, [r4, #32]
 8011b7e:	2301      	movs	r3, #1
 8011b80:	4628      	mov	r0, r5
 8011b82:	47b0      	blx	r6
 8011b84:	1c41      	adds	r1, r0, #1
 8011b86:	d1c7      	bne.n	8011b18 <__sflush_r+0x34>
 8011b88:	682b      	ldr	r3, [r5, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d0c4      	beq.n	8011b18 <__sflush_r+0x34>
 8011b8e:	2b1d      	cmp	r3, #29
 8011b90:	d001      	beq.n	8011b96 <__sflush_r+0xb2>
 8011b92:	2b16      	cmp	r3, #22
 8011b94:	d101      	bne.n	8011b9a <__sflush_r+0xb6>
 8011b96:	602f      	str	r7, [r5, #0]
 8011b98:	e7b1      	b.n	8011afe <__sflush_r+0x1a>
 8011b9a:	89a3      	ldrh	r3, [r4, #12]
 8011b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba0:	81a3      	strh	r3, [r4, #12]
 8011ba2:	e7ad      	b.n	8011b00 <__sflush_r+0x1c>
 8011ba4:	690f      	ldr	r7, [r1, #16]
 8011ba6:	2f00      	cmp	r7, #0
 8011ba8:	d0a9      	beq.n	8011afe <__sflush_r+0x1a>
 8011baa:	0793      	lsls	r3, r2, #30
 8011bac:	680e      	ldr	r6, [r1, #0]
 8011bae:	bf08      	it	eq
 8011bb0:	694b      	ldreq	r3, [r1, #20]
 8011bb2:	600f      	str	r7, [r1, #0]
 8011bb4:	bf18      	it	ne
 8011bb6:	2300      	movne	r3, #0
 8011bb8:	eba6 0807 	sub.w	r8, r6, r7
 8011bbc:	608b      	str	r3, [r1, #8]
 8011bbe:	f1b8 0f00 	cmp.w	r8, #0
 8011bc2:	dd9c      	ble.n	8011afe <__sflush_r+0x1a>
 8011bc4:	6a21      	ldr	r1, [r4, #32]
 8011bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bc8:	4643      	mov	r3, r8
 8011bca:	463a      	mov	r2, r7
 8011bcc:	4628      	mov	r0, r5
 8011bce:	47b0      	blx	r6
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	dc06      	bgt.n	8011be2 <__sflush_r+0xfe>
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bda:	81a3      	strh	r3, [r4, #12]
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	e78e      	b.n	8011b00 <__sflush_r+0x1c>
 8011be2:	4407      	add	r7, r0
 8011be4:	eba8 0800 	sub.w	r8, r8, r0
 8011be8:	e7e9      	b.n	8011bbe <__sflush_r+0xda>
 8011bea:	bf00      	nop
 8011bec:	20400001 	.word	0x20400001

08011bf0 <_fflush_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	690b      	ldr	r3, [r1, #16]
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	b913      	cbnz	r3, 8011c00 <_fflush_r+0x10>
 8011bfa:	2500      	movs	r5, #0
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	bd38      	pop	{r3, r4, r5, pc}
 8011c00:	b118      	cbz	r0, 8011c0a <_fflush_r+0x1a>
 8011c02:	6983      	ldr	r3, [r0, #24]
 8011c04:	b90b      	cbnz	r3, 8011c0a <_fflush_r+0x1a>
 8011c06:	f000 f887 	bl	8011d18 <__sinit>
 8011c0a:	4b14      	ldr	r3, [pc, #80]	; (8011c5c <_fflush_r+0x6c>)
 8011c0c:	429c      	cmp	r4, r3
 8011c0e:	d11b      	bne.n	8011c48 <_fflush_r+0x58>
 8011c10:	686c      	ldr	r4, [r5, #4]
 8011c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d0ef      	beq.n	8011bfa <_fflush_r+0xa>
 8011c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c1c:	07d0      	lsls	r0, r2, #31
 8011c1e:	d404      	bmi.n	8011c2a <_fflush_r+0x3a>
 8011c20:	0599      	lsls	r1, r3, #22
 8011c22:	d402      	bmi.n	8011c2a <_fflush_r+0x3a>
 8011c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c26:	f000 f927 	bl	8011e78 <__retarget_lock_acquire_recursive>
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	f7ff ff59 	bl	8011ae4 <__sflush_r>
 8011c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c34:	07da      	lsls	r2, r3, #31
 8011c36:	4605      	mov	r5, r0
 8011c38:	d4e0      	bmi.n	8011bfc <_fflush_r+0xc>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	059b      	lsls	r3, r3, #22
 8011c3e:	d4dd      	bmi.n	8011bfc <_fflush_r+0xc>
 8011c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c42:	f000 f91a 	bl	8011e7a <__retarget_lock_release_recursive>
 8011c46:	e7d9      	b.n	8011bfc <_fflush_r+0xc>
 8011c48:	4b05      	ldr	r3, [pc, #20]	; (8011c60 <_fflush_r+0x70>)
 8011c4a:	429c      	cmp	r4, r3
 8011c4c:	d101      	bne.n	8011c52 <_fflush_r+0x62>
 8011c4e:	68ac      	ldr	r4, [r5, #8]
 8011c50:	e7df      	b.n	8011c12 <_fflush_r+0x22>
 8011c52:	4b04      	ldr	r3, [pc, #16]	; (8011c64 <_fflush_r+0x74>)
 8011c54:	429c      	cmp	r4, r3
 8011c56:	bf08      	it	eq
 8011c58:	68ec      	ldreq	r4, [r5, #12]
 8011c5a:	e7da      	b.n	8011c12 <_fflush_r+0x22>
 8011c5c:	080134c4 	.word	0x080134c4
 8011c60:	080134e4 	.word	0x080134e4
 8011c64:	080134a4 	.word	0x080134a4

08011c68 <std>:
 8011c68:	2300      	movs	r3, #0
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c76:	6083      	str	r3, [r0, #8]
 8011c78:	8181      	strh	r1, [r0, #12]
 8011c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8011c7c:	81c2      	strh	r2, [r0, #14]
 8011c7e:	6183      	str	r3, [r0, #24]
 8011c80:	4619      	mov	r1, r3
 8011c82:	2208      	movs	r2, #8
 8011c84:	305c      	adds	r0, #92	; 0x5c
 8011c86:	f7fb fba1 	bl	800d3cc <memset>
 8011c8a:	4b05      	ldr	r3, [pc, #20]	; (8011ca0 <std+0x38>)
 8011c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011c8e:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <std+0x3c>)
 8011c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c92:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <std+0x40>)
 8011c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c96:	4b05      	ldr	r3, [pc, #20]	; (8011cac <std+0x44>)
 8011c98:	6224      	str	r4, [r4, #32]
 8011c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8011c9c:	bd10      	pop	{r4, pc}
 8011c9e:	bf00      	nop
 8011ca0:	0800e175 	.word	0x0800e175
 8011ca4:	0800e19b 	.word	0x0800e19b
 8011ca8:	0800e1d3 	.word	0x0800e1d3
 8011cac:	0800e1f7 	.word	0x0800e1f7

08011cb0 <_cleanup_r>:
 8011cb0:	4901      	ldr	r1, [pc, #4]	; (8011cb8 <_cleanup_r+0x8>)
 8011cb2:	f000 b8c1 	b.w	8011e38 <_fwalk_reent>
 8011cb6:	bf00      	nop
 8011cb8:	08011bf1 	.word	0x08011bf1

08011cbc <__sfmoreglue>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	2268      	movs	r2, #104	; 0x68
 8011cc0:	1e4d      	subs	r5, r1, #1
 8011cc2:	4355      	muls	r5, r2
 8011cc4:	460e      	mov	r6, r1
 8011cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011cca:	f7ff f8db 	bl	8010e84 <_malloc_r>
 8011cce:	4604      	mov	r4, r0
 8011cd0:	b140      	cbz	r0, 8011ce4 <__sfmoreglue+0x28>
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8011cd8:	300c      	adds	r0, #12
 8011cda:	60a0      	str	r0, [r4, #8]
 8011cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ce0:	f7fb fb74 	bl	800d3cc <memset>
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}

08011ce8 <__sfp_lock_acquire>:
 8011ce8:	4801      	ldr	r0, [pc, #4]	; (8011cf0 <__sfp_lock_acquire+0x8>)
 8011cea:	f000 b8c5 	b.w	8011e78 <__retarget_lock_acquire_recursive>
 8011cee:	bf00      	nop
 8011cf0:	200050c9 	.word	0x200050c9

08011cf4 <__sfp_lock_release>:
 8011cf4:	4801      	ldr	r0, [pc, #4]	; (8011cfc <__sfp_lock_release+0x8>)
 8011cf6:	f000 b8c0 	b.w	8011e7a <__retarget_lock_release_recursive>
 8011cfa:	bf00      	nop
 8011cfc:	200050c9 	.word	0x200050c9

08011d00 <__sinit_lock_acquire>:
 8011d00:	4801      	ldr	r0, [pc, #4]	; (8011d08 <__sinit_lock_acquire+0x8>)
 8011d02:	f000 b8b9 	b.w	8011e78 <__retarget_lock_acquire_recursive>
 8011d06:	bf00      	nop
 8011d08:	200050ca 	.word	0x200050ca

08011d0c <__sinit_lock_release>:
 8011d0c:	4801      	ldr	r0, [pc, #4]	; (8011d14 <__sinit_lock_release+0x8>)
 8011d0e:	f000 b8b4 	b.w	8011e7a <__retarget_lock_release_recursive>
 8011d12:	bf00      	nop
 8011d14:	200050ca 	.word	0x200050ca

08011d18 <__sinit>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	f7ff fff0 	bl	8011d00 <__sinit_lock_acquire>
 8011d20:	69a3      	ldr	r3, [r4, #24]
 8011d22:	b11b      	cbz	r3, 8011d2c <__sinit+0x14>
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f7ff bff0 	b.w	8011d0c <__sinit_lock_release>
 8011d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d30:	6523      	str	r3, [r4, #80]	; 0x50
 8011d32:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <__sinit+0x68>)
 8011d34:	4a13      	ldr	r2, [pc, #76]	; (8011d84 <__sinit+0x6c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d3a:	42a3      	cmp	r3, r4
 8011d3c:	bf04      	itt	eq
 8011d3e:	2301      	moveq	r3, #1
 8011d40:	61a3      	streq	r3, [r4, #24]
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 f820 	bl	8011d88 <__sfp>
 8011d48:	6060      	str	r0, [r4, #4]
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 f81c 	bl	8011d88 <__sfp>
 8011d50:	60a0      	str	r0, [r4, #8]
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 f818 	bl	8011d88 <__sfp>
 8011d58:	2200      	movs	r2, #0
 8011d5a:	60e0      	str	r0, [r4, #12]
 8011d5c:	2104      	movs	r1, #4
 8011d5e:	6860      	ldr	r0, [r4, #4]
 8011d60:	f7ff ff82 	bl	8011c68 <std>
 8011d64:	68a0      	ldr	r0, [r4, #8]
 8011d66:	2201      	movs	r2, #1
 8011d68:	2109      	movs	r1, #9
 8011d6a:	f7ff ff7d 	bl	8011c68 <std>
 8011d6e:	68e0      	ldr	r0, [r4, #12]
 8011d70:	2202      	movs	r2, #2
 8011d72:	2112      	movs	r1, #18
 8011d74:	f7ff ff78 	bl	8011c68 <std>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	61a3      	str	r3, [r4, #24]
 8011d7c:	e7d2      	b.n	8011d24 <__sinit+0xc>
 8011d7e:	bf00      	nop
 8011d80:	0801304c 	.word	0x0801304c
 8011d84:	08011cb1 	.word	0x08011cb1

08011d88 <__sfp>:
 8011d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d8a:	4607      	mov	r7, r0
 8011d8c:	f7ff ffac 	bl	8011ce8 <__sfp_lock_acquire>
 8011d90:	4b1e      	ldr	r3, [pc, #120]	; (8011e0c <__sfp+0x84>)
 8011d92:	681e      	ldr	r6, [r3, #0]
 8011d94:	69b3      	ldr	r3, [r6, #24]
 8011d96:	b913      	cbnz	r3, 8011d9e <__sfp+0x16>
 8011d98:	4630      	mov	r0, r6
 8011d9a:	f7ff ffbd 	bl	8011d18 <__sinit>
 8011d9e:	3648      	adds	r6, #72	; 0x48
 8011da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	d503      	bpl.n	8011db0 <__sfp+0x28>
 8011da8:	6833      	ldr	r3, [r6, #0]
 8011daa:	b30b      	cbz	r3, 8011df0 <__sfp+0x68>
 8011dac:	6836      	ldr	r6, [r6, #0]
 8011dae:	e7f7      	b.n	8011da0 <__sfp+0x18>
 8011db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011db4:	b9d5      	cbnz	r5, 8011dec <__sfp+0x64>
 8011db6:	4b16      	ldr	r3, [pc, #88]	; (8011e10 <__sfp+0x88>)
 8011db8:	60e3      	str	r3, [r4, #12]
 8011dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8011dc0:	f000 f859 	bl	8011e76 <__retarget_lock_init_recursive>
 8011dc4:	f7ff ff96 	bl	8011cf4 <__sfp_lock_release>
 8011dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011dd0:	6025      	str	r5, [r4, #0]
 8011dd2:	61a5      	str	r5, [r4, #24]
 8011dd4:	2208      	movs	r2, #8
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ddc:	f7fb faf6 	bl	800d3cc <memset>
 8011de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011de8:	4620      	mov	r0, r4
 8011dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dec:	3468      	adds	r4, #104	; 0x68
 8011dee:	e7d9      	b.n	8011da4 <__sfp+0x1c>
 8011df0:	2104      	movs	r1, #4
 8011df2:	4638      	mov	r0, r7
 8011df4:	f7ff ff62 	bl	8011cbc <__sfmoreglue>
 8011df8:	4604      	mov	r4, r0
 8011dfa:	6030      	str	r0, [r6, #0]
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d1d5      	bne.n	8011dac <__sfp+0x24>
 8011e00:	f7ff ff78 	bl	8011cf4 <__sfp_lock_release>
 8011e04:	230c      	movs	r3, #12
 8011e06:	603b      	str	r3, [r7, #0]
 8011e08:	e7ee      	b.n	8011de8 <__sfp+0x60>
 8011e0a:	bf00      	nop
 8011e0c:	0801304c 	.word	0x0801304c
 8011e10:	ffff0001 	.word	0xffff0001

08011e14 <fiprintf>:
 8011e14:	b40e      	push	{r1, r2, r3}
 8011e16:	b503      	push	{r0, r1, lr}
 8011e18:	4601      	mov	r1, r0
 8011e1a:	ab03      	add	r3, sp, #12
 8011e1c:	4805      	ldr	r0, [pc, #20]	; (8011e34 <fiprintf+0x20>)
 8011e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e22:	6800      	ldr	r0, [r0, #0]
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	f000 f8a7 	bl	8011f78 <_vfiprintf_r>
 8011e2a:	b002      	add	sp, #8
 8011e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e30:	b003      	add	sp, #12
 8011e32:	4770      	bx	lr
 8011e34:	200000d0 	.word	0x200000d0

08011e38 <_fwalk_reent>:
 8011e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	4688      	mov	r8, r1
 8011e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e44:	2700      	movs	r7, #0
 8011e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8011e4e:	d505      	bpl.n	8011e5c <_fwalk_reent+0x24>
 8011e50:	6824      	ldr	r4, [r4, #0]
 8011e52:	2c00      	cmp	r4, #0
 8011e54:	d1f7      	bne.n	8011e46 <_fwalk_reent+0xe>
 8011e56:	4638      	mov	r0, r7
 8011e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e5c:	89ab      	ldrh	r3, [r5, #12]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d907      	bls.n	8011e72 <_fwalk_reent+0x3a>
 8011e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e66:	3301      	adds	r3, #1
 8011e68:	d003      	beq.n	8011e72 <_fwalk_reent+0x3a>
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	47c0      	blx	r8
 8011e70:	4307      	orrs	r7, r0
 8011e72:	3568      	adds	r5, #104	; 0x68
 8011e74:	e7e9      	b.n	8011e4a <_fwalk_reent+0x12>

08011e76 <__retarget_lock_init_recursive>:
 8011e76:	4770      	bx	lr

08011e78 <__retarget_lock_acquire_recursive>:
 8011e78:	4770      	bx	lr

08011e7a <__retarget_lock_release_recursive>:
 8011e7a:	4770      	bx	lr

08011e7c <memmove>:
 8011e7c:	4288      	cmp	r0, r1
 8011e7e:	b510      	push	{r4, lr}
 8011e80:	eb01 0402 	add.w	r4, r1, r2
 8011e84:	d902      	bls.n	8011e8c <memmove+0x10>
 8011e86:	4284      	cmp	r4, r0
 8011e88:	4623      	mov	r3, r4
 8011e8a:	d807      	bhi.n	8011e9c <memmove+0x20>
 8011e8c:	1e43      	subs	r3, r0, #1
 8011e8e:	42a1      	cmp	r1, r4
 8011e90:	d008      	beq.n	8011ea4 <memmove+0x28>
 8011e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e9a:	e7f8      	b.n	8011e8e <memmove+0x12>
 8011e9c:	4402      	add	r2, r0
 8011e9e:	4601      	mov	r1, r0
 8011ea0:	428a      	cmp	r2, r1
 8011ea2:	d100      	bne.n	8011ea6 <memmove+0x2a>
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011eae:	e7f7      	b.n	8011ea0 <memmove+0x24>

08011eb0 <__malloc_lock>:
 8011eb0:	4801      	ldr	r0, [pc, #4]	; (8011eb8 <__malloc_lock+0x8>)
 8011eb2:	f7ff bfe1 	b.w	8011e78 <__retarget_lock_acquire_recursive>
 8011eb6:	bf00      	nop
 8011eb8:	200050c8 	.word	0x200050c8

08011ebc <__malloc_unlock>:
 8011ebc:	4801      	ldr	r0, [pc, #4]	; (8011ec4 <__malloc_unlock+0x8>)
 8011ebe:	f7ff bfdc 	b.w	8011e7a <__retarget_lock_release_recursive>
 8011ec2:	bf00      	nop
 8011ec4:	200050c8 	.word	0x200050c8

08011ec8 <_realloc_r>:
 8011ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	4680      	mov	r8, r0
 8011ece:	4614      	mov	r4, r2
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	b921      	cbnz	r1, 8011ede <_realloc_r+0x16>
 8011ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed8:	4611      	mov	r1, r2
 8011eda:	f7fe bfd3 	b.w	8010e84 <_malloc_r>
 8011ede:	b92a      	cbnz	r2, 8011eec <_realloc_r+0x24>
 8011ee0:	f7fe ff64 	bl	8010dac <_free_r>
 8011ee4:	4625      	mov	r5, r4
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eec:	f000 faa0 	bl	8012430 <_malloc_usable_size_r>
 8011ef0:	4284      	cmp	r4, r0
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	d802      	bhi.n	8011efc <_realloc_r+0x34>
 8011ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011efa:	d812      	bhi.n	8011f22 <_realloc_r+0x5a>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4640      	mov	r0, r8
 8011f00:	f7fe ffc0 	bl	8010e84 <_malloc_r>
 8011f04:	4605      	mov	r5, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0ed      	beq.n	8011ee6 <_realloc_r+0x1e>
 8011f0a:	42bc      	cmp	r4, r7
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4631      	mov	r1, r6
 8011f10:	bf28      	it	cs
 8011f12:	463a      	movcs	r2, r7
 8011f14:	f7fb fa4c 	bl	800d3b0 <memcpy>
 8011f18:	4631      	mov	r1, r6
 8011f1a:	4640      	mov	r0, r8
 8011f1c:	f7fe ff46 	bl	8010dac <_free_r>
 8011f20:	e7e1      	b.n	8011ee6 <_realloc_r+0x1e>
 8011f22:	4635      	mov	r5, r6
 8011f24:	e7df      	b.n	8011ee6 <_realloc_r+0x1e>

08011f26 <__sfputc_r>:
 8011f26:	6893      	ldr	r3, [r2, #8]
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	b410      	push	{r4}
 8011f2e:	6093      	str	r3, [r2, #8]
 8011f30:	da08      	bge.n	8011f44 <__sfputc_r+0x1e>
 8011f32:	6994      	ldr	r4, [r2, #24]
 8011f34:	42a3      	cmp	r3, r4
 8011f36:	db01      	blt.n	8011f3c <__sfputc_r+0x16>
 8011f38:	290a      	cmp	r1, #10
 8011f3a:	d103      	bne.n	8011f44 <__sfputc_r+0x1e>
 8011f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f40:	f000 b94a 	b.w	80121d8 <__swbuf_r>
 8011f44:	6813      	ldr	r3, [r2, #0]
 8011f46:	1c58      	adds	r0, r3, #1
 8011f48:	6010      	str	r0, [r2, #0]
 8011f4a:	7019      	strb	r1, [r3, #0]
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f52:	4770      	bx	lr

08011f54 <__sfputs_r>:
 8011f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f56:	4606      	mov	r6, r0
 8011f58:	460f      	mov	r7, r1
 8011f5a:	4614      	mov	r4, r2
 8011f5c:	18d5      	adds	r5, r2, r3
 8011f5e:	42ac      	cmp	r4, r5
 8011f60:	d101      	bne.n	8011f66 <__sfputs_r+0x12>
 8011f62:	2000      	movs	r0, #0
 8011f64:	e007      	b.n	8011f76 <__sfputs_r+0x22>
 8011f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f6a:	463a      	mov	r2, r7
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7ff ffda 	bl	8011f26 <__sfputc_r>
 8011f72:	1c43      	adds	r3, r0, #1
 8011f74:	d1f3      	bne.n	8011f5e <__sfputs_r+0xa>
 8011f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f78 <_vfiprintf_r>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	460d      	mov	r5, r1
 8011f7e:	b09d      	sub	sp, #116	; 0x74
 8011f80:	4614      	mov	r4, r2
 8011f82:	4698      	mov	r8, r3
 8011f84:	4606      	mov	r6, r0
 8011f86:	b118      	cbz	r0, 8011f90 <_vfiprintf_r+0x18>
 8011f88:	6983      	ldr	r3, [r0, #24]
 8011f8a:	b90b      	cbnz	r3, 8011f90 <_vfiprintf_r+0x18>
 8011f8c:	f7ff fec4 	bl	8011d18 <__sinit>
 8011f90:	4b89      	ldr	r3, [pc, #548]	; (80121b8 <_vfiprintf_r+0x240>)
 8011f92:	429d      	cmp	r5, r3
 8011f94:	d11b      	bne.n	8011fce <_vfiprintf_r+0x56>
 8011f96:	6875      	ldr	r5, [r6, #4]
 8011f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f9a:	07d9      	lsls	r1, r3, #31
 8011f9c:	d405      	bmi.n	8011faa <_vfiprintf_r+0x32>
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	059a      	lsls	r2, r3, #22
 8011fa2:	d402      	bmi.n	8011faa <_vfiprintf_r+0x32>
 8011fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fa6:	f7ff ff67 	bl	8011e78 <__retarget_lock_acquire_recursive>
 8011faa:	89ab      	ldrh	r3, [r5, #12]
 8011fac:	071b      	lsls	r3, r3, #28
 8011fae:	d501      	bpl.n	8011fb4 <_vfiprintf_r+0x3c>
 8011fb0:	692b      	ldr	r3, [r5, #16]
 8011fb2:	b9eb      	cbnz	r3, 8011ff0 <_vfiprintf_r+0x78>
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f000 f960 	bl	801227c <__swsetup_r>
 8011fbc:	b1c0      	cbz	r0, 8011ff0 <_vfiprintf_r+0x78>
 8011fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fc0:	07dc      	lsls	r4, r3, #31
 8011fc2:	d50e      	bpl.n	8011fe2 <_vfiprintf_r+0x6a>
 8011fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc8:	b01d      	add	sp, #116	; 0x74
 8011fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fce:	4b7b      	ldr	r3, [pc, #492]	; (80121bc <_vfiprintf_r+0x244>)
 8011fd0:	429d      	cmp	r5, r3
 8011fd2:	d101      	bne.n	8011fd8 <_vfiprintf_r+0x60>
 8011fd4:	68b5      	ldr	r5, [r6, #8]
 8011fd6:	e7df      	b.n	8011f98 <_vfiprintf_r+0x20>
 8011fd8:	4b79      	ldr	r3, [pc, #484]	; (80121c0 <_vfiprintf_r+0x248>)
 8011fda:	429d      	cmp	r5, r3
 8011fdc:	bf08      	it	eq
 8011fde:	68f5      	ldreq	r5, [r6, #12]
 8011fe0:	e7da      	b.n	8011f98 <_vfiprintf_r+0x20>
 8011fe2:	89ab      	ldrh	r3, [r5, #12]
 8011fe4:	0598      	lsls	r0, r3, #22
 8011fe6:	d4ed      	bmi.n	8011fc4 <_vfiprintf_r+0x4c>
 8011fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fea:	f7ff ff46 	bl	8011e7a <__retarget_lock_release_recursive>
 8011fee:	e7e9      	b.n	8011fc4 <_vfiprintf_r+0x4c>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ff4:	2320      	movs	r3, #32
 8011ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ffe:	2330      	movs	r3, #48	; 0x30
 8012000:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121c4 <_vfiprintf_r+0x24c>
 8012004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012008:	f04f 0901 	mov.w	r9, #1
 801200c:	4623      	mov	r3, r4
 801200e:	469a      	mov	sl, r3
 8012010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012014:	b10a      	cbz	r2, 801201a <_vfiprintf_r+0xa2>
 8012016:	2a25      	cmp	r2, #37	; 0x25
 8012018:	d1f9      	bne.n	801200e <_vfiprintf_r+0x96>
 801201a:	ebba 0b04 	subs.w	fp, sl, r4
 801201e:	d00b      	beq.n	8012038 <_vfiprintf_r+0xc0>
 8012020:	465b      	mov	r3, fp
 8012022:	4622      	mov	r2, r4
 8012024:	4629      	mov	r1, r5
 8012026:	4630      	mov	r0, r6
 8012028:	f7ff ff94 	bl	8011f54 <__sfputs_r>
 801202c:	3001      	adds	r0, #1
 801202e:	f000 80aa 	beq.w	8012186 <_vfiprintf_r+0x20e>
 8012032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012034:	445a      	add	r2, fp
 8012036:	9209      	str	r2, [sp, #36]	; 0x24
 8012038:	f89a 3000 	ldrb.w	r3, [sl]
 801203c:	2b00      	cmp	r3, #0
 801203e:	f000 80a2 	beq.w	8012186 <_vfiprintf_r+0x20e>
 8012042:	2300      	movs	r3, #0
 8012044:	f04f 32ff 	mov.w	r2, #4294967295
 8012048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801204c:	f10a 0a01 	add.w	sl, sl, #1
 8012050:	9304      	str	r3, [sp, #16]
 8012052:	9307      	str	r3, [sp, #28]
 8012054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012058:	931a      	str	r3, [sp, #104]	; 0x68
 801205a:	4654      	mov	r4, sl
 801205c:	2205      	movs	r2, #5
 801205e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012062:	4858      	ldr	r0, [pc, #352]	; (80121c4 <_vfiprintf_r+0x24c>)
 8012064:	f7ee f8d4 	bl	8000210 <memchr>
 8012068:	9a04      	ldr	r2, [sp, #16]
 801206a:	b9d8      	cbnz	r0, 80120a4 <_vfiprintf_r+0x12c>
 801206c:	06d1      	lsls	r1, r2, #27
 801206e:	bf44      	itt	mi
 8012070:	2320      	movmi	r3, #32
 8012072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012076:	0713      	lsls	r3, r2, #28
 8012078:	bf44      	itt	mi
 801207a:	232b      	movmi	r3, #43	; 0x2b
 801207c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012080:	f89a 3000 	ldrb.w	r3, [sl]
 8012084:	2b2a      	cmp	r3, #42	; 0x2a
 8012086:	d015      	beq.n	80120b4 <_vfiprintf_r+0x13c>
 8012088:	9a07      	ldr	r2, [sp, #28]
 801208a:	4654      	mov	r4, sl
 801208c:	2000      	movs	r0, #0
 801208e:	f04f 0c0a 	mov.w	ip, #10
 8012092:	4621      	mov	r1, r4
 8012094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012098:	3b30      	subs	r3, #48	; 0x30
 801209a:	2b09      	cmp	r3, #9
 801209c:	d94e      	bls.n	801213c <_vfiprintf_r+0x1c4>
 801209e:	b1b0      	cbz	r0, 80120ce <_vfiprintf_r+0x156>
 80120a0:	9207      	str	r2, [sp, #28]
 80120a2:	e014      	b.n	80120ce <_vfiprintf_r+0x156>
 80120a4:	eba0 0308 	sub.w	r3, r0, r8
 80120a8:	fa09 f303 	lsl.w	r3, r9, r3
 80120ac:	4313      	orrs	r3, r2
 80120ae:	9304      	str	r3, [sp, #16]
 80120b0:	46a2      	mov	sl, r4
 80120b2:	e7d2      	b.n	801205a <_vfiprintf_r+0xe2>
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	1d19      	adds	r1, r3, #4
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	9103      	str	r1, [sp, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bfbb      	ittet	lt
 80120c0:	425b      	neglt	r3, r3
 80120c2:	f042 0202 	orrlt.w	r2, r2, #2
 80120c6:	9307      	strge	r3, [sp, #28]
 80120c8:	9307      	strlt	r3, [sp, #28]
 80120ca:	bfb8      	it	lt
 80120cc:	9204      	strlt	r2, [sp, #16]
 80120ce:	7823      	ldrb	r3, [r4, #0]
 80120d0:	2b2e      	cmp	r3, #46	; 0x2e
 80120d2:	d10c      	bne.n	80120ee <_vfiprintf_r+0x176>
 80120d4:	7863      	ldrb	r3, [r4, #1]
 80120d6:	2b2a      	cmp	r3, #42	; 0x2a
 80120d8:	d135      	bne.n	8012146 <_vfiprintf_r+0x1ce>
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	1d1a      	adds	r2, r3, #4
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	9203      	str	r2, [sp, #12]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	bfb8      	it	lt
 80120e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80120ea:	3402      	adds	r4, #2
 80120ec:	9305      	str	r3, [sp, #20]
 80120ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121d4 <_vfiprintf_r+0x25c>
 80120f2:	7821      	ldrb	r1, [r4, #0]
 80120f4:	2203      	movs	r2, #3
 80120f6:	4650      	mov	r0, sl
 80120f8:	f7ee f88a 	bl	8000210 <memchr>
 80120fc:	b140      	cbz	r0, 8012110 <_vfiprintf_r+0x198>
 80120fe:	2340      	movs	r3, #64	; 0x40
 8012100:	eba0 000a 	sub.w	r0, r0, sl
 8012104:	fa03 f000 	lsl.w	r0, r3, r0
 8012108:	9b04      	ldr	r3, [sp, #16]
 801210a:	4303      	orrs	r3, r0
 801210c:	3401      	adds	r4, #1
 801210e:	9304      	str	r3, [sp, #16]
 8012110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012114:	482c      	ldr	r0, [pc, #176]	; (80121c8 <_vfiprintf_r+0x250>)
 8012116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801211a:	2206      	movs	r2, #6
 801211c:	f7ee f878 	bl	8000210 <memchr>
 8012120:	2800      	cmp	r0, #0
 8012122:	d03f      	beq.n	80121a4 <_vfiprintf_r+0x22c>
 8012124:	4b29      	ldr	r3, [pc, #164]	; (80121cc <_vfiprintf_r+0x254>)
 8012126:	bb1b      	cbnz	r3, 8012170 <_vfiprintf_r+0x1f8>
 8012128:	9b03      	ldr	r3, [sp, #12]
 801212a:	3307      	adds	r3, #7
 801212c:	f023 0307 	bic.w	r3, r3, #7
 8012130:	3308      	adds	r3, #8
 8012132:	9303      	str	r3, [sp, #12]
 8012134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012136:	443b      	add	r3, r7
 8012138:	9309      	str	r3, [sp, #36]	; 0x24
 801213a:	e767      	b.n	801200c <_vfiprintf_r+0x94>
 801213c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012140:	460c      	mov	r4, r1
 8012142:	2001      	movs	r0, #1
 8012144:	e7a5      	b.n	8012092 <_vfiprintf_r+0x11a>
 8012146:	2300      	movs	r3, #0
 8012148:	3401      	adds	r4, #1
 801214a:	9305      	str	r3, [sp, #20]
 801214c:	4619      	mov	r1, r3
 801214e:	f04f 0c0a 	mov.w	ip, #10
 8012152:	4620      	mov	r0, r4
 8012154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012158:	3a30      	subs	r2, #48	; 0x30
 801215a:	2a09      	cmp	r2, #9
 801215c:	d903      	bls.n	8012166 <_vfiprintf_r+0x1ee>
 801215e:	2b00      	cmp	r3, #0
 8012160:	d0c5      	beq.n	80120ee <_vfiprintf_r+0x176>
 8012162:	9105      	str	r1, [sp, #20]
 8012164:	e7c3      	b.n	80120ee <_vfiprintf_r+0x176>
 8012166:	fb0c 2101 	mla	r1, ip, r1, r2
 801216a:	4604      	mov	r4, r0
 801216c:	2301      	movs	r3, #1
 801216e:	e7f0      	b.n	8012152 <_vfiprintf_r+0x1da>
 8012170:	ab03      	add	r3, sp, #12
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	462a      	mov	r2, r5
 8012176:	4b16      	ldr	r3, [pc, #88]	; (80121d0 <_vfiprintf_r+0x258>)
 8012178:	a904      	add	r1, sp, #16
 801217a:	4630      	mov	r0, r6
 801217c:	f7fb f9ce 	bl	800d51c <_printf_float>
 8012180:	4607      	mov	r7, r0
 8012182:	1c78      	adds	r0, r7, #1
 8012184:	d1d6      	bne.n	8012134 <_vfiprintf_r+0x1bc>
 8012186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012188:	07d9      	lsls	r1, r3, #31
 801218a:	d405      	bmi.n	8012198 <_vfiprintf_r+0x220>
 801218c:	89ab      	ldrh	r3, [r5, #12]
 801218e:	059a      	lsls	r2, r3, #22
 8012190:	d402      	bmi.n	8012198 <_vfiprintf_r+0x220>
 8012192:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012194:	f7ff fe71 	bl	8011e7a <__retarget_lock_release_recursive>
 8012198:	89ab      	ldrh	r3, [r5, #12]
 801219a:	065b      	lsls	r3, r3, #25
 801219c:	f53f af12 	bmi.w	8011fc4 <_vfiprintf_r+0x4c>
 80121a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121a2:	e711      	b.n	8011fc8 <_vfiprintf_r+0x50>
 80121a4:	ab03      	add	r3, sp, #12
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	462a      	mov	r2, r5
 80121aa:	4b09      	ldr	r3, [pc, #36]	; (80121d0 <_vfiprintf_r+0x258>)
 80121ac:	a904      	add	r1, sp, #16
 80121ae:	4630      	mov	r0, r6
 80121b0:	f7fb fc58 	bl	800da64 <_printf_i>
 80121b4:	e7e4      	b.n	8012180 <_vfiprintf_r+0x208>
 80121b6:	bf00      	nop
 80121b8:	080134c4 	.word	0x080134c4
 80121bc:	080134e4 	.word	0x080134e4
 80121c0:	080134a4 	.word	0x080134a4
 80121c4:	0801343c 	.word	0x0801343c
 80121c8:	08013446 	.word	0x08013446
 80121cc:	0800d51d 	.word	0x0800d51d
 80121d0:	08011f55 	.word	0x08011f55
 80121d4:	08013442 	.word	0x08013442

080121d8 <__swbuf_r>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	460e      	mov	r6, r1
 80121dc:	4614      	mov	r4, r2
 80121de:	4605      	mov	r5, r0
 80121e0:	b118      	cbz	r0, 80121ea <__swbuf_r+0x12>
 80121e2:	6983      	ldr	r3, [r0, #24]
 80121e4:	b90b      	cbnz	r3, 80121ea <__swbuf_r+0x12>
 80121e6:	f7ff fd97 	bl	8011d18 <__sinit>
 80121ea:	4b21      	ldr	r3, [pc, #132]	; (8012270 <__swbuf_r+0x98>)
 80121ec:	429c      	cmp	r4, r3
 80121ee:	d12b      	bne.n	8012248 <__swbuf_r+0x70>
 80121f0:	686c      	ldr	r4, [r5, #4]
 80121f2:	69a3      	ldr	r3, [r4, #24]
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	071a      	lsls	r2, r3, #28
 80121fa:	d52f      	bpl.n	801225c <__swbuf_r+0x84>
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	b36b      	cbz	r3, 801225c <__swbuf_r+0x84>
 8012200:	6923      	ldr	r3, [r4, #16]
 8012202:	6820      	ldr	r0, [r4, #0]
 8012204:	1ac0      	subs	r0, r0, r3
 8012206:	6963      	ldr	r3, [r4, #20]
 8012208:	b2f6      	uxtb	r6, r6
 801220a:	4283      	cmp	r3, r0
 801220c:	4637      	mov	r7, r6
 801220e:	dc04      	bgt.n	801221a <__swbuf_r+0x42>
 8012210:	4621      	mov	r1, r4
 8012212:	4628      	mov	r0, r5
 8012214:	f7ff fcec 	bl	8011bf0 <_fflush_r>
 8012218:	bb30      	cbnz	r0, 8012268 <__swbuf_r+0x90>
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	3b01      	subs	r3, #1
 801221e:	60a3      	str	r3, [r4, #8]
 8012220:	6823      	ldr	r3, [r4, #0]
 8012222:	1c5a      	adds	r2, r3, #1
 8012224:	6022      	str	r2, [r4, #0]
 8012226:	701e      	strb	r6, [r3, #0]
 8012228:	6963      	ldr	r3, [r4, #20]
 801222a:	3001      	adds	r0, #1
 801222c:	4283      	cmp	r3, r0
 801222e:	d004      	beq.n	801223a <__swbuf_r+0x62>
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	07db      	lsls	r3, r3, #31
 8012234:	d506      	bpl.n	8012244 <__swbuf_r+0x6c>
 8012236:	2e0a      	cmp	r6, #10
 8012238:	d104      	bne.n	8012244 <__swbuf_r+0x6c>
 801223a:	4621      	mov	r1, r4
 801223c:	4628      	mov	r0, r5
 801223e:	f7ff fcd7 	bl	8011bf0 <_fflush_r>
 8012242:	b988      	cbnz	r0, 8012268 <__swbuf_r+0x90>
 8012244:	4638      	mov	r0, r7
 8012246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012248:	4b0a      	ldr	r3, [pc, #40]	; (8012274 <__swbuf_r+0x9c>)
 801224a:	429c      	cmp	r4, r3
 801224c:	d101      	bne.n	8012252 <__swbuf_r+0x7a>
 801224e:	68ac      	ldr	r4, [r5, #8]
 8012250:	e7cf      	b.n	80121f2 <__swbuf_r+0x1a>
 8012252:	4b09      	ldr	r3, [pc, #36]	; (8012278 <__swbuf_r+0xa0>)
 8012254:	429c      	cmp	r4, r3
 8012256:	bf08      	it	eq
 8012258:	68ec      	ldreq	r4, [r5, #12]
 801225a:	e7ca      	b.n	80121f2 <__swbuf_r+0x1a>
 801225c:	4621      	mov	r1, r4
 801225e:	4628      	mov	r0, r5
 8012260:	f000 f80c 	bl	801227c <__swsetup_r>
 8012264:	2800      	cmp	r0, #0
 8012266:	d0cb      	beq.n	8012200 <__swbuf_r+0x28>
 8012268:	f04f 37ff 	mov.w	r7, #4294967295
 801226c:	e7ea      	b.n	8012244 <__swbuf_r+0x6c>
 801226e:	bf00      	nop
 8012270:	080134c4 	.word	0x080134c4
 8012274:	080134e4 	.word	0x080134e4
 8012278:	080134a4 	.word	0x080134a4

0801227c <__swsetup_r>:
 801227c:	4b32      	ldr	r3, [pc, #200]	; (8012348 <__swsetup_r+0xcc>)
 801227e:	b570      	push	{r4, r5, r6, lr}
 8012280:	681d      	ldr	r5, [r3, #0]
 8012282:	4606      	mov	r6, r0
 8012284:	460c      	mov	r4, r1
 8012286:	b125      	cbz	r5, 8012292 <__swsetup_r+0x16>
 8012288:	69ab      	ldr	r3, [r5, #24]
 801228a:	b913      	cbnz	r3, 8012292 <__swsetup_r+0x16>
 801228c:	4628      	mov	r0, r5
 801228e:	f7ff fd43 	bl	8011d18 <__sinit>
 8012292:	4b2e      	ldr	r3, [pc, #184]	; (801234c <__swsetup_r+0xd0>)
 8012294:	429c      	cmp	r4, r3
 8012296:	d10f      	bne.n	80122b8 <__swsetup_r+0x3c>
 8012298:	686c      	ldr	r4, [r5, #4]
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122a0:	0719      	lsls	r1, r3, #28
 80122a2:	d42c      	bmi.n	80122fe <__swsetup_r+0x82>
 80122a4:	06dd      	lsls	r5, r3, #27
 80122a6:	d411      	bmi.n	80122cc <__swsetup_r+0x50>
 80122a8:	2309      	movs	r3, #9
 80122aa:	6033      	str	r3, [r6, #0]
 80122ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	f04f 30ff 	mov.w	r0, #4294967295
 80122b6:	e03e      	b.n	8012336 <__swsetup_r+0xba>
 80122b8:	4b25      	ldr	r3, [pc, #148]	; (8012350 <__swsetup_r+0xd4>)
 80122ba:	429c      	cmp	r4, r3
 80122bc:	d101      	bne.n	80122c2 <__swsetup_r+0x46>
 80122be:	68ac      	ldr	r4, [r5, #8]
 80122c0:	e7eb      	b.n	801229a <__swsetup_r+0x1e>
 80122c2:	4b24      	ldr	r3, [pc, #144]	; (8012354 <__swsetup_r+0xd8>)
 80122c4:	429c      	cmp	r4, r3
 80122c6:	bf08      	it	eq
 80122c8:	68ec      	ldreq	r4, [r5, #12]
 80122ca:	e7e6      	b.n	801229a <__swsetup_r+0x1e>
 80122cc:	0758      	lsls	r0, r3, #29
 80122ce:	d512      	bpl.n	80122f6 <__swsetup_r+0x7a>
 80122d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122d2:	b141      	cbz	r1, 80122e6 <__swsetup_r+0x6a>
 80122d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122d8:	4299      	cmp	r1, r3
 80122da:	d002      	beq.n	80122e2 <__swsetup_r+0x66>
 80122dc:	4630      	mov	r0, r6
 80122de:	f7fe fd65 	bl	8010dac <_free_r>
 80122e2:	2300      	movs	r3, #0
 80122e4:	6363      	str	r3, [r4, #52]	; 0x34
 80122e6:	89a3      	ldrh	r3, [r4, #12]
 80122e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122ec:	81a3      	strh	r3, [r4, #12]
 80122ee:	2300      	movs	r3, #0
 80122f0:	6063      	str	r3, [r4, #4]
 80122f2:	6923      	ldr	r3, [r4, #16]
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	89a3      	ldrh	r3, [r4, #12]
 80122f8:	f043 0308 	orr.w	r3, r3, #8
 80122fc:	81a3      	strh	r3, [r4, #12]
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	b94b      	cbnz	r3, 8012316 <__swsetup_r+0x9a>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801230c:	d003      	beq.n	8012316 <__swsetup_r+0x9a>
 801230e:	4621      	mov	r1, r4
 8012310:	4630      	mov	r0, r6
 8012312:	f000 f84d 	bl	80123b0 <__smakebuf_r>
 8012316:	89a0      	ldrh	r0, [r4, #12]
 8012318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801231c:	f010 0301 	ands.w	r3, r0, #1
 8012320:	d00a      	beq.n	8012338 <__swsetup_r+0xbc>
 8012322:	2300      	movs	r3, #0
 8012324:	60a3      	str	r3, [r4, #8]
 8012326:	6963      	ldr	r3, [r4, #20]
 8012328:	425b      	negs	r3, r3
 801232a:	61a3      	str	r3, [r4, #24]
 801232c:	6923      	ldr	r3, [r4, #16]
 801232e:	b943      	cbnz	r3, 8012342 <__swsetup_r+0xc6>
 8012330:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012334:	d1ba      	bne.n	80122ac <__swsetup_r+0x30>
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	0781      	lsls	r1, r0, #30
 801233a:	bf58      	it	pl
 801233c:	6963      	ldrpl	r3, [r4, #20]
 801233e:	60a3      	str	r3, [r4, #8]
 8012340:	e7f4      	b.n	801232c <__swsetup_r+0xb0>
 8012342:	2000      	movs	r0, #0
 8012344:	e7f7      	b.n	8012336 <__swsetup_r+0xba>
 8012346:	bf00      	nop
 8012348:	200000d0 	.word	0x200000d0
 801234c:	080134c4 	.word	0x080134c4
 8012350:	080134e4 	.word	0x080134e4
 8012354:	080134a4 	.word	0x080134a4

08012358 <abort>:
 8012358:	b508      	push	{r3, lr}
 801235a:	2006      	movs	r0, #6
 801235c:	f000 f898 	bl	8012490 <raise>
 8012360:	2001      	movs	r0, #1
 8012362:	f7f2 fd91 	bl	8004e88 <_exit>

08012366 <__swhatbuf_r>:
 8012366:	b570      	push	{r4, r5, r6, lr}
 8012368:	460e      	mov	r6, r1
 801236a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801236e:	2900      	cmp	r1, #0
 8012370:	b096      	sub	sp, #88	; 0x58
 8012372:	4614      	mov	r4, r2
 8012374:	461d      	mov	r5, r3
 8012376:	da08      	bge.n	801238a <__swhatbuf_r+0x24>
 8012378:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801237c:	2200      	movs	r2, #0
 801237e:	602a      	str	r2, [r5, #0]
 8012380:	061a      	lsls	r2, r3, #24
 8012382:	d410      	bmi.n	80123a6 <__swhatbuf_r+0x40>
 8012384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012388:	e00e      	b.n	80123a8 <__swhatbuf_r+0x42>
 801238a:	466a      	mov	r2, sp
 801238c:	f000 f89c 	bl	80124c8 <_fstat_r>
 8012390:	2800      	cmp	r0, #0
 8012392:	dbf1      	blt.n	8012378 <__swhatbuf_r+0x12>
 8012394:	9a01      	ldr	r2, [sp, #4]
 8012396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801239a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801239e:	425a      	negs	r2, r3
 80123a0:	415a      	adcs	r2, r3
 80123a2:	602a      	str	r2, [r5, #0]
 80123a4:	e7ee      	b.n	8012384 <__swhatbuf_r+0x1e>
 80123a6:	2340      	movs	r3, #64	; 0x40
 80123a8:	2000      	movs	r0, #0
 80123aa:	6023      	str	r3, [r4, #0]
 80123ac:	b016      	add	sp, #88	; 0x58
 80123ae:	bd70      	pop	{r4, r5, r6, pc}

080123b0 <__smakebuf_r>:
 80123b0:	898b      	ldrh	r3, [r1, #12]
 80123b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123b4:	079d      	lsls	r5, r3, #30
 80123b6:	4606      	mov	r6, r0
 80123b8:	460c      	mov	r4, r1
 80123ba:	d507      	bpl.n	80123cc <__smakebuf_r+0x1c>
 80123bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123c0:	6023      	str	r3, [r4, #0]
 80123c2:	6123      	str	r3, [r4, #16]
 80123c4:	2301      	movs	r3, #1
 80123c6:	6163      	str	r3, [r4, #20]
 80123c8:	b002      	add	sp, #8
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	ab01      	add	r3, sp, #4
 80123ce:	466a      	mov	r2, sp
 80123d0:	f7ff ffc9 	bl	8012366 <__swhatbuf_r>
 80123d4:	9900      	ldr	r1, [sp, #0]
 80123d6:	4605      	mov	r5, r0
 80123d8:	4630      	mov	r0, r6
 80123da:	f7fe fd53 	bl	8010e84 <_malloc_r>
 80123de:	b948      	cbnz	r0, 80123f4 <__smakebuf_r+0x44>
 80123e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e4:	059a      	lsls	r2, r3, #22
 80123e6:	d4ef      	bmi.n	80123c8 <__smakebuf_r+0x18>
 80123e8:	f023 0303 	bic.w	r3, r3, #3
 80123ec:	f043 0302 	orr.w	r3, r3, #2
 80123f0:	81a3      	strh	r3, [r4, #12]
 80123f2:	e7e3      	b.n	80123bc <__smakebuf_r+0xc>
 80123f4:	4b0d      	ldr	r3, [pc, #52]	; (801242c <__smakebuf_r+0x7c>)
 80123f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80123f8:	89a3      	ldrh	r3, [r4, #12]
 80123fa:	6020      	str	r0, [r4, #0]
 80123fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012400:	81a3      	strh	r3, [r4, #12]
 8012402:	9b00      	ldr	r3, [sp, #0]
 8012404:	6163      	str	r3, [r4, #20]
 8012406:	9b01      	ldr	r3, [sp, #4]
 8012408:	6120      	str	r0, [r4, #16]
 801240a:	b15b      	cbz	r3, 8012424 <__smakebuf_r+0x74>
 801240c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012410:	4630      	mov	r0, r6
 8012412:	f000 f86b 	bl	80124ec <_isatty_r>
 8012416:	b128      	cbz	r0, 8012424 <__smakebuf_r+0x74>
 8012418:	89a3      	ldrh	r3, [r4, #12]
 801241a:	f023 0303 	bic.w	r3, r3, #3
 801241e:	f043 0301 	orr.w	r3, r3, #1
 8012422:	81a3      	strh	r3, [r4, #12]
 8012424:	89a0      	ldrh	r0, [r4, #12]
 8012426:	4305      	orrs	r5, r0
 8012428:	81a5      	strh	r5, [r4, #12]
 801242a:	e7cd      	b.n	80123c8 <__smakebuf_r+0x18>
 801242c:	08011cb1 	.word	0x08011cb1

08012430 <_malloc_usable_size_r>:
 8012430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012434:	1f18      	subs	r0, r3, #4
 8012436:	2b00      	cmp	r3, #0
 8012438:	bfbc      	itt	lt
 801243a:	580b      	ldrlt	r3, [r1, r0]
 801243c:	18c0      	addlt	r0, r0, r3
 801243e:	4770      	bx	lr

08012440 <_raise_r>:
 8012440:	291f      	cmp	r1, #31
 8012442:	b538      	push	{r3, r4, r5, lr}
 8012444:	4604      	mov	r4, r0
 8012446:	460d      	mov	r5, r1
 8012448:	d904      	bls.n	8012454 <_raise_r+0x14>
 801244a:	2316      	movs	r3, #22
 801244c:	6003      	str	r3, [r0, #0]
 801244e:	f04f 30ff 	mov.w	r0, #4294967295
 8012452:	bd38      	pop	{r3, r4, r5, pc}
 8012454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012456:	b112      	cbz	r2, 801245e <_raise_r+0x1e>
 8012458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801245c:	b94b      	cbnz	r3, 8012472 <_raise_r+0x32>
 801245e:	4620      	mov	r0, r4
 8012460:	f000 f830 	bl	80124c4 <_getpid_r>
 8012464:	462a      	mov	r2, r5
 8012466:	4601      	mov	r1, r0
 8012468:	4620      	mov	r0, r4
 801246a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801246e:	f000 b817 	b.w	80124a0 <_kill_r>
 8012472:	2b01      	cmp	r3, #1
 8012474:	d00a      	beq.n	801248c <_raise_r+0x4c>
 8012476:	1c59      	adds	r1, r3, #1
 8012478:	d103      	bne.n	8012482 <_raise_r+0x42>
 801247a:	2316      	movs	r3, #22
 801247c:	6003      	str	r3, [r0, #0]
 801247e:	2001      	movs	r0, #1
 8012480:	e7e7      	b.n	8012452 <_raise_r+0x12>
 8012482:	2400      	movs	r4, #0
 8012484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012488:	4628      	mov	r0, r5
 801248a:	4798      	blx	r3
 801248c:	2000      	movs	r0, #0
 801248e:	e7e0      	b.n	8012452 <_raise_r+0x12>

08012490 <raise>:
 8012490:	4b02      	ldr	r3, [pc, #8]	; (801249c <raise+0xc>)
 8012492:	4601      	mov	r1, r0
 8012494:	6818      	ldr	r0, [r3, #0]
 8012496:	f7ff bfd3 	b.w	8012440 <_raise_r>
 801249a:	bf00      	nop
 801249c:	200000d0 	.word	0x200000d0

080124a0 <_kill_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4d07      	ldr	r5, [pc, #28]	; (80124c0 <_kill_r+0x20>)
 80124a4:	2300      	movs	r3, #0
 80124a6:	4604      	mov	r4, r0
 80124a8:	4608      	mov	r0, r1
 80124aa:	4611      	mov	r1, r2
 80124ac:	602b      	str	r3, [r5, #0]
 80124ae:	f7f2 fcdb 	bl	8004e68 <_kill>
 80124b2:	1c43      	adds	r3, r0, #1
 80124b4:	d102      	bne.n	80124bc <_kill_r+0x1c>
 80124b6:	682b      	ldr	r3, [r5, #0]
 80124b8:	b103      	cbz	r3, 80124bc <_kill_r+0x1c>
 80124ba:	6023      	str	r3, [r4, #0]
 80124bc:	bd38      	pop	{r3, r4, r5, pc}
 80124be:	bf00      	nop
 80124c0:	200050c4 	.word	0x200050c4

080124c4 <_getpid_r>:
 80124c4:	f7f2 bcc8 	b.w	8004e58 <_getpid>

080124c8 <_fstat_r>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	4d07      	ldr	r5, [pc, #28]	; (80124e8 <_fstat_r+0x20>)
 80124cc:	2300      	movs	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	4608      	mov	r0, r1
 80124d2:	4611      	mov	r1, r2
 80124d4:	602b      	str	r3, [r5, #0]
 80124d6:	f7f2 fd26 	bl	8004f26 <_fstat>
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	d102      	bne.n	80124e4 <_fstat_r+0x1c>
 80124de:	682b      	ldr	r3, [r5, #0]
 80124e0:	b103      	cbz	r3, 80124e4 <_fstat_r+0x1c>
 80124e2:	6023      	str	r3, [r4, #0]
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	200050c4 	.word	0x200050c4

080124ec <_isatty_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d06      	ldr	r5, [pc, #24]	; (8012508 <_isatty_r+0x1c>)
 80124f0:	2300      	movs	r3, #0
 80124f2:	4604      	mov	r4, r0
 80124f4:	4608      	mov	r0, r1
 80124f6:	602b      	str	r3, [r5, #0]
 80124f8:	f7f2 fd25 	bl	8004f46 <_isatty>
 80124fc:	1c43      	adds	r3, r0, #1
 80124fe:	d102      	bne.n	8012506 <_isatty_r+0x1a>
 8012500:	682b      	ldr	r3, [r5, #0]
 8012502:	b103      	cbz	r3, 8012506 <_isatty_r+0x1a>
 8012504:	6023      	str	r3, [r4, #0]
 8012506:	bd38      	pop	{r3, r4, r5, pc}
 8012508:	200050c4 	.word	0x200050c4
 801250c:	00000000 	.word	0x00000000

08012510 <atan>:
 8012510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	ec55 4b10 	vmov	r4, r5, d0
 8012518:	4bc3      	ldr	r3, [pc, #780]	; (8012828 <atan+0x318>)
 801251a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801251e:	429e      	cmp	r6, r3
 8012520:	46ab      	mov	fp, r5
 8012522:	dd18      	ble.n	8012556 <atan+0x46>
 8012524:	4bc1      	ldr	r3, [pc, #772]	; (801282c <atan+0x31c>)
 8012526:	429e      	cmp	r6, r3
 8012528:	dc01      	bgt.n	801252e <atan+0x1e>
 801252a:	d109      	bne.n	8012540 <atan+0x30>
 801252c:	b144      	cbz	r4, 8012540 <atan+0x30>
 801252e:	4622      	mov	r2, r4
 8012530:	462b      	mov	r3, r5
 8012532:	4620      	mov	r0, r4
 8012534:	4629      	mov	r1, r5
 8012536:	f7ed fec1 	bl	80002bc <__adddf3>
 801253a:	4604      	mov	r4, r0
 801253c:	460d      	mov	r5, r1
 801253e:	e006      	b.n	801254e <atan+0x3e>
 8012540:	f1bb 0f00 	cmp.w	fp, #0
 8012544:	f300 8131 	bgt.w	80127aa <atan+0x29a>
 8012548:	a59b      	add	r5, pc, #620	; (adr r5, 80127b8 <atan+0x2a8>)
 801254a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801254e:	ec45 4b10 	vmov	d0, r4, r5
 8012552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012556:	4bb6      	ldr	r3, [pc, #728]	; (8012830 <atan+0x320>)
 8012558:	429e      	cmp	r6, r3
 801255a:	dc14      	bgt.n	8012586 <atan+0x76>
 801255c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012560:	429e      	cmp	r6, r3
 8012562:	dc0d      	bgt.n	8012580 <atan+0x70>
 8012564:	a396      	add	r3, pc, #600	; (adr r3, 80127c0 <atan+0x2b0>)
 8012566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256a:	ee10 0a10 	vmov	r0, s0
 801256e:	4629      	mov	r1, r5
 8012570:	f7ed fea4 	bl	80002bc <__adddf3>
 8012574:	4baf      	ldr	r3, [pc, #700]	; (8012834 <atan+0x324>)
 8012576:	2200      	movs	r2, #0
 8012578:	f7ee fae6 	bl	8000b48 <__aeabi_dcmpgt>
 801257c:	2800      	cmp	r0, #0
 801257e:	d1e6      	bne.n	801254e <atan+0x3e>
 8012580:	f04f 3aff 	mov.w	sl, #4294967295
 8012584:	e02b      	b.n	80125de <atan+0xce>
 8012586:	f000 f963 	bl	8012850 <fabs>
 801258a:	4bab      	ldr	r3, [pc, #684]	; (8012838 <atan+0x328>)
 801258c:	429e      	cmp	r6, r3
 801258e:	ec55 4b10 	vmov	r4, r5, d0
 8012592:	f300 80bf 	bgt.w	8012714 <atan+0x204>
 8012596:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801259a:	429e      	cmp	r6, r3
 801259c:	f300 80a0 	bgt.w	80126e0 <atan+0x1d0>
 80125a0:	ee10 2a10 	vmov	r2, s0
 80125a4:	ee10 0a10 	vmov	r0, s0
 80125a8:	462b      	mov	r3, r5
 80125aa:	4629      	mov	r1, r5
 80125ac:	f7ed fe86 	bl	80002bc <__adddf3>
 80125b0:	4ba0      	ldr	r3, [pc, #640]	; (8012834 <atan+0x324>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	f7ed fe80 	bl	80002b8 <__aeabi_dsub>
 80125b8:	2200      	movs	r2, #0
 80125ba:	4606      	mov	r6, r0
 80125bc:	460f      	mov	r7, r1
 80125be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125c2:	4620      	mov	r0, r4
 80125c4:	4629      	mov	r1, r5
 80125c6:	f7ed fe79 	bl	80002bc <__adddf3>
 80125ca:	4602      	mov	r2, r0
 80125cc:	460b      	mov	r3, r1
 80125ce:	4630      	mov	r0, r6
 80125d0:	4639      	mov	r1, r7
 80125d2:	f7ee f953 	bl	800087c <__aeabi_ddiv>
 80125d6:	f04f 0a00 	mov.w	sl, #0
 80125da:	4604      	mov	r4, r0
 80125dc:	460d      	mov	r5, r1
 80125de:	4622      	mov	r2, r4
 80125e0:	462b      	mov	r3, r5
 80125e2:	4620      	mov	r0, r4
 80125e4:	4629      	mov	r1, r5
 80125e6:	f7ee f81f 	bl	8000628 <__aeabi_dmul>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4680      	mov	r8, r0
 80125f0:	4689      	mov	r9, r1
 80125f2:	f7ee f819 	bl	8000628 <__aeabi_dmul>
 80125f6:	a374      	add	r3, pc, #464	; (adr r3, 80127c8 <atan+0x2b8>)
 80125f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	f7ee f812 	bl	8000628 <__aeabi_dmul>
 8012604:	a372      	add	r3, pc, #456	; (adr r3, 80127d0 <atan+0x2c0>)
 8012606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260a:	f7ed fe57 	bl	80002bc <__adddf3>
 801260e:	4632      	mov	r2, r6
 8012610:	463b      	mov	r3, r7
 8012612:	f7ee f809 	bl	8000628 <__aeabi_dmul>
 8012616:	a370      	add	r3, pc, #448	; (adr r3, 80127d8 <atan+0x2c8>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	f7ed fe4e 	bl	80002bc <__adddf3>
 8012620:	4632      	mov	r2, r6
 8012622:	463b      	mov	r3, r7
 8012624:	f7ee f800 	bl	8000628 <__aeabi_dmul>
 8012628:	a36d      	add	r3, pc, #436	; (adr r3, 80127e0 <atan+0x2d0>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	f7ed fe45 	bl	80002bc <__adddf3>
 8012632:	4632      	mov	r2, r6
 8012634:	463b      	mov	r3, r7
 8012636:	f7ed fff7 	bl	8000628 <__aeabi_dmul>
 801263a:	a36b      	add	r3, pc, #428	; (adr r3, 80127e8 <atan+0x2d8>)
 801263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012640:	f7ed fe3c 	bl	80002bc <__adddf3>
 8012644:	4632      	mov	r2, r6
 8012646:	463b      	mov	r3, r7
 8012648:	f7ed ffee 	bl	8000628 <__aeabi_dmul>
 801264c:	a368      	add	r3, pc, #416	; (adr r3, 80127f0 <atan+0x2e0>)
 801264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012652:	f7ed fe33 	bl	80002bc <__adddf3>
 8012656:	4642      	mov	r2, r8
 8012658:	464b      	mov	r3, r9
 801265a:	f7ed ffe5 	bl	8000628 <__aeabi_dmul>
 801265e:	a366      	add	r3, pc, #408	; (adr r3, 80127f8 <atan+0x2e8>)
 8012660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012664:	4680      	mov	r8, r0
 8012666:	4689      	mov	r9, r1
 8012668:	4630      	mov	r0, r6
 801266a:	4639      	mov	r1, r7
 801266c:	f7ed ffdc 	bl	8000628 <__aeabi_dmul>
 8012670:	a363      	add	r3, pc, #396	; (adr r3, 8012800 <atan+0x2f0>)
 8012672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012676:	f7ed fe1f 	bl	80002b8 <__aeabi_dsub>
 801267a:	4632      	mov	r2, r6
 801267c:	463b      	mov	r3, r7
 801267e:	f7ed ffd3 	bl	8000628 <__aeabi_dmul>
 8012682:	a361      	add	r3, pc, #388	; (adr r3, 8012808 <atan+0x2f8>)
 8012684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012688:	f7ed fe16 	bl	80002b8 <__aeabi_dsub>
 801268c:	4632      	mov	r2, r6
 801268e:	463b      	mov	r3, r7
 8012690:	f7ed ffca 	bl	8000628 <__aeabi_dmul>
 8012694:	a35e      	add	r3, pc, #376	; (adr r3, 8012810 <atan+0x300>)
 8012696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269a:	f7ed fe0d 	bl	80002b8 <__aeabi_dsub>
 801269e:	4632      	mov	r2, r6
 80126a0:	463b      	mov	r3, r7
 80126a2:	f7ed ffc1 	bl	8000628 <__aeabi_dmul>
 80126a6:	a35c      	add	r3, pc, #368	; (adr r3, 8012818 <atan+0x308>)
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	f7ed fe04 	bl	80002b8 <__aeabi_dsub>
 80126b0:	4632      	mov	r2, r6
 80126b2:	463b      	mov	r3, r7
 80126b4:	f7ed ffb8 	bl	8000628 <__aeabi_dmul>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	4640      	mov	r0, r8
 80126be:	4649      	mov	r1, r9
 80126c0:	f7ed fdfc 	bl	80002bc <__adddf3>
 80126c4:	4622      	mov	r2, r4
 80126c6:	462b      	mov	r3, r5
 80126c8:	f7ed ffae 	bl	8000628 <__aeabi_dmul>
 80126cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	d14b      	bne.n	801276e <atan+0x25e>
 80126d6:	4620      	mov	r0, r4
 80126d8:	4629      	mov	r1, r5
 80126da:	f7ed fded 	bl	80002b8 <__aeabi_dsub>
 80126de:	e72c      	b.n	801253a <atan+0x2a>
 80126e0:	ee10 0a10 	vmov	r0, s0
 80126e4:	4b53      	ldr	r3, [pc, #332]	; (8012834 <atan+0x324>)
 80126e6:	2200      	movs	r2, #0
 80126e8:	4629      	mov	r1, r5
 80126ea:	f7ed fde5 	bl	80002b8 <__aeabi_dsub>
 80126ee:	4b51      	ldr	r3, [pc, #324]	; (8012834 <atan+0x324>)
 80126f0:	4606      	mov	r6, r0
 80126f2:	460f      	mov	r7, r1
 80126f4:	2200      	movs	r2, #0
 80126f6:	4620      	mov	r0, r4
 80126f8:	4629      	mov	r1, r5
 80126fa:	f7ed fddf 	bl	80002bc <__adddf3>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	4630      	mov	r0, r6
 8012704:	4639      	mov	r1, r7
 8012706:	f7ee f8b9 	bl	800087c <__aeabi_ddiv>
 801270a:	f04f 0a01 	mov.w	sl, #1
 801270e:	4604      	mov	r4, r0
 8012710:	460d      	mov	r5, r1
 8012712:	e764      	b.n	80125de <atan+0xce>
 8012714:	4b49      	ldr	r3, [pc, #292]	; (801283c <atan+0x32c>)
 8012716:	429e      	cmp	r6, r3
 8012718:	da1d      	bge.n	8012756 <atan+0x246>
 801271a:	ee10 0a10 	vmov	r0, s0
 801271e:	4b48      	ldr	r3, [pc, #288]	; (8012840 <atan+0x330>)
 8012720:	2200      	movs	r2, #0
 8012722:	4629      	mov	r1, r5
 8012724:	f7ed fdc8 	bl	80002b8 <__aeabi_dsub>
 8012728:	4b45      	ldr	r3, [pc, #276]	; (8012840 <atan+0x330>)
 801272a:	4606      	mov	r6, r0
 801272c:	460f      	mov	r7, r1
 801272e:	2200      	movs	r2, #0
 8012730:	4620      	mov	r0, r4
 8012732:	4629      	mov	r1, r5
 8012734:	f7ed ff78 	bl	8000628 <__aeabi_dmul>
 8012738:	4b3e      	ldr	r3, [pc, #248]	; (8012834 <atan+0x324>)
 801273a:	2200      	movs	r2, #0
 801273c:	f7ed fdbe 	bl	80002bc <__adddf3>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	4630      	mov	r0, r6
 8012746:	4639      	mov	r1, r7
 8012748:	f7ee f898 	bl	800087c <__aeabi_ddiv>
 801274c:	f04f 0a02 	mov.w	sl, #2
 8012750:	4604      	mov	r4, r0
 8012752:	460d      	mov	r5, r1
 8012754:	e743      	b.n	80125de <atan+0xce>
 8012756:	462b      	mov	r3, r5
 8012758:	ee10 2a10 	vmov	r2, s0
 801275c:	4939      	ldr	r1, [pc, #228]	; (8012844 <atan+0x334>)
 801275e:	2000      	movs	r0, #0
 8012760:	f7ee f88c 	bl	800087c <__aeabi_ddiv>
 8012764:	f04f 0a03 	mov.w	sl, #3
 8012768:	4604      	mov	r4, r0
 801276a:	460d      	mov	r5, r1
 801276c:	e737      	b.n	80125de <atan+0xce>
 801276e:	4b36      	ldr	r3, [pc, #216]	; (8012848 <atan+0x338>)
 8012770:	4e36      	ldr	r6, [pc, #216]	; (801284c <atan+0x33c>)
 8012772:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012776:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801277a:	e9da 2300 	ldrd	r2, r3, [sl]
 801277e:	f7ed fd9b 	bl	80002b8 <__aeabi_dsub>
 8012782:	4622      	mov	r2, r4
 8012784:	462b      	mov	r3, r5
 8012786:	f7ed fd97 	bl	80002b8 <__aeabi_dsub>
 801278a:	4602      	mov	r2, r0
 801278c:	460b      	mov	r3, r1
 801278e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012792:	f7ed fd91 	bl	80002b8 <__aeabi_dsub>
 8012796:	f1bb 0f00 	cmp.w	fp, #0
 801279a:	4604      	mov	r4, r0
 801279c:	460d      	mov	r5, r1
 801279e:	f6bf aed6 	bge.w	801254e <atan+0x3e>
 80127a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127a6:	461d      	mov	r5, r3
 80127a8:	e6d1      	b.n	801254e <atan+0x3e>
 80127aa:	a51d      	add	r5, pc, #116	; (adr r5, 8012820 <atan+0x310>)
 80127ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80127b0:	e6cd      	b.n	801254e <atan+0x3e>
 80127b2:	bf00      	nop
 80127b4:	f3af 8000 	nop.w
 80127b8:	54442d18 	.word	0x54442d18
 80127bc:	bff921fb 	.word	0xbff921fb
 80127c0:	8800759c 	.word	0x8800759c
 80127c4:	7e37e43c 	.word	0x7e37e43c
 80127c8:	e322da11 	.word	0xe322da11
 80127cc:	3f90ad3a 	.word	0x3f90ad3a
 80127d0:	24760deb 	.word	0x24760deb
 80127d4:	3fa97b4b 	.word	0x3fa97b4b
 80127d8:	a0d03d51 	.word	0xa0d03d51
 80127dc:	3fb10d66 	.word	0x3fb10d66
 80127e0:	c54c206e 	.word	0xc54c206e
 80127e4:	3fb745cd 	.word	0x3fb745cd
 80127e8:	920083ff 	.word	0x920083ff
 80127ec:	3fc24924 	.word	0x3fc24924
 80127f0:	5555550d 	.word	0x5555550d
 80127f4:	3fd55555 	.word	0x3fd55555
 80127f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80127fc:	bfa2b444 	.word	0xbfa2b444
 8012800:	52defd9a 	.word	0x52defd9a
 8012804:	3fadde2d 	.word	0x3fadde2d
 8012808:	af749a6d 	.word	0xaf749a6d
 801280c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012810:	fe231671 	.word	0xfe231671
 8012814:	3fbc71c6 	.word	0x3fbc71c6
 8012818:	9998ebc4 	.word	0x9998ebc4
 801281c:	3fc99999 	.word	0x3fc99999
 8012820:	54442d18 	.word	0x54442d18
 8012824:	3ff921fb 	.word	0x3ff921fb
 8012828:	440fffff 	.word	0x440fffff
 801282c:	7ff00000 	.word	0x7ff00000
 8012830:	3fdbffff 	.word	0x3fdbffff
 8012834:	3ff00000 	.word	0x3ff00000
 8012838:	3ff2ffff 	.word	0x3ff2ffff
 801283c:	40038000 	.word	0x40038000
 8012840:	3ff80000 	.word	0x3ff80000
 8012844:	bff00000 	.word	0xbff00000
 8012848:	08013528 	.word	0x08013528
 801284c:	08013508 	.word	0x08013508

08012850 <fabs>:
 8012850:	ec51 0b10 	vmov	r0, r1, d0
 8012854:	ee10 2a10 	vmov	r2, s0
 8012858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801285c:	ec43 2b10 	vmov	d0, r2, r3
 8012860:	4770      	bx	lr

08012862 <atan2>:
 8012862:	f000 b82d 	b.w	80128c0 <__ieee754_atan2>

08012866 <sqrt>:
 8012866:	b538      	push	{r3, r4, r5, lr}
 8012868:	ed2d 8b02 	vpush	{d8}
 801286c:	ec55 4b10 	vmov	r4, r5, d0
 8012870:	f000 f8f0 	bl	8012a54 <__ieee754_sqrt>
 8012874:	4622      	mov	r2, r4
 8012876:	462b      	mov	r3, r5
 8012878:	4620      	mov	r0, r4
 801287a:	4629      	mov	r1, r5
 801287c:	eeb0 8a40 	vmov.f32	s16, s0
 8012880:	eef0 8a60 	vmov.f32	s17, s1
 8012884:	f7ee f96a 	bl	8000b5c <__aeabi_dcmpun>
 8012888:	b990      	cbnz	r0, 80128b0 <sqrt+0x4a>
 801288a:	2200      	movs	r2, #0
 801288c:	2300      	movs	r3, #0
 801288e:	4620      	mov	r0, r4
 8012890:	4629      	mov	r1, r5
 8012892:	f7ee f93b 	bl	8000b0c <__aeabi_dcmplt>
 8012896:	b158      	cbz	r0, 80128b0 <sqrt+0x4a>
 8012898:	f7fa fd60 	bl	800d35c <__errno>
 801289c:	2321      	movs	r3, #33	; 0x21
 801289e:	6003      	str	r3, [r0, #0]
 80128a0:	2200      	movs	r2, #0
 80128a2:	2300      	movs	r3, #0
 80128a4:	4610      	mov	r0, r2
 80128a6:	4619      	mov	r1, r3
 80128a8:	f7ed ffe8 	bl	800087c <__aeabi_ddiv>
 80128ac:	ec41 0b18 	vmov	d8, r0, r1
 80128b0:	eeb0 0a48 	vmov.f32	s0, s16
 80128b4:	eef0 0a68 	vmov.f32	s1, s17
 80128b8:	ecbd 8b02 	vpop	{d8}
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080128c0 <__ieee754_atan2>:
 80128c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128c4:	ec57 6b11 	vmov	r6, r7, d1
 80128c8:	4273      	negs	r3, r6
 80128ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8012a50 <__ieee754_atan2+0x190>
 80128ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80128d2:	4333      	orrs	r3, r6
 80128d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80128d8:	4573      	cmp	r3, lr
 80128da:	ec51 0b10 	vmov	r0, r1, d0
 80128de:	ee11 8a10 	vmov	r8, s2
 80128e2:	d80a      	bhi.n	80128fa <__ieee754_atan2+0x3a>
 80128e4:	4244      	negs	r4, r0
 80128e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128ea:	4304      	orrs	r4, r0
 80128ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80128f0:	4574      	cmp	r4, lr
 80128f2:	ee10 9a10 	vmov	r9, s0
 80128f6:	468c      	mov	ip, r1
 80128f8:	d907      	bls.n	801290a <__ieee754_atan2+0x4a>
 80128fa:	4632      	mov	r2, r6
 80128fc:	463b      	mov	r3, r7
 80128fe:	f7ed fcdd 	bl	80002bc <__adddf3>
 8012902:	ec41 0b10 	vmov	d0, r0, r1
 8012906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801290a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801290e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012912:	4334      	orrs	r4, r6
 8012914:	d103      	bne.n	801291e <__ieee754_atan2+0x5e>
 8012916:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801291a:	f7ff bdf9 	b.w	8012510 <atan>
 801291e:	17bc      	asrs	r4, r7, #30
 8012920:	f004 0402 	and.w	r4, r4, #2
 8012924:	ea53 0909 	orrs.w	r9, r3, r9
 8012928:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801292c:	d107      	bne.n	801293e <__ieee754_atan2+0x7e>
 801292e:	2c02      	cmp	r4, #2
 8012930:	d060      	beq.n	80129f4 <__ieee754_atan2+0x134>
 8012932:	2c03      	cmp	r4, #3
 8012934:	d1e5      	bne.n	8012902 <__ieee754_atan2+0x42>
 8012936:	a142      	add	r1, pc, #264	; (adr r1, 8012a40 <__ieee754_atan2+0x180>)
 8012938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801293c:	e7e1      	b.n	8012902 <__ieee754_atan2+0x42>
 801293e:	ea52 0808 	orrs.w	r8, r2, r8
 8012942:	d106      	bne.n	8012952 <__ieee754_atan2+0x92>
 8012944:	f1bc 0f00 	cmp.w	ip, #0
 8012948:	da5f      	bge.n	8012a0a <__ieee754_atan2+0x14a>
 801294a:	a13f      	add	r1, pc, #252	; (adr r1, 8012a48 <__ieee754_atan2+0x188>)
 801294c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012950:	e7d7      	b.n	8012902 <__ieee754_atan2+0x42>
 8012952:	4572      	cmp	r2, lr
 8012954:	d10f      	bne.n	8012976 <__ieee754_atan2+0xb6>
 8012956:	4293      	cmp	r3, r2
 8012958:	f104 34ff 	add.w	r4, r4, #4294967295
 801295c:	d107      	bne.n	801296e <__ieee754_atan2+0xae>
 801295e:	2c02      	cmp	r4, #2
 8012960:	d84c      	bhi.n	80129fc <__ieee754_atan2+0x13c>
 8012962:	4b35      	ldr	r3, [pc, #212]	; (8012a38 <__ieee754_atan2+0x178>)
 8012964:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012968:	e9d4 0100 	ldrd	r0, r1, [r4]
 801296c:	e7c9      	b.n	8012902 <__ieee754_atan2+0x42>
 801296e:	2c02      	cmp	r4, #2
 8012970:	d848      	bhi.n	8012a04 <__ieee754_atan2+0x144>
 8012972:	4b32      	ldr	r3, [pc, #200]	; (8012a3c <__ieee754_atan2+0x17c>)
 8012974:	e7f6      	b.n	8012964 <__ieee754_atan2+0xa4>
 8012976:	4573      	cmp	r3, lr
 8012978:	d0e4      	beq.n	8012944 <__ieee754_atan2+0x84>
 801297a:	1a9b      	subs	r3, r3, r2
 801297c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012980:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012984:	da1e      	bge.n	80129c4 <__ieee754_atan2+0x104>
 8012986:	2f00      	cmp	r7, #0
 8012988:	da01      	bge.n	801298e <__ieee754_atan2+0xce>
 801298a:	323c      	adds	r2, #60	; 0x3c
 801298c:	db1e      	blt.n	80129cc <__ieee754_atan2+0x10c>
 801298e:	4632      	mov	r2, r6
 8012990:	463b      	mov	r3, r7
 8012992:	f7ed ff73 	bl	800087c <__aeabi_ddiv>
 8012996:	ec41 0b10 	vmov	d0, r0, r1
 801299a:	f7ff ff59 	bl	8012850 <fabs>
 801299e:	f7ff fdb7 	bl	8012510 <atan>
 80129a2:	ec51 0b10 	vmov	r0, r1, d0
 80129a6:	2c01      	cmp	r4, #1
 80129a8:	d013      	beq.n	80129d2 <__ieee754_atan2+0x112>
 80129aa:	2c02      	cmp	r4, #2
 80129ac:	d015      	beq.n	80129da <__ieee754_atan2+0x11a>
 80129ae:	2c00      	cmp	r4, #0
 80129b0:	d0a7      	beq.n	8012902 <__ieee754_atan2+0x42>
 80129b2:	a319      	add	r3, pc, #100	; (adr r3, 8012a18 <__ieee754_atan2+0x158>)
 80129b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b8:	f7ed fc7e 	bl	80002b8 <__aeabi_dsub>
 80129bc:	a318      	add	r3, pc, #96	; (adr r3, 8012a20 <__ieee754_atan2+0x160>)
 80129be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c2:	e014      	b.n	80129ee <__ieee754_atan2+0x12e>
 80129c4:	a118      	add	r1, pc, #96	; (adr r1, 8012a28 <__ieee754_atan2+0x168>)
 80129c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129ca:	e7ec      	b.n	80129a6 <__ieee754_atan2+0xe6>
 80129cc:	2000      	movs	r0, #0
 80129ce:	2100      	movs	r1, #0
 80129d0:	e7e9      	b.n	80129a6 <__ieee754_atan2+0xe6>
 80129d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129d6:	4619      	mov	r1, r3
 80129d8:	e793      	b.n	8012902 <__ieee754_atan2+0x42>
 80129da:	a30f      	add	r3, pc, #60	; (adr r3, 8012a18 <__ieee754_atan2+0x158>)
 80129dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e0:	f7ed fc6a 	bl	80002b8 <__aeabi_dsub>
 80129e4:	4602      	mov	r2, r0
 80129e6:	460b      	mov	r3, r1
 80129e8:	a10d      	add	r1, pc, #52	; (adr r1, 8012a20 <__ieee754_atan2+0x160>)
 80129ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129ee:	f7ed fc63 	bl	80002b8 <__aeabi_dsub>
 80129f2:	e786      	b.n	8012902 <__ieee754_atan2+0x42>
 80129f4:	a10a      	add	r1, pc, #40	; (adr r1, 8012a20 <__ieee754_atan2+0x160>)
 80129f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129fa:	e782      	b.n	8012902 <__ieee754_atan2+0x42>
 80129fc:	a10c      	add	r1, pc, #48	; (adr r1, 8012a30 <__ieee754_atan2+0x170>)
 80129fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a02:	e77e      	b.n	8012902 <__ieee754_atan2+0x42>
 8012a04:	2000      	movs	r0, #0
 8012a06:	2100      	movs	r1, #0
 8012a08:	e77b      	b.n	8012902 <__ieee754_atan2+0x42>
 8012a0a:	a107      	add	r1, pc, #28	; (adr r1, 8012a28 <__ieee754_atan2+0x168>)
 8012a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a10:	e777      	b.n	8012902 <__ieee754_atan2+0x42>
 8012a12:	bf00      	nop
 8012a14:	f3af 8000 	nop.w
 8012a18:	33145c07 	.word	0x33145c07
 8012a1c:	3ca1a626 	.word	0x3ca1a626
 8012a20:	54442d18 	.word	0x54442d18
 8012a24:	400921fb 	.word	0x400921fb
 8012a28:	54442d18 	.word	0x54442d18
 8012a2c:	3ff921fb 	.word	0x3ff921fb
 8012a30:	54442d18 	.word	0x54442d18
 8012a34:	3fe921fb 	.word	0x3fe921fb
 8012a38:	08013548 	.word	0x08013548
 8012a3c:	08013560 	.word	0x08013560
 8012a40:	54442d18 	.word	0x54442d18
 8012a44:	c00921fb 	.word	0xc00921fb
 8012a48:	54442d18 	.word	0x54442d18
 8012a4c:	bff921fb 	.word	0xbff921fb
 8012a50:	7ff00000 	.word	0x7ff00000

08012a54 <__ieee754_sqrt>:
 8012a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a58:	ec55 4b10 	vmov	r4, r5, d0
 8012a5c:	4e55      	ldr	r6, [pc, #340]	; (8012bb4 <__ieee754_sqrt+0x160>)
 8012a5e:	43ae      	bics	r6, r5
 8012a60:	ee10 0a10 	vmov	r0, s0
 8012a64:	ee10 3a10 	vmov	r3, s0
 8012a68:	462a      	mov	r2, r5
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	d110      	bne.n	8012a90 <__ieee754_sqrt+0x3c>
 8012a6e:	ee10 2a10 	vmov	r2, s0
 8012a72:	462b      	mov	r3, r5
 8012a74:	f7ed fdd8 	bl	8000628 <__aeabi_dmul>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	4629      	mov	r1, r5
 8012a80:	f7ed fc1c 	bl	80002bc <__adddf3>
 8012a84:	4604      	mov	r4, r0
 8012a86:	460d      	mov	r5, r1
 8012a88:	ec45 4b10 	vmov	d0, r4, r5
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	2d00      	cmp	r5, #0
 8012a92:	dc10      	bgt.n	8012ab6 <__ieee754_sqrt+0x62>
 8012a94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012a98:	4330      	orrs	r0, r6
 8012a9a:	d0f5      	beq.n	8012a88 <__ieee754_sqrt+0x34>
 8012a9c:	b15d      	cbz	r5, 8012ab6 <__ieee754_sqrt+0x62>
 8012a9e:	ee10 2a10 	vmov	r2, s0
 8012aa2:	462b      	mov	r3, r5
 8012aa4:	ee10 0a10 	vmov	r0, s0
 8012aa8:	f7ed fc06 	bl	80002b8 <__aeabi_dsub>
 8012aac:	4602      	mov	r2, r0
 8012aae:	460b      	mov	r3, r1
 8012ab0:	f7ed fee4 	bl	800087c <__aeabi_ddiv>
 8012ab4:	e7e6      	b.n	8012a84 <__ieee754_sqrt+0x30>
 8012ab6:	1512      	asrs	r2, r2, #20
 8012ab8:	d074      	beq.n	8012ba4 <__ieee754_sqrt+0x150>
 8012aba:	07d4      	lsls	r4, r2, #31
 8012abc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012ac0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012ac8:	bf5e      	ittt	pl
 8012aca:	0fda      	lsrpl	r2, r3, #31
 8012acc:	005b      	lslpl	r3, r3, #1
 8012ace:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012ad2:	2400      	movs	r4, #0
 8012ad4:	0fda      	lsrs	r2, r3, #31
 8012ad6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012ada:	107f      	asrs	r7, r7, #1
 8012adc:	005b      	lsls	r3, r3, #1
 8012ade:	2516      	movs	r5, #22
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012ae6:	1886      	adds	r6, r0, r2
 8012ae8:	428e      	cmp	r6, r1
 8012aea:	bfde      	ittt	le
 8012aec:	1b89      	suble	r1, r1, r6
 8012aee:	18b0      	addle	r0, r6, r2
 8012af0:	18a4      	addle	r4, r4, r2
 8012af2:	0049      	lsls	r1, r1, #1
 8012af4:	3d01      	subs	r5, #1
 8012af6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012afa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012afe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b02:	d1f0      	bne.n	8012ae6 <__ieee754_sqrt+0x92>
 8012b04:	462a      	mov	r2, r5
 8012b06:	f04f 0e20 	mov.w	lr, #32
 8012b0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012b0e:	4281      	cmp	r1, r0
 8012b10:	eb06 0c05 	add.w	ip, r6, r5
 8012b14:	dc02      	bgt.n	8012b1c <__ieee754_sqrt+0xc8>
 8012b16:	d113      	bne.n	8012b40 <__ieee754_sqrt+0xec>
 8012b18:	459c      	cmp	ip, r3
 8012b1a:	d811      	bhi.n	8012b40 <__ieee754_sqrt+0xec>
 8012b1c:	f1bc 0f00 	cmp.w	ip, #0
 8012b20:	eb0c 0506 	add.w	r5, ip, r6
 8012b24:	da43      	bge.n	8012bae <__ieee754_sqrt+0x15a>
 8012b26:	2d00      	cmp	r5, #0
 8012b28:	db41      	blt.n	8012bae <__ieee754_sqrt+0x15a>
 8012b2a:	f100 0801 	add.w	r8, r0, #1
 8012b2e:	1a09      	subs	r1, r1, r0
 8012b30:	459c      	cmp	ip, r3
 8012b32:	bf88      	it	hi
 8012b34:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012b38:	eba3 030c 	sub.w	r3, r3, ip
 8012b3c:	4432      	add	r2, r6
 8012b3e:	4640      	mov	r0, r8
 8012b40:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012b44:	f1be 0e01 	subs.w	lr, lr, #1
 8012b48:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012b54:	d1db      	bne.n	8012b0e <__ieee754_sqrt+0xba>
 8012b56:	430b      	orrs	r3, r1
 8012b58:	d006      	beq.n	8012b68 <__ieee754_sqrt+0x114>
 8012b5a:	1c50      	adds	r0, r2, #1
 8012b5c:	bf13      	iteet	ne
 8012b5e:	3201      	addne	r2, #1
 8012b60:	3401      	addeq	r4, #1
 8012b62:	4672      	moveq	r2, lr
 8012b64:	f022 0201 	bicne.w	r2, r2, #1
 8012b68:	1063      	asrs	r3, r4, #1
 8012b6a:	0852      	lsrs	r2, r2, #1
 8012b6c:	07e1      	lsls	r1, r4, #31
 8012b6e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012b72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012b76:	bf48      	it	mi
 8012b78:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012b7c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012b80:	4614      	mov	r4, r2
 8012b82:	e781      	b.n	8012a88 <__ieee754_sqrt+0x34>
 8012b84:	0ad9      	lsrs	r1, r3, #11
 8012b86:	3815      	subs	r0, #21
 8012b88:	055b      	lsls	r3, r3, #21
 8012b8a:	2900      	cmp	r1, #0
 8012b8c:	d0fa      	beq.n	8012b84 <__ieee754_sqrt+0x130>
 8012b8e:	02cd      	lsls	r5, r1, #11
 8012b90:	d50a      	bpl.n	8012ba8 <__ieee754_sqrt+0x154>
 8012b92:	f1c2 0420 	rsb	r4, r2, #32
 8012b96:	fa23 f404 	lsr.w	r4, r3, r4
 8012b9a:	1e55      	subs	r5, r2, #1
 8012b9c:	4093      	lsls	r3, r2
 8012b9e:	4321      	orrs	r1, r4
 8012ba0:	1b42      	subs	r2, r0, r5
 8012ba2:	e78a      	b.n	8012aba <__ieee754_sqrt+0x66>
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	e7f0      	b.n	8012b8a <__ieee754_sqrt+0x136>
 8012ba8:	0049      	lsls	r1, r1, #1
 8012baa:	3201      	adds	r2, #1
 8012bac:	e7ef      	b.n	8012b8e <__ieee754_sqrt+0x13a>
 8012bae:	4680      	mov	r8, r0
 8012bb0:	e7bd      	b.n	8012b2e <__ieee754_sqrt+0xda>
 8012bb2:	bf00      	nop
 8012bb4:	7ff00000 	.word	0x7ff00000

08012bb8 <_init>:
 8012bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bba:	bf00      	nop
 8012bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bbe:	bc08      	pop	{r3}
 8012bc0:	469e      	mov	lr, r3
 8012bc2:	4770      	bx	lr

08012bc4 <_fini>:
 8012bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bc6:	bf00      	nop
 8012bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bca:	bc08      	pop	{r3}
 8012bcc:	469e      	mov	lr, r3
 8012bce:	4770      	bx	lr
